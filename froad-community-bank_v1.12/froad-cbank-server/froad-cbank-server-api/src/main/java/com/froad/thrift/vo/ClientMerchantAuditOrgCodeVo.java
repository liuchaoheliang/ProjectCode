/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 商户审核配置Vo返回orgCode
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ClientMerchantAuditOrgCodeVo implements org.apache.thrift.TBase<ClientMerchantAuditOrgCodeVo, ClientMerchantAuditOrgCodeVo._Fields>, java.io.Serializable, Cloneable, Comparable<ClientMerchantAuditOrgCodeVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClientMerchantAuditOrgCodeVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORG_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("orgLevel", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField START_AUDIT_ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("startAuditOrgCode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField END_AUDIT_ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("endAuditOrgCode", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ClientMerchantAuditOrgCodeVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ClientMerchantAuditOrgCodeVoTupleSchemeFactory());
  }

  /**
   * 主键id
   */
  public long id; // optional
  /**
   * 客户端id
   */
  public String clientId; // optional
  /**
   * 类型 1-审核  2-商户密码重置
   */
  public String type; // optional
  /**
   * 商户所属机构级别
   */
  public String orgLevel; // optional
  /**
   * 起始机构编号
   */
  public String startAuditOrgCode; // optional
  /**
   * 终审机构编号
   */
  public String endAuditOrgCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键id
     */
    ID((short)1, "id"),
    /**
     * 客户端id
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 类型 1-审核  2-商户密码重置
     */
    TYPE((short)3, "type"),
    /**
     * 商户所属机构级别
     */
    ORG_LEVEL((short)4, "orgLevel"),
    /**
     * 起始机构编号
     */
    START_AUDIT_ORG_CODE((short)5, "startAuditOrgCode"),
    /**
     * 终审机构编号
     */
    END_AUDIT_ORG_CODE((short)6, "endAuditOrgCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // TYPE
          return TYPE;
        case 4: // ORG_LEVEL
          return ORG_LEVEL;
        case 5: // START_AUDIT_ORG_CODE
          return START_AUDIT_ORG_CODE;
        case 6: // END_AUDIT_ORG_CODE
          return END_AUDIT_ORG_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CLIENT_ID,_Fields.TYPE,_Fields.ORG_LEVEL,_Fields.START_AUDIT_ORG_CODE,_Fields.END_AUDIT_ORG_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("orgLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_AUDIT_ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("startAuditOrgCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_AUDIT_ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("endAuditOrgCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClientMerchantAuditOrgCodeVo.class, metaDataMap);
  }

  public ClientMerchantAuditOrgCodeVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClientMerchantAuditOrgCodeVo(ClientMerchantAuditOrgCodeVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetOrgLevel()) {
      this.orgLevel = other.orgLevel;
    }
    if (other.isSetStartAuditOrgCode()) {
      this.startAuditOrgCode = other.startAuditOrgCode;
    }
    if (other.isSetEndAuditOrgCode()) {
      this.endAuditOrgCode = other.endAuditOrgCode;
    }
  }

  public ClientMerchantAuditOrgCodeVo deepCopy() {
    return new ClientMerchantAuditOrgCodeVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientId = null;
    this.type = null;
    this.orgLevel = null;
    this.startAuditOrgCode = null;
    this.endAuditOrgCode = null;
  }

  /**
   * 主键id
   */
  public long getId() {
    return this.id;
  }

  /**
   * 主键id
   */
  public ClientMerchantAuditOrgCodeVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 客户端id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端id
   */
  public ClientMerchantAuditOrgCodeVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 类型 1-审核  2-商户密码重置
   */
  public String getType() {
    return this.type;
  }

  /**
   * 类型 1-审核  2-商户密码重置
   */
  public ClientMerchantAuditOrgCodeVo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 商户所属机构级别
   */
  public String getOrgLevel() {
    return this.orgLevel;
  }

  /**
   * 商户所属机构级别
   */
  public ClientMerchantAuditOrgCodeVo setOrgLevel(String orgLevel) {
    this.orgLevel = orgLevel;
    return this;
  }

  public void unsetOrgLevel() {
    this.orgLevel = null;
  }

  /** Returns true if field orgLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgLevel() {
    return this.orgLevel != null;
  }

  public void setOrgLevelIsSet(boolean value) {
    if (!value) {
      this.orgLevel = null;
    }
  }

  /**
   * 起始机构编号
   */
  public String getStartAuditOrgCode() {
    return this.startAuditOrgCode;
  }

  /**
   * 起始机构编号
   */
  public ClientMerchantAuditOrgCodeVo setStartAuditOrgCode(String startAuditOrgCode) {
    this.startAuditOrgCode = startAuditOrgCode;
    return this;
  }

  public void unsetStartAuditOrgCode() {
    this.startAuditOrgCode = null;
  }

  /** Returns true if field startAuditOrgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetStartAuditOrgCode() {
    return this.startAuditOrgCode != null;
  }

  public void setStartAuditOrgCodeIsSet(boolean value) {
    if (!value) {
      this.startAuditOrgCode = null;
    }
  }

  /**
   * 终审机构编号
   */
  public String getEndAuditOrgCode() {
    return this.endAuditOrgCode;
  }

  /**
   * 终审机构编号
   */
  public ClientMerchantAuditOrgCodeVo setEndAuditOrgCode(String endAuditOrgCode) {
    this.endAuditOrgCode = endAuditOrgCode;
    return this;
  }

  public void unsetEndAuditOrgCode() {
    this.endAuditOrgCode = null;
  }

  /** Returns true if field endAuditOrgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetEndAuditOrgCode() {
    return this.endAuditOrgCode != null;
  }

  public void setEndAuditOrgCodeIsSet(boolean value) {
    if (!value) {
      this.endAuditOrgCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case ORG_LEVEL:
      if (value == null) {
        unsetOrgLevel();
      } else {
        setOrgLevel((String)value);
      }
      break;

    case START_AUDIT_ORG_CODE:
      if (value == null) {
        unsetStartAuditOrgCode();
      } else {
        setStartAuditOrgCode((String)value);
      }
      break;

    case END_AUDIT_ORG_CODE:
      if (value == null) {
        unsetEndAuditOrgCode();
      } else {
        setEndAuditOrgCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CLIENT_ID:
      return getClientId();

    case TYPE:
      return getType();

    case ORG_LEVEL:
      return getOrgLevel();

    case START_AUDIT_ORG_CODE:
      return getStartAuditOrgCode();

    case END_AUDIT_ORG_CODE:
      return getEndAuditOrgCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_ID:
      return isSetClientId();
    case TYPE:
      return isSetType();
    case ORG_LEVEL:
      return isSetOrgLevel();
    case START_AUDIT_ORG_CODE:
      return isSetStartAuditOrgCode();
    case END_AUDIT_ORG_CODE:
      return isSetEndAuditOrgCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ClientMerchantAuditOrgCodeVo)
      return this.equals((ClientMerchantAuditOrgCodeVo)that);
    return false;
  }

  public boolean equals(ClientMerchantAuditOrgCodeVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_orgLevel = true && this.isSetOrgLevel();
    boolean that_present_orgLevel = true && that.isSetOrgLevel();
    if (this_present_orgLevel || that_present_orgLevel) {
      if (!(this_present_orgLevel && that_present_orgLevel))
        return false;
      if (!this.orgLevel.equals(that.orgLevel))
        return false;
    }

    boolean this_present_startAuditOrgCode = true && this.isSetStartAuditOrgCode();
    boolean that_present_startAuditOrgCode = true && that.isSetStartAuditOrgCode();
    if (this_present_startAuditOrgCode || that_present_startAuditOrgCode) {
      if (!(this_present_startAuditOrgCode && that_present_startAuditOrgCode))
        return false;
      if (!this.startAuditOrgCode.equals(that.startAuditOrgCode))
        return false;
    }

    boolean this_present_endAuditOrgCode = true && this.isSetEndAuditOrgCode();
    boolean that_present_endAuditOrgCode = true && that.isSetEndAuditOrgCode();
    if (this_present_endAuditOrgCode || that_present_endAuditOrgCode) {
      if (!(this_present_endAuditOrgCode && that_present_endAuditOrgCode))
        return false;
      if (!this.endAuditOrgCode.equals(that.endAuditOrgCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_orgLevel = true && (isSetOrgLevel());
    list.add(present_orgLevel);
    if (present_orgLevel)
      list.add(orgLevel);

    boolean present_startAuditOrgCode = true && (isSetStartAuditOrgCode());
    list.add(present_startAuditOrgCode);
    if (present_startAuditOrgCode)
      list.add(startAuditOrgCode);

    boolean present_endAuditOrgCode = true && (isSetEndAuditOrgCode());
    list.add(present_endAuditOrgCode);
    if (present_endAuditOrgCode)
      list.add(endAuditOrgCode);

    return list.hashCode();
  }

  @Override
  public int compareTo(ClientMerchantAuditOrgCodeVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgLevel()).compareTo(other.isSetOrgLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgLevel, other.orgLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartAuditOrgCode()).compareTo(other.isSetStartAuditOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartAuditOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startAuditOrgCode, other.startAuditOrgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndAuditOrgCode()).compareTo(other.isSetEndAuditOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndAuditOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endAuditOrgCode, other.endAuditOrgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClientMerchantAuditOrgCodeVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetOrgLevel()) {
      if (!first) sb.append(", ");
      sb.append("orgLevel:");
      if (this.orgLevel == null) {
        sb.append("null");
      } else {
        sb.append(this.orgLevel);
      }
      first = false;
    }
    if (isSetStartAuditOrgCode()) {
      if (!first) sb.append(", ");
      sb.append("startAuditOrgCode:");
      if (this.startAuditOrgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.startAuditOrgCode);
      }
      first = false;
    }
    if (isSetEndAuditOrgCode()) {
      if (!first) sb.append(", ");
      sb.append("endAuditOrgCode:");
      if (this.endAuditOrgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.endAuditOrgCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClientMerchantAuditOrgCodeVoStandardSchemeFactory implements SchemeFactory {
    public ClientMerchantAuditOrgCodeVoStandardScheme getScheme() {
      return new ClientMerchantAuditOrgCodeVoStandardScheme();
    }
  }

  private static class ClientMerchantAuditOrgCodeVoStandardScheme extends StandardScheme<ClientMerchantAuditOrgCodeVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClientMerchantAuditOrgCodeVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORG_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgLevel = iprot.readString();
              struct.setOrgLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_AUDIT_ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startAuditOrgCode = iprot.readString();
              struct.setStartAuditOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_AUDIT_ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endAuditOrgCode = iprot.readString();
              struct.setEndAuditOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClientMerchantAuditOrgCodeVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orgLevel != null) {
        if (struct.isSetOrgLevel()) {
          oprot.writeFieldBegin(ORG_LEVEL_FIELD_DESC);
          oprot.writeString(struct.orgLevel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.startAuditOrgCode != null) {
        if (struct.isSetStartAuditOrgCode()) {
          oprot.writeFieldBegin(START_AUDIT_ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.startAuditOrgCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endAuditOrgCode != null) {
        if (struct.isSetEndAuditOrgCode()) {
          oprot.writeFieldBegin(END_AUDIT_ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.endAuditOrgCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClientMerchantAuditOrgCodeVoTupleSchemeFactory implements SchemeFactory {
    public ClientMerchantAuditOrgCodeVoTupleScheme getScheme() {
      return new ClientMerchantAuditOrgCodeVoTupleScheme();
    }
  }

  private static class ClientMerchantAuditOrgCodeVoTupleScheme extends TupleScheme<ClientMerchantAuditOrgCodeVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClientMerchantAuditOrgCodeVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetOrgLevel()) {
        optionals.set(3);
      }
      if (struct.isSetStartAuditOrgCode()) {
        optionals.set(4);
      }
      if (struct.isSetEndAuditOrgCode()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetOrgLevel()) {
        oprot.writeString(struct.orgLevel);
      }
      if (struct.isSetStartAuditOrgCode()) {
        oprot.writeString(struct.startAuditOrgCode);
      }
      if (struct.isSetEndAuditOrgCode()) {
        oprot.writeString(struct.endAuditOrgCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClientMerchantAuditOrgCodeVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orgLevel = iprot.readString();
        struct.setOrgLevelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.startAuditOrgCode = iprot.readString();
        struct.setStartAuditOrgCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endAuditOrgCode = iprot.readString();
        struct.setEndAuditOrgCodeIsSet(true);
      }
    }
  }

}

