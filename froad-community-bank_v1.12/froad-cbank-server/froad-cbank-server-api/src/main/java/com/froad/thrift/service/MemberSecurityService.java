/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class MemberSecurityService {

  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 修改会员登录密码
     * 
     * @param memberCode
     * @param oldPwd
     * @param newPwd
     */
    public com.froad.thrift.vo.ResultVo updateMemberPwd(long memberCode, String oldPwd, String newPwd) throws org.apache.thrift.TException;

    /**
     * 重置会员登录密码
     * 
     * @param memberCode
     * @param pwdNew
     */
    public com.froad.thrift.vo.ResultVo resetMemberPwd(long memberCode, String pwdNew) throws org.apache.thrift.TException;

    /**
     * 会员联合登录
     * 引用枚举：com.pay.user.helper.BankOrg <br> 枚举值：bankOrg.getBankOrg()
     * 引用枚举：com.pay.user.helper.CreateChannel <br>
     * 
     * @param bankOrg
     * @param mobile
     * @param idnetifyNo
     * @param userBankId
     * @param createChannel
     * @param identifyType
     */
    public com.froad.thrift.vo.member.UserEngineVo loginUnion(String bankOrg, String mobile, String idnetifyNo, String userBankId, String createChannel, String identifyType) throws org.apache.thrift.TException;

    /**
     * 查询会员是否设置支付密码
     * 
     * @param memberCode
     */
    public com.froad.thrift.vo.ResultVo isMemberSetPayPwd(long memberCode) throws org.apache.thrift.TException;

    /**
     * 验证会员支付密码
     * 引用枚举：com.froad.enums.CreateSource
     * 
     * @param memberCode
     * @param ciphertextPwd
     * @param createSource
     */
    public com.froad.thrift.vo.ResultVo verifyMemberPayPwd(long memberCode, String ciphertextPwd, String createSource) throws org.apache.thrift.TException;

    /**
     * 查询会员是否设置安全问题
     * 
     * @param memberCode
     */
    public com.froad.thrift.vo.ResultVo isMemberSetQuestion(long memberCode) throws org.apache.thrift.TException;

    /**
     * 查询预设安全问题
     * 
     * @param questionAmount
     */
    public com.froad.thrift.vo.member.UserEnginQuestionResultVo selectPreinstallQuestion(long questionAmount) throws org.apache.thrift.TException;

    /**
     * 查询会员设置的安全问题
     * 
     * @param memberCode
     */
    public com.froad.thrift.vo.member.UserEnginQuestionResultVo selectMemberSetQuestion(long memberCode) throws org.apache.thrift.TException;

    /**
     * 校验会员的安全问题
     * 
     * @param memberCode
     * @param questions
     */
    public com.froad.thrift.vo.ResultVo veryfyMemberQuestion(long memberCode, List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions) throws org.apache.thrift.TException;

    /**
     * 设置会员支付密码
     * 引用枚举：com.froad.enums.CreateSource = createSource
     * 
     * @param memberCode
     * @param ciphertextPwd
     * @param ciphertextPwdTemp
     * @param createSource
     */
    public com.froad.thrift.vo.ResultVo setFirstMemberPayPwd(long memberCode, String ciphertextPwd, String ciphertextPwdTemp, String createSource) throws org.apache.thrift.TException;

    /**
     * 修改会员支付密码
     * 引用枚举：com.froad.enums.CreateSource = createSource
     * 
     * @param memberCode
     * @param ciphertextPwdOld
     * @param ciphertextPwd
     * @param ciphertextPwdTemp
     * @param createSource
     */
    public com.froad.thrift.vo.ResultVo updateMemberPayPwd(long memberCode, String ciphertextPwdOld, String ciphertextPwd, String ciphertextPwdTemp, String createSource) throws org.apache.thrift.TException;

    /**
     * 重置会员支付密码
     * 引用枚举：com.froad.enums.CreateSource = createSource
     * 
     * @param memberCode
     * @param ciphertextPwd
     * @param ciphertextPwdTemp
     * @param createSource
     */
    public com.froad.thrift.vo.ResultVo resetMemberPayPwd(long memberCode, String ciphertextPwd, String ciphertextPwdTemp, String createSource) throws org.apache.thrift.TException;

    /**
     * 设置会员安全问题
     * 
     * @param memberCode
     * @param questions
     */
    public com.froad.thrift.vo.ResultVo setFirstMemberQuestion(long memberCode, List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions) throws org.apache.thrift.TException;

    /**
     * 查询用户积分流水历史记录
     * 引用枚举：com.froad.enums.PointsType = userEnginePointsRecordType
     * 
     * @param clientId
     * @param longID
     * @param pageSize
     * @param pageNum
     * @param startTime
     * @param endTime
     * @param userEnginePointsRecordType
     */
    public com.froad.thrift.vo.member.UserEnginePageVoRes selectPageOfMemberPointsRecordHistory(String clientId, String longID, long pageSize, long pageNum, long startTime, long endTime, String userEnginePointsRecordType) throws org.apache.thrift.TException;

    /**
     * 发送积分兑换码
     * 
     * @param clientId
     * @param mobile
     * @param points
     * @param useBankChannel
     */
    public com.froad.thrift.vo.ResultVo sendExchangeCode(String clientId, String mobile, int points, boolean useBankChannel) throws org.apache.thrift.TException;

    /**
     * 校验积分兑换码
     * 
     * @param clientId
     * @param mobileOrToken
     * @param code
     * @param useBankChannel
     */
    public com.froad.thrift.vo.ResultVo verifyExchangeCode(String clientId, String mobileOrToken, String code, boolean useBankChannel) throws org.apache.thrift.TException;

    public com.froad.thrift.vo.ResultVo deleteUserSettedQuestion(long memberCode, String clientId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void updateMemberPwd(long memberCode, String oldPwd, String newPwd, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resetMemberPwd(long memberCode, String pwdNew, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loginUnion(String bankOrg, String mobile, String idnetifyNo, String userBankId, String createChannel, String identifyType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isMemberSetPayPwd(long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifyMemberPayPwd(long memberCode, String ciphertextPwd, String createSource, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isMemberSetQuestion(long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void selectPreinstallQuestion(long questionAmount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void selectMemberSetQuestion(long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void veryfyMemberQuestion(long memberCode, List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setFirstMemberPayPwd(long memberCode, String ciphertextPwd, String ciphertextPwdTemp, String createSource, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMemberPayPwd(long memberCode, String ciphertextPwdOld, String ciphertextPwd, String ciphertextPwdTemp, String createSource, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resetMemberPayPwd(long memberCode, String ciphertextPwd, String ciphertextPwdTemp, String createSource, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setFirstMemberQuestion(long memberCode, List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void selectPageOfMemberPointsRecordHistory(String clientId, String longID, long pageSize, long pageNum, long startTime, long endTime, String userEnginePointsRecordType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendExchangeCode(String clientId, String mobile, int points, boolean useBankChannel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifyExchangeCode(String clientId, String mobileOrToken, String code, boolean useBankChannel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteUserSettedQuestion(long memberCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.ResultVo updateMemberPwd(long memberCode, String oldPwd, String newPwd) throws org.apache.thrift.TException
    {
      send_updateMemberPwd(memberCode, oldPwd, newPwd);
      return recv_updateMemberPwd();
    }

    public void send_updateMemberPwd(long memberCode, String oldPwd, String newPwd) throws org.apache.thrift.TException
    {
      updateMemberPwd_args args = new updateMemberPwd_args();
      args.setMemberCode(memberCode);
      args.setOldPwd(oldPwd);
      args.setNewPwd(newPwd);
      sendBase("updateMemberPwd", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateMemberPwd() throws org.apache.thrift.TException
    {
      updateMemberPwd_result result = new updateMemberPwd_result();
      receiveBase(result, "updateMemberPwd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMemberPwd failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo resetMemberPwd(long memberCode, String pwdNew) throws org.apache.thrift.TException
    {
      send_resetMemberPwd(memberCode, pwdNew);
      return recv_resetMemberPwd();
    }

    public void send_resetMemberPwd(long memberCode, String pwdNew) throws org.apache.thrift.TException
    {
      resetMemberPwd_args args = new resetMemberPwd_args();
      args.setMemberCode(memberCode);
      args.setPwdNew(pwdNew);
      sendBase("resetMemberPwd", args);
    }

    public com.froad.thrift.vo.ResultVo recv_resetMemberPwd() throws org.apache.thrift.TException
    {
      resetMemberPwd_result result = new resetMemberPwd_result();
      receiveBase(result, "resetMemberPwd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resetMemberPwd failed: unknown result");
    }

    public com.froad.thrift.vo.member.UserEngineVo loginUnion(String bankOrg, String mobile, String idnetifyNo, String userBankId, String createChannel, String identifyType) throws org.apache.thrift.TException
    {
      send_loginUnion(bankOrg, mobile, idnetifyNo, userBankId, createChannel, identifyType);
      return recv_loginUnion();
    }

    public void send_loginUnion(String bankOrg, String mobile, String idnetifyNo, String userBankId, String createChannel, String identifyType) throws org.apache.thrift.TException
    {
      loginUnion_args args = new loginUnion_args();
      args.setBankOrg(bankOrg);
      args.setMobile(mobile);
      args.setIdnetifyNo(idnetifyNo);
      args.setUserBankId(userBankId);
      args.setCreateChannel(createChannel);
      args.setIdentifyType(identifyType);
      sendBase("loginUnion", args);
    }

    public com.froad.thrift.vo.member.UserEngineVo recv_loginUnion() throws org.apache.thrift.TException
    {
      loginUnion_result result = new loginUnion_result();
      receiveBase(result, "loginUnion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loginUnion failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo isMemberSetPayPwd(long memberCode) throws org.apache.thrift.TException
    {
      send_isMemberSetPayPwd(memberCode);
      return recv_isMemberSetPayPwd();
    }

    public void send_isMemberSetPayPwd(long memberCode) throws org.apache.thrift.TException
    {
      isMemberSetPayPwd_args args = new isMemberSetPayPwd_args();
      args.setMemberCode(memberCode);
      sendBase("isMemberSetPayPwd", args);
    }

    public com.froad.thrift.vo.ResultVo recv_isMemberSetPayPwd() throws org.apache.thrift.TException
    {
      isMemberSetPayPwd_result result = new isMemberSetPayPwd_result();
      receiveBase(result, "isMemberSetPayPwd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isMemberSetPayPwd failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo verifyMemberPayPwd(long memberCode, String ciphertextPwd, String createSource) throws org.apache.thrift.TException
    {
      send_verifyMemberPayPwd(memberCode, ciphertextPwd, createSource);
      return recv_verifyMemberPayPwd();
    }

    public void send_verifyMemberPayPwd(long memberCode, String ciphertextPwd, String createSource) throws org.apache.thrift.TException
    {
      verifyMemberPayPwd_args args = new verifyMemberPayPwd_args();
      args.setMemberCode(memberCode);
      args.setCiphertextPwd(ciphertextPwd);
      args.setCreateSource(createSource);
      sendBase("verifyMemberPayPwd", args);
    }

    public com.froad.thrift.vo.ResultVo recv_verifyMemberPayPwd() throws org.apache.thrift.TException
    {
      verifyMemberPayPwd_result result = new verifyMemberPayPwd_result();
      receiveBase(result, "verifyMemberPayPwd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyMemberPayPwd failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo isMemberSetQuestion(long memberCode) throws org.apache.thrift.TException
    {
      send_isMemberSetQuestion(memberCode);
      return recv_isMemberSetQuestion();
    }

    public void send_isMemberSetQuestion(long memberCode) throws org.apache.thrift.TException
    {
      isMemberSetQuestion_args args = new isMemberSetQuestion_args();
      args.setMemberCode(memberCode);
      sendBase("isMemberSetQuestion", args);
    }

    public com.froad.thrift.vo.ResultVo recv_isMemberSetQuestion() throws org.apache.thrift.TException
    {
      isMemberSetQuestion_result result = new isMemberSetQuestion_result();
      receiveBase(result, "isMemberSetQuestion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isMemberSetQuestion failed: unknown result");
    }

    public com.froad.thrift.vo.member.UserEnginQuestionResultVo selectPreinstallQuestion(long questionAmount) throws org.apache.thrift.TException
    {
      send_selectPreinstallQuestion(questionAmount);
      return recv_selectPreinstallQuestion();
    }

    public void send_selectPreinstallQuestion(long questionAmount) throws org.apache.thrift.TException
    {
      selectPreinstallQuestion_args args = new selectPreinstallQuestion_args();
      args.setQuestionAmount(questionAmount);
      sendBase("selectPreinstallQuestion", args);
    }

    public com.froad.thrift.vo.member.UserEnginQuestionResultVo recv_selectPreinstallQuestion() throws org.apache.thrift.TException
    {
      selectPreinstallQuestion_result result = new selectPreinstallQuestion_result();
      receiveBase(result, "selectPreinstallQuestion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectPreinstallQuestion failed: unknown result");
    }

    public com.froad.thrift.vo.member.UserEnginQuestionResultVo selectMemberSetQuestion(long memberCode) throws org.apache.thrift.TException
    {
      send_selectMemberSetQuestion(memberCode);
      return recv_selectMemberSetQuestion();
    }

    public void send_selectMemberSetQuestion(long memberCode) throws org.apache.thrift.TException
    {
      selectMemberSetQuestion_args args = new selectMemberSetQuestion_args();
      args.setMemberCode(memberCode);
      sendBase("selectMemberSetQuestion", args);
    }

    public com.froad.thrift.vo.member.UserEnginQuestionResultVo recv_selectMemberSetQuestion() throws org.apache.thrift.TException
    {
      selectMemberSetQuestion_result result = new selectMemberSetQuestion_result();
      receiveBase(result, "selectMemberSetQuestion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectMemberSetQuestion failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo veryfyMemberQuestion(long memberCode, List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions) throws org.apache.thrift.TException
    {
      send_veryfyMemberQuestion(memberCode, questions);
      return recv_veryfyMemberQuestion();
    }

    public void send_veryfyMemberQuestion(long memberCode, List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions) throws org.apache.thrift.TException
    {
      veryfyMemberQuestion_args args = new veryfyMemberQuestion_args();
      args.setMemberCode(memberCode);
      args.setQuestions(questions);
      sendBase("veryfyMemberQuestion", args);
    }

    public com.froad.thrift.vo.ResultVo recv_veryfyMemberQuestion() throws org.apache.thrift.TException
    {
      veryfyMemberQuestion_result result = new veryfyMemberQuestion_result();
      receiveBase(result, "veryfyMemberQuestion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "veryfyMemberQuestion failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo setFirstMemberPayPwd(long memberCode, String ciphertextPwd, String ciphertextPwdTemp, String createSource) throws org.apache.thrift.TException
    {
      send_setFirstMemberPayPwd(memberCode, ciphertextPwd, ciphertextPwdTemp, createSource);
      return recv_setFirstMemberPayPwd();
    }

    public void send_setFirstMemberPayPwd(long memberCode, String ciphertextPwd, String ciphertextPwdTemp, String createSource) throws org.apache.thrift.TException
    {
      setFirstMemberPayPwd_args args = new setFirstMemberPayPwd_args();
      args.setMemberCode(memberCode);
      args.setCiphertextPwd(ciphertextPwd);
      args.setCiphertextPwdTemp(ciphertextPwdTemp);
      args.setCreateSource(createSource);
      sendBase("setFirstMemberPayPwd", args);
    }

    public com.froad.thrift.vo.ResultVo recv_setFirstMemberPayPwd() throws org.apache.thrift.TException
    {
      setFirstMemberPayPwd_result result = new setFirstMemberPayPwd_result();
      receiveBase(result, "setFirstMemberPayPwd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setFirstMemberPayPwd failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateMemberPayPwd(long memberCode, String ciphertextPwdOld, String ciphertextPwd, String ciphertextPwdTemp, String createSource) throws org.apache.thrift.TException
    {
      send_updateMemberPayPwd(memberCode, ciphertextPwdOld, ciphertextPwd, ciphertextPwdTemp, createSource);
      return recv_updateMemberPayPwd();
    }

    public void send_updateMemberPayPwd(long memberCode, String ciphertextPwdOld, String ciphertextPwd, String ciphertextPwdTemp, String createSource) throws org.apache.thrift.TException
    {
      updateMemberPayPwd_args args = new updateMemberPayPwd_args();
      args.setMemberCode(memberCode);
      args.setCiphertextPwdOld(ciphertextPwdOld);
      args.setCiphertextPwd(ciphertextPwd);
      args.setCiphertextPwdTemp(ciphertextPwdTemp);
      args.setCreateSource(createSource);
      sendBase("updateMemberPayPwd", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateMemberPayPwd() throws org.apache.thrift.TException
    {
      updateMemberPayPwd_result result = new updateMemberPayPwd_result();
      receiveBase(result, "updateMemberPayPwd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMemberPayPwd failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo resetMemberPayPwd(long memberCode, String ciphertextPwd, String ciphertextPwdTemp, String createSource) throws org.apache.thrift.TException
    {
      send_resetMemberPayPwd(memberCode, ciphertextPwd, ciphertextPwdTemp, createSource);
      return recv_resetMemberPayPwd();
    }

    public void send_resetMemberPayPwd(long memberCode, String ciphertextPwd, String ciphertextPwdTemp, String createSource) throws org.apache.thrift.TException
    {
      resetMemberPayPwd_args args = new resetMemberPayPwd_args();
      args.setMemberCode(memberCode);
      args.setCiphertextPwd(ciphertextPwd);
      args.setCiphertextPwdTemp(ciphertextPwdTemp);
      args.setCreateSource(createSource);
      sendBase("resetMemberPayPwd", args);
    }

    public com.froad.thrift.vo.ResultVo recv_resetMemberPayPwd() throws org.apache.thrift.TException
    {
      resetMemberPayPwd_result result = new resetMemberPayPwd_result();
      receiveBase(result, "resetMemberPayPwd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resetMemberPayPwd failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo setFirstMemberQuestion(long memberCode, List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions) throws org.apache.thrift.TException
    {
      send_setFirstMemberQuestion(memberCode, questions);
      return recv_setFirstMemberQuestion();
    }

    public void send_setFirstMemberQuestion(long memberCode, List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions) throws org.apache.thrift.TException
    {
      setFirstMemberQuestion_args args = new setFirstMemberQuestion_args();
      args.setMemberCode(memberCode);
      args.setQuestions(questions);
      sendBase("setFirstMemberQuestion", args);
    }

    public com.froad.thrift.vo.ResultVo recv_setFirstMemberQuestion() throws org.apache.thrift.TException
    {
      setFirstMemberQuestion_result result = new setFirstMemberQuestion_result();
      receiveBase(result, "setFirstMemberQuestion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setFirstMemberQuestion failed: unknown result");
    }

    public com.froad.thrift.vo.member.UserEnginePageVoRes selectPageOfMemberPointsRecordHistory(String clientId, String longID, long pageSize, long pageNum, long startTime, long endTime, String userEnginePointsRecordType) throws org.apache.thrift.TException
    {
      send_selectPageOfMemberPointsRecordHistory(clientId, longID, pageSize, pageNum, startTime, endTime, userEnginePointsRecordType);
      return recv_selectPageOfMemberPointsRecordHistory();
    }

    public void send_selectPageOfMemberPointsRecordHistory(String clientId, String longID, long pageSize, long pageNum, long startTime, long endTime, String userEnginePointsRecordType) throws org.apache.thrift.TException
    {
      selectPageOfMemberPointsRecordHistory_args args = new selectPageOfMemberPointsRecordHistory_args();
      args.setClientId(clientId);
      args.setLongID(longID);
      args.setPageSize(pageSize);
      args.setPageNum(pageNum);
      args.setStartTime(startTime);
      args.setEndTime(endTime);
      args.setUserEnginePointsRecordType(userEnginePointsRecordType);
      sendBase("selectPageOfMemberPointsRecordHistory", args);
    }

    public com.froad.thrift.vo.member.UserEnginePageVoRes recv_selectPageOfMemberPointsRecordHistory() throws org.apache.thrift.TException
    {
      selectPageOfMemberPointsRecordHistory_result result = new selectPageOfMemberPointsRecordHistory_result();
      receiveBase(result, "selectPageOfMemberPointsRecordHistory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectPageOfMemberPointsRecordHistory failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo sendExchangeCode(String clientId, String mobile, int points, boolean useBankChannel) throws org.apache.thrift.TException
    {
      send_sendExchangeCode(clientId, mobile, points, useBankChannel);
      return recv_sendExchangeCode();
    }

    public void send_sendExchangeCode(String clientId, String mobile, int points, boolean useBankChannel) throws org.apache.thrift.TException
    {
      sendExchangeCode_args args = new sendExchangeCode_args();
      args.setClientId(clientId);
      args.setMobile(mobile);
      args.setPoints(points);
      args.setUseBankChannel(useBankChannel);
      sendBase("sendExchangeCode", args);
    }

    public com.froad.thrift.vo.ResultVo recv_sendExchangeCode() throws org.apache.thrift.TException
    {
      sendExchangeCode_result result = new sendExchangeCode_result();
      receiveBase(result, "sendExchangeCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendExchangeCode failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo verifyExchangeCode(String clientId, String mobileOrToken, String code, boolean useBankChannel) throws org.apache.thrift.TException
    {
      send_verifyExchangeCode(clientId, mobileOrToken, code, useBankChannel);
      return recv_verifyExchangeCode();
    }

    public void send_verifyExchangeCode(String clientId, String mobileOrToken, String code, boolean useBankChannel) throws org.apache.thrift.TException
    {
      verifyExchangeCode_args args = new verifyExchangeCode_args();
      args.setClientId(clientId);
      args.setMobileOrToken(mobileOrToken);
      args.setCode(code);
      args.setUseBankChannel(useBankChannel);
      sendBase("verifyExchangeCode", args);
    }

    public com.froad.thrift.vo.ResultVo recv_verifyExchangeCode() throws org.apache.thrift.TException
    {
      verifyExchangeCode_result result = new verifyExchangeCode_result();
      receiveBase(result, "verifyExchangeCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyExchangeCode failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteUserSettedQuestion(long memberCode, String clientId) throws org.apache.thrift.TException
    {
      send_deleteUserSettedQuestion(memberCode, clientId);
      return recv_deleteUserSettedQuestion();
    }

    public void send_deleteUserSettedQuestion(long memberCode, String clientId) throws org.apache.thrift.TException
    {
      deleteUserSettedQuestion_args args = new deleteUserSettedQuestion_args();
      args.setMemberCode(memberCode);
      args.setClientId(clientId);
      sendBase("deleteUserSettedQuestion", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteUserSettedQuestion() throws org.apache.thrift.TException
    {
      deleteUserSettedQuestion_result result = new deleteUserSettedQuestion_result();
      receiveBase(result, "deleteUserSettedQuestion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteUserSettedQuestion failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void updateMemberPwd(long memberCode, String oldPwd, String newPwd, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMemberPwd_call method_call = new updateMemberPwd_call(memberCode, oldPwd, newPwd, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMemberPwd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private String oldPwd;
      private String newPwd;
      public updateMemberPwd_call(long memberCode, String oldPwd, String newPwd, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.oldPwd = oldPwd;
        this.newPwd = newPwd;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMemberPwd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMemberPwd_args args = new updateMemberPwd_args();
        args.setMemberCode(memberCode);
        args.setOldPwd(oldPwd);
        args.setNewPwd(newPwd);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMemberPwd();
      }
    }

    public void resetMemberPwd(long memberCode, String pwdNew, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resetMemberPwd_call method_call = new resetMemberPwd_call(memberCode, pwdNew, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resetMemberPwd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private String pwdNew;
      public resetMemberPwd_call(long memberCode, String pwdNew, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.pwdNew = pwdNew;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resetMemberPwd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resetMemberPwd_args args = new resetMemberPwd_args();
        args.setMemberCode(memberCode);
        args.setPwdNew(pwdNew);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resetMemberPwd();
      }
    }

    public void loginUnion(String bankOrg, String mobile, String idnetifyNo, String userBankId, String createChannel, String identifyType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loginUnion_call method_call = new loginUnion_call(bankOrg, mobile, idnetifyNo, userBankId, createChannel, identifyType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loginUnion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bankOrg;
      private String mobile;
      private String idnetifyNo;
      private String userBankId;
      private String createChannel;
      private String identifyType;
      public loginUnion_call(String bankOrg, String mobile, String idnetifyNo, String userBankId, String createChannel, String identifyType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankOrg = bankOrg;
        this.mobile = mobile;
        this.idnetifyNo = idnetifyNo;
        this.userBankId = userBankId;
        this.createChannel = createChannel;
        this.identifyType = identifyType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loginUnion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loginUnion_args args = new loginUnion_args();
        args.setBankOrg(bankOrg);
        args.setMobile(mobile);
        args.setIdnetifyNo(idnetifyNo);
        args.setUserBankId(userBankId);
        args.setCreateChannel(createChannel);
        args.setIdentifyType(identifyType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.member.UserEngineVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loginUnion();
      }
    }

    public void isMemberSetPayPwd(long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isMemberSetPayPwd_call method_call = new isMemberSetPayPwd_call(memberCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isMemberSetPayPwd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      public isMemberSetPayPwd_call(long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isMemberSetPayPwd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isMemberSetPayPwd_args args = new isMemberSetPayPwd_args();
        args.setMemberCode(memberCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isMemberSetPayPwd();
      }
    }

    public void verifyMemberPayPwd(long memberCode, String ciphertextPwd, String createSource, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyMemberPayPwd_call method_call = new verifyMemberPayPwd_call(memberCode, ciphertextPwd, createSource, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyMemberPayPwd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private String ciphertextPwd;
      private String createSource;
      public verifyMemberPayPwd_call(long memberCode, String ciphertextPwd, String createSource, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.ciphertextPwd = ciphertextPwd;
        this.createSource = createSource;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyMemberPayPwd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyMemberPayPwd_args args = new verifyMemberPayPwd_args();
        args.setMemberCode(memberCode);
        args.setCiphertextPwd(ciphertextPwd);
        args.setCreateSource(createSource);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyMemberPayPwd();
      }
    }

    public void isMemberSetQuestion(long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isMemberSetQuestion_call method_call = new isMemberSetQuestion_call(memberCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isMemberSetQuestion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      public isMemberSetQuestion_call(long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isMemberSetQuestion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isMemberSetQuestion_args args = new isMemberSetQuestion_args();
        args.setMemberCode(memberCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isMemberSetQuestion();
      }
    }

    public void selectPreinstallQuestion(long questionAmount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectPreinstallQuestion_call method_call = new selectPreinstallQuestion_call(questionAmount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectPreinstallQuestion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long questionAmount;
      public selectPreinstallQuestion_call(long questionAmount, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.questionAmount = questionAmount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectPreinstallQuestion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectPreinstallQuestion_args args = new selectPreinstallQuestion_args();
        args.setQuestionAmount(questionAmount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.member.UserEnginQuestionResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectPreinstallQuestion();
      }
    }

    public void selectMemberSetQuestion(long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectMemberSetQuestion_call method_call = new selectMemberSetQuestion_call(memberCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectMemberSetQuestion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      public selectMemberSetQuestion_call(long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectMemberSetQuestion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectMemberSetQuestion_args args = new selectMemberSetQuestion_args();
        args.setMemberCode(memberCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.member.UserEnginQuestionResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectMemberSetQuestion();
      }
    }

    public void veryfyMemberQuestion(long memberCode, List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      veryfyMemberQuestion_call method_call = new veryfyMemberQuestion_call(memberCode, questions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class veryfyMemberQuestion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions;
      public veryfyMemberQuestion_call(long memberCode, List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.questions = questions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("veryfyMemberQuestion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        veryfyMemberQuestion_args args = new veryfyMemberQuestion_args();
        args.setMemberCode(memberCode);
        args.setQuestions(questions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_veryfyMemberQuestion();
      }
    }

    public void setFirstMemberPayPwd(long memberCode, String ciphertextPwd, String ciphertextPwdTemp, String createSource, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setFirstMemberPayPwd_call method_call = new setFirstMemberPayPwd_call(memberCode, ciphertextPwd, ciphertextPwdTemp, createSource, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setFirstMemberPayPwd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private String ciphertextPwd;
      private String ciphertextPwdTemp;
      private String createSource;
      public setFirstMemberPayPwd_call(long memberCode, String ciphertextPwd, String ciphertextPwdTemp, String createSource, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.ciphertextPwd = ciphertextPwd;
        this.ciphertextPwdTemp = ciphertextPwdTemp;
        this.createSource = createSource;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setFirstMemberPayPwd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setFirstMemberPayPwd_args args = new setFirstMemberPayPwd_args();
        args.setMemberCode(memberCode);
        args.setCiphertextPwd(ciphertextPwd);
        args.setCiphertextPwdTemp(ciphertextPwdTemp);
        args.setCreateSource(createSource);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setFirstMemberPayPwd();
      }
    }

    public void updateMemberPayPwd(long memberCode, String ciphertextPwdOld, String ciphertextPwd, String ciphertextPwdTemp, String createSource, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMemberPayPwd_call method_call = new updateMemberPayPwd_call(memberCode, ciphertextPwdOld, ciphertextPwd, ciphertextPwdTemp, createSource, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMemberPayPwd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private String ciphertextPwdOld;
      private String ciphertextPwd;
      private String ciphertextPwdTemp;
      private String createSource;
      public updateMemberPayPwd_call(long memberCode, String ciphertextPwdOld, String ciphertextPwd, String ciphertextPwdTemp, String createSource, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.ciphertextPwdOld = ciphertextPwdOld;
        this.ciphertextPwd = ciphertextPwd;
        this.ciphertextPwdTemp = ciphertextPwdTemp;
        this.createSource = createSource;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMemberPayPwd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMemberPayPwd_args args = new updateMemberPayPwd_args();
        args.setMemberCode(memberCode);
        args.setCiphertextPwdOld(ciphertextPwdOld);
        args.setCiphertextPwd(ciphertextPwd);
        args.setCiphertextPwdTemp(ciphertextPwdTemp);
        args.setCreateSource(createSource);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMemberPayPwd();
      }
    }

    public void resetMemberPayPwd(long memberCode, String ciphertextPwd, String ciphertextPwdTemp, String createSource, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resetMemberPayPwd_call method_call = new resetMemberPayPwd_call(memberCode, ciphertextPwd, ciphertextPwdTemp, createSource, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resetMemberPayPwd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private String ciphertextPwd;
      private String ciphertextPwdTemp;
      private String createSource;
      public resetMemberPayPwd_call(long memberCode, String ciphertextPwd, String ciphertextPwdTemp, String createSource, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.ciphertextPwd = ciphertextPwd;
        this.ciphertextPwdTemp = ciphertextPwdTemp;
        this.createSource = createSource;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resetMemberPayPwd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resetMemberPayPwd_args args = new resetMemberPayPwd_args();
        args.setMemberCode(memberCode);
        args.setCiphertextPwd(ciphertextPwd);
        args.setCiphertextPwdTemp(ciphertextPwdTemp);
        args.setCreateSource(createSource);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resetMemberPayPwd();
      }
    }

    public void setFirstMemberQuestion(long memberCode, List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setFirstMemberQuestion_call method_call = new setFirstMemberQuestion_call(memberCode, questions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setFirstMemberQuestion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions;
      public setFirstMemberQuestion_call(long memberCode, List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.questions = questions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setFirstMemberQuestion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setFirstMemberQuestion_args args = new setFirstMemberQuestion_args();
        args.setMemberCode(memberCode);
        args.setQuestions(questions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setFirstMemberQuestion();
      }
    }

    public void selectPageOfMemberPointsRecordHistory(String clientId, String longID, long pageSize, long pageNum, long startTime, long endTime, String userEnginePointsRecordType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectPageOfMemberPointsRecordHistory_call method_call = new selectPageOfMemberPointsRecordHistory_call(clientId, longID, pageSize, pageNum, startTime, endTime, userEnginePointsRecordType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectPageOfMemberPointsRecordHistory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String longID;
      private long pageSize;
      private long pageNum;
      private long startTime;
      private long endTime;
      private String userEnginePointsRecordType;
      public selectPageOfMemberPointsRecordHistory_call(String clientId, String longID, long pageSize, long pageNum, long startTime, long endTime, String userEnginePointsRecordType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.longID = longID;
        this.pageSize = pageSize;
        this.pageNum = pageNum;
        this.startTime = startTime;
        this.endTime = endTime;
        this.userEnginePointsRecordType = userEnginePointsRecordType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectPageOfMemberPointsRecordHistory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectPageOfMemberPointsRecordHistory_args args = new selectPageOfMemberPointsRecordHistory_args();
        args.setClientId(clientId);
        args.setLongID(longID);
        args.setPageSize(pageSize);
        args.setPageNum(pageNum);
        args.setStartTime(startTime);
        args.setEndTime(endTime);
        args.setUserEnginePointsRecordType(userEnginePointsRecordType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.member.UserEnginePageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectPageOfMemberPointsRecordHistory();
      }
    }

    public void sendExchangeCode(String clientId, String mobile, int points, boolean useBankChannel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendExchangeCode_call method_call = new sendExchangeCode_call(clientId, mobile, points, useBankChannel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendExchangeCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String mobile;
      private int points;
      private boolean useBankChannel;
      public sendExchangeCode_call(String clientId, String mobile, int points, boolean useBankChannel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.mobile = mobile;
        this.points = points;
        this.useBankChannel = useBankChannel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendExchangeCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendExchangeCode_args args = new sendExchangeCode_args();
        args.setClientId(clientId);
        args.setMobile(mobile);
        args.setPoints(points);
        args.setUseBankChannel(useBankChannel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendExchangeCode();
      }
    }

    public void verifyExchangeCode(String clientId, String mobileOrToken, String code, boolean useBankChannel, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyExchangeCode_call method_call = new verifyExchangeCode_call(clientId, mobileOrToken, code, useBankChannel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyExchangeCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String mobileOrToken;
      private String code;
      private boolean useBankChannel;
      public verifyExchangeCode_call(String clientId, String mobileOrToken, String code, boolean useBankChannel, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.mobileOrToken = mobileOrToken;
        this.code = code;
        this.useBankChannel = useBankChannel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyExchangeCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyExchangeCode_args args = new verifyExchangeCode_args();
        args.setClientId(clientId);
        args.setMobileOrToken(mobileOrToken);
        args.setCode(code);
        args.setUseBankChannel(useBankChannel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyExchangeCode();
      }
    }

    public void deleteUserSettedQuestion(long memberCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteUserSettedQuestion_call method_call = new deleteUserSettedQuestion_call(memberCode, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteUserSettedQuestion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private String clientId;
      public deleteUserSettedQuestion_call(long memberCode, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteUserSettedQuestion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteUserSettedQuestion_args args = new deleteUserSettedQuestion_args();
        args.setMemberCode(memberCode);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteUserSettedQuestion();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("updateMemberPwd", new updateMemberPwd());
      processMap.put("resetMemberPwd", new resetMemberPwd());
      processMap.put("loginUnion", new loginUnion());
      processMap.put("isMemberSetPayPwd", new isMemberSetPayPwd());
      processMap.put("verifyMemberPayPwd", new verifyMemberPayPwd());
      processMap.put("isMemberSetQuestion", new isMemberSetQuestion());
      processMap.put("selectPreinstallQuestion", new selectPreinstallQuestion());
      processMap.put("selectMemberSetQuestion", new selectMemberSetQuestion());
      processMap.put("veryfyMemberQuestion", new veryfyMemberQuestion());
      processMap.put("setFirstMemberPayPwd", new setFirstMemberPayPwd());
      processMap.put("updateMemberPayPwd", new updateMemberPayPwd());
      processMap.put("resetMemberPayPwd", new resetMemberPayPwd());
      processMap.put("setFirstMemberQuestion", new setFirstMemberQuestion());
      processMap.put("selectPageOfMemberPointsRecordHistory", new selectPageOfMemberPointsRecordHistory());
      processMap.put("sendExchangeCode", new sendExchangeCode());
      processMap.put("verifyExchangeCode", new verifyExchangeCode());
      processMap.put("deleteUserSettedQuestion", new deleteUserSettedQuestion());
      return processMap;
    }

    public static class updateMemberPwd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMemberPwd_args> {
      public updateMemberPwd() {
        super("updateMemberPwd");
      }

      public updateMemberPwd_args getEmptyArgsInstance() {
        return new updateMemberPwd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMemberPwd_result getResult(I iface, updateMemberPwd_args args) throws org.apache.thrift.TException {
        updateMemberPwd_result result = new updateMemberPwd_result();
        result.success = iface.updateMemberPwd(args.memberCode, args.oldPwd, args.newPwd);
        return result;
      }
    }

    public static class resetMemberPwd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resetMemberPwd_args> {
      public resetMemberPwd() {
        super("resetMemberPwd");
      }

      public resetMemberPwd_args getEmptyArgsInstance() {
        return new resetMemberPwd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resetMemberPwd_result getResult(I iface, resetMemberPwd_args args) throws org.apache.thrift.TException {
        resetMemberPwd_result result = new resetMemberPwd_result();
        result.success = iface.resetMemberPwd(args.memberCode, args.pwdNew);
        return result;
      }
    }

    public static class loginUnion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loginUnion_args> {
      public loginUnion() {
        super("loginUnion");
      }

      public loginUnion_args getEmptyArgsInstance() {
        return new loginUnion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loginUnion_result getResult(I iface, loginUnion_args args) throws org.apache.thrift.TException {
        loginUnion_result result = new loginUnion_result();
        result.success = iface.loginUnion(args.bankOrg, args.mobile, args.idnetifyNo, args.userBankId, args.createChannel, args.identifyType);
        return result;
      }
    }

    public static class isMemberSetPayPwd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isMemberSetPayPwd_args> {
      public isMemberSetPayPwd() {
        super("isMemberSetPayPwd");
      }

      public isMemberSetPayPwd_args getEmptyArgsInstance() {
        return new isMemberSetPayPwd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isMemberSetPayPwd_result getResult(I iface, isMemberSetPayPwd_args args) throws org.apache.thrift.TException {
        isMemberSetPayPwd_result result = new isMemberSetPayPwd_result();
        result.success = iface.isMemberSetPayPwd(args.memberCode);
        return result;
      }
    }

    public static class verifyMemberPayPwd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyMemberPayPwd_args> {
      public verifyMemberPayPwd() {
        super("verifyMemberPayPwd");
      }

      public verifyMemberPayPwd_args getEmptyArgsInstance() {
        return new verifyMemberPayPwd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyMemberPayPwd_result getResult(I iface, verifyMemberPayPwd_args args) throws org.apache.thrift.TException {
        verifyMemberPayPwd_result result = new verifyMemberPayPwd_result();
        result.success = iface.verifyMemberPayPwd(args.memberCode, args.ciphertextPwd, args.createSource);
        return result;
      }
    }

    public static class isMemberSetQuestion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isMemberSetQuestion_args> {
      public isMemberSetQuestion() {
        super("isMemberSetQuestion");
      }

      public isMemberSetQuestion_args getEmptyArgsInstance() {
        return new isMemberSetQuestion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isMemberSetQuestion_result getResult(I iface, isMemberSetQuestion_args args) throws org.apache.thrift.TException {
        isMemberSetQuestion_result result = new isMemberSetQuestion_result();
        result.success = iface.isMemberSetQuestion(args.memberCode);
        return result;
      }
    }

    public static class selectPreinstallQuestion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectPreinstallQuestion_args> {
      public selectPreinstallQuestion() {
        super("selectPreinstallQuestion");
      }

      public selectPreinstallQuestion_args getEmptyArgsInstance() {
        return new selectPreinstallQuestion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectPreinstallQuestion_result getResult(I iface, selectPreinstallQuestion_args args) throws org.apache.thrift.TException {
        selectPreinstallQuestion_result result = new selectPreinstallQuestion_result();
        result.success = iface.selectPreinstallQuestion(args.questionAmount);
        return result;
      }
    }

    public static class selectMemberSetQuestion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectMemberSetQuestion_args> {
      public selectMemberSetQuestion() {
        super("selectMemberSetQuestion");
      }

      public selectMemberSetQuestion_args getEmptyArgsInstance() {
        return new selectMemberSetQuestion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectMemberSetQuestion_result getResult(I iface, selectMemberSetQuestion_args args) throws org.apache.thrift.TException {
        selectMemberSetQuestion_result result = new selectMemberSetQuestion_result();
        result.success = iface.selectMemberSetQuestion(args.memberCode);
        return result;
      }
    }

    public static class veryfyMemberQuestion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, veryfyMemberQuestion_args> {
      public veryfyMemberQuestion() {
        super("veryfyMemberQuestion");
      }

      public veryfyMemberQuestion_args getEmptyArgsInstance() {
        return new veryfyMemberQuestion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public veryfyMemberQuestion_result getResult(I iface, veryfyMemberQuestion_args args) throws org.apache.thrift.TException {
        veryfyMemberQuestion_result result = new veryfyMemberQuestion_result();
        result.success = iface.veryfyMemberQuestion(args.memberCode, args.questions);
        return result;
      }
    }

    public static class setFirstMemberPayPwd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setFirstMemberPayPwd_args> {
      public setFirstMemberPayPwd() {
        super("setFirstMemberPayPwd");
      }

      public setFirstMemberPayPwd_args getEmptyArgsInstance() {
        return new setFirstMemberPayPwd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setFirstMemberPayPwd_result getResult(I iface, setFirstMemberPayPwd_args args) throws org.apache.thrift.TException {
        setFirstMemberPayPwd_result result = new setFirstMemberPayPwd_result();
        result.success = iface.setFirstMemberPayPwd(args.memberCode, args.ciphertextPwd, args.ciphertextPwdTemp, args.createSource);
        return result;
      }
    }

    public static class updateMemberPayPwd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMemberPayPwd_args> {
      public updateMemberPayPwd() {
        super("updateMemberPayPwd");
      }

      public updateMemberPayPwd_args getEmptyArgsInstance() {
        return new updateMemberPayPwd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMemberPayPwd_result getResult(I iface, updateMemberPayPwd_args args) throws org.apache.thrift.TException {
        updateMemberPayPwd_result result = new updateMemberPayPwd_result();
        result.success = iface.updateMemberPayPwd(args.memberCode, args.ciphertextPwdOld, args.ciphertextPwd, args.ciphertextPwdTemp, args.createSource);
        return result;
      }
    }

    public static class resetMemberPayPwd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resetMemberPayPwd_args> {
      public resetMemberPayPwd() {
        super("resetMemberPayPwd");
      }

      public resetMemberPayPwd_args getEmptyArgsInstance() {
        return new resetMemberPayPwd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resetMemberPayPwd_result getResult(I iface, resetMemberPayPwd_args args) throws org.apache.thrift.TException {
        resetMemberPayPwd_result result = new resetMemberPayPwd_result();
        result.success = iface.resetMemberPayPwd(args.memberCode, args.ciphertextPwd, args.ciphertextPwdTemp, args.createSource);
        return result;
      }
    }

    public static class setFirstMemberQuestion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setFirstMemberQuestion_args> {
      public setFirstMemberQuestion() {
        super("setFirstMemberQuestion");
      }

      public setFirstMemberQuestion_args getEmptyArgsInstance() {
        return new setFirstMemberQuestion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setFirstMemberQuestion_result getResult(I iface, setFirstMemberQuestion_args args) throws org.apache.thrift.TException {
        setFirstMemberQuestion_result result = new setFirstMemberQuestion_result();
        result.success = iface.setFirstMemberQuestion(args.memberCode, args.questions);
        return result;
      }
    }

    public static class selectPageOfMemberPointsRecordHistory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectPageOfMemberPointsRecordHistory_args> {
      public selectPageOfMemberPointsRecordHistory() {
        super("selectPageOfMemberPointsRecordHistory");
      }

      public selectPageOfMemberPointsRecordHistory_args getEmptyArgsInstance() {
        return new selectPageOfMemberPointsRecordHistory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectPageOfMemberPointsRecordHistory_result getResult(I iface, selectPageOfMemberPointsRecordHistory_args args) throws org.apache.thrift.TException {
        selectPageOfMemberPointsRecordHistory_result result = new selectPageOfMemberPointsRecordHistory_result();
        result.success = iface.selectPageOfMemberPointsRecordHistory(args.clientId, args.longID, args.pageSize, args.pageNum, args.startTime, args.endTime, args.userEnginePointsRecordType);
        return result;
      }
    }

    public static class sendExchangeCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendExchangeCode_args> {
      public sendExchangeCode() {
        super("sendExchangeCode");
      }

      public sendExchangeCode_args getEmptyArgsInstance() {
        return new sendExchangeCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendExchangeCode_result getResult(I iface, sendExchangeCode_args args) throws org.apache.thrift.TException {
        sendExchangeCode_result result = new sendExchangeCode_result();
        result.success = iface.sendExchangeCode(args.clientId, args.mobile, args.points, args.useBankChannel);
        return result;
      }
    }

    public static class verifyExchangeCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyExchangeCode_args> {
      public verifyExchangeCode() {
        super("verifyExchangeCode");
      }

      public verifyExchangeCode_args getEmptyArgsInstance() {
        return new verifyExchangeCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyExchangeCode_result getResult(I iface, verifyExchangeCode_args args) throws org.apache.thrift.TException {
        verifyExchangeCode_result result = new verifyExchangeCode_result();
        result.success = iface.verifyExchangeCode(args.clientId, args.mobileOrToken, args.code, args.useBankChannel);
        return result;
      }
    }

    public static class deleteUserSettedQuestion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteUserSettedQuestion_args> {
      public deleteUserSettedQuestion() {
        super("deleteUserSettedQuestion");
      }

      public deleteUserSettedQuestion_args getEmptyArgsInstance() {
        return new deleteUserSettedQuestion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteUserSettedQuestion_result getResult(I iface, deleteUserSettedQuestion_args args) throws org.apache.thrift.TException {
        deleteUserSettedQuestion_result result = new deleteUserSettedQuestion_result();
        result.success = iface.deleteUserSettedQuestion(args.memberCode, args.clientId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("updateMemberPwd", new updateMemberPwd());
      processMap.put("resetMemberPwd", new resetMemberPwd());
      processMap.put("loginUnion", new loginUnion());
      processMap.put("isMemberSetPayPwd", new isMemberSetPayPwd());
      processMap.put("verifyMemberPayPwd", new verifyMemberPayPwd());
      processMap.put("isMemberSetQuestion", new isMemberSetQuestion());
      processMap.put("selectPreinstallQuestion", new selectPreinstallQuestion());
      processMap.put("selectMemberSetQuestion", new selectMemberSetQuestion());
      processMap.put("veryfyMemberQuestion", new veryfyMemberQuestion());
      processMap.put("setFirstMemberPayPwd", new setFirstMemberPayPwd());
      processMap.put("updateMemberPayPwd", new updateMemberPayPwd());
      processMap.put("resetMemberPayPwd", new resetMemberPayPwd());
      processMap.put("setFirstMemberQuestion", new setFirstMemberQuestion());
      processMap.put("selectPageOfMemberPointsRecordHistory", new selectPageOfMemberPointsRecordHistory());
      processMap.put("sendExchangeCode", new sendExchangeCode());
      processMap.put("verifyExchangeCode", new verifyExchangeCode());
      processMap.put("deleteUserSettedQuestion", new deleteUserSettedQuestion());
      return processMap;
    }

    public static class updateMemberPwd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMemberPwd_args, com.froad.thrift.vo.ResultVo> {
      public updateMemberPwd() {
        super("updateMemberPwd");
      }

      public updateMemberPwd_args getEmptyArgsInstance() {
        return new updateMemberPwd_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateMemberPwd_result result = new updateMemberPwd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMemberPwd_result result = new updateMemberPwd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMemberPwd_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateMemberPwd(args.memberCode, args.oldPwd, args.newPwd,resultHandler);
      }
    }

    public static class resetMemberPwd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resetMemberPwd_args, com.froad.thrift.vo.ResultVo> {
      public resetMemberPwd() {
        super("resetMemberPwd");
      }

      public resetMemberPwd_args getEmptyArgsInstance() {
        return new resetMemberPwd_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            resetMemberPwd_result result = new resetMemberPwd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resetMemberPwd_result result = new resetMemberPwd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resetMemberPwd_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.resetMemberPwd(args.memberCode, args.pwdNew,resultHandler);
      }
    }

    public static class loginUnion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loginUnion_args, com.froad.thrift.vo.member.UserEngineVo> {
      public loginUnion() {
        super("loginUnion");
      }

      public loginUnion_args getEmptyArgsInstance() {
        return new loginUnion_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.member.UserEngineVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.member.UserEngineVo>() { 
          public void onComplete(com.froad.thrift.vo.member.UserEngineVo o) {
            loginUnion_result result = new loginUnion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loginUnion_result result = new loginUnion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loginUnion_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.member.UserEngineVo> resultHandler) throws TException {
        iface.loginUnion(args.bankOrg, args.mobile, args.idnetifyNo, args.userBankId, args.createChannel, args.identifyType,resultHandler);
      }
    }

    public static class isMemberSetPayPwd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isMemberSetPayPwd_args, com.froad.thrift.vo.ResultVo> {
      public isMemberSetPayPwd() {
        super("isMemberSetPayPwd");
      }

      public isMemberSetPayPwd_args getEmptyArgsInstance() {
        return new isMemberSetPayPwd_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            isMemberSetPayPwd_result result = new isMemberSetPayPwd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isMemberSetPayPwd_result result = new isMemberSetPayPwd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isMemberSetPayPwd_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.isMemberSetPayPwd(args.memberCode,resultHandler);
      }
    }

    public static class verifyMemberPayPwd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyMemberPayPwd_args, com.froad.thrift.vo.ResultVo> {
      public verifyMemberPayPwd() {
        super("verifyMemberPayPwd");
      }

      public verifyMemberPayPwd_args getEmptyArgsInstance() {
        return new verifyMemberPayPwd_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            verifyMemberPayPwd_result result = new verifyMemberPayPwd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifyMemberPayPwd_result result = new verifyMemberPayPwd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyMemberPayPwd_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.verifyMemberPayPwd(args.memberCode, args.ciphertextPwd, args.createSource,resultHandler);
      }
    }

    public static class isMemberSetQuestion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isMemberSetQuestion_args, com.froad.thrift.vo.ResultVo> {
      public isMemberSetQuestion() {
        super("isMemberSetQuestion");
      }

      public isMemberSetQuestion_args getEmptyArgsInstance() {
        return new isMemberSetQuestion_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            isMemberSetQuestion_result result = new isMemberSetQuestion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isMemberSetQuestion_result result = new isMemberSetQuestion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isMemberSetQuestion_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.isMemberSetQuestion(args.memberCode,resultHandler);
      }
    }

    public static class selectPreinstallQuestion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectPreinstallQuestion_args, com.froad.thrift.vo.member.UserEnginQuestionResultVo> {
      public selectPreinstallQuestion() {
        super("selectPreinstallQuestion");
      }

      public selectPreinstallQuestion_args getEmptyArgsInstance() {
        return new selectPreinstallQuestion_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.member.UserEnginQuestionResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.member.UserEnginQuestionResultVo>() { 
          public void onComplete(com.froad.thrift.vo.member.UserEnginQuestionResultVo o) {
            selectPreinstallQuestion_result result = new selectPreinstallQuestion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectPreinstallQuestion_result result = new selectPreinstallQuestion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectPreinstallQuestion_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.member.UserEnginQuestionResultVo> resultHandler) throws TException {
        iface.selectPreinstallQuestion(args.questionAmount,resultHandler);
      }
    }

    public static class selectMemberSetQuestion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectMemberSetQuestion_args, com.froad.thrift.vo.member.UserEnginQuestionResultVo> {
      public selectMemberSetQuestion() {
        super("selectMemberSetQuestion");
      }

      public selectMemberSetQuestion_args getEmptyArgsInstance() {
        return new selectMemberSetQuestion_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.member.UserEnginQuestionResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.member.UserEnginQuestionResultVo>() { 
          public void onComplete(com.froad.thrift.vo.member.UserEnginQuestionResultVo o) {
            selectMemberSetQuestion_result result = new selectMemberSetQuestion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectMemberSetQuestion_result result = new selectMemberSetQuestion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectMemberSetQuestion_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.member.UserEnginQuestionResultVo> resultHandler) throws TException {
        iface.selectMemberSetQuestion(args.memberCode,resultHandler);
      }
    }

    public static class veryfyMemberQuestion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, veryfyMemberQuestion_args, com.froad.thrift.vo.ResultVo> {
      public veryfyMemberQuestion() {
        super("veryfyMemberQuestion");
      }

      public veryfyMemberQuestion_args getEmptyArgsInstance() {
        return new veryfyMemberQuestion_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            veryfyMemberQuestion_result result = new veryfyMemberQuestion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            veryfyMemberQuestion_result result = new veryfyMemberQuestion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, veryfyMemberQuestion_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.veryfyMemberQuestion(args.memberCode, args.questions,resultHandler);
      }
    }

    public static class setFirstMemberPayPwd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setFirstMemberPayPwd_args, com.froad.thrift.vo.ResultVo> {
      public setFirstMemberPayPwd() {
        super("setFirstMemberPayPwd");
      }

      public setFirstMemberPayPwd_args getEmptyArgsInstance() {
        return new setFirstMemberPayPwd_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            setFirstMemberPayPwd_result result = new setFirstMemberPayPwd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setFirstMemberPayPwd_result result = new setFirstMemberPayPwd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setFirstMemberPayPwd_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.setFirstMemberPayPwd(args.memberCode, args.ciphertextPwd, args.ciphertextPwdTemp, args.createSource,resultHandler);
      }
    }

    public static class updateMemberPayPwd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMemberPayPwd_args, com.froad.thrift.vo.ResultVo> {
      public updateMemberPayPwd() {
        super("updateMemberPayPwd");
      }

      public updateMemberPayPwd_args getEmptyArgsInstance() {
        return new updateMemberPayPwd_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateMemberPayPwd_result result = new updateMemberPayPwd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMemberPayPwd_result result = new updateMemberPayPwd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMemberPayPwd_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateMemberPayPwd(args.memberCode, args.ciphertextPwdOld, args.ciphertextPwd, args.ciphertextPwdTemp, args.createSource,resultHandler);
      }
    }

    public static class resetMemberPayPwd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resetMemberPayPwd_args, com.froad.thrift.vo.ResultVo> {
      public resetMemberPayPwd() {
        super("resetMemberPayPwd");
      }

      public resetMemberPayPwd_args getEmptyArgsInstance() {
        return new resetMemberPayPwd_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            resetMemberPayPwd_result result = new resetMemberPayPwd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resetMemberPayPwd_result result = new resetMemberPayPwd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resetMemberPayPwd_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.resetMemberPayPwd(args.memberCode, args.ciphertextPwd, args.ciphertextPwdTemp, args.createSource,resultHandler);
      }
    }

    public static class setFirstMemberQuestion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setFirstMemberQuestion_args, com.froad.thrift.vo.ResultVo> {
      public setFirstMemberQuestion() {
        super("setFirstMemberQuestion");
      }

      public setFirstMemberQuestion_args getEmptyArgsInstance() {
        return new setFirstMemberQuestion_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            setFirstMemberQuestion_result result = new setFirstMemberQuestion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setFirstMemberQuestion_result result = new setFirstMemberQuestion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setFirstMemberQuestion_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.setFirstMemberQuestion(args.memberCode, args.questions,resultHandler);
      }
    }

    public static class selectPageOfMemberPointsRecordHistory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectPageOfMemberPointsRecordHistory_args, com.froad.thrift.vo.member.UserEnginePageVoRes> {
      public selectPageOfMemberPointsRecordHistory() {
        super("selectPageOfMemberPointsRecordHistory");
      }

      public selectPageOfMemberPointsRecordHistory_args getEmptyArgsInstance() {
        return new selectPageOfMemberPointsRecordHistory_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.member.UserEnginePageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.member.UserEnginePageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.member.UserEnginePageVoRes o) {
            selectPageOfMemberPointsRecordHistory_result result = new selectPageOfMemberPointsRecordHistory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectPageOfMemberPointsRecordHistory_result result = new selectPageOfMemberPointsRecordHistory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectPageOfMemberPointsRecordHistory_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.member.UserEnginePageVoRes> resultHandler) throws TException {
        iface.selectPageOfMemberPointsRecordHistory(args.clientId, args.longID, args.pageSize, args.pageNum, args.startTime, args.endTime, args.userEnginePointsRecordType,resultHandler);
      }
    }

    public static class sendExchangeCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendExchangeCode_args, com.froad.thrift.vo.ResultVo> {
      public sendExchangeCode() {
        super("sendExchangeCode");
      }

      public sendExchangeCode_args getEmptyArgsInstance() {
        return new sendExchangeCode_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            sendExchangeCode_result result = new sendExchangeCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendExchangeCode_result result = new sendExchangeCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendExchangeCode_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.sendExchangeCode(args.clientId, args.mobile, args.points, args.useBankChannel,resultHandler);
      }
    }

    public static class verifyExchangeCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyExchangeCode_args, com.froad.thrift.vo.ResultVo> {
      public verifyExchangeCode() {
        super("verifyExchangeCode");
      }

      public verifyExchangeCode_args getEmptyArgsInstance() {
        return new verifyExchangeCode_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            verifyExchangeCode_result result = new verifyExchangeCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifyExchangeCode_result result = new verifyExchangeCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyExchangeCode_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.verifyExchangeCode(args.clientId, args.mobileOrToken, args.code, args.useBankChannel,resultHandler);
      }
    }

    public static class deleteUserSettedQuestion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteUserSettedQuestion_args, com.froad.thrift.vo.ResultVo> {
      public deleteUserSettedQuestion() {
        super("deleteUserSettedQuestion");
      }

      public deleteUserSettedQuestion_args getEmptyArgsInstance() {
        return new deleteUserSettedQuestion_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteUserSettedQuestion_result result = new deleteUserSettedQuestion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteUserSettedQuestion_result result = new deleteUserSettedQuestion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteUserSettedQuestion_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteUserSettedQuestion(args.memberCode, args.clientId,resultHandler);
      }
    }

  }

  public static class updateMemberPwd_args implements org.apache.thrift.TBase<updateMemberPwd_args, updateMemberPwd_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMemberPwd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMemberPwd_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField OLD_PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("oldPwd", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NEW_PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("newPwd", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMemberPwd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMemberPwd_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public String oldPwd; // required
    public String newPwd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      OLD_PWD((short)2, "oldPwd"),
      NEW_PWD((short)3, "newPwd");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // OLD_PWD
            return OLD_PWD;
          case 3: // NEW_PWD
            return NEW_PWD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OLD_PWD, new org.apache.thrift.meta_data.FieldMetaData("oldPwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_PWD, new org.apache.thrift.meta_data.FieldMetaData("newPwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMemberPwd_args.class, metaDataMap);
    }

    public updateMemberPwd_args() {
    }

    public updateMemberPwd_args(
      long memberCode,
      String oldPwd,
      String newPwd)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.oldPwd = oldPwd;
      this.newPwd = newPwd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMemberPwd_args(updateMemberPwd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetOldPwd()) {
        this.oldPwd = other.oldPwd;
      }
      if (other.isSetNewPwd()) {
        this.newPwd = other.newPwd;
      }
    }

    public updateMemberPwd_args deepCopy() {
      return new updateMemberPwd_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.oldPwd = null;
      this.newPwd = null;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public updateMemberPwd_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getOldPwd() {
      return this.oldPwd;
    }

    public updateMemberPwd_args setOldPwd(String oldPwd) {
      this.oldPwd = oldPwd;
      return this;
    }

    public void unsetOldPwd() {
      this.oldPwd = null;
    }

    /** Returns true if field oldPwd is set (has been assigned a value) and false otherwise */
    public boolean isSetOldPwd() {
      return this.oldPwd != null;
    }

    public void setOldPwdIsSet(boolean value) {
      if (!value) {
        this.oldPwd = null;
      }
    }

    public String getNewPwd() {
      return this.newPwd;
    }

    public updateMemberPwd_args setNewPwd(String newPwd) {
      this.newPwd = newPwd;
      return this;
    }

    public void unsetNewPwd() {
      this.newPwd = null;
    }

    /** Returns true if field newPwd is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPwd() {
      return this.newPwd != null;
    }

    public void setNewPwdIsSet(boolean value) {
      if (!value) {
        this.newPwd = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case OLD_PWD:
        if (value == null) {
          unsetOldPwd();
        } else {
          setOldPwd((String)value);
        }
        break;

      case NEW_PWD:
        if (value == null) {
          unsetNewPwd();
        } else {
          setNewPwd((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case OLD_PWD:
        return getOldPwd();

      case NEW_PWD:
        return getNewPwd();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case OLD_PWD:
        return isSetOldPwd();
      case NEW_PWD:
        return isSetNewPwd();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMemberPwd_args)
        return this.equals((updateMemberPwd_args)that);
      return false;
    }

    public boolean equals(updateMemberPwd_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_oldPwd = true && this.isSetOldPwd();
      boolean that_present_oldPwd = true && that.isSetOldPwd();
      if (this_present_oldPwd || that_present_oldPwd) {
        if (!(this_present_oldPwd && that_present_oldPwd))
          return false;
        if (!this.oldPwd.equals(that.oldPwd))
          return false;
      }

      boolean this_present_newPwd = true && this.isSetNewPwd();
      boolean that_present_newPwd = true && that.isSetNewPwd();
      if (this_present_newPwd || that_present_newPwd) {
        if (!(this_present_newPwd && that_present_newPwd))
          return false;
        if (!this.newPwd.equals(that.newPwd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_oldPwd = true && (isSetOldPwd());
      list.add(present_oldPwd);
      if (present_oldPwd)
        list.add(oldPwd);

      boolean present_newPwd = true && (isSetNewPwd());
      list.add(present_newPwd);
      if (present_newPwd)
        list.add(newPwd);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMemberPwd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldPwd()).compareTo(other.isSetOldPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldPwd, other.oldPwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewPwd()).compareTo(other.isSetNewPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPwd, other.newPwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMemberPwd_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldPwd:");
      if (this.oldPwd == null) {
        sb.append("null");
      } else {
        sb.append(this.oldPwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPwd:");
      if (this.newPwd == null) {
        sb.append("null");
      } else {
        sb.append(this.newPwd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMemberPwd_argsStandardSchemeFactory implements SchemeFactory {
      public updateMemberPwd_argsStandardScheme getScheme() {
        return new updateMemberPwd_argsStandardScheme();
      }
    }

    private static class updateMemberPwd_argsStandardScheme extends StandardScheme<updateMemberPwd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMemberPwd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OLD_PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oldPwd = iprot.readString();
                struct.setOldPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NEW_PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newPwd = iprot.readString();
                struct.setNewPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMemberPwd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.oldPwd != null) {
          oprot.writeFieldBegin(OLD_PWD_FIELD_DESC);
          oprot.writeString(struct.oldPwd);
          oprot.writeFieldEnd();
        }
        if (struct.newPwd != null) {
          oprot.writeFieldBegin(NEW_PWD_FIELD_DESC);
          oprot.writeString(struct.newPwd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMemberPwd_argsTupleSchemeFactory implements SchemeFactory {
      public updateMemberPwd_argsTupleScheme getScheme() {
        return new updateMemberPwd_argsTupleScheme();
      }
    }

    private static class updateMemberPwd_argsTupleScheme extends TupleScheme<updateMemberPwd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMemberPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetOldPwd()) {
          optionals.set(1);
        }
        if (struct.isSetNewPwd()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetOldPwd()) {
          oprot.writeString(struct.oldPwd);
        }
        if (struct.isSetNewPwd()) {
          oprot.writeString(struct.newPwd);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMemberPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oldPwd = iprot.readString();
          struct.setOldPwdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.newPwd = iprot.readString();
          struct.setNewPwdIsSet(true);
        }
      }
    }

  }

  public static class updateMemberPwd_result implements org.apache.thrift.TBase<updateMemberPwd_result, updateMemberPwd_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMemberPwd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMemberPwd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMemberPwd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMemberPwd_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMemberPwd_result.class, metaDataMap);
    }

    public updateMemberPwd_result() {
    }

    public updateMemberPwd_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMemberPwd_result(updateMemberPwd_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateMemberPwd_result deepCopy() {
      return new updateMemberPwd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateMemberPwd_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMemberPwd_result)
        return this.equals((updateMemberPwd_result)that);
      return false;
    }

    public boolean equals(updateMemberPwd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMemberPwd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMemberPwd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMemberPwd_resultStandardSchemeFactory implements SchemeFactory {
      public updateMemberPwd_resultStandardScheme getScheme() {
        return new updateMemberPwd_resultStandardScheme();
      }
    }

    private static class updateMemberPwd_resultStandardScheme extends StandardScheme<updateMemberPwd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMemberPwd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMemberPwd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMemberPwd_resultTupleSchemeFactory implements SchemeFactory {
      public updateMemberPwd_resultTupleScheme getScheme() {
        return new updateMemberPwd_resultTupleScheme();
      }
    }

    private static class updateMemberPwd_resultTupleScheme extends TupleScheme<updateMemberPwd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMemberPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMemberPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class resetMemberPwd_args implements org.apache.thrift.TBase<resetMemberPwd_args, resetMemberPwd_args._Fields>, java.io.Serializable, Cloneable, Comparable<resetMemberPwd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resetMemberPwd_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PWD_NEW_FIELD_DESC = new org.apache.thrift.protocol.TField("pwdNew", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resetMemberPwd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resetMemberPwd_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public String pwdNew; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      PWD_NEW((short)2, "pwdNew");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // PWD_NEW
            return PWD_NEW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PWD_NEW, new org.apache.thrift.meta_data.FieldMetaData("pwdNew", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resetMemberPwd_args.class, metaDataMap);
    }

    public resetMemberPwd_args() {
    }

    public resetMemberPwd_args(
      long memberCode,
      String pwdNew)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.pwdNew = pwdNew;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resetMemberPwd_args(resetMemberPwd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetPwdNew()) {
        this.pwdNew = other.pwdNew;
      }
    }

    public resetMemberPwd_args deepCopy() {
      return new resetMemberPwd_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.pwdNew = null;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public resetMemberPwd_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getPwdNew() {
      return this.pwdNew;
    }

    public resetMemberPwd_args setPwdNew(String pwdNew) {
      this.pwdNew = pwdNew;
      return this;
    }

    public void unsetPwdNew() {
      this.pwdNew = null;
    }

    /** Returns true if field pwdNew is set (has been assigned a value) and false otherwise */
    public boolean isSetPwdNew() {
      return this.pwdNew != null;
    }

    public void setPwdNewIsSet(boolean value) {
      if (!value) {
        this.pwdNew = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case PWD_NEW:
        if (value == null) {
          unsetPwdNew();
        } else {
          setPwdNew((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case PWD_NEW:
        return getPwdNew();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case PWD_NEW:
        return isSetPwdNew();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resetMemberPwd_args)
        return this.equals((resetMemberPwd_args)that);
      return false;
    }

    public boolean equals(resetMemberPwd_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_pwdNew = true && this.isSetPwdNew();
      boolean that_present_pwdNew = true && that.isSetPwdNew();
      if (this_present_pwdNew || that_present_pwdNew) {
        if (!(this_present_pwdNew && that_present_pwdNew))
          return false;
        if (!this.pwdNew.equals(that.pwdNew))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_pwdNew = true && (isSetPwdNew());
      list.add(present_pwdNew);
      if (present_pwdNew)
        list.add(pwdNew);

      return list.hashCode();
    }

    @Override
    public int compareTo(resetMemberPwd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPwdNew()).compareTo(other.isSetPwdNew());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPwdNew()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwdNew, other.pwdNew);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resetMemberPwd_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pwdNew:");
      if (this.pwdNew == null) {
        sb.append("null");
      } else {
        sb.append(this.pwdNew);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resetMemberPwd_argsStandardSchemeFactory implements SchemeFactory {
      public resetMemberPwd_argsStandardScheme getScheme() {
        return new resetMemberPwd_argsStandardScheme();
      }
    }

    private static class resetMemberPwd_argsStandardScheme extends StandardScheme<resetMemberPwd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resetMemberPwd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PWD_NEW
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pwdNew = iprot.readString();
                struct.setPwdNewIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resetMemberPwd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.pwdNew != null) {
          oprot.writeFieldBegin(PWD_NEW_FIELD_DESC);
          oprot.writeString(struct.pwdNew);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resetMemberPwd_argsTupleSchemeFactory implements SchemeFactory {
      public resetMemberPwd_argsTupleScheme getScheme() {
        return new resetMemberPwd_argsTupleScheme();
      }
    }

    private static class resetMemberPwd_argsTupleScheme extends TupleScheme<resetMemberPwd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resetMemberPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetPwdNew()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetPwdNew()) {
          oprot.writeString(struct.pwdNew);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resetMemberPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pwdNew = iprot.readString();
          struct.setPwdNewIsSet(true);
        }
      }
    }

  }

  public static class resetMemberPwd_result implements org.apache.thrift.TBase<resetMemberPwd_result, resetMemberPwd_result._Fields>, java.io.Serializable, Cloneable, Comparable<resetMemberPwd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resetMemberPwd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resetMemberPwd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resetMemberPwd_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resetMemberPwd_result.class, metaDataMap);
    }

    public resetMemberPwd_result() {
    }

    public resetMemberPwd_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resetMemberPwd_result(resetMemberPwd_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public resetMemberPwd_result deepCopy() {
      return new resetMemberPwd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public resetMemberPwd_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resetMemberPwd_result)
        return this.equals((resetMemberPwd_result)that);
      return false;
    }

    public boolean equals(resetMemberPwd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(resetMemberPwd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resetMemberPwd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resetMemberPwd_resultStandardSchemeFactory implements SchemeFactory {
      public resetMemberPwd_resultStandardScheme getScheme() {
        return new resetMemberPwd_resultStandardScheme();
      }
    }

    private static class resetMemberPwd_resultStandardScheme extends StandardScheme<resetMemberPwd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resetMemberPwd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resetMemberPwd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resetMemberPwd_resultTupleSchemeFactory implements SchemeFactory {
      public resetMemberPwd_resultTupleScheme getScheme() {
        return new resetMemberPwd_resultTupleScheme();
      }
    }

    private static class resetMemberPwd_resultTupleScheme extends TupleScheme<resetMemberPwd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resetMemberPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resetMemberPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loginUnion_args implements org.apache.thrift.TBase<loginUnion_args, loginUnion_args._Fields>, java.io.Serializable, Cloneable, Comparable<loginUnion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginUnion_args");

    private static final org.apache.thrift.protocol.TField BANK_ORG_FIELD_DESC = new org.apache.thrift.protocol.TField("bankOrg", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField IDNETIFY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("idnetifyNo", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USER_BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userBankId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CREATE_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("createChannel", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField IDENTIFY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("identifyType", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loginUnion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loginUnion_argsTupleSchemeFactory());
    }

    public String bankOrg; // required
    public String mobile; // required
    public String idnetifyNo; // required
    public String userBankId; // required
    public String createChannel; // required
    public String identifyType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_ORG((short)1, "bankOrg"),
      MOBILE((short)2, "mobile"),
      IDNETIFY_NO((short)3, "idnetifyNo"),
      USER_BANK_ID((short)4, "userBankId"),
      CREATE_CHANNEL((short)5, "createChannel"),
      IDENTIFY_TYPE((short)6, "identifyType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_ORG
            return BANK_ORG;
          case 2: // MOBILE
            return MOBILE;
          case 3: // IDNETIFY_NO
            return IDNETIFY_NO;
          case 4: // USER_BANK_ID
            return USER_BANK_ID;
          case 5: // CREATE_CHANNEL
            return CREATE_CHANNEL;
          case 6: // IDENTIFY_TYPE
            return IDENTIFY_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_ORG, new org.apache.thrift.meta_data.FieldMetaData("bankOrg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IDNETIFY_NO, new org.apache.thrift.meta_data.FieldMetaData("idnetifyNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("userBankId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CREATE_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("createChannel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IDENTIFY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("identifyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginUnion_args.class, metaDataMap);
    }

    public loginUnion_args() {
    }

    public loginUnion_args(
      String bankOrg,
      String mobile,
      String idnetifyNo,
      String userBankId,
      String createChannel,
      String identifyType)
    {
      this();
      this.bankOrg = bankOrg;
      this.mobile = mobile;
      this.idnetifyNo = idnetifyNo;
      this.userBankId = userBankId;
      this.createChannel = createChannel;
      this.identifyType = identifyType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginUnion_args(loginUnion_args other) {
      if (other.isSetBankOrg()) {
        this.bankOrg = other.bankOrg;
      }
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
      if (other.isSetIdnetifyNo()) {
        this.idnetifyNo = other.idnetifyNo;
      }
      if (other.isSetUserBankId()) {
        this.userBankId = other.userBankId;
      }
      if (other.isSetCreateChannel()) {
        this.createChannel = other.createChannel;
      }
      if (other.isSetIdentifyType()) {
        this.identifyType = other.identifyType;
      }
    }

    public loginUnion_args deepCopy() {
      return new loginUnion_args(this);
    }

    @Override
    public void clear() {
      this.bankOrg = null;
      this.mobile = null;
      this.idnetifyNo = null;
      this.userBankId = null;
      this.createChannel = null;
      this.identifyType = null;
    }

    public String getBankOrg() {
      return this.bankOrg;
    }

    public loginUnion_args setBankOrg(String bankOrg) {
      this.bankOrg = bankOrg;
      return this;
    }

    public void unsetBankOrg() {
      this.bankOrg = null;
    }

    /** Returns true if field bankOrg is set (has been assigned a value) and false otherwise */
    public boolean isSetBankOrg() {
      return this.bankOrg != null;
    }

    public void setBankOrgIsSet(boolean value) {
      if (!value) {
        this.bankOrg = null;
      }
    }

    public String getMobile() {
      return this.mobile;
    }

    public loginUnion_args setMobile(String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public String getIdnetifyNo() {
      return this.idnetifyNo;
    }

    public loginUnion_args setIdnetifyNo(String idnetifyNo) {
      this.idnetifyNo = idnetifyNo;
      return this;
    }

    public void unsetIdnetifyNo() {
      this.idnetifyNo = null;
    }

    /** Returns true if field idnetifyNo is set (has been assigned a value) and false otherwise */
    public boolean isSetIdnetifyNo() {
      return this.idnetifyNo != null;
    }

    public void setIdnetifyNoIsSet(boolean value) {
      if (!value) {
        this.idnetifyNo = null;
      }
    }

    public String getUserBankId() {
      return this.userBankId;
    }

    public loginUnion_args setUserBankId(String userBankId) {
      this.userBankId = userBankId;
      return this;
    }

    public void unsetUserBankId() {
      this.userBankId = null;
    }

    /** Returns true if field userBankId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserBankId() {
      return this.userBankId != null;
    }

    public void setUserBankIdIsSet(boolean value) {
      if (!value) {
        this.userBankId = null;
      }
    }

    public String getCreateChannel() {
      return this.createChannel;
    }

    public loginUnion_args setCreateChannel(String createChannel) {
      this.createChannel = createChannel;
      return this;
    }

    public void unsetCreateChannel() {
      this.createChannel = null;
    }

    /** Returns true if field createChannel is set (has been assigned a value) and false otherwise */
    public boolean isSetCreateChannel() {
      return this.createChannel != null;
    }

    public void setCreateChannelIsSet(boolean value) {
      if (!value) {
        this.createChannel = null;
      }
    }

    public String getIdentifyType() {
      return this.identifyType;
    }

    public loginUnion_args setIdentifyType(String identifyType) {
      this.identifyType = identifyType;
      return this;
    }

    public void unsetIdentifyType() {
      this.identifyType = null;
    }

    /** Returns true if field identifyType is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentifyType() {
      return this.identifyType != null;
    }

    public void setIdentifyTypeIsSet(boolean value) {
      if (!value) {
        this.identifyType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_ORG:
        if (value == null) {
          unsetBankOrg();
        } else {
          setBankOrg((String)value);
        }
        break;

      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((String)value);
        }
        break;

      case IDNETIFY_NO:
        if (value == null) {
          unsetIdnetifyNo();
        } else {
          setIdnetifyNo((String)value);
        }
        break;

      case USER_BANK_ID:
        if (value == null) {
          unsetUserBankId();
        } else {
          setUserBankId((String)value);
        }
        break;

      case CREATE_CHANNEL:
        if (value == null) {
          unsetCreateChannel();
        } else {
          setCreateChannel((String)value);
        }
        break;

      case IDENTIFY_TYPE:
        if (value == null) {
          unsetIdentifyType();
        } else {
          setIdentifyType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_ORG:
        return getBankOrg();

      case MOBILE:
        return getMobile();

      case IDNETIFY_NO:
        return getIdnetifyNo();

      case USER_BANK_ID:
        return getUserBankId();

      case CREATE_CHANNEL:
        return getCreateChannel();

      case IDENTIFY_TYPE:
        return getIdentifyType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_ORG:
        return isSetBankOrg();
      case MOBILE:
        return isSetMobile();
      case IDNETIFY_NO:
        return isSetIdnetifyNo();
      case USER_BANK_ID:
        return isSetUserBankId();
      case CREATE_CHANNEL:
        return isSetCreateChannel();
      case IDENTIFY_TYPE:
        return isSetIdentifyType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginUnion_args)
        return this.equals((loginUnion_args)that);
      return false;
    }

    public boolean equals(loginUnion_args that) {
      if (that == null)
        return false;

      boolean this_present_bankOrg = true && this.isSetBankOrg();
      boolean that_present_bankOrg = true && that.isSetBankOrg();
      if (this_present_bankOrg || that_present_bankOrg) {
        if (!(this_present_bankOrg && that_present_bankOrg))
          return false;
        if (!this.bankOrg.equals(that.bankOrg))
          return false;
      }

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      boolean this_present_idnetifyNo = true && this.isSetIdnetifyNo();
      boolean that_present_idnetifyNo = true && that.isSetIdnetifyNo();
      if (this_present_idnetifyNo || that_present_idnetifyNo) {
        if (!(this_present_idnetifyNo && that_present_idnetifyNo))
          return false;
        if (!this.idnetifyNo.equals(that.idnetifyNo))
          return false;
      }

      boolean this_present_userBankId = true && this.isSetUserBankId();
      boolean that_present_userBankId = true && that.isSetUserBankId();
      if (this_present_userBankId || that_present_userBankId) {
        if (!(this_present_userBankId && that_present_userBankId))
          return false;
        if (!this.userBankId.equals(that.userBankId))
          return false;
      }

      boolean this_present_createChannel = true && this.isSetCreateChannel();
      boolean that_present_createChannel = true && that.isSetCreateChannel();
      if (this_present_createChannel || that_present_createChannel) {
        if (!(this_present_createChannel && that_present_createChannel))
          return false;
        if (!this.createChannel.equals(that.createChannel))
          return false;
      }

      boolean this_present_identifyType = true && this.isSetIdentifyType();
      boolean that_present_identifyType = true && that.isSetIdentifyType();
      if (this_present_identifyType || that_present_identifyType) {
        if (!(this_present_identifyType && that_present_identifyType))
          return false;
        if (!this.identifyType.equals(that.identifyType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bankOrg = true && (isSetBankOrg());
      list.add(present_bankOrg);
      if (present_bankOrg)
        list.add(bankOrg);

      boolean present_mobile = true && (isSetMobile());
      list.add(present_mobile);
      if (present_mobile)
        list.add(mobile);

      boolean present_idnetifyNo = true && (isSetIdnetifyNo());
      list.add(present_idnetifyNo);
      if (present_idnetifyNo)
        list.add(idnetifyNo);

      boolean present_userBankId = true && (isSetUserBankId());
      list.add(present_userBankId);
      if (present_userBankId)
        list.add(userBankId);

      boolean present_createChannel = true && (isSetCreateChannel());
      list.add(present_createChannel);
      if (present_createChannel)
        list.add(createChannel);

      boolean present_identifyType = true && (isSetIdentifyType());
      list.add(present_identifyType);
      if (present_identifyType)
        list.add(identifyType);

      return list.hashCode();
    }

    @Override
    public int compareTo(loginUnion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankOrg()).compareTo(other.isSetBankOrg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankOrg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankOrg, other.bankOrg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdnetifyNo()).compareTo(other.isSetIdnetifyNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdnetifyNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idnetifyNo, other.idnetifyNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserBankId()).compareTo(other.isSetUserBankId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserBankId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBankId, other.userBankId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCreateChannel()).compareTo(other.isSetCreateChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreateChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createChannel, other.createChannel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdentifyType()).compareTo(other.isSetIdentifyType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentifyType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifyType, other.identifyType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginUnion_args(");
      boolean first = true;

      sb.append("bankOrg:");
      if (this.bankOrg == null) {
        sb.append("null");
      } else {
        sb.append(this.bankOrg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("idnetifyNo:");
      if (this.idnetifyNo == null) {
        sb.append("null");
      } else {
        sb.append(this.idnetifyNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userBankId:");
      if (this.userBankId == null) {
        sb.append("null");
      } else {
        sb.append(this.userBankId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("createChannel:");
      if (this.createChannel == null) {
        sb.append("null");
      } else {
        sb.append(this.createChannel);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("identifyType:");
      if (this.identifyType == null) {
        sb.append("null");
      } else {
        sb.append(this.identifyType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginUnion_argsStandardSchemeFactory implements SchemeFactory {
      public loginUnion_argsStandardScheme getScheme() {
        return new loginUnion_argsStandardScheme();
      }
    }

    private static class loginUnion_argsStandardScheme extends StandardScheme<loginUnion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginUnion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_ORG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankOrg = iprot.readString();
                struct.setBankOrgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IDNETIFY_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.idnetifyNo = iprot.readString();
                struct.setIdnetifyNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_BANK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userBankId = iprot.readString();
                struct.setUserBankIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CREATE_CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.createChannel = iprot.readString();
                struct.setCreateChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // IDENTIFY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.identifyType = iprot.readString();
                struct.setIdentifyTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginUnion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankOrg != null) {
          oprot.writeFieldBegin(BANK_ORG_FIELD_DESC);
          oprot.writeString(struct.bankOrg);
          oprot.writeFieldEnd();
        }
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        if (struct.idnetifyNo != null) {
          oprot.writeFieldBegin(IDNETIFY_NO_FIELD_DESC);
          oprot.writeString(struct.idnetifyNo);
          oprot.writeFieldEnd();
        }
        if (struct.userBankId != null) {
          oprot.writeFieldBegin(USER_BANK_ID_FIELD_DESC);
          oprot.writeString(struct.userBankId);
          oprot.writeFieldEnd();
        }
        if (struct.createChannel != null) {
          oprot.writeFieldBegin(CREATE_CHANNEL_FIELD_DESC);
          oprot.writeString(struct.createChannel);
          oprot.writeFieldEnd();
        }
        if (struct.identifyType != null) {
          oprot.writeFieldBegin(IDENTIFY_TYPE_FIELD_DESC);
          oprot.writeString(struct.identifyType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginUnion_argsTupleSchemeFactory implements SchemeFactory {
      public loginUnion_argsTupleScheme getScheme() {
        return new loginUnion_argsTupleScheme();
      }
    }

    private static class loginUnion_argsTupleScheme extends TupleScheme<loginUnion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginUnion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankOrg()) {
          optionals.set(0);
        }
        if (struct.isSetMobile()) {
          optionals.set(1);
        }
        if (struct.isSetIdnetifyNo()) {
          optionals.set(2);
        }
        if (struct.isSetUserBankId()) {
          optionals.set(3);
        }
        if (struct.isSetCreateChannel()) {
          optionals.set(4);
        }
        if (struct.isSetIdentifyType()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetBankOrg()) {
          oprot.writeString(struct.bankOrg);
        }
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
        if (struct.isSetIdnetifyNo()) {
          oprot.writeString(struct.idnetifyNo);
        }
        if (struct.isSetUserBankId()) {
          oprot.writeString(struct.userBankId);
        }
        if (struct.isSetCreateChannel()) {
          oprot.writeString(struct.createChannel);
        }
        if (struct.isSetIdentifyType()) {
          oprot.writeString(struct.identifyType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginUnion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.bankOrg = iprot.readString();
          struct.setBankOrgIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
        if (incoming.get(2)) {
          struct.idnetifyNo = iprot.readString();
          struct.setIdnetifyNoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.userBankId = iprot.readString();
          struct.setUserBankIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.createChannel = iprot.readString();
          struct.setCreateChannelIsSet(true);
        }
        if (incoming.get(5)) {
          struct.identifyType = iprot.readString();
          struct.setIdentifyTypeIsSet(true);
        }
      }
    }

  }

  public static class loginUnion_result implements org.apache.thrift.TBase<loginUnion_result, loginUnion_result._Fields>, java.io.Serializable, Cloneable, Comparable<loginUnion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginUnion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loginUnion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loginUnion_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.member.UserEngineVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.member.UserEngineVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginUnion_result.class, metaDataMap);
    }

    public loginUnion_result() {
    }

    public loginUnion_result(
      com.froad.thrift.vo.member.UserEngineVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginUnion_result(loginUnion_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.member.UserEngineVo(other.success);
      }
    }

    public loginUnion_result deepCopy() {
      return new loginUnion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.member.UserEngineVo getSuccess() {
      return this.success;
    }

    public loginUnion_result setSuccess(com.froad.thrift.vo.member.UserEngineVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.member.UserEngineVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginUnion_result)
        return this.equals((loginUnion_result)that);
      return false;
    }

    public boolean equals(loginUnion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loginUnion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginUnion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginUnion_resultStandardSchemeFactory implements SchemeFactory {
      public loginUnion_resultStandardScheme getScheme() {
        return new loginUnion_resultStandardScheme();
      }
    }

    private static class loginUnion_resultStandardScheme extends StandardScheme<loginUnion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginUnion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.member.UserEngineVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginUnion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginUnion_resultTupleSchemeFactory implements SchemeFactory {
      public loginUnion_resultTupleScheme getScheme() {
        return new loginUnion_resultTupleScheme();
      }
    }

    private static class loginUnion_resultTupleScheme extends TupleScheme<loginUnion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginUnion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginUnion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.member.UserEngineVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isMemberSetPayPwd_args implements org.apache.thrift.TBase<isMemberSetPayPwd_args, isMemberSetPayPwd_args._Fields>, java.io.Serializable, Cloneable, Comparable<isMemberSetPayPwd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isMemberSetPayPwd_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isMemberSetPayPwd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isMemberSetPayPwd_argsTupleSchemeFactory());
    }

    public long memberCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isMemberSetPayPwd_args.class, metaDataMap);
    }

    public isMemberSetPayPwd_args() {
    }

    public isMemberSetPayPwd_args(
      long memberCode)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isMemberSetPayPwd_args(isMemberSetPayPwd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
    }

    public isMemberSetPayPwd_args deepCopy() {
      return new isMemberSetPayPwd_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public isMemberSetPayPwd_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isMemberSetPayPwd_args)
        return this.equals((isMemberSetPayPwd_args)that);
      return false;
    }

    public boolean equals(isMemberSetPayPwd_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(isMemberSetPayPwd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isMemberSetPayPwd_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isMemberSetPayPwd_argsStandardSchemeFactory implements SchemeFactory {
      public isMemberSetPayPwd_argsStandardScheme getScheme() {
        return new isMemberSetPayPwd_argsStandardScheme();
      }
    }

    private static class isMemberSetPayPwd_argsStandardScheme extends StandardScheme<isMemberSetPayPwd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isMemberSetPayPwd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isMemberSetPayPwd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isMemberSetPayPwd_argsTupleSchemeFactory implements SchemeFactory {
      public isMemberSetPayPwd_argsTupleScheme getScheme() {
        return new isMemberSetPayPwd_argsTupleScheme();
      }
    }

    private static class isMemberSetPayPwd_argsTupleScheme extends TupleScheme<isMemberSetPayPwd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isMemberSetPayPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isMemberSetPayPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
      }
    }

  }

  public static class isMemberSetPayPwd_result implements org.apache.thrift.TBase<isMemberSetPayPwd_result, isMemberSetPayPwd_result._Fields>, java.io.Serializable, Cloneable, Comparable<isMemberSetPayPwd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isMemberSetPayPwd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isMemberSetPayPwd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isMemberSetPayPwd_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isMemberSetPayPwd_result.class, metaDataMap);
    }

    public isMemberSetPayPwd_result() {
    }

    public isMemberSetPayPwd_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isMemberSetPayPwd_result(isMemberSetPayPwd_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public isMemberSetPayPwd_result deepCopy() {
      return new isMemberSetPayPwd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public isMemberSetPayPwd_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isMemberSetPayPwd_result)
        return this.equals((isMemberSetPayPwd_result)that);
      return false;
    }

    public boolean equals(isMemberSetPayPwd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isMemberSetPayPwd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isMemberSetPayPwd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isMemberSetPayPwd_resultStandardSchemeFactory implements SchemeFactory {
      public isMemberSetPayPwd_resultStandardScheme getScheme() {
        return new isMemberSetPayPwd_resultStandardScheme();
      }
    }

    private static class isMemberSetPayPwd_resultStandardScheme extends StandardScheme<isMemberSetPayPwd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isMemberSetPayPwd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isMemberSetPayPwd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isMemberSetPayPwd_resultTupleSchemeFactory implements SchemeFactory {
      public isMemberSetPayPwd_resultTupleScheme getScheme() {
        return new isMemberSetPayPwd_resultTupleScheme();
      }
    }

    private static class isMemberSetPayPwd_resultTupleScheme extends TupleScheme<isMemberSetPayPwd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isMemberSetPayPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isMemberSetPayPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class verifyMemberPayPwd_args implements org.apache.thrift.TBase<verifyMemberPayPwd_args, verifyMemberPayPwd_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyMemberPayPwd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyMemberPayPwd_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CIPHERTEXT_PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("ciphertextPwd", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CREATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("createSource", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyMemberPayPwd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyMemberPayPwd_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public String ciphertextPwd; // required
    public String createSource; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      CIPHERTEXT_PWD((short)2, "ciphertextPwd"),
      CREATE_SOURCE((short)3, "createSource");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // CIPHERTEXT_PWD
            return CIPHERTEXT_PWD;
          case 3: // CREATE_SOURCE
            return CREATE_SOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CIPHERTEXT_PWD, new org.apache.thrift.meta_data.FieldMetaData("ciphertextPwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CREATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("createSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyMemberPayPwd_args.class, metaDataMap);
    }

    public verifyMemberPayPwd_args() {
    }

    public verifyMemberPayPwd_args(
      long memberCode,
      String ciphertextPwd,
      String createSource)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.ciphertextPwd = ciphertextPwd;
      this.createSource = createSource;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyMemberPayPwd_args(verifyMemberPayPwd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetCiphertextPwd()) {
        this.ciphertextPwd = other.ciphertextPwd;
      }
      if (other.isSetCreateSource()) {
        this.createSource = other.createSource;
      }
    }

    public verifyMemberPayPwd_args deepCopy() {
      return new verifyMemberPayPwd_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.ciphertextPwd = null;
      this.createSource = null;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public verifyMemberPayPwd_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getCiphertextPwd() {
      return this.ciphertextPwd;
    }

    public verifyMemberPayPwd_args setCiphertextPwd(String ciphertextPwd) {
      this.ciphertextPwd = ciphertextPwd;
      return this;
    }

    public void unsetCiphertextPwd() {
      this.ciphertextPwd = null;
    }

    /** Returns true if field ciphertextPwd is set (has been assigned a value) and false otherwise */
    public boolean isSetCiphertextPwd() {
      return this.ciphertextPwd != null;
    }

    public void setCiphertextPwdIsSet(boolean value) {
      if (!value) {
        this.ciphertextPwd = null;
      }
    }

    public String getCreateSource() {
      return this.createSource;
    }

    public verifyMemberPayPwd_args setCreateSource(String createSource) {
      this.createSource = createSource;
      return this;
    }

    public void unsetCreateSource() {
      this.createSource = null;
    }

    /** Returns true if field createSource is set (has been assigned a value) and false otherwise */
    public boolean isSetCreateSource() {
      return this.createSource != null;
    }

    public void setCreateSourceIsSet(boolean value) {
      if (!value) {
        this.createSource = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case CIPHERTEXT_PWD:
        if (value == null) {
          unsetCiphertextPwd();
        } else {
          setCiphertextPwd((String)value);
        }
        break;

      case CREATE_SOURCE:
        if (value == null) {
          unsetCreateSource();
        } else {
          setCreateSource((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case CIPHERTEXT_PWD:
        return getCiphertextPwd();

      case CREATE_SOURCE:
        return getCreateSource();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case CIPHERTEXT_PWD:
        return isSetCiphertextPwd();
      case CREATE_SOURCE:
        return isSetCreateSource();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyMemberPayPwd_args)
        return this.equals((verifyMemberPayPwd_args)that);
      return false;
    }

    public boolean equals(verifyMemberPayPwd_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_ciphertextPwd = true && this.isSetCiphertextPwd();
      boolean that_present_ciphertextPwd = true && that.isSetCiphertextPwd();
      if (this_present_ciphertextPwd || that_present_ciphertextPwd) {
        if (!(this_present_ciphertextPwd && that_present_ciphertextPwd))
          return false;
        if (!this.ciphertextPwd.equals(that.ciphertextPwd))
          return false;
      }

      boolean this_present_createSource = true && this.isSetCreateSource();
      boolean that_present_createSource = true && that.isSetCreateSource();
      if (this_present_createSource || that_present_createSource) {
        if (!(this_present_createSource && that_present_createSource))
          return false;
        if (!this.createSource.equals(that.createSource))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_ciphertextPwd = true && (isSetCiphertextPwd());
      list.add(present_ciphertextPwd);
      if (present_ciphertextPwd)
        list.add(ciphertextPwd);

      boolean present_createSource = true && (isSetCreateSource());
      list.add(present_createSource);
      if (present_createSource)
        list.add(createSource);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyMemberPayPwd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCiphertextPwd()).compareTo(other.isSetCiphertextPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCiphertextPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ciphertextPwd, other.ciphertextPwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCreateSource()).compareTo(other.isSetCreateSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreateSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createSource, other.createSource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyMemberPayPwd_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ciphertextPwd:");
      if (this.ciphertextPwd == null) {
        sb.append("null");
      } else {
        sb.append(this.ciphertextPwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("createSource:");
      if (this.createSource == null) {
        sb.append("null");
      } else {
        sb.append(this.createSource);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyMemberPayPwd_argsStandardSchemeFactory implements SchemeFactory {
      public verifyMemberPayPwd_argsStandardScheme getScheme() {
        return new verifyMemberPayPwd_argsStandardScheme();
      }
    }

    private static class verifyMemberPayPwd_argsStandardScheme extends StandardScheme<verifyMemberPayPwd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyMemberPayPwd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CIPHERTEXT_PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ciphertextPwd = iprot.readString();
                struct.setCiphertextPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CREATE_SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.createSource = iprot.readString();
                struct.setCreateSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyMemberPayPwd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.ciphertextPwd != null) {
          oprot.writeFieldBegin(CIPHERTEXT_PWD_FIELD_DESC);
          oprot.writeString(struct.ciphertextPwd);
          oprot.writeFieldEnd();
        }
        if (struct.createSource != null) {
          oprot.writeFieldBegin(CREATE_SOURCE_FIELD_DESC);
          oprot.writeString(struct.createSource);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyMemberPayPwd_argsTupleSchemeFactory implements SchemeFactory {
      public verifyMemberPayPwd_argsTupleScheme getScheme() {
        return new verifyMemberPayPwd_argsTupleScheme();
      }
    }

    private static class verifyMemberPayPwd_argsTupleScheme extends TupleScheme<verifyMemberPayPwd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyMemberPayPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetCiphertextPwd()) {
          optionals.set(1);
        }
        if (struct.isSetCreateSource()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetCiphertextPwd()) {
          oprot.writeString(struct.ciphertextPwd);
        }
        if (struct.isSetCreateSource()) {
          oprot.writeString(struct.createSource);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyMemberPayPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ciphertextPwd = iprot.readString();
          struct.setCiphertextPwdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.createSource = iprot.readString();
          struct.setCreateSourceIsSet(true);
        }
      }
    }

  }

  public static class verifyMemberPayPwd_result implements org.apache.thrift.TBase<verifyMemberPayPwd_result, verifyMemberPayPwd_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyMemberPayPwd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyMemberPayPwd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyMemberPayPwd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyMemberPayPwd_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyMemberPayPwd_result.class, metaDataMap);
    }

    public verifyMemberPayPwd_result() {
    }

    public verifyMemberPayPwd_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyMemberPayPwd_result(verifyMemberPayPwd_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public verifyMemberPayPwd_result deepCopy() {
      return new verifyMemberPayPwd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public verifyMemberPayPwd_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyMemberPayPwd_result)
        return this.equals((verifyMemberPayPwd_result)that);
      return false;
    }

    public boolean equals(verifyMemberPayPwd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyMemberPayPwd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyMemberPayPwd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyMemberPayPwd_resultStandardSchemeFactory implements SchemeFactory {
      public verifyMemberPayPwd_resultStandardScheme getScheme() {
        return new verifyMemberPayPwd_resultStandardScheme();
      }
    }

    private static class verifyMemberPayPwd_resultStandardScheme extends StandardScheme<verifyMemberPayPwd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyMemberPayPwd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyMemberPayPwd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyMemberPayPwd_resultTupleSchemeFactory implements SchemeFactory {
      public verifyMemberPayPwd_resultTupleScheme getScheme() {
        return new verifyMemberPayPwd_resultTupleScheme();
      }
    }

    private static class verifyMemberPayPwd_resultTupleScheme extends TupleScheme<verifyMemberPayPwd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyMemberPayPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyMemberPayPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isMemberSetQuestion_args implements org.apache.thrift.TBase<isMemberSetQuestion_args, isMemberSetQuestion_args._Fields>, java.io.Serializable, Cloneable, Comparable<isMemberSetQuestion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isMemberSetQuestion_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isMemberSetQuestion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isMemberSetQuestion_argsTupleSchemeFactory());
    }

    public long memberCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isMemberSetQuestion_args.class, metaDataMap);
    }

    public isMemberSetQuestion_args() {
    }

    public isMemberSetQuestion_args(
      long memberCode)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isMemberSetQuestion_args(isMemberSetQuestion_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
    }

    public isMemberSetQuestion_args deepCopy() {
      return new isMemberSetQuestion_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public isMemberSetQuestion_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isMemberSetQuestion_args)
        return this.equals((isMemberSetQuestion_args)that);
      return false;
    }

    public boolean equals(isMemberSetQuestion_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(isMemberSetQuestion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isMemberSetQuestion_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isMemberSetQuestion_argsStandardSchemeFactory implements SchemeFactory {
      public isMemberSetQuestion_argsStandardScheme getScheme() {
        return new isMemberSetQuestion_argsStandardScheme();
      }
    }

    private static class isMemberSetQuestion_argsStandardScheme extends StandardScheme<isMemberSetQuestion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isMemberSetQuestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isMemberSetQuestion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isMemberSetQuestion_argsTupleSchemeFactory implements SchemeFactory {
      public isMemberSetQuestion_argsTupleScheme getScheme() {
        return new isMemberSetQuestion_argsTupleScheme();
      }
    }

    private static class isMemberSetQuestion_argsTupleScheme extends TupleScheme<isMemberSetQuestion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isMemberSetQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isMemberSetQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
      }
    }

  }

  public static class isMemberSetQuestion_result implements org.apache.thrift.TBase<isMemberSetQuestion_result, isMemberSetQuestion_result._Fields>, java.io.Serializable, Cloneable, Comparable<isMemberSetQuestion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isMemberSetQuestion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isMemberSetQuestion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isMemberSetQuestion_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isMemberSetQuestion_result.class, metaDataMap);
    }

    public isMemberSetQuestion_result() {
    }

    public isMemberSetQuestion_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isMemberSetQuestion_result(isMemberSetQuestion_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public isMemberSetQuestion_result deepCopy() {
      return new isMemberSetQuestion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public isMemberSetQuestion_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isMemberSetQuestion_result)
        return this.equals((isMemberSetQuestion_result)that);
      return false;
    }

    public boolean equals(isMemberSetQuestion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isMemberSetQuestion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isMemberSetQuestion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isMemberSetQuestion_resultStandardSchemeFactory implements SchemeFactory {
      public isMemberSetQuestion_resultStandardScheme getScheme() {
        return new isMemberSetQuestion_resultStandardScheme();
      }
    }

    private static class isMemberSetQuestion_resultStandardScheme extends StandardScheme<isMemberSetQuestion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isMemberSetQuestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isMemberSetQuestion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isMemberSetQuestion_resultTupleSchemeFactory implements SchemeFactory {
      public isMemberSetQuestion_resultTupleScheme getScheme() {
        return new isMemberSetQuestion_resultTupleScheme();
      }
    }

    private static class isMemberSetQuestion_resultTupleScheme extends TupleScheme<isMemberSetQuestion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isMemberSetQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isMemberSetQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class selectPreinstallQuestion_args implements org.apache.thrift.TBase<selectPreinstallQuestion_args, selectPreinstallQuestion_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectPreinstallQuestion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectPreinstallQuestion_args");

    private static final org.apache.thrift.protocol.TField QUESTION_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("questionAmount", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectPreinstallQuestion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectPreinstallQuestion_argsTupleSchemeFactory());
    }

    public long questionAmount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUESTION_AMOUNT((short)1, "questionAmount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUESTION_AMOUNT
            return QUESTION_AMOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __QUESTIONAMOUNT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUESTION_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("questionAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectPreinstallQuestion_args.class, metaDataMap);
    }

    public selectPreinstallQuestion_args() {
    }

    public selectPreinstallQuestion_args(
      long questionAmount)
    {
      this();
      this.questionAmount = questionAmount;
      setQuestionAmountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectPreinstallQuestion_args(selectPreinstallQuestion_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.questionAmount = other.questionAmount;
    }

    public selectPreinstallQuestion_args deepCopy() {
      return new selectPreinstallQuestion_args(this);
    }

    @Override
    public void clear() {
      setQuestionAmountIsSet(false);
      this.questionAmount = 0;
    }

    public long getQuestionAmount() {
      return this.questionAmount;
    }

    public selectPreinstallQuestion_args setQuestionAmount(long questionAmount) {
      this.questionAmount = questionAmount;
      setQuestionAmountIsSet(true);
      return this;
    }

    public void unsetQuestionAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUESTIONAMOUNT_ISSET_ID);
    }

    /** Returns true if field questionAmount is set (has been assigned a value) and false otherwise */
    public boolean isSetQuestionAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __QUESTIONAMOUNT_ISSET_ID);
    }

    public void setQuestionAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUESTIONAMOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUESTION_AMOUNT:
        if (value == null) {
          unsetQuestionAmount();
        } else {
          setQuestionAmount((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUESTION_AMOUNT:
        return Long.valueOf(getQuestionAmount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUESTION_AMOUNT:
        return isSetQuestionAmount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectPreinstallQuestion_args)
        return this.equals((selectPreinstallQuestion_args)that);
      return false;
    }

    public boolean equals(selectPreinstallQuestion_args that) {
      if (that == null)
        return false;

      boolean this_present_questionAmount = true;
      boolean that_present_questionAmount = true;
      if (this_present_questionAmount || that_present_questionAmount) {
        if (!(this_present_questionAmount && that_present_questionAmount))
          return false;
        if (this.questionAmount != that.questionAmount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_questionAmount = true;
      list.add(present_questionAmount);
      if (present_questionAmount)
        list.add(questionAmount);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectPreinstallQuestion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuestionAmount()).compareTo(other.isSetQuestionAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuestionAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionAmount, other.questionAmount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectPreinstallQuestion_args(");
      boolean first = true;

      sb.append("questionAmount:");
      sb.append(this.questionAmount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectPreinstallQuestion_argsStandardSchemeFactory implements SchemeFactory {
      public selectPreinstallQuestion_argsStandardScheme getScheme() {
        return new selectPreinstallQuestion_argsStandardScheme();
      }
    }

    private static class selectPreinstallQuestion_argsStandardScheme extends StandardScheme<selectPreinstallQuestion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectPreinstallQuestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUESTION_AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.questionAmount = iprot.readI64();
                struct.setQuestionAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectPreinstallQuestion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(QUESTION_AMOUNT_FIELD_DESC);
        oprot.writeI64(struct.questionAmount);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectPreinstallQuestion_argsTupleSchemeFactory implements SchemeFactory {
      public selectPreinstallQuestion_argsTupleScheme getScheme() {
        return new selectPreinstallQuestion_argsTupleScheme();
      }
    }

    private static class selectPreinstallQuestion_argsTupleScheme extends TupleScheme<selectPreinstallQuestion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectPreinstallQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuestionAmount()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuestionAmount()) {
          oprot.writeI64(struct.questionAmount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectPreinstallQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.questionAmount = iprot.readI64();
          struct.setQuestionAmountIsSet(true);
        }
      }
    }

  }

  public static class selectPreinstallQuestion_result implements org.apache.thrift.TBase<selectPreinstallQuestion_result, selectPreinstallQuestion_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectPreinstallQuestion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectPreinstallQuestion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectPreinstallQuestion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectPreinstallQuestion_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.member.UserEnginQuestionResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.member.UserEnginQuestionResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectPreinstallQuestion_result.class, metaDataMap);
    }

    public selectPreinstallQuestion_result() {
    }

    public selectPreinstallQuestion_result(
      com.froad.thrift.vo.member.UserEnginQuestionResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectPreinstallQuestion_result(selectPreinstallQuestion_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.member.UserEnginQuestionResultVo(other.success);
      }
    }

    public selectPreinstallQuestion_result deepCopy() {
      return new selectPreinstallQuestion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.member.UserEnginQuestionResultVo getSuccess() {
      return this.success;
    }

    public selectPreinstallQuestion_result setSuccess(com.froad.thrift.vo.member.UserEnginQuestionResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.member.UserEnginQuestionResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectPreinstallQuestion_result)
        return this.equals((selectPreinstallQuestion_result)that);
      return false;
    }

    public boolean equals(selectPreinstallQuestion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectPreinstallQuestion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectPreinstallQuestion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectPreinstallQuestion_resultStandardSchemeFactory implements SchemeFactory {
      public selectPreinstallQuestion_resultStandardScheme getScheme() {
        return new selectPreinstallQuestion_resultStandardScheme();
      }
    }

    private static class selectPreinstallQuestion_resultStandardScheme extends StandardScheme<selectPreinstallQuestion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectPreinstallQuestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.member.UserEnginQuestionResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectPreinstallQuestion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectPreinstallQuestion_resultTupleSchemeFactory implements SchemeFactory {
      public selectPreinstallQuestion_resultTupleScheme getScheme() {
        return new selectPreinstallQuestion_resultTupleScheme();
      }
    }

    private static class selectPreinstallQuestion_resultTupleScheme extends TupleScheme<selectPreinstallQuestion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectPreinstallQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectPreinstallQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.member.UserEnginQuestionResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class selectMemberSetQuestion_args implements org.apache.thrift.TBase<selectMemberSetQuestion_args, selectMemberSetQuestion_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectMemberSetQuestion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectMemberSetQuestion_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectMemberSetQuestion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectMemberSetQuestion_argsTupleSchemeFactory());
    }

    public long memberCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectMemberSetQuestion_args.class, metaDataMap);
    }

    public selectMemberSetQuestion_args() {
    }

    public selectMemberSetQuestion_args(
      long memberCode)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectMemberSetQuestion_args(selectMemberSetQuestion_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
    }

    public selectMemberSetQuestion_args deepCopy() {
      return new selectMemberSetQuestion_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public selectMemberSetQuestion_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectMemberSetQuestion_args)
        return this.equals((selectMemberSetQuestion_args)that);
      return false;
    }

    public boolean equals(selectMemberSetQuestion_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectMemberSetQuestion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectMemberSetQuestion_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectMemberSetQuestion_argsStandardSchemeFactory implements SchemeFactory {
      public selectMemberSetQuestion_argsStandardScheme getScheme() {
        return new selectMemberSetQuestion_argsStandardScheme();
      }
    }

    private static class selectMemberSetQuestion_argsStandardScheme extends StandardScheme<selectMemberSetQuestion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectMemberSetQuestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectMemberSetQuestion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectMemberSetQuestion_argsTupleSchemeFactory implements SchemeFactory {
      public selectMemberSetQuestion_argsTupleScheme getScheme() {
        return new selectMemberSetQuestion_argsTupleScheme();
      }
    }

    private static class selectMemberSetQuestion_argsTupleScheme extends TupleScheme<selectMemberSetQuestion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectMemberSetQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectMemberSetQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
      }
    }

  }

  public static class selectMemberSetQuestion_result implements org.apache.thrift.TBase<selectMemberSetQuestion_result, selectMemberSetQuestion_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectMemberSetQuestion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectMemberSetQuestion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectMemberSetQuestion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectMemberSetQuestion_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.member.UserEnginQuestionResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.member.UserEnginQuestionResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectMemberSetQuestion_result.class, metaDataMap);
    }

    public selectMemberSetQuestion_result() {
    }

    public selectMemberSetQuestion_result(
      com.froad.thrift.vo.member.UserEnginQuestionResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectMemberSetQuestion_result(selectMemberSetQuestion_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.member.UserEnginQuestionResultVo(other.success);
      }
    }

    public selectMemberSetQuestion_result deepCopy() {
      return new selectMemberSetQuestion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.member.UserEnginQuestionResultVo getSuccess() {
      return this.success;
    }

    public selectMemberSetQuestion_result setSuccess(com.froad.thrift.vo.member.UserEnginQuestionResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.member.UserEnginQuestionResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectMemberSetQuestion_result)
        return this.equals((selectMemberSetQuestion_result)that);
      return false;
    }

    public boolean equals(selectMemberSetQuestion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectMemberSetQuestion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectMemberSetQuestion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectMemberSetQuestion_resultStandardSchemeFactory implements SchemeFactory {
      public selectMemberSetQuestion_resultStandardScheme getScheme() {
        return new selectMemberSetQuestion_resultStandardScheme();
      }
    }

    private static class selectMemberSetQuestion_resultStandardScheme extends StandardScheme<selectMemberSetQuestion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectMemberSetQuestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.member.UserEnginQuestionResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectMemberSetQuestion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectMemberSetQuestion_resultTupleSchemeFactory implements SchemeFactory {
      public selectMemberSetQuestion_resultTupleScheme getScheme() {
        return new selectMemberSetQuestion_resultTupleScheme();
      }
    }

    private static class selectMemberSetQuestion_resultTupleScheme extends TupleScheme<selectMemberSetQuestion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectMemberSetQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectMemberSetQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.member.UserEnginQuestionResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class veryfyMemberQuestion_args implements org.apache.thrift.TBase<veryfyMemberQuestion_args, veryfyMemberQuestion_args._Fields>, java.io.Serializable, Cloneable, Comparable<veryfyMemberQuestion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("veryfyMemberQuestion_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField QUESTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("questions", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new veryfyMemberQuestion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new veryfyMemberQuestion_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      QUESTIONS((short)2, "questions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // QUESTIONS
            return QUESTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.QUESTIONS, new org.apache.thrift.meta_data.FieldMetaData("questions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.member.UserEngineQuestionVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(veryfyMemberQuestion_args.class, metaDataMap);
    }

    public veryfyMemberQuestion_args() {
    }

    public veryfyMemberQuestion_args(
      long memberCode,
      List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.questions = questions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public veryfyMemberQuestion_args(veryfyMemberQuestion_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetQuestions()) {
        List<com.froad.thrift.vo.member.UserEngineQuestionVo> __this__questions = new ArrayList<com.froad.thrift.vo.member.UserEngineQuestionVo>(other.questions.size());
        for (com.froad.thrift.vo.member.UserEngineQuestionVo other_element : other.questions) {
          __this__questions.add(new com.froad.thrift.vo.member.UserEngineQuestionVo(other_element));
        }
        this.questions = __this__questions;
      }
    }

    public veryfyMemberQuestion_args deepCopy() {
      return new veryfyMemberQuestion_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.questions = null;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public veryfyMemberQuestion_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public int getQuestionsSize() {
      return (this.questions == null) ? 0 : this.questions.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.member.UserEngineQuestionVo> getQuestionsIterator() {
      return (this.questions == null) ? null : this.questions.iterator();
    }

    public void addToQuestions(com.froad.thrift.vo.member.UserEngineQuestionVo elem) {
      if (this.questions == null) {
        this.questions = new ArrayList<com.froad.thrift.vo.member.UserEngineQuestionVo>();
      }
      this.questions.add(elem);
    }

    public List<com.froad.thrift.vo.member.UserEngineQuestionVo> getQuestions() {
      return this.questions;
    }

    public veryfyMemberQuestion_args setQuestions(List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions) {
      this.questions = questions;
      return this;
    }

    public void unsetQuestions() {
      this.questions = null;
    }

    /** Returns true if field questions is set (has been assigned a value) and false otherwise */
    public boolean isSetQuestions() {
      return this.questions != null;
    }

    public void setQuestionsIsSet(boolean value) {
      if (!value) {
        this.questions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case QUESTIONS:
        if (value == null) {
          unsetQuestions();
        } else {
          setQuestions((List<com.froad.thrift.vo.member.UserEngineQuestionVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case QUESTIONS:
        return getQuestions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case QUESTIONS:
        return isSetQuestions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof veryfyMemberQuestion_args)
        return this.equals((veryfyMemberQuestion_args)that);
      return false;
    }

    public boolean equals(veryfyMemberQuestion_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_questions = true && this.isSetQuestions();
      boolean that_present_questions = true && that.isSetQuestions();
      if (this_present_questions || that_present_questions) {
        if (!(this_present_questions && that_present_questions))
          return false;
        if (!this.questions.equals(that.questions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_questions = true && (isSetQuestions());
      list.add(present_questions);
      if (present_questions)
        list.add(questions);

      return list.hashCode();
    }

    @Override
    public int compareTo(veryfyMemberQuestion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuestions()).compareTo(other.isSetQuestions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuestions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questions, other.questions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("veryfyMemberQuestion_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("questions:");
      if (this.questions == null) {
        sb.append("null");
      } else {
        sb.append(this.questions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class veryfyMemberQuestion_argsStandardSchemeFactory implements SchemeFactory {
      public veryfyMemberQuestion_argsStandardScheme getScheme() {
        return new veryfyMemberQuestion_argsStandardScheme();
      }
    }

    private static class veryfyMemberQuestion_argsStandardScheme extends StandardScheme<veryfyMemberQuestion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, veryfyMemberQuestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUESTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.questions = new ArrayList<com.froad.thrift.vo.member.UserEngineQuestionVo>(_list0.size);
                  com.froad.thrift.vo.member.UserEngineQuestionVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.member.UserEngineQuestionVo();
                    _elem1.read(iprot);
                    struct.questions.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setQuestionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, veryfyMemberQuestion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.questions != null) {
          oprot.writeFieldBegin(QUESTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.questions.size()));
            for (com.froad.thrift.vo.member.UserEngineQuestionVo _iter3 : struct.questions)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class veryfyMemberQuestion_argsTupleSchemeFactory implements SchemeFactory {
      public veryfyMemberQuestion_argsTupleScheme getScheme() {
        return new veryfyMemberQuestion_argsTupleScheme();
      }
    }

    private static class veryfyMemberQuestion_argsTupleScheme extends TupleScheme<veryfyMemberQuestion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, veryfyMemberQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetQuestions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetQuestions()) {
          {
            oprot.writeI32(struct.questions.size());
            for (com.froad.thrift.vo.member.UserEngineQuestionVo _iter4 : struct.questions)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, veryfyMemberQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.questions = new ArrayList<com.froad.thrift.vo.member.UserEngineQuestionVo>(_list5.size);
            com.froad.thrift.vo.member.UserEngineQuestionVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.member.UserEngineQuestionVo();
              _elem6.read(iprot);
              struct.questions.add(_elem6);
            }
          }
          struct.setQuestionsIsSet(true);
        }
      }
    }

  }

  public static class veryfyMemberQuestion_result implements org.apache.thrift.TBase<veryfyMemberQuestion_result, veryfyMemberQuestion_result._Fields>, java.io.Serializable, Cloneable, Comparable<veryfyMemberQuestion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("veryfyMemberQuestion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new veryfyMemberQuestion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new veryfyMemberQuestion_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(veryfyMemberQuestion_result.class, metaDataMap);
    }

    public veryfyMemberQuestion_result() {
    }

    public veryfyMemberQuestion_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public veryfyMemberQuestion_result(veryfyMemberQuestion_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public veryfyMemberQuestion_result deepCopy() {
      return new veryfyMemberQuestion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public veryfyMemberQuestion_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof veryfyMemberQuestion_result)
        return this.equals((veryfyMemberQuestion_result)that);
      return false;
    }

    public boolean equals(veryfyMemberQuestion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(veryfyMemberQuestion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("veryfyMemberQuestion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class veryfyMemberQuestion_resultStandardSchemeFactory implements SchemeFactory {
      public veryfyMemberQuestion_resultStandardScheme getScheme() {
        return new veryfyMemberQuestion_resultStandardScheme();
      }
    }

    private static class veryfyMemberQuestion_resultStandardScheme extends StandardScheme<veryfyMemberQuestion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, veryfyMemberQuestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, veryfyMemberQuestion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class veryfyMemberQuestion_resultTupleSchemeFactory implements SchemeFactory {
      public veryfyMemberQuestion_resultTupleScheme getScheme() {
        return new veryfyMemberQuestion_resultTupleScheme();
      }
    }

    private static class veryfyMemberQuestion_resultTupleScheme extends TupleScheme<veryfyMemberQuestion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, veryfyMemberQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, veryfyMemberQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setFirstMemberPayPwd_args implements org.apache.thrift.TBase<setFirstMemberPayPwd_args, setFirstMemberPayPwd_args._Fields>, java.io.Serializable, Cloneable, Comparable<setFirstMemberPayPwd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setFirstMemberPayPwd_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CIPHERTEXT_PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("ciphertextPwd", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CIPHERTEXT_PWD_TEMP_FIELD_DESC = new org.apache.thrift.protocol.TField("ciphertextPwdTemp", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CREATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("createSource", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setFirstMemberPayPwd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setFirstMemberPayPwd_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public String ciphertextPwd; // required
    public String ciphertextPwdTemp; // required
    public String createSource; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      CIPHERTEXT_PWD((short)2, "ciphertextPwd"),
      CIPHERTEXT_PWD_TEMP((short)3, "ciphertextPwdTemp"),
      CREATE_SOURCE((short)4, "createSource");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // CIPHERTEXT_PWD
            return CIPHERTEXT_PWD;
          case 3: // CIPHERTEXT_PWD_TEMP
            return CIPHERTEXT_PWD_TEMP;
          case 4: // CREATE_SOURCE
            return CREATE_SOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CIPHERTEXT_PWD, new org.apache.thrift.meta_data.FieldMetaData("ciphertextPwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CIPHERTEXT_PWD_TEMP, new org.apache.thrift.meta_data.FieldMetaData("ciphertextPwdTemp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CREATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("createSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setFirstMemberPayPwd_args.class, metaDataMap);
    }

    public setFirstMemberPayPwd_args() {
    }

    public setFirstMemberPayPwd_args(
      long memberCode,
      String ciphertextPwd,
      String ciphertextPwdTemp,
      String createSource)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.ciphertextPwd = ciphertextPwd;
      this.ciphertextPwdTemp = ciphertextPwdTemp;
      this.createSource = createSource;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setFirstMemberPayPwd_args(setFirstMemberPayPwd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetCiphertextPwd()) {
        this.ciphertextPwd = other.ciphertextPwd;
      }
      if (other.isSetCiphertextPwdTemp()) {
        this.ciphertextPwdTemp = other.ciphertextPwdTemp;
      }
      if (other.isSetCreateSource()) {
        this.createSource = other.createSource;
      }
    }

    public setFirstMemberPayPwd_args deepCopy() {
      return new setFirstMemberPayPwd_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.ciphertextPwd = null;
      this.ciphertextPwdTemp = null;
      this.createSource = null;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public setFirstMemberPayPwd_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getCiphertextPwd() {
      return this.ciphertextPwd;
    }

    public setFirstMemberPayPwd_args setCiphertextPwd(String ciphertextPwd) {
      this.ciphertextPwd = ciphertextPwd;
      return this;
    }

    public void unsetCiphertextPwd() {
      this.ciphertextPwd = null;
    }

    /** Returns true if field ciphertextPwd is set (has been assigned a value) and false otherwise */
    public boolean isSetCiphertextPwd() {
      return this.ciphertextPwd != null;
    }

    public void setCiphertextPwdIsSet(boolean value) {
      if (!value) {
        this.ciphertextPwd = null;
      }
    }

    public String getCiphertextPwdTemp() {
      return this.ciphertextPwdTemp;
    }

    public setFirstMemberPayPwd_args setCiphertextPwdTemp(String ciphertextPwdTemp) {
      this.ciphertextPwdTemp = ciphertextPwdTemp;
      return this;
    }

    public void unsetCiphertextPwdTemp() {
      this.ciphertextPwdTemp = null;
    }

    /** Returns true if field ciphertextPwdTemp is set (has been assigned a value) and false otherwise */
    public boolean isSetCiphertextPwdTemp() {
      return this.ciphertextPwdTemp != null;
    }

    public void setCiphertextPwdTempIsSet(boolean value) {
      if (!value) {
        this.ciphertextPwdTemp = null;
      }
    }

    public String getCreateSource() {
      return this.createSource;
    }

    public setFirstMemberPayPwd_args setCreateSource(String createSource) {
      this.createSource = createSource;
      return this;
    }

    public void unsetCreateSource() {
      this.createSource = null;
    }

    /** Returns true if field createSource is set (has been assigned a value) and false otherwise */
    public boolean isSetCreateSource() {
      return this.createSource != null;
    }

    public void setCreateSourceIsSet(boolean value) {
      if (!value) {
        this.createSource = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case CIPHERTEXT_PWD:
        if (value == null) {
          unsetCiphertextPwd();
        } else {
          setCiphertextPwd((String)value);
        }
        break;

      case CIPHERTEXT_PWD_TEMP:
        if (value == null) {
          unsetCiphertextPwdTemp();
        } else {
          setCiphertextPwdTemp((String)value);
        }
        break;

      case CREATE_SOURCE:
        if (value == null) {
          unsetCreateSource();
        } else {
          setCreateSource((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case CIPHERTEXT_PWD:
        return getCiphertextPwd();

      case CIPHERTEXT_PWD_TEMP:
        return getCiphertextPwdTemp();

      case CREATE_SOURCE:
        return getCreateSource();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case CIPHERTEXT_PWD:
        return isSetCiphertextPwd();
      case CIPHERTEXT_PWD_TEMP:
        return isSetCiphertextPwdTemp();
      case CREATE_SOURCE:
        return isSetCreateSource();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setFirstMemberPayPwd_args)
        return this.equals((setFirstMemberPayPwd_args)that);
      return false;
    }

    public boolean equals(setFirstMemberPayPwd_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_ciphertextPwd = true && this.isSetCiphertextPwd();
      boolean that_present_ciphertextPwd = true && that.isSetCiphertextPwd();
      if (this_present_ciphertextPwd || that_present_ciphertextPwd) {
        if (!(this_present_ciphertextPwd && that_present_ciphertextPwd))
          return false;
        if (!this.ciphertextPwd.equals(that.ciphertextPwd))
          return false;
      }

      boolean this_present_ciphertextPwdTemp = true && this.isSetCiphertextPwdTemp();
      boolean that_present_ciphertextPwdTemp = true && that.isSetCiphertextPwdTemp();
      if (this_present_ciphertextPwdTemp || that_present_ciphertextPwdTemp) {
        if (!(this_present_ciphertextPwdTemp && that_present_ciphertextPwdTemp))
          return false;
        if (!this.ciphertextPwdTemp.equals(that.ciphertextPwdTemp))
          return false;
      }

      boolean this_present_createSource = true && this.isSetCreateSource();
      boolean that_present_createSource = true && that.isSetCreateSource();
      if (this_present_createSource || that_present_createSource) {
        if (!(this_present_createSource && that_present_createSource))
          return false;
        if (!this.createSource.equals(that.createSource))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_ciphertextPwd = true && (isSetCiphertextPwd());
      list.add(present_ciphertextPwd);
      if (present_ciphertextPwd)
        list.add(ciphertextPwd);

      boolean present_ciphertextPwdTemp = true && (isSetCiphertextPwdTemp());
      list.add(present_ciphertextPwdTemp);
      if (present_ciphertextPwdTemp)
        list.add(ciphertextPwdTemp);

      boolean present_createSource = true && (isSetCreateSource());
      list.add(present_createSource);
      if (present_createSource)
        list.add(createSource);

      return list.hashCode();
    }

    @Override
    public int compareTo(setFirstMemberPayPwd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCiphertextPwd()).compareTo(other.isSetCiphertextPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCiphertextPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ciphertextPwd, other.ciphertextPwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCiphertextPwdTemp()).compareTo(other.isSetCiphertextPwdTemp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCiphertextPwdTemp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ciphertextPwdTemp, other.ciphertextPwdTemp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCreateSource()).compareTo(other.isSetCreateSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreateSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createSource, other.createSource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setFirstMemberPayPwd_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ciphertextPwd:");
      if (this.ciphertextPwd == null) {
        sb.append("null");
      } else {
        sb.append(this.ciphertextPwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ciphertextPwdTemp:");
      if (this.ciphertextPwdTemp == null) {
        sb.append("null");
      } else {
        sb.append(this.ciphertextPwdTemp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("createSource:");
      if (this.createSource == null) {
        sb.append("null");
      } else {
        sb.append(this.createSource);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setFirstMemberPayPwd_argsStandardSchemeFactory implements SchemeFactory {
      public setFirstMemberPayPwd_argsStandardScheme getScheme() {
        return new setFirstMemberPayPwd_argsStandardScheme();
      }
    }

    private static class setFirstMemberPayPwd_argsStandardScheme extends StandardScheme<setFirstMemberPayPwd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setFirstMemberPayPwd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CIPHERTEXT_PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ciphertextPwd = iprot.readString();
                struct.setCiphertextPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CIPHERTEXT_PWD_TEMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ciphertextPwdTemp = iprot.readString();
                struct.setCiphertextPwdTempIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CREATE_SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.createSource = iprot.readString();
                struct.setCreateSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setFirstMemberPayPwd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.ciphertextPwd != null) {
          oprot.writeFieldBegin(CIPHERTEXT_PWD_FIELD_DESC);
          oprot.writeString(struct.ciphertextPwd);
          oprot.writeFieldEnd();
        }
        if (struct.ciphertextPwdTemp != null) {
          oprot.writeFieldBegin(CIPHERTEXT_PWD_TEMP_FIELD_DESC);
          oprot.writeString(struct.ciphertextPwdTemp);
          oprot.writeFieldEnd();
        }
        if (struct.createSource != null) {
          oprot.writeFieldBegin(CREATE_SOURCE_FIELD_DESC);
          oprot.writeString(struct.createSource);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setFirstMemberPayPwd_argsTupleSchemeFactory implements SchemeFactory {
      public setFirstMemberPayPwd_argsTupleScheme getScheme() {
        return new setFirstMemberPayPwd_argsTupleScheme();
      }
    }

    private static class setFirstMemberPayPwd_argsTupleScheme extends TupleScheme<setFirstMemberPayPwd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setFirstMemberPayPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetCiphertextPwd()) {
          optionals.set(1);
        }
        if (struct.isSetCiphertextPwdTemp()) {
          optionals.set(2);
        }
        if (struct.isSetCreateSource()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetCiphertextPwd()) {
          oprot.writeString(struct.ciphertextPwd);
        }
        if (struct.isSetCiphertextPwdTemp()) {
          oprot.writeString(struct.ciphertextPwdTemp);
        }
        if (struct.isSetCreateSource()) {
          oprot.writeString(struct.createSource);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setFirstMemberPayPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ciphertextPwd = iprot.readString();
          struct.setCiphertextPwdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ciphertextPwdTemp = iprot.readString();
          struct.setCiphertextPwdTempIsSet(true);
        }
        if (incoming.get(3)) {
          struct.createSource = iprot.readString();
          struct.setCreateSourceIsSet(true);
        }
      }
    }

  }

  public static class setFirstMemberPayPwd_result implements org.apache.thrift.TBase<setFirstMemberPayPwd_result, setFirstMemberPayPwd_result._Fields>, java.io.Serializable, Cloneable, Comparable<setFirstMemberPayPwd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setFirstMemberPayPwd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setFirstMemberPayPwd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setFirstMemberPayPwd_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setFirstMemberPayPwd_result.class, metaDataMap);
    }

    public setFirstMemberPayPwd_result() {
    }

    public setFirstMemberPayPwd_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setFirstMemberPayPwd_result(setFirstMemberPayPwd_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public setFirstMemberPayPwd_result deepCopy() {
      return new setFirstMemberPayPwd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public setFirstMemberPayPwd_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setFirstMemberPayPwd_result)
        return this.equals((setFirstMemberPayPwd_result)that);
      return false;
    }

    public boolean equals(setFirstMemberPayPwd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setFirstMemberPayPwd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setFirstMemberPayPwd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setFirstMemberPayPwd_resultStandardSchemeFactory implements SchemeFactory {
      public setFirstMemberPayPwd_resultStandardScheme getScheme() {
        return new setFirstMemberPayPwd_resultStandardScheme();
      }
    }

    private static class setFirstMemberPayPwd_resultStandardScheme extends StandardScheme<setFirstMemberPayPwd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setFirstMemberPayPwd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setFirstMemberPayPwd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setFirstMemberPayPwd_resultTupleSchemeFactory implements SchemeFactory {
      public setFirstMemberPayPwd_resultTupleScheme getScheme() {
        return new setFirstMemberPayPwd_resultTupleScheme();
      }
    }

    private static class setFirstMemberPayPwd_resultTupleScheme extends TupleScheme<setFirstMemberPayPwd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setFirstMemberPayPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setFirstMemberPayPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateMemberPayPwd_args implements org.apache.thrift.TBase<updateMemberPayPwd_args, updateMemberPayPwd_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMemberPayPwd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMemberPayPwd_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CIPHERTEXT_PWD_OLD_FIELD_DESC = new org.apache.thrift.protocol.TField("ciphertextPwdOld", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CIPHERTEXT_PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("ciphertextPwd", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CIPHERTEXT_PWD_TEMP_FIELD_DESC = new org.apache.thrift.protocol.TField("ciphertextPwdTemp", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CREATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("createSource", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMemberPayPwd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMemberPayPwd_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public String ciphertextPwdOld; // required
    public String ciphertextPwd; // required
    public String ciphertextPwdTemp; // required
    public String createSource; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      CIPHERTEXT_PWD_OLD((short)2, "ciphertextPwdOld"),
      CIPHERTEXT_PWD((short)3, "ciphertextPwd"),
      CIPHERTEXT_PWD_TEMP((short)4, "ciphertextPwdTemp"),
      CREATE_SOURCE((short)5, "createSource");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // CIPHERTEXT_PWD_OLD
            return CIPHERTEXT_PWD_OLD;
          case 3: // CIPHERTEXT_PWD
            return CIPHERTEXT_PWD;
          case 4: // CIPHERTEXT_PWD_TEMP
            return CIPHERTEXT_PWD_TEMP;
          case 5: // CREATE_SOURCE
            return CREATE_SOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CIPHERTEXT_PWD_OLD, new org.apache.thrift.meta_data.FieldMetaData("ciphertextPwdOld", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CIPHERTEXT_PWD, new org.apache.thrift.meta_data.FieldMetaData("ciphertextPwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CIPHERTEXT_PWD_TEMP, new org.apache.thrift.meta_data.FieldMetaData("ciphertextPwdTemp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CREATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("createSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMemberPayPwd_args.class, metaDataMap);
    }

    public updateMemberPayPwd_args() {
    }

    public updateMemberPayPwd_args(
      long memberCode,
      String ciphertextPwdOld,
      String ciphertextPwd,
      String ciphertextPwdTemp,
      String createSource)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.ciphertextPwdOld = ciphertextPwdOld;
      this.ciphertextPwd = ciphertextPwd;
      this.ciphertextPwdTemp = ciphertextPwdTemp;
      this.createSource = createSource;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMemberPayPwd_args(updateMemberPayPwd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetCiphertextPwdOld()) {
        this.ciphertextPwdOld = other.ciphertextPwdOld;
      }
      if (other.isSetCiphertextPwd()) {
        this.ciphertextPwd = other.ciphertextPwd;
      }
      if (other.isSetCiphertextPwdTemp()) {
        this.ciphertextPwdTemp = other.ciphertextPwdTemp;
      }
      if (other.isSetCreateSource()) {
        this.createSource = other.createSource;
      }
    }

    public updateMemberPayPwd_args deepCopy() {
      return new updateMemberPayPwd_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.ciphertextPwdOld = null;
      this.ciphertextPwd = null;
      this.ciphertextPwdTemp = null;
      this.createSource = null;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public updateMemberPayPwd_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getCiphertextPwdOld() {
      return this.ciphertextPwdOld;
    }

    public updateMemberPayPwd_args setCiphertextPwdOld(String ciphertextPwdOld) {
      this.ciphertextPwdOld = ciphertextPwdOld;
      return this;
    }

    public void unsetCiphertextPwdOld() {
      this.ciphertextPwdOld = null;
    }

    /** Returns true if field ciphertextPwdOld is set (has been assigned a value) and false otherwise */
    public boolean isSetCiphertextPwdOld() {
      return this.ciphertextPwdOld != null;
    }

    public void setCiphertextPwdOldIsSet(boolean value) {
      if (!value) {
        this.ciphertextPwdOld = null;
      }
    }

    public String getCiphertextPwd() {
      return this.ciphertextPwd;
    }

    public updateMemberPayPwd_args setCiphertextPwd(String ciphertextPwd) {
      this.ciphertextPwd = ciphertextPwd;
      return this;
    }

    public void unsetCiphertextPwd() {
      this.ciphertextPwd = null;
    }

    /** Returns true if field ciphertextPwd is set (has been assigned a value) and false otherwise */
    public boolean isSetCiphertextPwd() {
      return this.ciphertextPwd != null;
    }

    public void setCiphertextPwdIsSet(boolean value) {
      if (!value) {
        this.ciphertextPwd = null;
      }
    }

    public String getCiphertextPwdTemp() {
      return this.ciphertextPwdTemp;
    }

    public updateMemberPayPwd_args setCiphertextPwdTemp(String ciphertextPwdTemp) {
      this.ciphertextPwdTemp = ciphertextPwdTemp;
      return this;
    }

    public void unsetCiphertextPwdTemp() {
      this.ciphertextPwdTemp = null;
    }

    /** Returns true if field ciphertextPwdTemp is set (has been assigned a value) and false otherwise */
    public boolean isSetCiphertextPwdTemp() {
      return this.ciphertextPwdTemp != null;
    }

    public void setCiphertextPwdTempIsSet(boolean value) {
      if (!value) {
        this.ciphertextPwdTemp = null;
      }
    }

    public String getCreateSource() {
      return this.createSource;
    }

    public updateMemberPayPwd_args setCreateSource(String createSource) {
      this.createSource = createSource;
      return this;
    }

    public void unsetCreateSource() {
      this.createSource = null;
    }

    /** Returns true if field createSource is set (has been assigned a value) and false otherwise */
    public boolean isSetCreateSource() {
      return this.createSource != null;
    }

    public void setCreateSourceIsSet(boolean value) {
      if (!value) {
        this.createSource = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case CIPHERTEXT_PWD_OLD:
        if (value == null) {
          unsetCiphertextPwdOld();
        } else {
          setCiphertextPwdOld((String)value);
        }
        break;

      case CIPHERTEXT_PWD:
        if (value == null) {
          unsetCiphertextPwd();
        } else {
          setCiphertextPwd((String)value);
        }
        break;

      case CIPHERTEXT_PWD_TEMP:
        if (value == null) {
          unsetCiphertextPwdTemp();
        } else {
          setCiphertextPwdTemp((String)value);
        }
        break;

      case CREATE_SOURCE:
        if (value == null) {
          unsetCreateSource();
        } else {
          setCreateSource((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case CIPHERTEXT_PWD_OLD:
        return getCiphertextPwdOld();

      case CIPHERTEXT_PWD:
        return getCiphertextPwd();

      case CIPHERTEXT_PWD_TEMP:
        return getCiphertextPwdTemp();

      case CREATE_SOURCE:
        return getCreateSource();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case CIPHERTEXT_PWD_OLD:
        return isSetCiphertextPwdOld();
      case CIPHERTEXT_PWD:
        return isSetCiphertextPwd();
      case CIPHERTEXT_PWD_TEMP:
        return isSetCiphertextPwdTemp();
      case CREATE_SOURCE:
        return isSetCreateSource();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMemberPayPwd_args)
        return this.equals((updateMemberPayPwd_args)that);
      return false;
    }

    public boolean equals(updateMemberPayPwd_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_ciphertextPwdOld = true && this.isSetCiphertextPwdOld();
      boolean that_present_ciphertextPwdOld = true && that.isSetCiphertextPwdOld();
      if (this_present_ciphertextPwdOld || that_present_ciphertextPwdOld) {
        if (!(this_present_ciphertextPwdOld && that_present_ciphertextPwdOld))
          return false;
        if (!this.ciphertextPwdOld.equals(that.ciphertextPwdOld))
          return false;
      }

      boolean this_present_ciphertextPwd = true && this.isSetCiphertextPwd();
      boolean that_present_ciphertextPwd = true && that.isSetCiphertextPwd();
      if (this_present_ciphertextPwd || that_present_ciphertextPwd) {
        if (!(this_present_ciphertextPwd && that_present_ciphertextPwd))
          return false;
        if (!this.ciphertextPwd.equals(that.ciphertextPwd))
          return false;
      }

      boolean this_present_ciphertextPwdTemp = true && this.isSetCiphertextPwdTemp();
      boolean that_present_ciphertextPwdTemp = true && that.isSetCiphertextPwdTemp();
      if (this_present_ciphertextPwdTemp || that_present_ciphertextPwdTemp) {
        if (!(this_present_ciphertextPwdTemp && that_present_ciphertextPwdTemp))
          return false;
        if (!this.ciphertextPwdTemp.equals(that.ciphertextPwdTemp))
          return false;
      }

      boolean this_present_createSource = true && this.isSetCreateSource();
      boolean that_present_createSource = true && that.isSetCreateSource();
      if (this_present_createSource || that_present_createSource) {
        if (!(this_present_createSource && that_present_createSource))
          return false;
        if (!this.createSource.equals(that.createSource))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_ciphertextPwdOld = true && (isSetCiphertextPwdOld());
      list.add(present_ciphertextPwdOld);
      if (present_ciphertextPwdOld)
        list.add(ciphertextPwdOld);

      boolean present_ciphertextPwd = true && (isSetCiphertextPwd());
      list.add(present_ciphertextPwd);
      if (present_ciphertextPwd)
        list.add(ciphertextPwd);

      boolean present_ciphertextPwdTemp = true && (isSetCiphertextPwdTemp());
      list.add(present_ciphertextPwdTemp);
      if (present_ciphertextPwdTemp)
        list.add(ciphertextPwdTemp);

      boolean present_createSource = true && (isSetCreateSource());
      list.add(present_createSource);
      if (present_createSource)
        list.add(createSource);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMemberPayPwd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCiphertextPwdOld()).compareTo(other.isSetCiphertextPwdOld());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCiphertextPwdOld()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ciphertextPwdOld, other.ciphertextPwdOld);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCiphertextPwd()).compareTo(other.isSetCiphertextPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCiphertextPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ciphertextPwd, other.ciphertextPwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCiphertextPwdTemp()).compareTo(other.isSetCiphertextPwdTemp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCiphertextPwdTemp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ciphertextPwdTemp, other.ciphertextPwdTemp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCreateSource()).compareTo(other.isSetCreateSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreateSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createSource, other.createSource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMemberPayPwd_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ciphertextPwdOld:");
      if (this.ciphertextPwdOld == null) {
        sb.append("null");
      } else {
        sb.append(this.ciphertextPwdOld);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ciphertextPwd:");
      if (this.ciphertextPwd == null) {
        sb.append("null");
      } else {
        sb.append(this.ciphertextPwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ciphertextPwdTemp:");
      if (this.ciphertextPwdTemp == null) {
        sb.append("null");
      } else {
        sb.append(this.ciphertextPwdTemp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("createSource:");
      if (this.createSource == null) {
        sb.append("null");
      } else {
        sb.append(this.createSource);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMemberPayPwd_argsStandardSchemeFactory implements SchemeFactory {
      public updateMemberPayPwd_argsStandardScheme getScheme() {
        return new updateMemberPayPwd_argsStandardScheme();
      }
    }

    private static class updateMemberPayPwd_argsStandardScheme extends StandardScheme<updateMemberPayPwd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMemberPayPwd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CIPHERTEXT_PWD_OLD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ciphertextPwdOld = iprot.readString();
                struct.setCiphertextPwdOldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CIPHERTEXT_PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ciphertextPwd = iprot.readString();
                struct.setCiphertextPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CIPHERTEXT_PWD_TEMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ciphertextPwdTemp = iprot.readString();
                struct.setCiphertextPwdTempIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CREATE_SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.createSource = iprot.readString();
                struct.setCreateSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMemberPayPwd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.ciphertextPwdOld != null) {
          oprot.writeFieldBegin(CIPHERTEXT_PWD_OLD_FIELD_DESC);
          oprot.writeString(struct.ciphertextPwdOld);
          oprot.writeFieldEnd();
        }
        if (struct.ciphertextPwd != null) {
          oprot.writeFieldBegin(CIPHERTEXT_PWD_FIELD_DESC);
          oprot.writeString(struct.ciphertextPwd);
          oprot.writeFieldEnd();
        }
        if (struct.ciphertextPwdTemp != null) {
          oprot.writeFieldBegin(CIPHERTEXT_PWD_TEMP_FIELD_DESC);
          oprot.writeString(struct.ciphertextPwdTemp);
          oprot.writeFieldEnd();
        }
        if (struct.createSource != null) {
          oprot.writeFieldBegin(CREATE_SOURCE_FIELD_DESC);
          oprot.writeString(struct.createSource);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMemberPayPwd_argsTupleSchemeFactory implements SchemeFactory {
      public updateMemberPayPwd_argsTupleScheme getScheme() {
        return new updateMemberPayPwd_argsTupleScheme();
      }
    }

    private static class updateMemberPayPwd_argsTupleScheme extends TupleScheme<updateMemberPayPwd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMemberPayPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetCiphertextPwdOld()) {
          optionals.set(1);
        }
        if (struct.isSetCiphertextPwd()) {
          optionals.set(2);
        }
        if (struct.isSetCiphertextPwdTemp()) {
          optionals.set(3);
        }
        if (struct.isSetCreateSource()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetCiphertextPwdOld()) {
          oprot.writeString(struct.ciphertextPwdOld);
        }
        if (struct.isSetCiphertextPwd()) {
          oprot.writeString(struct.ciphertextPwd);
        }
        if (struct.isSetCiphertextPwdTemp()) {
          oprot.writeString(struct.ciphertextPwdTemp);
        }
        if (struct.isSetCreateSource()) {
          oprot.writeString(struct.createSource);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMemberPayPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ciphertextPwdOld = iprot.readString();
          struct.setCiphertextPwdOldIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ciphertextPwd = iprot.readString();
          struct.setCiphertextPwdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ciphertextPwdTemp = iprot.readString();
          struct.setCiphertextPwdTempIsSet(true);
        }
        if (incoming.get(4)) {
          struct.createSource = iprot.readString();
          struct.setCreateSourceIsSet(true);
        }
      }
    }

  }

  public static class updateMemberPayPwd_result implements org.apache.thrift.TBase<updateMemberPayPwd_result, updateMemberPayPwd_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMemberPayPwd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMemberPayPwd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMemberPayPwd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMemberPayPwd_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMemberPayPwd_result.class, metaDataMap);
    }

    public updateMemberPayPwd_result() {
    }

    public updateMemberPayPwd_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMemberPayPwd_result(updateMemberPayPwd_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateMemberPayPwd_result deepCopy() {
      return new updateMemberPayPwd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateMemberPayPwd_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMemberPayPwd_result)
        return this.equals((updateMemberPayPwd_result)that);
      return false;
    }

    public boolean equals(updateMemberPayPwd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMemberPayPwd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMemberPayPwd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMemberPayPwd_resultStandardSchemeFactory implements SchemeFactory {
      public updateMemberPayPwd_resultStandardScheme getScheme() {
        return new updateMemberPayPwd_resultStandardScheme();
      }
    }

    private static class updateMemberPayPwd_resultStandardScheme extends StandardScheme<updateMemberPayPwd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMemberPayPwd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMemberPayPwd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMemberPayPwd_resultTupleSchemeFactory implements SchemeFactory {
      public updateMemberPayPwd_resultTupleScheme getScheme() {
        return new updateMemberPayPwd_resultTupleScheme();
      }
    }

    private static class updateMemberPayPwd_resultTupleScheme extends TupleScheme<updateMemberPayPwd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMemberPayPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMemberPayPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class resetMemberPayPwd_args implements org.apache.thrift.TBase<resetMemberPayPwd_args, resetMemberPayPwd_args._Fields>, java.io.Serializable, Cloneable, Comparable<resetMemberPayPwd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resetMemberPayPwd_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CIPHERTEXT_PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("ciphertextPwd", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CIPHERTEXT_PWD_TEMP_FIELD_DESC = new org.apache.thrift.protocol.TField("ciphertextPwdTemp", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CREATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("createSource", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resetMemberPayPwd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resetMemberPayPwd_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public String ciphertextPwd; // required
    public String ciphertextPwdTemp; // required
    public String createSource; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      CIPHERTEXT_PWD((short)2, "ciphertextPwd"),
      CIPHERTEXT_PWD_TEMP((short)3, "ciphertextPwdTemp"),
      CREATE_SOURCE((short)4, "createSource");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // CIPHERTEXT_PWD
            return CIPHERTEXT_PWD;
          case 3: // CIPHERTEXT_PWD_TEMP
            return CIPHERTEXT_PWD_TEMP;
          case 4: // CREATE_SOURCE
            return CREATE_SOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CIPHERTEXT_PWD, new org.apache.thrift.meta_data.FieldMetaData("ciphertextPwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CIPHERTEXT_PWD_TEMP, new org.apache.thrift.meta_data.FieldMetaData("ciphertextPwdTemp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CREATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("createSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resetMemberPayPwd_args.class, metaDataMap);
    }

    public resetMemberPayPwd_args() {
    }

    public resetMemberPayPwd_args(
      long memberCode,
      String ciphertextPwd,
      String ciphertextPwdTemp,
      String createSource)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.ciphertextPwd = ciphertextPwd;
      this.ciphertextPwdTemp = ciphertextPwdTemp;
      this.createSource = createSource;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resetMemberPayPwd_args(resetMemberPayPwd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetCiphertextPwd()) {
        this.ciphertextPwd = other.ciphertextPwd;
      }
      if (other.isSetCiphertextPwdTemp()) {
        this.ciphertextPwdTemp = other.ciphertextPwdTemp;
      }
      if (other.isSetCreateSource()) {
        this.createSource = other.createSource;
      }
    }

    public resetMemberPayPwd_args deepCopy() {
      return new resetMemberPayPwd_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.ciphertextPwd = null;
      this.ciphertextPwdTemp = null;
      this.createSource = null;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public resetMemberPayPwd_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getCiphertextPwd() {
      return this.ciphertextPwd;
    }

    public resetMemberPayPwd_args setCiphertextPwd(String ciphertextPwd) {
      this.ciphertextPwd = ciphertextPwd;
      return this;
    }

    public void unsetCiphertextPwd() {
      this.ciphertextPwd = null;
    }

    /** Returns true if field ciphertextPwd is set (has been assigned a value) and false otherwise */
    public boolean isSetCiphertextPwd() {
      return this.ciphertextPwd != null;
    }

    public void setCiphertextPwdIsSet(boolean value) {
      if (!value) {
        this.ciphertextPwd = null;
      }
    }

    public String getCiphertextPwdTemp() {
      return this.ciphertextPwdTemp;
    }

    public resetMemberPayPwd_args setCiphertextPwdTemp(String ciphertextPwdTemp) {
      this.ciphertextPwdTemp = ciphertextPwdTemp;
      return this;
    }

    public void unsetCiphertextPwdTemp() {
      this.ciphertextPwdTemp = null;
    }

    /** Returns true if field ciphertextPwdTemp is set (has been assigned a value) and false otherwise */
    public boolean isSetCiphertextPwdTemp() {
      return this.ciphertextPwdTemp != null;
    }

    public void setCiphertextPwdTempIsSet(boolean value) {
      if (!value) {
        this.ciphertextPwdTemp = null;
      }
    }

    public String getCreateSource() {
      return this.createSource;
    }

    public resetMemberPayPwd_args setCreateSource(String createSource) {
      this.createSource = createSource;
      return this;
    }

    public void unsetCreateSource() {
      this.createSource = null;
    }

    /** Returns true if field createSource is set (has been assigned a value) and false otherwise */
    public boolean isSetCreateSource() {
      return this.createSource != null;
    }

    public void setCreateSourceIsSet(boolean value) {
      if (!value) {
        this.createSource = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case CIPHERTEXT_PWD:
        if (value == null) {
          unsetCiphertextPwd();
        } else {
          setCiphertextPwd((String)value);
        }
        break;

      case CIPHERTEXT_PWD_TEMP:
        if (value == null) {
          unsetCiphertextPwdTemp();
        } else {
          setCiphertextPwdTemp((String)value);
        }
        break;

      case CREATE_SOURCE:
        if (value == null) {
          unsetCreateSource();
        } else {
          setCreateSource((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case CIPHERTEXT_PWD:
        return getCiphertextPwd();

      case CIPHERTEXT_PWD_TEMP:
        return getCiphertextPwdTemp();

      case CREATE_SOURCE:
        return getCreateSource();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case CIPHERTEXT_PWD:
        return isSetCiphertextPwd();
      case CIPHERTEXT_PWD_TEMP:
        return isSetCiphertextPwdTemp();
      case CREATE_SOURCE:
        return isSetCreateSource();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resetMemberPayPwd_args)
        return this.equals((resetMemberPayPwd_args)that);
      return false;
    }

    public boolean equals(resetMemberPayPwd_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_ciphertextPwd = true && this.isSetCiphertextPwd();
      boolean that_present_ciphertextPwd = true && that.isSetCiphertextPwd();
      if (this_present_ciphertextPwd || that_present_ciphertextPwd) {
        if (!(this_present_ciphertextPwd && that_present_ciphertextPwd))
          return false;
        if (!this.ciphertextPwd.equals(that.ciphertextPwd))
          return false;
      }

      boolean this_present_ciphertextPwdTemp = true && this.isSetCiphertextPwdTemp();
      boolean that_present_ciphertextPwdTemp = true && that.isSetCiphertextPwdTemp();
      if (this_present_ciphertextPwdTemp || that_present_ciphertextPwdTemp) {
        if (!(this_present_ciphertextPwdTemp && that_present_ciphertextPwdTemp))
          return false;
        if (!this.ciphertextPwdTemp.equals(that.ciphertextPwdTemp))
          return false;
      }

      boolean this_present_createSource = true && this.isSetCreateSource();
      boolean that_present_createSource = true && that.isSetCreateSource();
      if (this_present_createSource || that_present_createSource) {
        if (!(this_present_createSource && that_present_createSource))
          return false;
        if (!this.createSource.equals(that.createSource))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_ciphertextPwd = true && (isSetCiphertextPwd());
      list.add(present_ciphertextPwd);
      if (present_ciphertextPwd)
        list.add(ciphertextPwd);

      boolean present_ciphertextPwdTemp = true && (isSetCiphertextPwdTemp());
      list.add(present_ciphertextPwdTemp);
      if (present_ciphertextPwdTemp)
        list.add(ciphertextPwdTemp);

      boolean present_createSource = true && (isSetCreateSource());
      list.add(present_createSource);
      if (present_createSource)
        list.add(createSource);

      return list.hashCode();
    }

    @Override
    public int compareTo(resetMemberPayPwd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCiphertextPwd()).compareTo(other.isSetCiphertextPwd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCiphertextPwd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ciphertextPwd, other.ciphertextPwd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCiphertextPwdTemp()).compareTo(other.isSetCiphertextPwdTemp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCiphertextPwdTemp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ciphertextPwdTemp, other.ciphertextPwdTemp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCreateSource()).compareTo(other.isSetCreateSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreateSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createSource, other.createSource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resetMemberPayPwd_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ciphertextPwd:");
      if (this.ciphertextPwd == null) {
        sb.append("null");
      } else {
        sb.append(this.ciphertextPwd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ciphertextPwdTemp:");
      if (this.ciphertextPwdTemp == null) {
        sb.append("null");
      } else {
        sb.append(this.ciphertextPwdTemp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("createSource:");
      if (this.createSource == null) {
        sb.append("null");
      } else {
        sb.append(this.createSource);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resetMemberPayPwd_argsStandardSchemeFactory implements SchemeFactory {
      public resetMemberPayPwd_argsStandardScheme getScheme() {
        return new resetMemberPayPwd_argsStandardScheme();
      }
    }

    private static class resetMemberPayPwd_argsStandardScheme extends StandardScheme<resetMemberPayPwd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resetMemberPayPwd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CIPHERTEXT_PWD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ciphertextPwd = iprot.readString();
                struct.setCiphertextPwdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CIPHERTEXT_PWD_TEMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ciphertextPwdTemp = iprot.readString();
                struct.setCiphertextPwdTempIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CREATE_SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.createSource = iprot.readString();
                struct.setCreateSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resetMemberPayPwd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.ciphertextPwd != null) {
          oprot.writeFieldBegin(CIPHERTEXT_PWD_FIELD_DESC);
          oprot.writeString(struct.ciphertextPwd);
          oprot.writeFieldEnd();
        }
        if (struct.ciphertextPwdTemp != null) {
          oprot.writeFieldBegin(CIPHERTEXT_PWD_TEMP_FIELD_DESC);
          oprot.writeString(struct.ciphertextPwdTemp);
          oprot.writeFieldEnd();
        }
        if (struct.createSource != null) {
          oprot.writeFieldBegin(CREATE_SOURCE_FIELD_DESC);
          oprot.writeString(struct.createSource);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resetMemberPayPwd_argsTupleSchemeFactory implements SchemeFactory {
      public resetMemberPayPwd_argsTupleScheme getScheme() {
        return new resetMemberPayPwd_argsTupleScheme();
      }
    }

    private static class resetMemberPayPwd_argsTupleScheme extends TupleScheme<resetMemberPayPwd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resetMemberPayPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetCiphertextPwd()) {
          optionals.set(1);
        }
        if (struct.isSetCiphertextPwdTemp()) {
          optionals.set(2);
        }
        if (struct.isSetCreateSource()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetCiphertextPwd()) {
          oprot.writeString(struct.ciphertextPwd);
        }
        if (struct.isSetCiphertextPwdTemp()) {
          oprot.writeString(struct.ciphertextPwdTemp);
        }
        if (struct.isSetCreateSource()) {
          oprot.writeString(struct.createSource);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resetMemberPayPwd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ciphertextPwd = iprot.readString();
          struct.setCiphertextPwdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ciphertextPwdTemp = iprot.readString();
          struct.setCiphertextPwdTempIsSet(true);
        }
        if (incoming.get(3)) {
          struct.createSource = iprot.readString();
          struct.setCreateSourceIsSet(true);
        }
      }
    }

  }

  public static class resetMemberPayPwd_result implements org.apache.thrift.TBase<resetMemberPayPwd_result, resetMemberPayPwd_result._Fields>, java.io.Serializable, Cloneable, Comparable<resetMemberPayPwd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resetMemberPayPwd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resetMemberPayPwd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resetMemberPayPwd_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resetMemberPayPwd_result.class, metaDataMap);
    }

    public resetMemberPayPwd_result() {
    }

    public resetMemberPayPwd_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resetMemberPayPwd_result(resetMemberPayPwd_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public resetMemberPayPwd_result deepCopy() {
      return new resetMemberPayPwd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public resetMemberPayPwd_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resetMemberPayPwd_result)
        return this.equals((resetMemberPayPwd_result)that);
      return false;
    }

    public boolean equals(resetMemberPayPwd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(resetMemberPayPwd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resetMemberPayPwd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resetMemberPayPwd_resultStandardSchemeFactory implements SchemeFactory {
      public resetMemberPayPwd_resultStandardScheme getScheme() {
        return new resetMemberPayPwd_resultStandardScheme();
      }
    }

    private static class resetMemberPayPwd_resultStandardScheme extends StandardScheme<resetMemberPayPwd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resetMemberPayPwd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resetMemberPayPwd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resetMemberPayPwd_resultTupleSchemeFactory implements SchemeFactory {
      public resetMemberPayPwd_resultTupleScheme getScheme() {
        return new resetMemberPayPwd_resultTupleScheme();
      }
    }

    private static class resetMemberPayPwd_resultTupleScheme extends TupleScheme<resetMemberPayPwd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resetMemberPayPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resetMemberPayPwd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setFirstMemberQuestion_args implements org.apache.thrift.TBase<setFirstMemberQuestion_args, setFirstMemberQuestion_args._Fields>, java.io.Serializable, Cloneable, Comparable<setFirstMemberQuestion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setFirstMemberQuestion_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField QUESTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("questions", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setFirstMemberQuestion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setFirstMemberQuestion_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      QUESTIONS((short)2, "questions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // QUESTIONS
            return QUESTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.QUESTIONS, new org.apache.thrift.meta_data.FieldMetaData("questions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.member.UserEngineQuestionVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setFirstMemberQuestion_args.class, metaDataMap);
    }

    public setFirstMemberQuestion_args() {
    }

    public setFirstMemberQuestion_args(
      long memberCode,
      List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.questions = questions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setFirstMemberQuestion_args(setFirstMemberQuestion_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetQuestions()) {
        List<com.froad.thrift.vo.member.UserEngineQuestionVo> __this__questions = new ArrayList<com.froad.thrift.vo.member.UserEngineQuestionVo>(other.questions.size());
        for (com.froad.thrift.vo.member.UserEngineQuestionVo other_element : other.questions) {
          __this__questions.add(new com.froad.thrift.vo.member.UserEngineQuestionVo(other_element));
        }
        this.questions = __this__questions;
      }
    }

    public setFirstMemberQuestion_args deepCopy() {
      return new setFirstMemberQuestion_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.questions = null;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public setFirstMemberQuestion_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public int getQuestionsSize() {
      return (this.questions == null) ? 0 : this.questions.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.member.UserEngineQuestionVo> getQuestionsIterator() {
      return (this.questions == null) ? null : this.questions.iterator();
    }

    public void addToQuestions(com.froad.thrift.vo.member.UserEngineQuestionVo elem) {
      if (this.questions == null) {
        this.questions = new ArrayList<com.froad.thrift.vo.member.UserEngineQuestionVo>();
      }
      this.questions.add(elem);
    }

    public List<com.froad.thrift.vo.member.UserEngineQuestionVo> getQuestions() {
      return this.questions;
    }

    public setFirstMemberQuestion_args setQuestions(List<com.froad.thrift.vo.member.UserEngineQuestionVo> questions) {
      this.questions = questions;
      return this;
    }

    public void unsetQuestions() {
      this.questions = null;
    }

    /** Returns true if field questions is set (has been assigned a value) and false otherwise */
    public boolean isSetQuestions() {
      return this.questions != null;
    }

    public void setQuestionsIsSet(boolean value) {
      if (!value) {
        this.questions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case QUESTIONS:
        if (value == null) {
          unsetQuestions();
        } else {
          setQuestions((List<com.froad.thrift.vo.member.UserEngineQuestionVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case QUESTIONS:
        return getQuestions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case QUESTIONS:
        return isSetQuestions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setFirstMemberQuestion_args)
        return this.equals((setFirstMemberQuestion_args)that);
      return false;
    }

    public boolean equals(setFirstMemberQuestion_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_questions = true && this.isSetQuestions();
      boolean that_present_questions = true && that.isSetQuestions();
      if (this_present_questions || that_present_questions) {
        if (!(this_present_questions && that_present_questions))
          return false;
        if (!this.questions.equals(that.questions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_questions = true && (isSetQuestions());
      list.add(present_questions);
      if (present_questions)
        list.add(questions);

      return list.hashCode();
    }

    @Override
    public int compareTo(setFirstMemberQuestion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuestions()).compareTo(other.isSetQuestions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuestions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questions, other.questions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setFirstMemberQuestion_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("questions:");
      if (this.questions == null) {
        sb.append("null");
      } else {
        sb.append(this.questions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setFirstMemberQuestion_argsStandardSchemeFactory implements SchemeFactory {
      public setFirstMemberQuestion_argsStandardScheme getScheme() {
        return new setFirstMemberQuestion_argsStandardScheme();
      }
    }

    private static class setFirstMemberQuestion_argsStandardScheme extends StandardScheme<setFirstMemberQuestion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setFirstMemberQuestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUESTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.questions = new ArrayList<com.froad.thrift.vo.member.UserEngineQuestionVo>(_list8.size);
                  com.froad.thrift.vo.member.UserEngineQuestionVo _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.froad.thrift.vo.member.UserEngineQuestionVo();
                    _elem9.read(iprot);
                    struct.questions.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setQuestionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setFirstMemberQuestion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.questions != null) {
          oprot.writeFieldBegin(QUESTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.questions.size()));
            for (com.froad.thrift.vo.member.UserEngineQuestionVo _iter11 : struct.questions)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setFirstMemberQuestion_argsTupleSchemeFactory implements SchemeFactory {
      public setFirstMemberQuestion_argsTupleScheme getScheme() {
        return new setFirstMemberQuestion_argsTupleScheme();
      }
    }

    private static class setFirstMemberQuestion_argsTupleScheme extends TupleScheme<setFirstMemberQuestion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setFirstMemberQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetQuestions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetQuestions()) {
          {
            oprot.writeI32(struct.questions.size());
            for (com.froad.thrift.vo.member.UserEngineQuestionVo _iter12 : struct.questions)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setFirstMemberQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.questions = new ArrayList<com.froad.thrift.vo.member.UserEngineQuestionVo>(_list13.size);
            com.froad.thrift.vo.member.UserEngineQuestionVo _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.froad.thrift.vo.member.UserEngineQuestionVo();
              _elem14.read(iprot);
              struct.questions.add(_elem14);
            }
          }
          struct.setQuestionsIsSet(true);
        }
      }
    }

  }

  public static class setFirstMemberQuestion_result implements org.apache.thrift.TBase<setFirstMemberQuestion_result, setFirstMemberQuestion_result._Fields>, java.io.Serializable, Cloneable, Comparable<setFirstMemberQuestion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setFirstMemberQuestion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setFirstMemberQuestion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setFirstMemberQuestion_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setFirstMemberQuestion_result.class, metaDataMap);
    }

    public setFirstMemberQuestion_result() {
    }

    public setFirstMemberQuestion_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setFirstMemberQuestion_result(setFirstMemberQuestion_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public setFirstMemberQuestion_result deepCopy() {
      return new setFirstMemberQuestion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public setFirstMemberQuestion_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setFirstMemberQuestion_result)
        return this.equals((setFirstMemberQuestion_result)that);
      return false;
    }

    public boolean equals(setFirstMemberQuestion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setFirstMemberQuestion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setFirstMemberQuestion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setFirstMemberQuestion_resultStandardSchemeFactory implements SchemeFactory {
      public setFirstMemberQuestion_resultStandardScheme getScheme() {
        return new setFirstMemberQuestion_resultStandardScheme();
      }
    }

    private static class setFirstMemberQuestion_resultStandardScheme extends StandardScheme<setFirstMemberQuestion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setFirstMemberQuestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setFirstMemberQuestion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setFirstMemberQuestion_resultTupleSchemeFactory implements SchemeFactory {
      public setFirstMemberQuestion_resultTupleScheme getScheme() {
        return new setFirstMemberQuestion_resultTupleScheme();
      }
    }

    private static class setFirstMemberQuestion_resultTupleScheme extends TupleScheme<setFirstMemberQuestion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setFirstMemberQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setFirstMemberQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class selectPageOfMemberPointsRecordHistory_args implements org.apache.thrift.TBase<selectPageOfMemberPointsRecordHistory_args, selectPageOfMemberPointsRecordHistory_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectPageOfMemberPointsRecordHistory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectPageOfMemberPointsRecordHistory_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LONG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("longID", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)7);
    private static final org.apache.thrift.protocol.TField USER_ENGINE_POINTS_RECORD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("userEnginePointsRecordType", org.apache.thrift.protocol.TType.STRING, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectPageOfMemberPointsRecordHistory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectPageOfMemberPointsRecordHistory_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String longID; // required
    public long pageSize; // required
    public long pageNum; // required
    public long startTime; // required
    public long endTime; // required
    public String userEnginePointsRecordType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      LONG_ID((short)2, "longID"),
      PAGE_SIZE((short)3, "pageSize"),
      PAGE_NUM((short)4, "pageNum"),
      START_TIME((short)5, "startTime"),
      END_TIME((short)7, "endTime"),
      USER_ENGINE_POINTS_RECORD_TYPE((short)8, "userEnginePointsRecordType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // LONG_ID
            return LONG_ID;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          case 4: // PAGE_NUM
            return PAGE_NUM;
          case 5: // START_TIME
            return START_TIME;
          case 7: // END_TIME
            return END_TIME;
          case 8: // USER_ENGINE_POINTS_RECORD_TYPE
            return USER_ENGINE_POINTS_RECORD_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGESIZE_ISSET_ID = 0;
    private static final int __PAGENUM_ISSET_ID = 1;
    private static final int __STARTTIME_ISSET_ID = 2;
    private static final int __ENDTIME_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LONG_ID, new org.apache.thrift.meta_data.FieldMetaData("longID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.USER_ENGINE_POINTS_RECORD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("userEnginePointsRecordType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectPageOfMemberPointsRecordHistory_args.class, metaDataMap);
    }

    public selectPageOfMemberPointsRecordHistory_args() {
    }

    public selectPageOfMemberPointsRecordHistory_args(
      String clientId,
      String longID,
      long pageSize,
      long pageNum,
      long startTime,
      long endTime,
      String userEnginePointsRecordType)
    {
      this();
      this.clientId = clientId;
      this.longID = longID;
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      this.startTime = startTime;
      setStartTimeIsSet(true);
      this.endTime = endTime;
      setEndTimeIsSet(true);
      this.userEnginePointsRecordType = userEnginePointsRecordType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectPageOfMemberPointsRecordHistory_args(selectPageOfMemberPointsRecordHistory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetLongID()) {
        this.longID = other.longID;
      }
      this.pageSize = other.pageSize;
      this.pageNum = other.pageNum;
      this.startTime = other.startTime;
      this.endTime = other.endTime;
      if (other.isSetUserEnginePointsRecordType()) {
        this.userEnginePointsRecordType = other.userEnginePointsRecordType;
      }
    }

    public selectPageOfMemberPointsRecordHistory_args deepCopy() {
      return new selectPageOfMemberPointsRecordHistory_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.longID = null;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      setPageNumIsSet(false);
      this.pageNum = 0;
      setStartTimeIsSet(false);
      this.startTime = 0;
      setEndTimeIsSet(false);
      this.endTime = 0;
      this.userEnginePointsRecordType = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public selectPageOfMemberPointsRecordHistory_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getLongID() {
      return this.longID;
    }

    public selectPageOfMemberPointsRecordHistory_args setLongID(String longID) {
      this.longID = longID;
      return this;
    }

    public void unsetLongID() {
      this.longID = null;
    }

    /** Returns true if field longID is set (has been assigned a value) and false otherwise */
    public boolean isSetLongID() {
      return this.longID != null;
    }

    public void setLongIDIsSet(boolean value) {
      if (!value) {
        this.longID = null;
      }
    }

    public long getPageSize() {
      return this.pageSize;
    }

    public selectPageOfMemberPointsRecordHistory_args setPageSize(long pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public long getPageNum() {
      return this.pageNum;
    }

    public selectPageOfMemberPointsRecordHistory_args setPageNum(long pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public long getStartTime() {
      return this.startTime;
    }

    public selectPageOfMemberPointsRecordHistory_args setStartTime(long startTime) {
      this.startTime = startTime;
      setStartTimeIsSet(true);
      return this;
    }

    public void unsetStartTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTime() {
      return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
    }

    public void setStartTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
    }

    public long getEndTime() {
      return this.endTime;
    }

    public selectPageOfMemberPointsRecordHistory_args setEndTime(long endTime) {
      this.endTime = endTime;
      setEndTimeIsSet(true);
      return this;
    }

    public void unsetEndTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
    }

    public String getUserEnginePointsRecordType() {
      return this.userEnginePointsRecordType;
    }

    public selectPageOfMemberPointsRecordHistory_args setUserEnginePointsRecordType(String userEnginePointsRecordType) {
      this.userEnginePointsRecordType = userEnginePointsRecordType;
      return this;
    }

    public void unsetUserEnginePointsRecordType() {
      this.userEnginePointsRecordType = null;
    }

    /** Returns true if field userEnginePointsRecordType is set (has been assigned a value) and false otherwise */
    public boolean isSetUserEnginePointsRecordType() {
      return this.userEnginePointsRecordType != null;
    }

    public void setUserEnginePointsRecordTypeIsSet(boolean value) {
      if (!value) {
        this.userEnginePointsRecordType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case LONG_ID:
        if (value == null) {
          unsetLongID();
        } else {
          setLongID((String)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Long)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Long)value);
        }
        break;

      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Long)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Long)value);
        }
        break;

      case USER_ENGINE_POINTS_RECORD_TYPE:
        if (value == null) {
          unsetUserEnginePointsRecordType();
        } else {
          setUserEnginePointsRecordType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case LONG_ID:
        return getLongID();

      case PAGE_SIZE:
        return Long.valueOf(getPageSize());

      case PAGE_NUM:
        return Long.valueOf(getPageNum());

      case START_TIME:
        return Long.valueOf(getStartTime());

      case END_TIME:
        return Long.valueOf(getEndTime());

      case USER_ENGINE_POINTS_RECORD_TYPE:
        return getUserEnginePointsRecordType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case LONG_ID:
        return isSetLongID();
      case PAGE_SIZE:
        return isSetPageSize();
      case PAGE_NUM:
        return isSetPageNum();
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      case USER_ENGINE_POINTS_RECORD_TYPE:
        return isSetUserEnginePointsRecordType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectPageOfMemberPointsRecordHistory_args)
        return this.equals((selectPageOfMemberPointsRecordHistory_args)that);
      return false;
    }

    public boolean equals(selectPageOfMemberPointsRecordHistory_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_longID = true && this.isSetLongID();
      boolean that_present_longID = true && that.isSetLongID();
      if (this_present_longID || that_present_longID) {
        if (!(this_present_longID && that_present_longID))
          return false;
        if (!this.longID.equals(that.longID))
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      boolean this_present_startTime = true;
      boolean that_present_startTime = true;
      if (this_present_startTime || that_present_startTime) {
        if (!(this_present_startTime && that_present_startTime))
          return false;
        if (this.startTime != that.startTime)
          return false;
      }

      boolean this_present_endTime = true;
      boolean that_present_endTime = true;
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (this.endTime != that.endTime)
          return false;
      }

      boolean this_present_userEnginePointsRecordType = true && this.isSetUserEnginePointsRecordType();
      boolean that_present_userEnginePointsRecordType = true && that.isSetUserEnginePointsRecordType();
      if (this_present_userEnginePointsRecordType || that_present_userEnginePointsRecordType) {
        if (!(this_present_userEnginePointsRecordType && that_present_userEnginePointsRecordType))
          return false;
        if (!this.userEnginePointsRecordType.equals(that.userEnginePointsRecordType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_longID = true && (isSetLongID());
      list.add(present_longID);
      if (present_longID)
        list.add(longID);

      boolean present_pageSize = true;
      list.add(present_pageSize);
      if (present_pageSize)
        list.add(pageSize);

      boolean present_pageNum = true;
      list.add(present_pageNum);
      if (present_pageNum)
        list.add(pageNum);

      boolean present_startTime = true;
      list.add(present_startTime);
      if (present_startTime)
        list.add(startTime);

      boolean present_endTime = true;
      list.add(present_endTime);
      if (present_endTime)
        list.add(endTime);

      boolean present_userEnginePointsRecordType = true && (isSetUserEnginePointsRecordType());
      list.add(present_userEnginePointsRecordType);
      if (present_userEnginePointsRecordType)
        list.add(userEnginePointsRecordType);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectPageOfMemberPointsRecordHistory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLongID()).compareTo(other.isSetLongID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLongID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longID, other.longID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserEnginePointsRecordType()).compareTo(other.isSetUserEnginePointsRecordType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserEnginePointsRecordType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userEnginePointsRecordType, other.userEnginePointsRecordType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectPageOfMemberPointsRecordHistory_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("longID:");
      if (this.longID == null) {
        sb.append("null");
      } else {
        sb.append(this.longID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userEnginePointsRecordType:");
      if (this.userEnginePointsRecordType == null) {
        sb.append("null");
      } else {
        sb.append(this.userEnginePointsRecordType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectPageOfMemberPointsRecordHistory_argsStandardSchemeFactory implements SchemeFactory {
      public selectPageOfMemberPointsRecordHistory_argsStandardScheme getScheme() {
        return new selectPageOfMemberPointsRecordHistory_argsStandardScheme();
      }
    }

    private static class selectPageOfMemberPointsRecordHistory_argsStandardScheme extends StandardScheme<selectPageOfMemberPointsRecordHistory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectPageOfMemberPointsRecordHistory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LONG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.longID = iprot.readString();
                struct.setLongIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.pageSize = iprot.readI64();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.pageNum = iprot.readI64();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // START_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.startTime = iprot.readI64();
                struct.setStartTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // USER_ENGINE_POINTS_RECORD_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userEnginePointsRecordType = iprot.readString();
                struct.setUserEnginePointsRecordTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectPageOfMemberPointsRecordHistory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.longID != null) {
          oprot.writeFieldBegin(LONG_ID_FIELD_DESC);
          oprot.writeString(struct.longID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI64(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI64(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
        if (struct.userEnginePointsRecordType != null) {
          oprot.writeFieldBegin(USER_ENGINE_POINTS_RECORD_TYPE_FIELD_DESC);
          oprot.writeString(struct.userEnginePointsRecordType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectPageOfMemberPointsRecordHistory_argsTupleSchemeFactory implements SchemeFactory {
      public selectPageOfMemberPointsRecordHistory_argsTupleScheme getScheme() {
        return new selectPageOfMemberPointsRecordHistory_argsTupleScheme();
      }
    }

    private static class selectPageOfMemberPointsRecordHistory_argsTupleScheme extends TupleScheme<selectPageOfMemberPointsRecordHistory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectPageOfMemberPointsRecordHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetLongID()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        if (struct.isSetPageNum()) {
          optionals.set(3);
        }
        if (struct.isSetStartTime()) {
          optionals.set(4);
        }
        if (struct.isSetEndTime()) {
          optionals.set(5);
        }
        if (struct.isSetUserEnginePointsRecordType()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetLongID()) {
          oprot.writeString(struct.longID);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI64(struct.pageSize);
        }
        if (struct.isSetPageNum()) {
          oprot.writeI64(struct.pageNum);
        }
        if (struct.isSetStartTime()) {
          oprot.writeI64(struct.startTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeI64(struct.endTime);
        }
        if (struct.isSetUserEnginePointsRecordType()) {
          oprot.writeString(struct.userEnginePointsRecordType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectPageOfMemberPointsRecordHistory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.longID = iprot.readString();
          struct.setLongIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI64();
          struct.setPageSizeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageNum = iprot.readI64();
          struct.setPageNumIsSet(true);
        }
        if (incoming.get(4)) {
          struct.startTime = iprot.readI64();
          struct.setStartTimeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.endTime = iprot.readI64();
          struct.setEndTimeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.userEnginePointsRecordType = iprot.readString();
          struct.setUserEnginePointsRecordTypeIsSet(true);
        }
      }
    }

  }

  public static class selectPageOfMemberPointsRecordHistory_result implements org.apache.thrift.TBase<selectPageOfMemberPointsRecordHistory_result, selectPageOfMemberPointsRecordHistory_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectPageOfMemberPointsRecordHistory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectPageOfMemberPointsRecordHistory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectPageOfMemberPointsRecordHistory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectPageOfMemberPointsRecordHistory_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.member.UserEnginePageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.member.UserEnginePageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectPageOfMemberPointsRecordHistory_result.class, metaDataMap);
    }

    public selectPageOfMemberPointsRecordHistory_result() {
    }

    public selectPageOfMemberPointsRecordHistory_result(
      com.froad.thrift.vo.member.UserEnginePageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectPageOfMemberPointsRecordHistory_result(selectPageOfMemberPointsRecordHistory_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.member.UserEnginePageVoRes(other.success);
      }
    }

    public selectPageOfMemberPointsRecordHistory_result deepCopy() {
      return new selectPageOfMemberPointsRecordHistory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.member.UserEnginePageVoRes getSuccess() {
      return this.success;
    }

    public selectPageOfMemberPointsRecordHistory_result setSuccess(com.froad.thrift.vo.member.UserEnginePageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.member.UserEnginePageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectPageOfMemberPointsRecordHistory_result)
        return this.equals((selectPageOfMemberPointsRecordHistory_result)that);
      return false;
    }

    public boolean equals(selectPageOfMemberPointsRecordHistory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectPageOfMemberPointsRecordHistory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectPageOfMemberPointsRecordHistory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectPageOfMemberPointsRecordHistory_resultStandardSchemeFactory implements SchemeFactory {
      public selectPageOfMemberPointsRecordHistory_resultStandardScheme getScheme() {
        return new selectPageOfMemberPointsRecordHistory_resultStandardScheme();
      }
    }

    private static class selectPageOfMemberPointsRecordHistory_resultStandardScheme extends StandardScheme<selectPageOfMemberPointsRecordHistory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectPageOfMemberPointsRecordHistory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.member.UserEnginePageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectPageOfMemberPointsRecordHistory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectPageOfMemberPointsRecordHistory_resultTupleSchemeFactory implements SchemeFactory {
      public selectPageOfMemberPointsRecordHistory_resultTupleScheme getScheme() {
        return new selectPageOfMemberPointsRecordHistory_resultTupleScheme();
      }
    }

    private static class selectPageOfMemberPointsRecordHistory_resultTupleScheme extends TupleScheme<selectPageOfMemberPointsRecordHistory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectPageOfMemberPointsRecordHistory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectPageOfMemberPointsRecordHistory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.member.UserEnginePageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendExchangeCode_args implements org.apache.thrift.TBase<sendExchangeCode_args, sendExchangeCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendExchangeCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendExchangeCode_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("points", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField USE_BANK_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("useBankChannel", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendExchangeCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendExchangeCode_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String mobile; // required
    public int points; // required
    public boolean useBankChannel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      MOBILE((short)2, "mobile"),
      POINTS((short)3, "points"),
      USE_BANK_CHANNEL((short)4, "useBankChannel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // MOBILE
            return MOBILE;
          case 3: // POINTS
            return POINTS;
          case 4: // USE_BANK_CHANNEL
            return USE_BANK_CHANNEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __POINTS_ISSET_ID = 0;
    private static final int __USEBANKCHANNEL_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POINTS, new org.apache.thrift.meta_data.FieldMetaData("points", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USE_BANK_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("useBankChannel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendExchangeCode_args.class, metaDataMap);
    }

    public sendExchangeCode_args() {
    }

    public sendExchangeCode_args(
      String clientId,
      String mobile,
      int points,
      boolean useBankChannel)
    {
      this();
      this.clientId = clientId;
      this.mobile = mobile;
      this.points = points;
      setPointsIsSet(true);
      this.useBankChannel = useBankChannel;
      setUseBankChannelIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendExchangeCode_args(sendExchangeCode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
      this.points = other.points;
      this.useBankChannel = other.useBankChannel;
    }

    public sendExchangeCode_args deepCopy() {
      return new sendExchangeCode_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.mobile = null;
      setPointsIsSet(false);
      this.points = 0;
      setUseBankChannelIsSet(false);
      this.useBankChannel = false;
    }

    public String getClientId() {
      return this.clientId;
    }

    public sendExchangeCode_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getMobile() {
      return this.mobile;
    }

    public sendExchangeCode_args setMobile(String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public int getPoints() {
      return this.points;
    }

    public sendExchangeCode_args setPoints(int points) {
      this.points = points;
      setPointsIsSet(true);
      return this;
    }

    public void unsetPoints() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTS_ISSET_ID);
    }

    /** Returns true if field points is set (has been assigned a value) and false otherwise */
    public boolean isSetPoints() {
      return EncodingUtils.testBit(__isset_bitfield, __POINTS_ISSET_ID);
    }

    public void setPointsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTS_ISSET_ID, value);
    }

    public boolean isUseBankChannel() {
      return this.useBankChannel;
    }

    public sendExchangeCode_args setUseBankChannel(boolean useBankChannel) {
      this.useBankChannel = useBankChannel;
      setUseBankChannelIsSet(true);
      return this;
    }

    public void unsetUseBankChannel() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEBANKCHANNEL_ISSET_ID);
    }

    /** Returns true if field useBankChannel is set (has been assigned a value) and false otherwise */
    public boolean isSetUseBankChannel() {
      return EncodingUtils.testBit(__isset_bitfield, __USEBANKCHANNEL_ISSET_ID);
    }

    public void setUseBankChannelIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEBANKCHANNEL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((String)value);
        }
        break;

      case POINTS:
        if (value == null) {
          unsetPoints();
        } else {
          setPoints((Integer)value);
        }
        break;

      case USE_BANK_CHANNEL:
        if (value == null) {
          unsetUseBankChannel();
        } else {
          setUseBankChannel((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case MOBILE:
        return getMobile();

      case POINTS:
        return Integer.valueOf(getPoints());

      case USE_BANK_CHANNEL:
        return Boolean.valueOf(isUseBankChannel());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case MOBILE:
        return isSetMobile();
      case POINTS:
        return isSetPoints();
      case USE_BANK_CHANNEL:
        return isSetUseBankChannel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendExchangeCode_args)
        return this.equals((sendExchangeCode_args)that);
      return false;
    }

    public boolean equals(sendExchangeCode_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      boolean this_present_points = true;
      boolean that_present_points = true;
      if (this_present_points || that_present_points) {
        if (!(this_present_points && that_present_points))
          return false;
        if (this.points != that.points)
          return false;
      }

      boolean this_present_useBankChannel = true;
      boolean that_present_useBankChannel = true;
      if (this_present_useBankChannel || that_present_useBankChannel) {
        if (!(this_present_useBankChannel && that_present_useBankChannel))
          return false;
        if (this.useBankChannel != that.useBankChannel)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_mobile = true && (isSetMobile());
      list.add(present_mobile);
      if (present_mobile)
        list.add(mobile);

      boolean present_points = true;
      list.add(present_points);
      if (present_points)
        list.add(points);

      boolean present_useBankChannel = true;
      list.add(present_useBankChannel);
      if (present_useBankChannel)
        list.add(useBankChannel);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendExchangeCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPoints()).compareTo(other.isSetPoints());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPoints()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.points, other.points);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUseBankChannel()).compareTo(other.isSetUseBankChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUseBankChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useBankChannel, other.useBankChannel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendExchangeCode_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("points:");
      sb.append(this.points);
      first = false;
      if (!first) sb.append(", ");
      sb.append("useBankChannel:");
      sb.append(this.useBankChannel);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendExchangeCode_argsStandardSchemeFactory implements SchemeFactory {
      public sendExchangeCode_argsStandardScheme getScheme() {
        return new sendExchangeCode_argsStandardScheme();
      }
    }

    private static class sendExchangeCode_argsStandardScheme extends StandardScheme<sendExchangeCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendExchangeCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POINTS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.points = iprot.readI32();
                struct.setPointsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USE_BANK_CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.useBankChannel = iprot.readBool();
                struct.setUseBankChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendExchangeCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(POINTS_FIELD_DESC);
        oprot.writeI32(struct.points);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USE_BANK_CHANNEL_FIELD_DESC);
        oprot.writeBool(struct.useBankChannel);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendExchangeCode_argsTupleSchemeFactory implements SchemeFactory {
      public sendExchangeCode_argsTupleScheme getScheme() {
        return new sendExchangeCode_argsTupleScheme();
      }
    }

    private static class sendExchangeCode_argsTupleScheme extends TupleScheme<sendExchangeCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendExchangeCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetMobile()) {
          optionals.set(1);
        }
        if (struct.isSetPoints()) {
          optionals.set(2);
        }
        if (struct.isSetUseBankChannel()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
        if (struct.isSetPoints()) {
          oprot.writeI32(struct.points);
        }
        if (struct.isSetUseBankChannel()) {
          oprot.writeBool(struct.useBankChannel);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendExchangeCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
        if (incoming.get(2)) {
          struct.points = iprot.readI32();
          struct.setPointsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.useBankChannel = iprot.readBool();
          struct.setUseBankChannelIsSet(true);
        }
      }
    }

  }

  public static class sendExchangeCode_result implements org.apache.thrift.TBase<sendExchangeCode_result, sendExchangeCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendExchangeCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendExchangeCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendExchangeCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendExchangeCode_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendExchangeCode_result.class, metaDataMap);
    }

    public sendExchangeCode_result() {
    }

    public sendExchangeCode_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendExchangeCode_result(sendExchangeCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public sendExchangeCode_result deepCopy() {
      return new sendExchangeCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public sendExchangeCode_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendExchangeCode_result)
        return this.equals((sendExchangeCode_result)that);
      return false;
    }

    public boolean equals(sendExchangeCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendExchangeCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendExchangeCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendExchangeCode_resultStandardSchemeFactory implements SchemeFactory {
      public sendExchangeCode_resultStandardScheme getScheme() {
        return new sendExchangeCode_resultStandardScheme();
      }
    }

    private static class sendExchangeCode_resultStandardScheme extends StandardScheme<sendExchangeCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendExchangeCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendExchangeCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendExchangeCode_resultTupleSchemeFactory implements SchemeFactory {
      public sendExchangeCode_resultTupleScheme getScheme() {
        return new sendExchangeCode_resultTupleScheme();
      }
    }

    private static class sendExchangeCode_resultTupleScheme extends TupleScheme<sendExchangeCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendExchangeCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendExchangeCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class verifyExchangeCode_args implements org.apache.thrift.TBase<verifyExchangeCode_args, verifyExchangeCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyExchangeCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyExchangeCode_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MOBILE_OR_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileOrToken", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField USE_BANK_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("useBankChannel", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyExchangeCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyExchangeCode_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String mobileOrToken; // required
    public String code; // required
    public boolean useBankChannel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      MOBILE_OR_TOKEN((short)2, "mobileOrToken"),
      CODE((short)3, "code"),
      USE_BANK_CHANNEL((short)4, "useBankChannel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // MOBILE_OR_TOKEN
            return MOBILE_OR_TOKEN;
          case 3: // CODE
            return CODE;
          case 4: // USE_BANK_CHANNEL
            return USE_BANK_CHANNEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USEBANKCHANNEL_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE_OR_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("mobileOrToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USE_BANK_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("useBankChannel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyExchangeCode_args.class, metaDataMap);
    }

    public verifyExchangeCode_args() {
    }

    public verifyExchangeCode_args(
      String clientId,
      String mobileOrToken,
      String code,
      boolean useBankChannel)
    {
      this();
      this.clientId = clientId;
      this.mobileOrToken = mobileOrToken;
      this.code = code;
      this.useBankChannel = useBankChannel;
      setUseBankChannelIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyExchangeCode_args(verifyExchangeCode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetMobileOrToken()) {
        this.mobileOrToken = other.mobileOrToken;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.useBankChannel = other.useBankChannel;
    }

    public verifyExchangeCode_args deepCopy() {
      return new verifyExchangeCode_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.mobileOrToken = null;
      this.code = null;
      setUseBankChannelIsSet(false);
      this.useBankChannel = false;
    }

    public String getClientId() {
      return this.clientId;
    }

    public verifyExchangeCode_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getMobileOrToken() {
      return this.mobileOrToken;
    }

    public verifyExchangeCode_args setMobileOrToken(String mobileOrToken) {
      this.mobileOrToken = mobileOrToken;
      return this;
    }

    public void unsetMobileOrToken() {
      this.mobileOrToken = null;
    }

    /** Returns true if field mobileOrToken is set (has been assigned a value) and false otherwise */
    public boolean isSetMobileOrToken() {
      return this.mobileOrToken != null;
    }

    public void setMobileOrTokenIsSet(boolean value) {
      if (!value) {
        this.mobileOrToken = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public verifyExchangeCode_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public boolean isUseBankChannel() {
      return this.useBankChannel;
    }

    public verifyExchangeCode_args setUseBankChannel(boolean useBankChannel) {
      this.useBankChannel = useBankChannel;
      setUseBankChannelIsSet(true);
      return this;
    }

    public void unsetUseBankChannel() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEBANKCHANNEL_ISSET_ID);
    }

    /** Returns true if field useBankChannel is set (has been assigned a value) and false otherwise */
    public boolean isSetUseBankChannel() {
      return EncodingUtils.testBit(__isset_bitfield, __USEBANKCHANNEL_ISSET_ID);
    }

    public void setUseBankChannelIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEBANKCHANNEL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MOBILE_OR_TOKEN:
        if (value == null) {
          unsetMobileOrToken();
        } else {
          setMobileOrToken((String)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case USE_BANK_CHANNEL:
        if (value == null) {
          unsetUseBankChannel();
        } else {
          setUseBankChannel((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case MOBILE_OR_TOKEN:
        return getMobileOrToken();

      case CODE:
        return getCode();

      case USE_BANK_CHANNEL:
        return Boolean.valueOf(isUseBankChannel());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case MOBILE_OR_TOKEN:
        return isSetMobileOrToken();
      case CODE:
        return isSetCode();
      case USE_BANK_CHANNEL:
        return isSetUseBankChannel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyExchangeCode_args)
        return this.equals((verifyExchangeCode_args)that);
      return false;
    }

    public boolean equals(verifyExchangeCode_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_mobileOrToken = true && this.isSetMobileOrToken();
      boolean that_present_mobileOrToken = true && that.isSetMobileOrToken();
      if (this_present_mobileOrToken || that_present_mobileOrToken) {
        if (!(this_present_mobileOrToken && that_present_mobileOrToken))
          return false;
        if (!this.mobileOrToken.equals(that.mobileOrToken))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_useBankChannel = true;
      boolean that_present_useBankChannel = true;
      if (this_present_useBankChannel || that_present_useBankChannel) {
        if (!(this_present_useBankChannel && that_present_useBankChannel))
          return false;
        if (this.useBankChannel != that.useBankChannel)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_mobileOrToken = true && (isSetMobileOrToken());
      list.add(present_mobileOrToken);
      if (present_mobileOrToken)
        list.add(mobileOrToken);

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_useBankChannel = true;
      list.add(present_useBankChannel);
      if (present_useBankChannel)
        list.add(useBankChannel);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyExchangeCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobileOrToken()).compareTo(other.isSetMobileOrToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobileOrToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileOrToken, other.mobileOrToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUseBankChannel()).compareTo(other.isSetUseBankChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUseBankChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useBankChannel, other.useBankChannel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyExchangeCode_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobileOrToken:");
      if (this.mobileOrToken == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileOrToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("useBankChannel:");
      sb.append(this.useBankChannel);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyExchangeCode_argsStandardSchemeFactory implements SchemeFactory {
      public verifyExchangeCode_argsStandardScheme getScheme() {
        return new verifyExchangeCode_argsStandardScheme();
      }
    }

    private static class verifyExchangeCode_argsStandardScheme extends StandardScheme<verifyExchangeCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyExchangeCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MOBILE_OR_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobileOrToken = iprot.readString();
                struct.setMobileOrTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USE_BANK_CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.useBankChannel = iprot.readBool();
                struct.setUseBankChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyExchangeCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.mobileOrToken != null) {
          oprot.writeFieldBegin(MOBILE_OR_TOKEN_FIELD_DESC);
          oprot.writeString(struct.mobileOrToken);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USE_BANK_CHANNEL_FIELD_DESC);
        oprot.writeBool(struct.useBankChannel);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyExchangeCode_argsTupleSchemeFactory implements SchemeFactory {
      public verifyExchangeCode_argsTupleScheme getScheme() {
        return new verifyExchangeCode_argsTupleScheme();
      }
    }

    private static class verifyExchangeCode_argsTupleScheme extends TupleScheme<verifyExchangeCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyExchangeCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetMobileOrToken()) {
          optionals.set(1);
        }
        if (struct.isSetCode()) {
          optionals.set(2);
        }
        if (struct.isSetUseBankChannel()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMobileOrToken()) {
          oprot.writeString(struct.mobileOrToken);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetUseBankChannel()) {
          oprot.writeBool(struct.useBankChannel);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyExchangeCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mobileOrToken = iprot.readString();
          struct.setMobileOrTokenIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.useBankChannel = iprot.readBool();
          struct.setUseBankChannelIsSet(true);
        }
      }
    }

  }

  public static class verifyExchangeCode_result implements org.apache.thrift.TBase<verifyExchangeCode_result, verifyExchangeCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyExchangeCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyExchangeCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyExchangeCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyExchangeCode_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyExchangeCode_result.class, metaDataMap);
    }

    public verifyExchangeCode_result() {
    }

    public verifyExchangeCode_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyExchangeCode_result(verifyExchangeCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public verifyExchangeCode_result deepCopy() {
      return new verifyExchangeCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public verifyExchangeCode_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyExchangeCode_result)
        return this.equals((verifyExchangeCode_result)that);
      return false;
    }

    public boolean equals(verifyExchangeCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyExchangeCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyExchangeCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyExchangeCode_resultStandardSchemeFactory implements SchemeFactory {
      public verifyExchangeCode_resultStandardScheme getScheme() {
        return new verifyExchangeCode_resultStandardScheme();
      }
    }

    private static class verifyExchangeCode_resultStandardScheme extends StandardScheme<verifyExchangeCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyExchangeCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyExchangeCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyExchangeCode_resultTupleSchemeFactory implements SchemeFactory {
      public verifyExchangeCode_resultTupleScheme getScheme() {
        return new verifyExchangeCode_resultTupleScheme();
      }
    }

    private static class verifyExchangeCode_resultTupleScheme extends TupleScheme<verifyExchangeCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyExchangeCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyExchangeCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteUserSettedQuestion_args implements org.apache.thrift.TBase<deleteUserSettedQuestion_args, deleteUserSettedQuestion_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUserSettedQuestion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserSettedQuestion_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUserSettedQuestion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUserSettedQuestion_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      CLIENT_ID((short)2, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserSettedQuestion_args.class, metaDataMap);
    }

    public deleteUserSettedQuestion_args() {
    }

    public deleteUserSettedQuestion_args(
      long memberCode,
      String clientId)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserSettedQuestion_args(deleteUserSettedQuestion_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public deleteUserSettedQuestion_args deepCopy() {
      return new deleteUserSettedQuestion_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.clientId = null;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public deleteUserSettedQuestion_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getClientId() {
      return this.clientId;
    }

    public deleteUserSettedQuestion_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserSettedQuestion_args)
        return this.equals((deleteUserSettedQuestion_args)that);
      return false;
    }

    public boolean equals(deleteUserSettedQuestion_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteUserSettedQuestion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUserSettedQuestion_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserSettedQuestion_argsStandardSchemeFactory implements SchemeFactory {
      public deleteUserSettedQuestion_argsStandardScheme getScheme() {
        return new deleteUserSettedQuestion_argsStandardScheme();
      }
    }

    private static class deleteUserSettedQuestion_argsStandardScheme extends StandardScheme<deleteUserSettedQuestion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserSettedQuestion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserSettedQuestion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserSettedQuestion_argsTupleSchemeFactory implements SchemeFactory {
      public deleteUserSettedQuestion_argsTupleScheme getScheme() {
        return new deleteUserSettedQuestion_argsTupleScheme();
      }
    }

    private static class deleteUserSettedQuestion_argsTupleScheme extends TupleScheme<deleteUserSettedQuestion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserSettedQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserSettedQuestion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class deleteUserSettedQuestion_result implements org.apache.thrift.TBase<deleteUserSettedQuestion_result, deleteUserSettedQuestion_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteUserSettedQuestion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteUserSettedQuestion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteUserSettedQuestion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteUserSettedQuestion_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteUserSettedQuestion_result.class, metaDataMap);
    }

    public deleteUserSettedQuestion_result() {
    }

    public deleteUserSettedQuestion_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteUserSettedQuestion_result(deleteUserSettedQuestion_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteUserSettedQuestion_result deepCopy() {
      return new deleteUserSettedQuestion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteUserSettedQuestion_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteUserSettedQuestion_result)
        return this.equals((deleteUserSettedQuestion_result)that);
      return false;
    }

    public boolean equals(deleteUserSettedQuestion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteUserSettedQuestion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteUserSettedQuestion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteUserSettedQuestion_resultStandardSchemeFactory implements SchemeFactory {
      public deleteUserSettedQuestion_resultStandardScheme getScheme() {
        return new deleteUserSettedQuestion_resultStandardScheme();
      }
    }

    private static class deleteUserSettedQuestion_resultStandardScheme extends StandardScheme<deleteUserSettedQuestion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteUserSettedQuestion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteUserSettedQuestion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteUserSettedQuestion_resultTupleSchemeFactory implements SchemeFactory {
      public deleteUserSettedQuestion_resultTupleScheme getScheme() {
        return new deleteUserSettedQuestion_resultTupleScheme();
      }
    }

    private static class deleteUserSettedQuestion_resultTupleScheme extends TupleScheme<deleteUserSettedQuestion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteUserSettedQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteUserSettedQuestion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
