/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class HistoryTaskActorService {

  /**
   * HistoryTaskActorService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 HistoryTaskActor
     * @param originVo 源信息对象
     * @param historyTaskActorVo
     * @return String    主键ID
     * 
     * @param originVo
     * @param historyTaskActorVo
     */
    public String addHistoryTaskActor(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException;

    /**
     * 删除 HistoryTaskActor
     * @param originVo 源信息对象
     * @param historyTaskActorVo
     * @return boolean
     * 
     * @param originVo
     * @param historyTaskActorVo
     */
    public boolean deleteHistoryTaskActor(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException;

    /**
     * 根据taskId删除单个 HistoryTaskActor
     * @param originVo 源信息对象
     * @param taskId
     * @return HistoryTaskActorVo
     * 
     * @param originVo
     * @param taskId
     */
    public boolean deleteHistoryTaskActorByTaskId(com.froad.thrift.vo.OriginVo originVo, String taskId) throws org.apache.thrift.TException;

    /**
     * 修改 HistoryTaskActor
     * @param originVo 源信息对象
     * @param historyTaskActorVo
     * @return boolean
     * 
     * @param originVo
     * @param historyTaskActorVo
     */
    public boolean updateHistoryTaskActor(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException;

    /**
     * 根据taskId修改单个 HistoryTaskActor
     * @param originVo 源信息对象
     * @param taskId
     * @return HistoryTaskActorVo
     * 
     * @param originVo
     * @param historyTaskActorVo
     */
    public boolean updateHistoryTaskActorByTaskId(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException;

    /**
     * 根据taskId查询单个 HistoryTaskActor
     * @param taskId
     * @return HistoryTaskActorVo
     * 
     * @param taskId
     */
    public com.froad.thrift.vo.HistoryTaskActorVo getHistoryTaskActorByTaskId(String taskId) throws org.apache.thrift.TException;

    /**
     * 根据条件查询一个 HistoryTaskActor
     * @param historyTaskActorVo
     * @return HistoryTaskActorVo
     * 
     * @param historyTaskActorVo
     */
    public com.froad.thrift.vo.HistoryTaskActorVo getOneHistoryTaskActor(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException;

    /**
     * 根据条件统计 HistoryTaskActor
     * @param historyTaskActorVo
     * @return int
     * 
     * @param historyTaskActorVo
     */
    public int countHistoryTaskActor(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException;

    /**
     * 查询 HistoryTaskActor
     * @param historyTaskActorVo
     * @return List<HistoryTaskActorVo>
     * 
     * @param historyTaskActorVo
     */
    public List<com.froad.thrift.vo.HistoryTaskActorVo> getHistoryTaskActor(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 HistoryTaskActor
     * @param historyTaskActorVo
     * @return HistoryTaskActorPageVoRes
     * 
     * @param page
     * @param historyTaskActorVo
     */
    public com.froad.thrift.vo.HistoryTaskActorPageVoRes getHistoryTaskActorByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addHistoryTaskActor(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteHistoryTaskActor(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteHistoryTaskActorByTaskId(com.froad.thrift.vo.OriginVo originVo, String taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateHistoryTaskActor(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateHistoryTaskActorByTaskId(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHistoryTaskActorByTaskId(String taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOneHistoryTaskActor(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countHistoryTaskActor(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHistoryTaskActor(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getHistoryTaskActorByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String addHistoryTaskActor(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      send_addHistoryTaskActor(originVo, historyTaskActorVo);
      return recv_addHistoryTaskActor();
    }

    public void send_addHistoryTaskActor(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      addHistoryTaskActor_args args = new addHistoryTaskActor_args();
      args.setOriginVo(originVo);
      args.setHistoryTaskActorVo(historyTaskActorVo);
      sendBase("addHistoryTaskActor", args);
    }

    public String recv_addHistoryTaskActor() throws org.apache.thrift.TException
    {
      addHistoryTaskActor_result result = new addHistoryTaskActor_result();
      receiveBase(result, "addHistoryTaskActor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addHistoryTaskActor failed: unknown result");
    }

    public boolean deleteHistoryTaskActor(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      send_deleteHistoryTaskActor(originVo, historyTaskActorVo);
      return recv_deleteHistoryTaskActor();
    }

    public void send_deleteHistoryTaskActor(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      deleteHistoryTaskActor_args args = new deleteHistoryTaskActor_args();
      args.setOriginVo(originVo);
      args.setHistoryTaskActorVo(historyTaskActorVo);
      sendBase("deleteHistoryTaskActor", args);
    }

    public boolean recv_deleteHistoryTaskActor() throws org.apache.thrift.TException
    {
      deleteHistoryTaskActor_result result = new deleteHistoryTaskActor_result();
      receiveBase(result, "deleteHistoryTaskActor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteHistoryTaskActor failed: unknown result");
    }

    public boolean deleteHistoryTaskActorByTaskId(com.froad.thrift.vo.OriginVo originVo, String taskId) throws org.apache.thrift.TException
    {
      send_deleteHistoryTaskActorByTaskId(originVo, taskId);
      return recv_deleteHistoryTaskActorByTaskId();
    }

    public void send_deleteHistoryTaskActorByTaskId(com.froad.thrift.vo.OriginVo originVo, String taskId) throws org.apache.thrift.TException
    {
      deleteHistoryTaskActorByTaskId_args args = new deleteHistoryTaskActorByTaskId_args();
      args.setOriginVo(originVo);
      args.setTaskId(taskId);
      sendBase("deleteHistoryTaskActorByTaskId", args);
    }

    public boolean recv_deleteHistoryTaskActorByTaskId() throws org.apache.thrift.TException
    {
      deleteHistoryTaskActorByTaskId_result result = new deleteHistoryTaskActorByTaskId_result();
      receiveBase(result, "deleteHistoryTaskActorByTaskId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteHistoryTaskActorByTaskId failed: unknown result");
    }

    public boolean updateHistoryTaskActor(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      send_updateHistoryTaskActor(originVo, historyTaskActorVo);
      return recv_updateHistoryTaskActor();
    }

    public void send_updateHistoryTaskActor(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      updateHistoryTaskActor_args args = new updateHistoryTaskActor_args();
      args.setOriginVo(originVo);
      args.setHistoryTaskActorVo(historyTaskActorVo);
      sendBase("updateHistoryTaskActor", args);
    }

    public boolean recv_updateHistoryTaskActor() throws org.apache.thrift.TException
    {
      updateHistoryTaskActor_result result = new updateHistoryTaskActor_result();
      receiveBase(result, "updateHistoryTaskActor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHistoryTaskActor failed: unknown result");
    }

    public boolean updateHistoryTaskActorByTaskId(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      send_updateHistoryTaskActorByTaskId(originVo, historyTaskActorVo);
      return recv_updateHistoryTaskActorByTaskId();
    }

    public void send_updateHistoryTaskActorByTaskId(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      updateHistoryTaskActorByTaskId_args args = new updateHistoryTaskActorByTaskId_args();
      args.setOriginVo(originVo);
      args.setHistoryTaskActorVo(historyTaskActorVo);
      sendBase("updateHistoryTaskActorByTaskId", args);
    }

    public boolean recv_updateHistoryTaskActorByTaskId() throws org.apache.thrift.TException
    {
      updateHistoryTaskActorByTaskId_result result = new updateHistoryTaskActorByTaskId_result();
      receiveBase(result, "updateHistoryTaskActorByTaskId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHistoryTaskActorByTaskId failed: unknown result");
    }

    public com.froad.thrift.vo.HistoryTaskActorVo getHistoryTaskActorByTaskId(String taskId) throws org.apache.thrift.TException
    {
      send_getHistoryTaskActorByTaskId(taskId);
      return recv_getHistoryTaskActorByTaskId();
    }

    public void send_getHistoryTaskActorByTaskId(String taskId) throws org.apache.thrift.TException
    {
      getHistoryTaskActorByTaskId_args args = new getHistoryTaskActorByTaskId_args();
      args.setTaskId(taskId);
      sendBase("getHistoryTaskActorByTaskId", args);
    }

    public com.froad.thrift.vo.HistoryTaskActorVo recv_getHistoryTaskActorByTaskId() throws org.apache.thrift.TException
    {
      getHistoryTaskActorByTaskId_result result = new getHistoryTaskActorByTaskId_result();
      receiveBase(result, "getHistoryTaskActorByTaskId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHistoryTaskActorByTaskId failed: unknown result");
    }

    public com.froad.thrift.vo.HistoryTaskActorVo getOneHistoryTaskActor(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      send_getOneHistoryTaskActor(historyTaskActorVo);
      return recv_getOneHistoryTaskActor();
    }

    public void send_getOneHistoryTaskActor(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      getOneHistoryTaskActor_args args = new getOneHistoryTaskActor_args();
      args.setHistoryTaskActorVo(historyTaskActorVo);
      sendBase("getOneHistoryTaskActor", args);
    }

    public com.froad.thrift.vo.HistoryTaskActorVo recv_getOneHistoryTaskActor() throws org.apache.thrift.TException
    {
      getOneHistoryTaskActor_result result = new getOneHistoryTaskActor_result();
      receiveBase(result, "getOneHistoryTaskActor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOneHistoryTaskActor failed: unknown result");
    }

    public int countHistoryTaskActor(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      send_countHistoryTaskActor(historyTaskActorVo);
      return recv_countHistoryTaskActor();
    }

    public void send_countHistoryTaskActor(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      countHistoryTaskActor_args args = new countHistoryTaskActor_args();
      args.setHistoryTaskActorVo(historyTaskActorVo);
      sendBase("countHistoryTaskActor", args);
    }

    public int recv_countHistoryTaskActor() throws org.apache.thrift.TException
    {
      countHistoryTaskActor_result result = new countHistoryTaskActor_result();
      receiveBase(result, "countHistoryTaskActor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countHistoryTaskActor failed: unknown result");
    }

    public List<com.froad.thrift.vo.HistoryTaskActorVo> getHistoryTaskActor(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      send_getHistoryTaskActor(historyTaskActorVo);
      return recv_getHistoryTaskActor();
    }

    public void send_getHistoryTaskActor(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      getHistoryTaskActor_args args = new getHistoryTaskActor_args();
      args.setHistoryTaskActorVo(historyTaskActorVo);
      sendBase("getHistoryTaskActor", args);
    }

    public List<com.froad.thrift.vo.HistoryTaskActorVo> recv_getHistoryTaskActor() throws org.apache.thrift.TException
    {
      getHistoryTaskActor_result result = new getHistoryTaskActor_result();
      receiveBase(result, "getHistoryTaskActor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHistoryTaskActor failed: unknown result");
    }

    public com.froad.thrift.vo.HistoryTaskActorPageVoRes getHistoryTaskActorByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      send_getHistoryTaskActorByPage(page, historyTaskActorVo);
      return recv_getHistoryTaskActorByPage();
    }

    public void send_getHistoryTaskActorByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) throws org.apache.thrift.TException
    {
      getHistoryTaskActorByPage_args args = new getHistoryTaskActorByPage_args();
      args.setPage(page);
      args.setHistoryTaskActorVo(historyTaskActorVo);
      sendBase("getHistoryTaskActorByPage", args);
    }

    public com.froad.thrift.vo.HistoryTaskActorPageVoRes recv_getHistoryTaskActorByPage() throws org.apache.thrift.TException
    {
      getHistoryTaskActorByPage_result result = new getHistoryTaskActorByPage_result();
      receiveBase(result, "getHistoryTaskActorByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHistoryTaskActorByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addHistoryTaskActor(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addHistoryTaskActor_call method_call = new addHistoryTaskActor_call(originVo, historyTaskActorVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addHistoryTaskActor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo;
      public addHistoryTaskActor_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.historyTaskActorVo = historyTaskActorVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addHistoryTaskActor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addHistoryTaskActor_args args = new addHistoryTaskActor_args();
        args.setOriginVo(originVo);
        args.setHistoryTaskActorVo(historyTaskActorVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addHistoryTaskActor();
      }
    }

    public void deleteHistoryTaskActor(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteHistoryTaskActor_call method_call = new deleteHistoryTaskActor_call(originVo, historyTaskActorVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteHistoryTaskActor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo;
      public deleteHistoryTaskActor_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.historyTaskActorVo = historyTaskActorVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteHistoryTaskActor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteHistoryTaskActor_args args = new deleteHistoryTaskActor_args();
        args.setOriginVo(originVo);
        args.setHistoryTaskActorVo(historyTaskActorVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteHistoryTaskActor();
      }
    }

    public void deleteHistoryTaskActorByTaskId(com.froad.thrift.vo.OriginVo originVo, String taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteHistoryTaskActorByTaskId_call method_call = new deleteHistoryTaskActorByTaskId_call(originVo, taskId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteHistoryTaskActorByTaskId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String taskId;
      public deleteHistoryTaskActorByTaskId_call(com.froad.thrift.vo.OriginVo originVo, String taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.taskId = taskId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteHistoryTaskActorByTaskId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteHistoryTaskActorByTaskId_args args = new deleteHistoryTaskActorByTaskId_args();
        args.setOriginVo(originVo);
        args.setTaskId(taskId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteHistoryTaskActorByTaskId();
      }
    }

    public void updateHistoryTaskActor(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHistoryTaskActor_call method_call = new updateHistoryTaskActor_call(originVo, historyTaskActorVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateHistoryTaskActor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo;
      public updateHistoryTaskActor_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.historyTaskActorVo = historyTaskActorVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHistoryTaskActor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHistoryTaskActor_args args = new updateHistoryTaskActor_args();
        args.setOriginVo(originVo);
        args.setHistoryTaskActorVo(historyTaskActorVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHistoryTaskActor();
      }
    }

    public void updateHistoryTaskActorByTaskId(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHistoryTaskActorByTaskId_call method_call = new updateHistoryTaskActorByTaskId_call(originVo, historyTaskActorVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateHistoryTaskActorByTaskId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo;
      public updateHistoryTaskActorByTaskId_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.historyTaskActorVo = historyTaskActorVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHistoryTaskActorByTaskId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHistoryTaskActorByTaskId_args args = new updateHistoryTaskActorByTaskId_args();
        args.setOriginVo(originVo);
        args.setHistoryTaskActorVo(historyTaskActorVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHistoryTaskActorByTaskId();
      }
    }

    public void getHistoryTaskActorByTaskId(String taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHistoryTaskActorByTaskId_call method_call = new getHistoryTaskActorByTaskId_call(taskId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHistoryTaskActorByTaskId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String taskId;
      public getHistoryTaskActorByTaskId_call(String taskId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHistoryTaskActorByTaskId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHistoryTaskActorByTaskId_args args = new getHistoryTaskActorByTaskId_args();
        args.setTaskId(taskId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.HistoryTaskActorVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHistoryTaskActorByTaskId();
      }
    }

    public void getOneHistoryTaskActor(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOneHistoryTaskActor_call method_call = new getOneHistoryTaskActor_call(historyTaskActorVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOneHistoryTaskActor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo;
      public getOneHistoryTaskActor_call(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.historyTaskActorVo = historyTaskActorVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOneHistoryTaskActor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOneHistoryTaskActor_args args = new getOneHistoryTaskActor_args();
        args.setHistoryTaskActorVo(historyTaskActorVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.HistoryTaskActorVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOneHistoryTaskActor();
      }
    }

    public void countHistoryTaskActor(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countHistoryTaskActor_call method_call = new countHistoryTaskActor_call(historyTaskActorVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countHistoryTaskActor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo;
      public countHistoryTaskActor_call(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.historyTaskActorVo = historyTaskActorVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countHistoryTaskActor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countHistoryTaskActor_args args = new countHistoryTaskActor_args();
        args.setHistoryTaskActorVo(historyTaskActorVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countHistoryTaskActor();
      }
    }

    public void getHistoryTaskActor(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHistoryTaskActor_call method_call = new getHistoryTaskActor_call(historyTaskActorVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHistoryTaskActor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo;
      public getHistoryTaskActor_call(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.historyTaskActorVo = historyTaskActorVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHistoryTaskActor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHistoryTaskActor_args args = new getHistoryTaskActor_args();
        args.setHistoryTaskActorVo(historyTaskActorVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.HistoryTaskActorVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHistoryTaskActor();
      }
    }

    public void getHistoryTaskActorByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHistoryTaskActorByPage_call method_call = new getHistoryTaskActorByPage_call(page, historyTaskActorVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHistoryTaskActorByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo;
      public getHistoryTaskActorByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.historyTaskActorVo = historyTaskActorVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHistoryTaskActorByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHistoryTaskActorByPage_args args = new getHistoryTaskActorByPage_args();
        args.setPage(page);
        args.setHistoryTaskActorVo(historyTaskActorVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.HistoryTaskActorPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHistoryTaskActorByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addHistoryTaskActor", new addHistoryTaskActor());
      processMap.put("deleteHistoryTaskActor", new deleteHistoryTaskActor());
      processMap.put("deleteHistoryTaskActorByTaskId", new deleteHistoryTaskActorByTaskId());
      processMap.put("updateHistoryTaskActor", new updateHistoryTaskActor());
      processMap.put("updateHistoryTaskActorByTaskId", new updateHistoryTaskActorByTaskId());
      processMap.put("getHistoryTaskActorByTaskId", new getHistoryTaskActorByTaskId());
      processMap.put("getOneHistoryTaskActor", new getOneHistoryTaskActor());
      processMap.put("countHistoryTaskActor", new countHistoryTaskActor());
      processMap.put("getHistoryTaskActor", new getHistoryTaskActor());
      processMap.put("getHistoryTaskActorByPage", new getHistoryTaskActorByPage());
      return processMap;
    }

    public static class addHistoryTaskActor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addHistoryTaskActor_args> {
      public addHistoryTaskActor() {
        super("addHistoryTaskActor");
      }

      public addHistoryTaskActor_args getEmptyArgsInstance() {
        return new addHistoryTaskActor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addHistoryTaskActor_result getResult(I iface, addHistoryTaskActor_args args) throws org.apache.thrift.TException {
        addHistoryTaskActor_result result = new addHistoryTaskActor_result();
        result.success = iface.addHistoryTaskActor(args.originVo, args.historyTaskActorVo);
        return result;
      }
    }

    public static class deleteHistoryTaskActor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteHistoryTaskActor_args> {
      public deleteHistoryTaskActor() {
        super("deleteHistoryTaskActor");
      }

      public deleteHistoryTaskActor_args getEmptyArgsInstance() {
        return new deleteHistoryTaskActor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteHistoryTaskActor_result getResult(I iface, deleteHistoryTaskActor_args args) throws org.apache.thrift.TException {
        deleteHistoryTaskActor_result result = new deleteHistoryTaskActor_result();
        result.success = iface.deleteHistoryTaskActor(args.originVo, args.historyTaskActorVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteHistoryTaskActorByTaskId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteHistoryTaskActorByTaskId_args> {
      public deleteHistoryTaskActorByTaskId() {
        super("deleteHistoryTaskActorByTaskId");
      }

      public deleteHistoryTaskActorByTaskId_args getEmptyArgsInstance() {
        return new deleteHistoryTaskActorByTaskId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteHistoryTaskActorByTaskId_result getResult(I iface, deleteHistoryTaskActorByTaskId_args args) throws org.apache.thrift.TException {
        deleteHistoryTaskActorByTaskId_result result = new deleteHistoryTaskActorByTaskId_result();
        result.success = iface.deleteHistoryTaskActorByTaskId(args.originVo, args.taskId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateHistoryTaskActor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateHistoryTaskActor_args> {
      public updateHistoryTaskActor() {
        super("updateHistoryTaskActor");
      }

      public updateHistoryTaskActor_args getEmptyArgsInstance() {
        return new updateHistoryTaskActor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateHistoryTaskActor_result getResult(I iface, updateHistoryTaskActor_args args) throws org.apache.thrift.TException {
        updateHistoryTaskActor_result result = new updateHistoryTaskActor_result();
        result.success = iface.updateHistoryTaskActor(args.originVo, args.historyTaskActorVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateHistoryTaskActorByTaskId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateHistoryTaskActorByTaskId_args> {
      public updateHistoryTaskActorByTaskId() {
        super("updateHistoryTaskActorByTaskId");
      }

      public updateHistoryTaskActorByTaskId_args getEmptyArgsInstance() {
        return new updateHistoryTaskActorByTaskId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateHistoryTaskActorByTaskId_result getResult(I iface, updateHistoryTaskActorByTaskId_args args) throws org.apache.thrift.TException {
        updateHistoryTaskActorByTaskId_result result = new updateHistoryTaskActorByTaskId_result();
        result.success = iface.updateHistoryTaskActorByTaskId(args.originVo, args.historyTaskActorVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHistoryTaskActorByTaskId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHistoryTaskActorByTaskId_args> {
      public getHistoryTaskActorByTaskId() {
        super("getHistoryTaskActorByTaskId");
      }

      public getHistoryTaskActorByTaskId_args getEmptyArgsInstance() {
        return new getHistoryTaskActorByTaskId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHistoryTaskActorByTaskId_result getResult(I iface, getHistoryTaskActorByTaskId_args args) throws org.apache.thrift.TException {
        getHistoryTaskActorByTaskId_result result = new getHistoryTaskActorByTaskId_result();
        result.success = iface.getHistoryTaskActorByTaskId(args.taskId);
        return result;
      }
    }

    public static class getOneHistoryTaskActor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOneHistoryTaskActor_args> {
      public getOneHistoryTaskActor() {
        super("getOneHistoryTaskActor");
      }

      public getOneHistoryTaskActor_args getEmptyArgsInstance() {
        return new getOneHistoryTaskActor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOneHistoryTaskActor_result getResult(I iface, getOneHistoryTaskActor_args args) throws org.apache.thrift.TException {
        getOneHistoryTaskActor_result result = new getOneHistoryTaskActor_result();
        result.success = iface.getOneHistoryTaskActor(args.historyTaskActorVo);
        return result;
      }
    }

    public static class countHistoryTaskActor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countHistoryTaskActor_args> {
      public countHistoryTaskActor() {
        super("countHistoryTaskActor");
      }

      public countHistoryTaskActor_args getEmptyArgsInstance() {
        return new countHistoryTaskActor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countHistoryTaskActor_result getResult(I iface, countHistoryTaskActor_args args) throws org.apache.thrift.TException {
        countHistoryTaskActor_result result = new countHistoryTaskActor_result();
        result.success = iface.countHistoryTaskActor(args.historyTaskActorVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getHistoryTaskActor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHistoryTaskActor_args> {
      public getHistoryTaskActor() {
        super("getHistoryTaskActor");
      }

      public getHistoryTaskActor_args getEmptyArgsInstance() {
        return new getHistoryTaskActor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHistoryTaskActor_result getResult(I iface, getHistoryTaskActor_args args) throws org.apache.thrift.TException {
        getHistoryTaskActor_result result = new getHistoryTaskActor_result();
        result.success = iface.getHistoryTaskActor(args.historyTaskActorVo);
        return result;
      }
    }

    public static class getHistoryTaskActorByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHistoryTaskActorByPage_args> {
      public getHistoryTaskActorByPage() {
        super("getHistoryTaskActorByPage");
      }

      public getHistoryTaskActorByPage_args getEmptyArgsInstance() {
        return new getHistoryTaskActorByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getHistoryTaskActorByPage_result getResult(I iface, getHistoryTaskActorByPage_args args) throws org.apache.thrift.TException {
        getHistoryTaskActorByPage_result result = new getHistoryTaskActorByPage_result();
        result.success = iface.getHistoryTaskActorByPage(args.page, args.historyTaskActorVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addHistoryTaskActor", new addHistoryTaskActor());
      processMap.put("deleteHistoryTaskActor", new deleteHistoryTaskActor());
      processMap.put("deleteHistoryTaskActorByTaskId", new deleteHistoryTaskActorByTaskId());
      processMap.put("updateHistoryTaskActor", new updateHistoryTaskActor());
      processMap.put("updateHistoryTaskActorByTaskId", new updateHistoryTaskActorByTaskId());
      processMap.put("getHistoryTaskActorByTaskId", new getHistoryTaskActorByTaskId());
      processMap.put("getOneHistoryTaskActor", new getOneHistoryTaskActor());
      processMap.put("countHistoryTaskActor", new countHistoryTaskActor());
      processMap.put("getHistoryTaskActor", new getHistoryTaskActor());
      processMap.put("getHistoryTaskActorByPage", new getHistoryTaskActorByPage());
      return processMap;
    }

    public static class addHistoryTaskActor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addHistoryTaskActor_args, String> {
      public addHistoryTaskActor() {
        super("addHistoryTaskActor");
      }

      public addHistoryTaskActor_args getEmptyArgsInstance() {
        return new addHistoryTaskActor_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addHistoryTaskActor_result result = new addHistoryTaskActor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addHistoryTaskActor_result result = new addHistoryTaskActor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addHistoryTaskActor_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addHistoryTaskActor(args.originVo, args.historyTaskActorVo,resultHandler);
      }
    }

    public static class deleteHistoryTaskActor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteHistoryTaskActor_args, Boolean> {
      public deleteHistoryTaskActor() {
        super("deleteHistoryTaskActor");
      }

      public deleteHistoryTaskActor_args getEmptyArgsInstance() {
        return new deleteHistoryTaskActor_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteHistoryTaskActor_result result = new deleteHistoryTaskActor_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteHistoryTaskActor_result result = new deleteHistoryTaskActor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteHistoryTaskActor_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteHistoryTaskActor(args.originVo, args.historyTaskActorVo,resultHandler);
      }
    }

    public static class deleteHistoryTaskActorByTaskId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteHistoryTaskActorByTaskId_args, Boolean> {
      public deleteHistoryTaskActorByTaskId() {
        super("deleteHistoryTaskActorByTaskId");
      }

      public deleteHistoryTaskActorByTaskId_args getEmptyArgsInstance() {
        return new deleteHistoryTaskActorByTaskId_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteHistoryTaskActorByTaskId_result result = new deleteHistoryTaskActorByTaskId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteHistoryTaskActorByTaskId_result result = new deleteHistoryTaskActorByTaskId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteHistoryTaskActorByTaskId_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteHistoryTaskActorByTaskId(args.originVo, args.taskId,resultHandler);
      }
    }

    public static class updateHistoryTaskActor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateHistoryTaskActor_args, Boolean> {
      public updateHistoryTaskActor() {
        super("updateHistoryTaskActor");
      }

      public updateHistoryTaskActor_args getEmptyArgsInstance() {
        return new updateHistoryTaskActor_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateHistoryTaskActor_result result = new updateHistoryTaskActor_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateHistoryTaskActor_result result = new updateHistoryTaskActor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateHistoryTaskActor_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateHistoryTaskActor(args.originVo, args.historyTaskActorVo,resultHandler);
      }
    }

    public static class updateHistoryTaskActorByTaskId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateHistoryTaskActorByTaskId_args, Boolean> {
      public updateHistoryTaskActorByTaskId() {
        super("updateHistoryTaskActorByTaskId");
      }

      public updateHistoryTaskActorByTaskId_args getEmptyArgsInstance() {
        return new updateHistoryTaskActorByTaskId_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateHistoryTaskActorByTaskId_result result = new updateHistoryTaskActorByTaskId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateHistoryTaskActorByTaskId_result result = new updateHistoryTaskActorByTaskId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateHistoryTaskActorByTaskId_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateHistoryTaskActorByTaskId(args.originVo, args.historyTaskActorVo,resultHandler);
      }
    }

    public static class getHistoryTaskActorByTaskId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHistoryTaskActorByTaskId_args, com.froad.thrift.vo.HistoryTaskActorVo> {
      public getHistoryTaskActorByTaskId() {
        super("getHistoryTaskActorByTaskId");
      }

      public getHistoryTaskActorByTaskId_args getEmptyArgsInstance() {
        return new getHistoryTaskActorByTaskId_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskActorVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskActorVo>() { 
          public void onComplete(com.froad.thrift.vo.HistoryTaskActorVo o) {
            getHistoryTaskActorByTaskId_result result = new getHistoryTaskActorByTaskId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHistoryTaskActorByTaskId_result result = new getHistoryTaskActorByTaskId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHistoryTaskActorByTaskId_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskActorVo> resultHandler) throws TException {
        iface.getHistoryTaskActorByTaskId(args.taskId,resultHandler);
      }
    }

    public static class getOneHistoryTaskActor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOneHistoryTaskActor_args, com.froad.thrift.vo.HistoryTaskActorVo> {
      public getOneHistoryTaskActor() {
        super("getOneHistoryTaskActor");
      }

      public getOneHistoryTaskActor_args getEmptyArgsInstance() {
        return new getOneHistoryTaskActor_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskActorVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskActorVo>() { 
          public void onComplete(com.froad.thrift.vo.HistoryTaskActorVo o) {
            getOneHistoryTaskActor_result result = new getOneHistoryTaskActor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOneHistoryTaskActor_result result = new getOneHistoryTaskActor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOneHistoryTaskActor_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskActorVo> resultHandler) throws TException {
        iface.getOneHistoryTaskActor(args.historyTaskActorVo,resultHandler);
      }
    }

    public static class countHistoryTaskActor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countHistoryTaskActor_args, Integer> {
      public countHistoryTaskActor() {
        super("countHistoryTaskActor");
      }

      public countHistoryTaskActor_args getEmptyArgsInstance() {
        return new countHistoryTaskActor_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            countHistoryTaskActor_result result = new countHistoryTaskActor_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countHistoryTaskActor_result result = new countHistoryTaskActor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countHistoryTaskActor_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.countHistoryTaskActor(args.historyTaskActorVo,resultHandler);
      }
    }

    public static class getHistoryTaskActor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHistoryTaskActor_args, List<com.froad.thrift.vo.HistoryTaskActorVo>> {
      public getHistoryTaskActor() {
        super("getHistoryTaskActor");
      }

      public getHistoryTaskActor_args getEmptyArgsInstance() {
        return new getHistoryTaskActor_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.HistoryTaskActorVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.HistoryTaskActorVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.HistoryTaskActorVo> o) {
            getHistoryTaskActor_result result = new getHistoryTaskActor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHistoryTaskActor_result result = new getHistoryTaskActor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHistoryTaskActor_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.HistoryTaskActorVo>> resultHandler) throws TException {
        iface.getHistoryTaskActor(args.historyTaskActorVo,resultHandler);
      }
    }

    public static class getHistoryTaskActorByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHistoryTaskActorByPage_args, com.froad.thrift.vo.HistoryTaskActorPageVoRes> {
      public getHistoryTaskActorByPage() {
        super("getHistoryTaskActorByPage");
      }

      public getHistoryTaskActorByPage_args getEmptyArgsInstance() {
        return new getHistoryTaskActorByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskActorPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskActorPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.HistoryTaskActorPageVoRes o) {
            getHistoryTaskActorByPage_result result = new getHistoryTaskActorByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getHistoryTaskActorByPage_result result = new getHistoryTaskActorByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHistoryTaskActorByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.HistoryTaskActorPageVoRes> resultHandler) throws TException {
        iface.getHistoryTaskActorByPage(args.page, args.historyTaskActorVo,resultHandler);
      }
    }

  }

  public static class addHistoryTaskActor_args implements org.apache.thrift.TBase<addHistoryTaskActor_args, addHistoryTaskActor_args._Fields>, java.io.Serializable, Cloneable, Comparable<addHistoryTaskActor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHistoryTaskActor_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HISTORY_TASK_ACTOR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskActorVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHistoryTaskActor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHistoryTaskActor_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      HISTORY_TASK_ACTOR_VO((short)2, "historyTaskActorVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // HISTORY_TASK_ACTOR_VO
            return HISTORY_TASK_ACTOR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.HISTORY_TASK_ACTOR_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskActorVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskActorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHistoryTaskActor_args.class, metaDataMap);
    }

    public addHistoryTaskActor_args() {
    }

    public addHistoryTaskActor_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo)
    {
      this();
      this.originVo = originVo;
      this.historyTaskActorVo = historyTaskActorVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHistoryTaskActor_args(addHistoryTaskActor_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetHistoryTaskActorVo()) {
        this.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo(other.historyTaskActorVo);
      }
    }

    public addHistoryTaskActor_args deepCopy() {
      return new addHistoryTaskActor_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.historyTaskActorVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addHistoryTaskActor_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.HistoryTaskActorVo getHistoryTaskActorVo() {
      return this.historyTaskActorVo;
    }

    public addHistoryTaskActor_args setHistoryTaskActorVo(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) {
      this.historyTaskActorVo = historyTaskActorVo;
      return this;
    }

    public void unsetHistoryTaskActorVo() {
      this.historyTaskActorVo = null;
    }

    /** Returns true if field historyTaskActorVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskActorVo() {
      return this.historyTaskActorVo != null;
    }

    public void setHistoryTaskActorVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskActorVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case HISTORY_TASK_ACTOR_VO:
        if (value == null) {
          unsetHistoryTaskActorVo();
        } else {
          setHistoryTaskActorVo((com.froad.thrift.vo.HistoryTaskActorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case HISTORY_TASK_ACTOR_VO:
        return getHistoryTaskActorVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case HISTORY_TASK_ACTOR_VO:
        return isSetHistoryTaskActorVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHistoryTaskActor_args)
        return this.equals((addHistoryTaskActor_args)that);
      return false;
    }

    public boolean equals(addHistoryTaskActor_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_historyTaskActorVo = true && this.isSetHistoryTaskActorVo();
      boolean that_present_historyTaskActorVo = true && that.isSetHistoryTaskActorVo();
      if (this_present_historyTaskActorVo || that_present_historyTaskActorVo) {
        if (!(this_present_historyTaskActorVo && that_present_historyTaskActorVo))
          return false;
        if (!this.historyTaskActorVo.equals(that.historyTaskActorVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_historyTaskActorVo = true && (isSetHistoryTaskActorVo());
      list.add(present_historyTaskActorVo);
      if (present_historyTaskActorVo)
        list.add(historyTaskActorVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHistoryTaskActor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHistoryTaskActorVo()).compareTo(other.isSetHistoryTaskActorVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskActorVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskActorVo, other.historyTaskActorVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHistoryTaskActor_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("historyTaskActorVo:");
      if (this.historyTaskActorVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskActorVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (historyTaskActorVo != null) {
        historyTaskActorVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHistoryTaskActor_argsStandardSchemeFactory implements SchemeFactory {
      public addHistoryTaskActor_argsStandardScheme getScheme() {
        return new addHistoryTaskActor_argsStandardScheme();
      }
    }

    private static class addHistoryTaskActor_argsStandardScheme extends StandardScheme<addHistoryTaskActor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HISTORY_TASK_ACTOR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
                struct.historyTaskActorVo.read(iprot);
                struct.setHistoryTaskActorVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.historyTaskActorVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_ACTOR_VO_FIELD_DESC);
          struct.historyTaskActorVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHistoryTaskActor_argsTupleSchemeFactory implements SchemeFactory {
      public addHistoryTaskActor_argsTupleScheme getScheme() {
        return new addHistoryTaskActor_argsTupleScheme();
      }
    }

    private static class addHistoryTaskActor_argsTupleScheme extends TupleScheme<addHistoryTaskActor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetHistoryTaskActorVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetHistoryTaskActorVo()) {
          struct.historyTaskActorVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
          struct.historyTaskActorVo.read(iprot);
          struct.setHistoryTaskActorVoIsSet(true);
        }
      }
    }

  }

  public static class addHistoryTaskActor_result implements org.apache.thrift.TBase<addHistoryTaskActor_result, addHistoryTaskActor_result._Fields>, java.io.Serializable, Cloneable, Comparable<addHistoryTaskActor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addHistoryTaskActor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addHistoryTaskActor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addHistoryTaskActor_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addHistoryTaskActor_result.class, metaDataMap);
    }

    public addHistoryTaskActor_result() {
    }

    public addHistoryTaskActor_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addHistoryTaskActor_result(addHistoryTaskActor_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addHistoryTaskActor_result deepCopy() {
      return new addHistoryTaskActor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addHistoryTaskActor_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addHistoryTaskActor_result)
        return this.equals((addHistoryTaskActor_result)that);
      return false;
    }

    public boolean equals(addHistoryTaskActor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addHistoryTaskActor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addHistoryTaskActor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addHistoryTaskActor_resultStandardSchemeFactory implements SchemeFactory {
      public addHistoryTaskActor_resultStandardScheme getScheme() {
        return new addHistoryTaskActor_resultStandardScheme();
      }
    }

    private static class addHistoryTaskActor_resultStandardScheme extends StandardScheme<addHistoryTaskActor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addHistoryTaskActor_resultTupleSchemeFactory implements SchemeFactory {
      public addHistoryTaskActor_resultTupleScheme getScheme() {
        return new addHistoryTaskActor_resultTupleScheme();
      }
    }

    private static class addHistoryTaskActor_resultTupleScheme extends TupleScheme<addHistoryTaskActor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteHistoryTaskActor_args implements org.apache.thrift.TBase<deleteHistoryTaskActor_args, deleteHistoryTaskActor_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteHistoryTaskActor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHistoryTaskActor_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HISTORY_TASK_ACTOR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskActorVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHistoryTaskActor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHistoryTaskActor_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      HISTORY_TASK_ACTOR_VO((short)2, "historyTaskActorVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // HISTORY_TASK_ACTOR_VO
            return HISTORY_TASK_ACTOR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.HISTORY_TASK_ACTOR_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskActorVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskActorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHistoryTaskActor_args.class, metaDataMap);
    }

    public deleteHistoryTaskActor_args() {
    }

    public deleteHistoryTaskActor_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo)
    {
      this();
      this.originVo = originVo;
      this.historyTaskActorVo = historyTaskActorVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHistoryTaskActor_args(deleteHistoryTaskActor_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetHistoryTaskActorVo()) {
        this.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo(other.historyTaskActorVo);
      }
    }

    public deleteHistoryTaskActor_args deepCopy() {
      return new deleteHistoryTaskActor_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.historyTaskActorVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteHistoryTaskActor_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.HistoryTaskActorVo getHistoryTaskActorVo() {
      return this.historyTaskActorVo;
    }

    public deleteHistoryTaskActor_args setHistoryTaskActorVo(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) {
      this.historyTaskActorVo = historyTaskActorVo;
      return this;
    }

    public void unsetHistoryTaskActorVo() {
      this.historyTaskActorVo = null;
    }

    /** Returns true if field historyTaskActorVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskActorVo() {
      return this.historyTaskActorVo != null;
    }

    public void setHistoryTaskActorVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskActorVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case HISTORY_TASK_ACTOR_VO:
        if (value == null) {
          unsetHistoryTaskActorVo();
        } else {
          setHistoryTaskActorVo((com.froad.thrift.vo.HistoryTaskActorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case HISTORY_TASK_ACTOR_VO:
        return getHistoryTaskActorVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case HISTORY_TASK_ACTOR_VO:
        return isSetHistoryTaskActorVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHistoryTaskActor_args)
        return this.equals((deleteHistoryTaskActor_args)that);
      return false;
    }

    public boolean equals(deleteHistoryTaskActor_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_historyTaskActorVo = true && this.isSetHistoryTaskActorVo();
      boolean that_present_historyTaskActorVo = true && that.isSetHistoryTaskActorVo();
      if (this_present_historyTaskActorVo || that_present_historyTaskActorVo) {
        if (!(this_present_historyTaskActorVo && that_present_historyTaskActorVo))
          return false;
        if (!this.historyTaskActorVo.equals(that.historyTaskActorVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_historyTaskActorVo = true && (isSetHistoryTaskActorVo());
      list.add(present_historyTaskActorVo);
      if (present_historyTaskActorVo)
        list.add(historyTaskActorVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteHistoryTaskActor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHistoryTaskActorVo()).compareTo(other.isSetHistoryTaskActorVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskActorVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskActorVo, other.historyTaskActorVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHistoryTaskActor_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("historyTaskActorVo:");
      if (this.historyTaskActorVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskActorVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (historyTaskActorVo != null) {
        historyTaskActorVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHistoryTaskActor_argsStandardSchemeFactory implements SchemeFactory {
      public deleteHistoryTaskActor_argsStandardScheme getScheme() {
        return new deleteHistoryTaskActor_argsStandardScheme();
      }
    }

    private static class deleteHistoryTaskActor_argsStandardScheme extends StandardScheme<deleteHistoryTaskActor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HISTORY_TASK_ACTOR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
                struct.historyTaskActorVo.read(iprot);
                struct.setHistoryTaskActorVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.historyTaskActorVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_ACTOR_VO_FIELD_DESC);
          struct.historyTaskActorVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHistoryTaskActor_argsTupleSchemeFactory implements SchemeFactory {
      public deleteHistoryTaskActor_argsTupleScheme getScheme() {
        return new deleteHistoryTaskActor_argsTupleScheme();
      }
    }

    private static class deleteHistoryTaskActor_argsTupleScheme extends TupleScheme<deleteHistoryTaskActor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetHistoryTaskActorVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetHistoryTaskActorVo()) {
          struct.historyTaskActorVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
          struct.historyTaskActorVo.read(iprot);
          struct.setHistoryTaskActorVoIsSet(true);
        }
      }
    }

  }

  public static class deleteHistoryTaskActor_result implements org.apache.thrift.TBase<deleteHistoryTaskActor_result, deleteHistoryTaskActor_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteHistoryTaskActor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHistoryTaskActor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHistoryTaskActor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHistoryTaskActor_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHistoryTaskActor_result.class, metaDataMap);
    }

    public deleteHistoryTaskActor_result() {
    }

    public deleteHistoryTaskActor_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHistoryTaskActor_result(deleteHistoryTaskActor_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteHistoryTaskActor_result deepCopy() {
      return new deleteHistoryTaskActor_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteHistoryTaskActor_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHistoryTaskActor_result)
        return this.equals((deleteHistoryTaskActor_result)that);
      return false;
    }

    public boolean equals(deleteHistoryTaskActor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteHistoryTaskActor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHistoryTaskActor_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHistoryTaskActor_resultStandardSchemeFactory implements SchemeFactory {
      public deleteHistoryTaskActor_resultStandardScheme getScheme() {
        return new deleteHistoryTaskActor_resultStandardScheme();
      }
    }

    private static class deleteHistoryTaskActor_resultStandardScheme extends StandardScheme<deleteHistoryTaskActor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHistoryTaskActor_resultTupleSchemeFactory implements SchemeFactory {
      public deleteHistoryTaskActor_resultTupleScheme getScheme() {
        return new deleteHistoryTaskActor_resultTupleScheme();
      }
    }

    private static class deleteHistoryTaskActor_resultTupleScheme extends TupleScheme<deleteHistoryTaskActor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteHistoryTaskActorByTaskId_args implements org.apache.thrift.TBase<deleteHistoryTaskActorByTaskId_args, deleteHistoryTaskActorByTaskId_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteHistoryTaskActorByTaskId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHistoryTaskActorByTaskId_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHistoryTaskActorByTaskId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHistoryTaskActorByTaskId_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String taskId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      TASK_ID((short)2, "taskId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // TASK_ID
            return TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHistoryTaskActorByTaskId_args.class, metaDataMap);
    }

    public deleteHistoryTaskActorByTaskId_args() {
    }

    public deleteHistoryTaskActorByTaskId_args(
      com.froad.thrift.vo.OriginVo originVo,
      String taskId)
    {
      this();
      this.originVo = originVo;
      this.taskId = taskId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHistoryTaskActorByTaskId_args(deleteHistoryTaskActorByTaskId_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetTaskId()) {
        this.taskId = other.taskId;
      }
    }

    public deleteHistoryTaskActorByTaskId_args deepCopy() {
      return new deleteHistoryTaskActorByTaskId_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.taskId = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteHistoryTaskActorByTaskId_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getTaskId() {
      return this.taskId;
    }

    public deleteHistoryTaskActorByTaskId_args setTaskId(String taskId) {
      this.taskId = taskId;
      return this;
    }

    public void unsetTaskId() {
      this.taskId = null;
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return this.taskId != null;
    }

    public void setTaskIdIsSet(boolean value) {
      if (!value) {
        this.taskId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case TASK_ID:
        return getTaskId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case TASK_ID:
        return isSetTaskId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHistoryTaskActorByTaskId_args)
        return this.equals((deleteHistoryTaskActorByTaskId_args)that);
      return false;
    }

    public boolean equals(deleteHistoryTaskActorByTaskId_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_taskId = true && this.isSetTaskId();
      boolean that_present_taskId = true && that.isSetTaskId();
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (!this.taskId.equals(that.taskId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_taskId = true && (isSetTaskId());
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteHistoryTaskActorByTaskId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHistoryTaskActorByTaskId_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskId:");
      if (this.taskId == null) {
        sb.append("null");
      } else {
        sb.append(this.taskId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHistoryTaskActorByTaskId_argsStandardSchemeFactory implements SchemeFactory {
      public deleteHistoryTaskActorByTaskId_argsStandardScheme getScheme() {
        return new deleteHistoryTaskActorByTaskId_argsStandardScheme();
      }
    }

    private static class deleteHistoryTaskActorByTaskId_argsStandardScheme extends StandardScheme<deleteHistoryTaskActorByTaskId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHistoryTaskActorByTaskId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.taskId = iprot.readString();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHistoryTaskActorByTaskId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.taskId != null) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          oprot.writeString(struct.taskId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHistoryTaskActorByTaskId_argsTupleSchemeFactory implements SchemeFactory {
      public deleteHistoryTaskActorByTaskId_argsTupleScheme getScheme() {
        return new deleteHistoryTaskActorByTaskId_argsTupleScheme();
      }
    }

    private static class deleteHistoryTaskActorByTaskId_argsTupleScheme extends TupleScheme<deleteHistoryTaskActorByTaskId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTaskActorByTaskId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetTaskId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetTaskId()) {
          oprot.writeString(struct.taskId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTaskActorByTaskId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.taskId = iprot.readString();
          struct.setTaskIdIsSet(true);
        }
      }
    }

  }

  public static class deleteHistoryTaskActorByTaskId_result implements org.apache.thrift.TBase<deleteHistoryTaskActorByTaskId_result, deleteHistoryTaskActorByTaskId_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteHistoryTaskActorByTaskId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteHistoryTaskActorByTaskId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteHistoryTaskActorByTaskId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteHistoryTaskActorByTaskId_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteHistoryTaskActorByTaskId_result.class, metaDataMap);
    }

    public deleteHistoryTaskActorByTaskId_result() {
    }

    public deleteHistoryTaskActorByTaskId_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteHistoryTaskActorByTaskId_result(deleteHistoryTaskActorByTaskId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteHistoryTaskActorByTaskId_result deepCopy() {
      return new deleteHistoryTaskActorByTaskId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteHistoryTaskActorByTaskId_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteHistoryTaskActorByTaskId_result)
        return this.equals((deleteHistoryTaskActorByTaskId_result)that);
      return false;
    }

    public boolean equals(deleteHistoryTaskActorByTaskId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteHistoryTaskActorByTaskId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteHistoryTaskActorByTaskId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteHistoryTaskActorByTaskId_resultStandardSchemeFactory implements SchemeFactory {
      public deleteHistoryTaskActorByTaskId_resultStandardScheme getScheme() {
        return new deleteHistoryTaskActorByTaskId_resultStandardScheme();
      }
    }

    private static class deleteHistoryTaskActorByTaskId_resultStandardScheme extends StandardScheme<deleteHistoryTaskActorByTaskId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteHistoryTaskActorByTaskId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteHistoryTaskActorByTaskId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteHistoryTaskActorByTaskId_resultTupleSchemeFactory implements SchemeFactory {
      public deleteHistoryTaskActorByTaskId_resultTupleScheme getScheme() {
        return new deleteHistoryTaskActorByTaskId_resultTupleScheme();
      }
    }

    private static class deleteHistoryTaskActorByTaskId_resultTupleScheme extends TupleScheme<deleteHistoryTaskActorByTaskId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTaskActorByTaskId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteHistoryTaskActorByTaskId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateHistoryTaskActor_args implements org.apache.thrift.TBase<updateHistoryTaskActor_args, updateHistoryTaskActor_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateHistoryTaskActor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHistoryTaskActor_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HISTORY_TASK_ACTOR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskActorVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHistoryTaskActor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHistoryTaskActor_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      HISTORY_TASK_ACTOR_VO((short)2, "historyTaskActorVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // HISTORY_TASK_ACTOR_VO
            return HISTORY_TASK_ACTOR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.HISTORY_TASK_ACTOR_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskActorVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskActorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHistoryTaskActor_args.class, metaDataMap);
    }

    public updateHistoryTaskActor_args() {
    }

    public updateHistoryTaskActor_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo)
    {
      this();
      this.originVo = originVo;
      this.historyTaskActorVo = historyTaskActorVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHistoryTaskActor_args(updateHistoryTaskActor_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetHistoryTaskActorVo()) {
        this.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo(other.historyTaskActorVo);
      }
    }

    public updateHistoryTaskActor_args deepCopy() {
      return new updateHistoryTaskActor_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.historyTaskActorVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateHistoryTaskActor_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.HistoryTaskActorVo getHistoryTaskActorVo() {
      return this.historyTaskActorVo;
    }

    public updateHistoryTaskActor_args setHistoryTaskActorVo(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) {
      this.historyTaskActorVo = historyTaskActorVo;
      return this;
    }

    public void unsetHistoryTaskActorVo() {
      this.historyTaskActorVo = null;
    }

    /** Returns true if field historyTaskActorVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskActorVo() {
      return this.historyTaskActorVo != null;
    }

    public void setHistoryTaskActorVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskActorVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case HISTORY_TASK_ACTOR_VO:
        if (value == null) {
          unsetHistoryTaskActorVo();
        } else {
          setHistoryTaskActorVo((com.froad.thrift.vo.HistoryTaskActorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case HISTORY_TASK_ACTOR_VO:
        return getHistoryTaskActorVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case HISTORY_TASK_ACTOR_VO:
        return isSetHistoryTaskActorVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHistoryTaskActor_args)
        return this.equals((updateHistoryTaskActor_args)that);
      return false;
    }

    public boolean equals(updateHistoryTaskActor_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_historyTaskActorVo = true && this.isSetHistoryTaskActorVo();
      boolean that_present_historyTaskActorVo = true && that.isSetHistoryTaskActorVo();
      if (this_present_historyTaskActorVo || that_present_historyTaskActorVo) {
        if (!(this_present_historyTaskActorVo && that_present_historyTaskActorVo))
          return false;
        if (!this.historyTaskActorVo.equals(that.historyTaskActorVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_historyTaskActorVo = true && (isSetHistoryTaskActorVo());
      list.add(present_historyTaskActorVo);
      if (present_historyTaskActorVo)
        list.add(historyTaskActorVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHistoryTaskActor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHistoryTaskActorVo()).compareTo(other.isSetHistoryTaskActorVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskActorVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskActorVo, other.historyTaskActorVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHistoryTaskActor_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("historyTaskActorVo:");
      if (this.historyTaskActorVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskActorVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (historyTaskActorVo != null) {
        historyTaskActorVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHistoryTaskActor_argsStandardSchemeFactory implements SchemeFactory {
      public updateHistoryTaskActor_argsStandardScheme getScheme() {
        return new updateHistoryTaskActor_argsStandardScheme();
      }
    }

    private static class updateHistoryTaskActor_argsStandardScheme extends StandardScheme<updateHistoryTaskActor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HISTORY_TASK_ACTOR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
                struct.historyTaskActorVo.read(iprot);
                struct.setHistoryTaskActorVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.historyTaskActorVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_ACTOR_VO_FIELD_DESC);
          struct.historyTaskActorVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHistoryTaskActor_argsTupleSchemeFactory implements SchemeFactory {
      public updateHistoryTaskActor_argsTupleScheme getScheme() {
        return new updateHistoryTaskActor_argsTupleScheme();
      }
    }

    private static class updateHistoryTaskActor_argsTupleScheme extends TupleScheme<updateHistoryTaskActor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetHistoryTaskActorVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetHistoryTaskActorVo()) {
          struct.historyTaskActorVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
          struct.historyTaskActorVo.read(iprot);
          struct.setHistoryTaskActorVoIsSet(true);
        }
      }
    }

  }

  public static class updateHistoryTaskActor_result implements org.apache.thrift.TBase<updateHistoryTaskActor_result, updateHistoryTaskActor_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateHistoryTaskActor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHistoryTaskActor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHistoryTaskActor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHistoryTaskActor_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHistoryTaskActor_result.class, metaDataMap);
    }

    public updateHistoryTaskActor_result() {
    }

    public updateHistoryTaskActor_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHistoryTaskActor_result(updateHistoryTaskActor_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateHistoryTaskActor_result deepCopy() {
      return new updateHistoryTaskActor_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateHistoryTaskActor_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHistoryTaskActor_result)
        return this.equals((updateHistoryTaskActor_result)that);
      return false;
    }

    public boolean equals(updateHistoryTaskActor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHistoryTaskActor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHistoryTaskActor_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHistoryTaskActor_resultStandardSchemeFactory implements SchemeFactory {
      public updateHistoryTaskActor_resultStandardScheme getScheme() {
        return new updateHistoryTaskActor_resultStandardScheme();
      }
    }

    private static class updateHistoryTaskActor_resultStandardScheme extends StandardScheme<updateHistoryTaskActor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHistoryTaskActor_resultTupleSchemeFactory implements SchemeFactory {
      public updateHistoryTaskActor_resultTupleScheme getScheme() {
        return new updateHistoryTaskActor_resultTupleScheme();
      }
    }

    private static class updateHistoryTaskActor_resultTupleScheme extends TupleScheme<updateHistoryTaskActor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateHistoryTaskActorByTaskId_args implements org.apache.thrift.TBase<updateHistoryTaskActorByTaskId_args, updateHistoryTaskActorByTaskId_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateHistoryTaskActorByTaskId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHistoryTaskActorByTaskId_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HISTORY_TASK_ACTOR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskActorVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHistoryTaskActorByTaskId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHistoryTaskActorByTaskId_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      HISTORY_TASK_ACTOR_VO((short)2, "historyTaskActorVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // HISTORY_TASK_ACTOR_VO
            return HISTORY_TASK_ACTOR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.HISTORY_TASK_ACTOR_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskActorVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskActorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHistoryTaskActorByTaskId_args.class, metaDataMap);
    }

    public updateHistoryTaskActorByTaskId_args() {
    }

    public updateHistoryTaskActorByTaskId_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo)
    {
      this();
      this.originVo = originVo;
      this.historyTaskActorVo = historyTaskActorVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHistoryTaskActorByTaskId_args(updateHistoryTaskActorByTaskId_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetHistoryTaskActorVo()) {
        this.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo(other.historyTaskActorVo);
      }
    }

    public updateHistoryTaskActorByTaskId_args deepCopy() {
      return new updateHistoryTaskActorByTaskId_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.historyTaskActorVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateHistoryTaskActorByTaskId_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.HistoryTaskActorVo getHistoryTaskActorVo() {
      return this.historyTaskActorVo;
    }

    public updateHistoryTaskActorByTaskId_args setHistoryTaskActorVo(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) {
      this.historyTaskActorVo = historyTaskActorVo;
      return this;
    }

    public void unsetHistoryTaskActorVo() {
      this.historyTaskActorVo = null;
    }

    /** Returns true if field historyTaskActorVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskActorVo() {
      return this.historyTaskActorVo != null;
    }

    public void setHistoryTaskActorVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskActorVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case HISTORY_TASK_ACTOR_VO:
        if (value == null) {
          unsetHistoryTaskActorVo();
        } else {
          setHistoryTaskActorVo((com.froad.thrift.vo.HistoryTaskActorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case HISTORY_TASK_ACTOR_VO:
        return getHistoryTaskActorVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case HISTORY_TASK_ACTOR_VO:
        return isSetHistoryTaskActorVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHistoryTaskActorByTaskId_args)
        return this.equals((updateHistoryTaskActorByTaskId_args)that);
      return false;
    }

    public boolean equals(updateHistoryTaskActorByTaskId_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_historyTaskActorVo = true && this.isSetHistoryTaskActorVo();
      boolean that_present_historyTaskActorVo = true && that.isSetHistoryTaskActorVo();
      if (this_present_historyTaskActorVo || that_present_historyTaskActorVo) {
        if (!(this_present_historyTaskActorVo && that_present_historyTaskActorVo))
          return false;
        if (!this.historyTaskActorVo.equals(that.historyTaskActorVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_historyTaskActorVo = true && (isSetHistoryTaskActorVo());
      list.add(present_historyTaskActorVo);
      if (present_historyTaskActorVo)
        list.add(historyTaskActorVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHistoryTaskActorByTaskId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHistoryTaskActorVo()).compareTo(other.isSetHistoryTaskActorVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskActorVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskActorVo, other.historyTaskActorVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHistoryTaskActorByTaskId_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("historyTaskActorVo:");
      if (this.historyTaskActorVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskActorVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (historyTaskActorVo != null) {
        historyTaskActorVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHistoryTaskActorByTaskId_argsStandardSchemeFactory implements SchemeFactory {
      public updateHistoryTaskActorByTaskId_argsStandardScheme getScheme() {
        return new updateHistoryTaskActorByTaskId_argsStandardScheme();
      }
    }

    private static class updateHistoryTaskActorByTaskId_argsStandardScheme extends StandardScheme<updateHistoryTaskActorByTaskId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHistoryTaskActorByTaskId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HISTORY_TASK_ACTOR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
                struct.historyTaskActorVo.read(iprot);
                struct.setHistoryTaskActorVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHistoryTaskActorByTaskId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.historyTaskActorVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_ACTOR_VO_FIELD_DESC);
          struct.historyTaskActorVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHistoryTaskActorByTaskId_argsTupleSchemeFactory implements SchemeFactory {
      public updateHistoryTaskActorByTaskId_argsTupleScheme getScheme() {
        return new updateHistoryTaskActorByTaskId_argsTupleScheme();
      }
    }

    private static class updateHistoryTaskActorByTaskId_argsTupleScheme extends TupleScheme<updateHistoryTaskActorByTaskId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHistoryTaskActorByTaskId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetHistoryTaskActorVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetHistoryTaskActorVo()) {
          struct.historyTaskActorVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHistoryTaskActorByTaskId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
          struct.historyTaskActorVo.read(iprot);
          struct.setHistoryTaskActorVoIsSet(true);
        }
      }
    }

  }

  public static class updateHistoryTaskActorByTaskId_result implements org.apache.thrift.TBase<updateHistoryTaskActorByTaskId_result, updateHistoryTaskActorByTaskId_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateHistoryTaskActorByTaskId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHistoryTaskActorByTaskId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHistoryTaskActorByTaskId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHistoryTaskActorByTaskId_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHistoryTaskActorByTaskId_result.class, metaDataMap);
    }

    public updateHistoryTaskActorByTaskId_result() {
    }

    public updateHistoryTaskActorByTaskId_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHistoryTaskActorByTaskId_result(updateHistoryTaskActorByTaskId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateHistoryTaskActorByTaskId_result deepCopy() {
      return new updateHistoryTaskActorByTaskId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateHistoryTaskActorByTaskId_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHistoryTaskActorByTaskId_result)
        return this.equals((updateHistoryTaskActorByTaskId_result)that);
      return false;
    }

    public boolean equals(updateHistoryTaskActorByTaskId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHistoryTaskActorByTaskId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHistoryTaskActorByTaskId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHistoryTaskActorByTaskId_resultStandardSchemeFactory implements SchemeFactory {
      public updateHistoryTaskActorByTaskId_resultStandardScheme getScheme() {
        return new updateHistoryTaskActorByTaskId_resultStandardScheme();
      }
    }

    private static class updateHistoryTaskActorByTaskId_resultStandardScheme extends StandardScheme<updateHistoryTaskActorByTaskId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHistoryTaskActorByTaskId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHistoryTaskActorByTaskId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHistoryTaskActorByTaskId_resultTupleSchemeFactory implements SchemeFactory {
      public updateHistoryTaskActorByTaskId_resultTupleScheme getScheme() {
        return new updateHistoryTaskActorByTaskId_resultTupleScheme();
      }
    }

    private static class updateHistoryTaskActorByTaskId_resultTupleScheme extends TupleScheme<updateHistoryTaskActorByTaskId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHistoryTaskActorByTaskId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHistoryTaskActorByTaskId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHistoryTaskActorByTaskId_args implements org.apache.thrift.TBase<getHistoryTaskActorByTaskId_args, getHistoryTaskActorByTaskId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryTaskActorByTaskId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryTaskActorByTaskId_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryTaskActorByTaskId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryTaskActorByTaskId_argsTupleSchemeFactory());
    }

    public String taskId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "taskId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryTaskActorByTaskId_args.class, metaDataMap);
    }

    public getHistoryTaskActorByTaskId_args() {
    }

    public getHistoryTaskActorByTaskId_args(
      String taskId)
    {
      this();
      this.taskId = taskId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryTaskActorByTaskId_args(getHistoryTaskActorByTaskId_args other) {
      if (other.isSetTaskId()) {
        this.taskId = other.taskId;
      }
    }

    public getHistoryTaskActorByTaskId_args deepCopy() {
      return new getHistoryTaskActorByTaskId_args(this);
    }

    @Override
    public void clear() {
      this.taskId = null;
    }

    public String getTaskId() {
      return this.taskId;
    }

    public getHistoryTaskActorByTaskId_args setTaskId(String taskId) {
      this.taskId = taskId;
      return this;
    }

    public void unsetTaskId() {
      this.taskId = null;
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return this.taskId != null;
    }

    public void setTaskIdIsSet(boolean value) {
      if (!value) {
        this.taskId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryTaskActorByTaskId_args)
        return this.equals((getHistoryTaskActorByTaskId_args)that);
      return false;
    }

    public boolean equals(getHistoryTaskActorByTaskId_args that) {
      if (that == null)
        return false;

      boolean this_present_taskId = true && this.isSetTaskId();
      boolean that_present_taskId = true && that.isSetTaskId();
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (!this.taskId.equals(that.taskId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskId = true && (isSetTaskId());
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryTaskActorByTaskId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryTaskActorByTaskId_args(");
      boolean first = true;

      sb.append("taskId:");
      if (this.taskId == null) {
        sb.append("null");
      } else {
        sb.append(this.taskId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryTaskActorByTaskId_argsStandardSchemeFactory implements SchemeFactory {
      public getHistoryTaskActorByTaskId_argsStandardScheme getScheme() {
        return new getHistoryTaskActorByTaskId_argsStandardScheme();
      }
    }

    private static class getHistoryTaskActorByTaskId_argsStandardScheme extends StandardScheme<getHistoryTaskActorByTaskId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryTaskActorByTaskId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.taskId = iprot.readString();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryTaskActorByTaskId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taskId != null) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          oprot.writeString(struct.taskId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryTaskActorByTaskId_argsTupleSchemeFactory implements SchemeFactory {
      public getHistoryTaskActorByTaskId_argsTupleScheme getScheme() {
        return new getHistoryTaskActorByTaskId_argsTupleScheme();
      }
    }

    private static class getHistoryTaskActorByTaskId_argsTupleScheme extends TupleScheme<getHistoryTaskActorByTaskId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskActorByTaskId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTaskId()) {
          oprot.writeString(struct.taskId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskActorByTaskId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.taskId = iprot.readString();
          struct.setTaskIdIsSet(true);
        }
      }
    }

  }

  public static class getHistoryTaskActorByTaskId_result implements org.apache.thrift.TBase<getHistoryTaskActorByTaskId_result, getHistoryTaskActorByTaskId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryTaskActorByTaskId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryTaskActorByTaskId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryTaskActorByTaskId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryTaskActorByTaskId_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryTaskActorVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskActorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryTaskActorByTaskId_result.class, metaDataMap);
    }

    public getHistoryTaskActorByTaskId_result() {
    }

    public getHistoryTaskActorByTaskId_result(
      com.froad.thrift.vo.HistoryTaskActorVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryTaskActorByTaskId_result(getHistoryTaskActorByTaskId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.HistoryTaskActorVo(other.success);
      }
    }

    public getHistoryTaskActorByTaskId_result deepCopy() {
      return new getHistoryTaskActorByTaskId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.HistoryTaskActorVo getSuccess() {
      return this.success;
    }

    public getHistoryTaskActorByTaskId_result setSuccess(com.froad.thrift.vo.HistoryTaskActorVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.HistoryTaskActorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryTaskActorByTaskId_result)
        return this.equals((getHistoryTaskActorByTaskId_result)that);
      return false;
    }

    public boolean equals(getHistoryTaskActorByTaskId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryTaskActorByTaskId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryTaskActorByTaskId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryTaskActorByTaskId_resultStandardSchemeFactory implements SchemeFactory {
      public getHistoryTaskActorByTaskId_resultStandardScheme getScheme() {
        return new getHistoryTaskActorByTaskId_resultStandardScheme();
      }
    }

    private static class getHistoryTaskActorByTaskId_resultStandardScheme extends StandardScheme<getHistoryTaskActorByTaskId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryTaskActorByTaskId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.HistoryTaskActorVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryTaskActorByTaskId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryTaskActorByTaskId_resultTupleSchemeFactory implements SchemeFactory {
      public getHistoryTaskActorByTaskId_resultTupleScheme getScheme() {
        return new getHistoryTaskActorByTaskId_resultTupleScheme();
      }
    }

    private static class getHistoryTaskActorByTaskId_resultTupleScheme extends TupleScheme<getHistoryTaskActorByTaskId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskActorByTaskId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskActorByTaskId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.HistoryTaskActorVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOneHistoryTaskActor_args implements org.apache.thrift.TBase<getOneHistoryTaskActor_args, getOneHistoryTaskActor_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOneHistoryTaskActor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOneHistoryTaskActor_args");

    private static final org.apache.thrift.protocol.TField HISTORY_TASK_ACTOR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskActorVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOneHistoryTaskActor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOneHistoryTaskActor_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HISTORY_TASK_ACTOR_VO((short)1, "historyTaskActorVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HISTORY_TASK_ACTOR_VO
            return HISTORY_TASK_ACTOR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HISTORY_TASK_ACTOR_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskActorVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskActorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOneHistoryTaskActor_args.class, metaDataMap);
    }

    public getOneHistoryTaskActor_args() {
    }

    public getOneHistoryTaskActor_args(
      com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo)
    {
      this();
      this.historyTaskActorVo = historyTaskActorVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOneHistoryTaskActor_args(getOneHistoryTaskActor_args other) {
      if (other.isSetHistoryTaskActorVo()) {
        this.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo(other.historyTaskActorVo);
      }
    }

    public getOneHistoryTaskActor_args deepCopy() {
      return new getOneHistoryTaskActor_args(this);
    }

    @Override
    public void clear() {
      this.historyTaskActorVo = null;
    }

    public com.froad.thrift.vo.HistoryTaskActorVo getHistoryTaskActorVo() {
      return this.historyTaskActorVo;
    }

    public getOneHistoryTaskActor_args setHistoryTaskActorVo(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) {
      this.historyTaskActorVo = historyTaskActorVo;
      return this;
    }

    public void unsetHistoryTaskActorVo() {
      this.historyTaskActorVo = null;
    }

    /** Returns true if field historyTaskActorVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskActorVo() {
      return this.historyTaskActorVo != null;
    }

    public void setHistoryTaskActorVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskActorVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HISTORY_TASK_ACTOR_VO:
        if (value == null) {
          unsetHistoryTaskActorVo();
        } else {
          setHistoryTaskActorVo((com.froad.thrift.vo.HistoryTaskActorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HISTORY_TASK_ACTOR_VO:
        return getHistoryTaskActorVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HISTORY_TASK_ACTOR_VO:
        return isSetHistoryTaskActorVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOneHistoryTaskActor_args)
        return this.equals((getOneHistoryTaskActor_args)that);
      return false;
    }

    public boolean equals(getOneHistoryTaskActor_args that) {
      if (that == null)
        return false;

      boolean this_present_historyTaskActorVo = true && this.isSetHistoryTaskActorVo();
      boolean that_present_historyTaskActorVo = true && that.isSetHistoryTaskActorVo();
      if (this_present_historyTaskActorVo || that_present_historyTaskActorVo) {
        if (!(this_present_historyTaskActorVo && that_present_historyTaskActorVo))
          return false;
        if (!this.historyTaskActorVo.equals(that.historyTaskActorVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_historyTaskActorVo = true && (isSetHistoryTaskActorVo());
      list.add(present_historyTaskActorVo);
      if (present_historyTaskActorVo)
        list.add(historyTaskActorVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOneHistoryTaskActor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHistoryTaskActorVo()).compareTo(other.isSetHistoryTaskActorVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskActorVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskActorVo, other.historyTaskActorVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOneHistoryTaskActor_args(");
      boolean first = true;

      sb.append("historyTaskActorVo:");
      if (this.historyTaskActorVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskActorVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (historyTaskActorVo != null) {
        historyTaskActorVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOneHistoryTaskActor_argsStandardSchemeFactory implements SchemeFactory {
      public getOneHistoryTaskActor_argsStandardScheme getScheme() {
        return new getOneHistoryTaskActor_argsStandardScheme();
      }
    }

    private static class getOneHistoryTaskActor_argsStandardScheme extends StandardScheme<getOneHistoryTaskActor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOneHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HISTORY_TASK_ACTOR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
                struct.historyTaskActorVo.read(iprot);
                struct.setHistoryTaskActorVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOneHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.historyTaskActorVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_ACTOR_VO_FIELD_DESC);
          struct.historyTaskActorVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOneHistoryTaskActor_argsTupleSchemeFactory implements SchemeFactory {
      public getOneHistoryTaskActor_argsTupleScheme getScheme() {
        return new getOneHistoryTaskActor_argsTupleScheme();
      }
    }

    private static class getOneHistoryTaskActor_argsTupleScheme extends TupleScheme<getOneHistoryTaskActor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOneHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHistoryTaskActorVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHistoryTaskActorVo()) {
          struct.historyTaskActorVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOneHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
          struct.historyTaskActorVo.read(iprot);
          struct.setHistoryTaskActorVoIsSet(true);
        }
      }
    }

  }

  public static class getOneHistoryTaskActor_result implements org.apache.thrift.TBase<getOneHistoryTaskActor_result, getOneHistoryTaskActor_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOneHistoryTaskActor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOneHistoryTaskActor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOneHistoryTaskActor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOneHistoryTaskActor_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryTaskActorVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskActorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOneHistoryTaskActor_result.class, metaDataMap);
    }

    public getOneHistoryTaskActor_result() {
    }

    public getOneHistoryTaskActor_result(
      com.froad.thrift.vo.HistoryTaskActorVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOneHistoryTaskActor_result(getOneHistoryTaskActor_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.HistoryTaskActorVo(other.success);
      }
    }

    public getOneHistoryTaskActor_result deepCopy() {
      return new getOneHistoryTaskActor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.HistoryTaskActorVo getSuccess() {
      return this.success;
    }

    public getOneHistoryTaskActor_result setSuccess(com.froad.thrift.vo.HistoryTaskActorVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.HistoryTaskActorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOneHistoryTaskActor_result)
        return this.equals((getOneHistoryTaskActor_result)that);
      return false;
    }

    public boolean equals(getOneHistoryTaskActor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOneHistoryTaskActor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOneHistoryTaskActor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOneHistoryTaskActor_resultStandardSchemeFactory implements SchemeFactory {
      public getOneHistoryTaskActor_resultStandardScheme getScheme() {
        return new getOneHistoryTaskActor_resultStandardScheme();
      }
    }

    private static class getOneHistoryTaskActor_resultStandardScheme extends StandardScheme<getOneHistoryTaskActor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOneHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.HistoryTaskActorVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOneHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOneHistoryTaskActor_resultTupleSchemeFactory implements SchemeFactory {
      public getOneHistoryTaskActor_resultTupleScheme getScheme() {
        return new getOneHistoryTaskActor_resultTupleScheme();
      }
    }

    private static class getOneHistoryTaskActor_resultTupleScheme extends TupleScheme<getOneHistoryTaskActor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOneHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOneHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.HistoryTaskActorVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countHistoryTaskActor_args implements org.apache.thrift.TBase<countHistoryTaskActor_args, countHistoryTaskActor_args._Fields>, java.io.Serializable, Cloneable, Comparable<countHistoryTaskActor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countHistoryTaskActor_args");

    private static final org.apache.thrift.protocol.TField HISTORY_TASK_ACTOR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskActorVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countHistoryTaskActor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countHistoryTaskActor_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HISTORY_TASK_ACTOR_VO((short)1, "historyTaskActorVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HISTORY_TASK_ACTOR_VO
            return HISTORY_TASK_ACTOR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HISTORY_TASK_ACTOR_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskActorVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskActorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countHistoryTaskActor_args.class, metaDataMap);
    }

    public countHistoryTaskActor_args() {
    }

    public countHistoryTaskActor_args(
      com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo)
    {
      this();
      this.historyTaskActorVo = historyTaskActorVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countHistoryTaskActor_args(countHistoryTaskActor_args other) {
      if (other.isSetHistoryTaskActorVo()) {
        this.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo(other.historyTaskActorVo);
      }
    }

    public countHistoryTaskActor_args deepCopy() {
      return new countHistoryTaskActor_args(this);
    }

    @Override
    public void clear() {
      this.historyTaskActorVo = null;
    }

    public com.froad.thrift.vo.HistoryTaskActorVo getHistoryTaskActorVo() {
      return this.historyTaskActorVo;
    }

    public countHistoryTaskActor_args setHistoryTaskActorVo(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) {
      this.historyTaskActorVo = historyTaskActorVo;
      return this;
    }

    public void unsetHistoryTaskActorVo() {
      this.historyTaskActorVo = null;
    }

    /** Returns true if field historyTaskActorVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskActorVo() {
      return this.historyTaskActorVo != null;
    }

    public void setHistoryTaskActorVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskActorVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HISTORY_TASK_ACTOR_VO:
        if (value == null) {
          unsetHistoryTaskActorVo();
        } else {
          setHistoryTaskActorVo((com.froad.thrift.vo.HistoryTaskActorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HISTORY_TASK_ACTOR_VO:
        return getHistoryTaskActorVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HISTORY_TASK_ACTOR_VO:
        return isSetHistoryTaskActorVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countHistoryTaskActor_args)
        return this.equals((countHistoryTaskActor_args)that);
      return false;
    }

    public boolean equals(countHistoryTaskActor_args that) {
      if (that == null)
        return false;

      boolean this_present_historyTaskActorVo = true && this.isSetHistoryTaskActorVo();
      boolean that_present_historyTaskActorVo = true && that.isSetHistoryTaskActorVo();
      if (this_present_historyTaskActorVo || that_present_historyTaskActorVo) {
        if (!(this_present_historyTaskActorVo && that_present_historyTaskActorVo))
          return false;
        if (!this.historyTaskActorVo.equals(that.historyTaskActorVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_historyTaskActorVo = true && (isSetHistoryTaskActorVo());
      list.add(present_historyTaskActorVo);
      if (present_historyTaskActorVo)
        list.add(historyTaskActorVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(countHistoryTaskActor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHistoryTaskActorVo()).compareTo(other.isSetHistoryTaskActorVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskActorVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskActorVo, other.historyTaskActorVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countHistoryTaskActor_args(");
      boolean first = true;

      sb.append("historyTaskActorVo:");
      if (this.historyTaskActorVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskActorVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (historyTaskActorVo != null) {
        historyTaskActorVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countHistoryTaskActor_argsStandardSchemeFactory implements SchemeFactory {
      public countHistoryTaskActor_argsStandardScheme getScheme() {
        return new countHistoryTaskActor_argsStandardScheme();
      }
    }

    private static class countHistoryTaskActor_argsStandardScheme extends StandardScheme<countHistoryTaskActor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HISTORY_TASK_ACTOR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
                struct.historyTaskActorVo.read(iprot);
                struct.setHistoryTaskActorVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.historyTaskActorVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_ACTOR_VO_FIELD_DESC);
          struct.historyTaskActorVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countHistoryTaskActor_argsTupleSchemeFactory implements SchemeFactory {
      public countHistoryTaskActor_argsTupleScheme getScheme() {
        return new countHistoryTaskActor_argsTupleScheme();
      }
    }

    private static class countHistoryTaskActor_argsTupleScheme extends TupleScheme<countHistoryTaskActor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHistoryTaskActorVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHistoryTaskActorVo()) {
          struct.historyTaskActorVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
          struct.historyTaskActorVo.read(iprot);
          struct.setHistoryTaskActorVoIsSet(true);
        }
      }
    }

  }

  public static class countHistoryTaskActor_result implements org.apache.thrift.TBase<countHistoryTaskActor_result, countHistoryTaskActor_result._Fields>, java.io.Serializable, Cloneable, Comparable<countHistoryTaskActor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countHistoryTaskActor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countHistoryTaskActor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countHistoryTaskActor_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countHistoryTaskActor_result.class, metaDataMap);
    }

    public countHistoryTaskActor_result() {
    }

    public countHistoryTaskActor_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countHistoryTaskActor_result(countHistoryTaskActor_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countHistoryTaskActor_result deepCopy() {
      return new countHistoryTaskActor_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public countHistoryTaskActor_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countHistoryTaskActor_result)
        return this.equals((countHistoryTaskActor_result)that);
      return false;
    }

    public boolean equals(countHistoryTaskActor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countHistoryTaskActor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countHistoryTaskActor_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countHistoryTaskActor_resultStandardSchemeFactory implements SchemeFactory {
      public countHistoryTaskActor_resultStandardScheme getScheme() {
        return new countHistoryTaskActor_resultStandardScheme();
      }
    }

    private static class countHistoryTaskActor_resultStandardScheme extends StandardScheme<countHistoryTaskActor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countHistoryTaskActor_resultTupleSchemeFactory implements SchemeFactory {
      public countHistoryTaskActor_resultTupleScheme getScheme() {
        return new countHistoryTaskActor_resultTupleScheme();
      }
    }

    private static class countHistoryTaskActor_resultTupleScheme extends TupleScheme<countHistoryTaskActor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHistoryTaskActor_args implements org.apache.thrift.TBase<getHistoryTaskActor_args, getHistoryTaskActor_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryTaskActor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryTaskActor_args");

    private static final org.apache.thrift.protocol.TField HISTORY_TASK_ACTOR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskActorVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryTaskActor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryTaskActor_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HISTORY_TASK_ACTOR_VO((short)1, "historyTaskActorVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HISTORY_TASK_ACTOR_VO
            return HISTORY_TASK_ACTOR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HISTORY_TASK_ACTOR_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskActorVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskActorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryTaskActor_args.class, metaDataMap);
    }

    public getHistoryTaskActor_args() {
    }

    public getHistoryTaskActor_args(
      com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo)
    {
      this();
      this.historyTaskActorVo = historyTaskActorVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryTaskActor_args(getHistoryTaskActor_args other) {
      if (other.isSetHistoryTaskActorVo()) {
        this.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo(other.historyTaskActorVo);
      }
    }

    public getHistoryTaskActor_args deepCopy() {
      return new getHistoryTaskActor_args(this);
    }

    @Override
    public void clear() {
      this.historyTaskActorVo = null;
    }

    public com.froad.thrift.vo.HistoryTaskActorVo getHistoryTaskActorVo() {
      return this.historyTaskActorVo;
    }

    public getHistoryTaskActor_args setHistoryTaskActorVo(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) {
      this.historyTaskActorVo = historyTaskActorVo;
      return this;
    }

    public void unsetHistoryTaskActorVo() {
      this.historyTaskActorVo = null;
    }

    /** Returns true if field historyTaskActorVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskActorVo() {
      return this.historyTaskActorVo != null;
    }

    public void setHistoryTaskActorVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskActorVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HISTORY_TASK_ACTOR_VO:
        if (value == null) {
          unsetHistoryTaskActorVo();
        } else {
          setHistoryTaskActorVo((com.froad.thrift.vo.HistoryTaskActorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HISTORY_TASK_ACTOR_VO:
        return getHistoryTaskActorVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HISTORY_TASK_ACTOR_VO:
        return isSetHistoryTaskActorVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryTaskActor_args)
        return this.equals((getHistoryTaskActor_args)that);
      return false;
    }

    public boolean equals(getHistoryTaskActor_args that) {
      if (that == null)
        return false;

      boolean this_present_historyTaskActorVo = true && this.isSetHistoryTaskActorVo();
      boolean that_present_historyTaskActorVo = true && that.isSetHistoryTaskActorVo();
      if (this_present_historyTaskActorVo || that_present_historyTaskActorVo) {
        if (!(this_present_historyTaskActorVo && that_present_historyTaskActorVo))
          return false;
        if (!this.historyTaskActorVo.equals(that.historyTaskActorVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_historyTaskActorVo = true && (isSetHistoryTaskActorVo());
      list.add(present_historyTaskActorVo);
      if (present_historyTaskActorVo)
        list.add(historyTaskActorVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryTaskActor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHistoryTaskActorVo()).compareTo(other.isSetHistoryTaskActorVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskActorVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskActorVo, other.historyTaskActorVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryTaskActor_args(");
      boolean first = true;

      sb.append("historyTaskActorVo:");
      if (this.historyTaskActorVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskActorVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (historyTaskActorVo != null) {
        historyTaskActorVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryTaskActor_argsStandardSchemeFactory implements SchemeFactory {
      public getHistoryTaskActor_argsStandardScheme getScheme() {
        return new getHistoryTaskActor_argsStandardScheme();
      }
    }

    private static class getHistoryTaskActor_argsStandardScheme extends StandardScheme<getHistoryTaskActor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HISTORY_TASK_ACTOR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
                struct.historyTaskActorVo.read(iprot);
                struct.setHistoryTaskActorVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.historyTaskActorVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_ACTOR_VO_FIELD_DESC);
          struct.historyTaskActorVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryTaskActor_argsTupleSchemeFactory implements SchemeFactory {
      public getHistoryTaskActor_argsTupleScheme getScheme() {
        return new getHistoryTaskActor_argsTupleScheme();
      }
    }

    private static class getHistoryTaskActor_argsTupleScheme extends TupleScheme<getHistoryTaskActor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHistoryTaskActorVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHistoryTaskActorVo()) {
          struct.historyTaskActorVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskActor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
          struct.historyTaskActorVo.read(iprot);
          struct.setHistoryTaskActorVoIsSet(true);
        }
      }
    }

  }

  public static class getHistoryTaskActor_result implements org.apache.thrift.TBase<getHistoryTaskActor_result, getHistoryTaskActor_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryTaskActor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryTaskActor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryTaskActor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryTaskActor_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.HistoryTaskActorVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskActorVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryTaskActor_result.class, metaDataMap);
    }

    public getHistoryTaskActor_result() {
    }

    public getHistoryTaskActor_result(
      List<com.froad.thrift.vo.HistoryTaskActorVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryTaskActor_result(getHistoryTaskActor_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.HistoryTaskActorVo> __this__success = new ArrayList<com.froad.thrift.vo.HistoryTaskActorVo>(other.success.size());
        for (com.froad.thrift.vo.HistoryTaskActorVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.HistoryTaskActorVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getHistoryTaskActor_result deepCopy() {
      return new getHistoryTaskActor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.HistoryTaskActorVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.HistoryTaskActorVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.HistoryTaskActorVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.HistoryTaskActorVo> getSuccess() {
      return this.success;
    }

    public getHistoryTaskActor_result setSuccess(List<com.froad.thrift.vo.HistoryTaskActorVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.HistoryTaskActorVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryTaskActor_result)
        return this.equals((getHistoryTaskActor_result)that);
      return false;
    }

    public boolean equals(getHistoryTaskActor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryTaskActor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryTaskActor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryTaskActor_resultStandardSchemeFactory implements SchemeFactory {
      public getHistoryTaskActor_resultStandardScheme getScheme() {
        return new getHistoryTaskActor_resultStandardScheme();
      }
    }

    private static class getHistoryTaskActor_resultStandardScheme extends StandardScheme<getHistoryTaskActor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.HistoryTaskActorVo>(_list0.size);
                  com.froad.thrift.vo.HistoryTaskActorVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.HistoryTaskActorVo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.HistoryTaskActorVo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryTaskActor_resultTupleSchemeFactory implements SchemeFactory {
      public getHistoryTaskActor_resultTupleScheme getScheme() {
        return new getHistoryTaskActor_resultTupleScheme();
      }
    }

    private static class getHistoryTaskActor_resultTupleScheme extends TupleScheme<getHistoryTaskActor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.HistoryTaskActorVo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskActor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.HistoryTaskActorVo>(_list5.size);
            com.froad.thrift.vo.HistoryTaskActorVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.HistoryTaskActorVo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getHistoryTaskActorByPage_args implements org.apache.thrift.TBase<getHistoryTaskActorByPage_args, getHistoryTaskActorByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryTaskActorByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryTaskActorByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HISTORY_TASK_ACTOR_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("historyTaskActorVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryTaskActorByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryTaskActorByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      HISTORY_TASK_ACTOR_VO((short)2, "historyTaskActorVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // HISTORY_TASK_ACTOR_VO
            return HISTORY_TASK_ACTOR_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.HISTORY_TASK_ACTOR_VO, new org.apache.thrift.meta_data.FieldMetaData("historyTaskActorVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskActorVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryTaskActorByPage_args.class, metaDataMap);
    }

    public getHistoryTaskActorByPage_args() {
    }

    public getHistoryTaskActorByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo)
    {
      this();
      this.page = page;
      this.historyTaskActorVo = historyTaskActorVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryTaskActorByPage_args(getHistoryTaskActorByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetHistoryTaskActorVo()) {
        this.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo(other.historyTaskActorVo);
      }
    }

    public getHistoryTaskActorByPage_args deepCopy() {
      return new getHistoryTaskActorByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.historyTaskActorVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getHistoryTaskActorByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.HistoryTaskActorVo getHistoryTaskActorVo() {
      return this.historyTaskActorVo;
    }

    public getHistoryTaskActorByPage_args setHistoryTaskActorVo(com.froad.thrift.vo.HistoryTaskActorVo historyTaskActorVo) {
      this.historyTaskActorVo = historyTaskActorVo;
      return this;
    }

    public void unsetHistoryTaskActorVo() {
      this.historyTaskActorVo = null;
    }

    /** Returns true if field historyTaskActorVo is set (has been assigned a value) and false otherwise */
    public boolean isSetHistoryTaskActorVo() {
      return this.historyTaskActorVo != null;
    }

    public void setHistoryTaskActorVoIsSet(boolean value) {
      if (!value) {
        this.historyTaskActorVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case HISTORY_TASK_ACTOR_VO:
        if (value == null) {
          unsetHistoryTaskActorVo();
        } else {
          setHistoryTaskActorVo((com.froad.thrift.vo.HistoryTaskActorVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case HISTORY_TASK_ACTOR_VO:
        return getHistoryTaskActorVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case HISTORY_TASK_ACTOR_VO:
        return isSetHistoryTaskActorVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryTaskActorByPage_args)
        return this.equals((getHistoryTaskActorByPage_args)that);
      return false;
    }

    public boolean equals(getHistoryTaskActorByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_historyTaskActorVo = true && this.isSetHistoryTaskActorVo();
      boolean that_present_historyTaskActorVo = true && that.isSetHistoryTaskActorVo();
      if (this_present_historyTaskActorVo || that_present_historyTaskActorVo) {
        if (!(this_present_historyTaskActorVo && that_present_historyTaskActorVo))
          return false;
        if (!this.historyTaskActorVo.equals(that.historyTaskActorVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_historyTaskActorVo = true && (isSetHistoryTaskActorVo());
      list.add(present_historyTaskActorVo);
      if (present_historyTaskActorVo)
        list.add(historyTaskActorVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryTaskActorByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHistoryTaskActorVo()).compareTo(other.isSetHistoryTaskActorVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHistoryTaskActorVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historyTaskActorVo, other.historyTaskActorVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryTaskActorByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("historyTaskActorVo:");
      if (this.historyTaskActorVo == null) {
        sb.append("null");
      } else {
        sb.append(this.historyTaskActorVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (historyTaskActorVo != null) {
        historyTaskActorVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryTaskActorByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getHistoryTaskActorByPage_argsStandardScheme getScheme() {
        return new getHistoryTaskActorByPage_argsStandardScheme();
      }
    }

    private static class getHistoryTaskActorByPage_argsStandardScheme extends StandardScheme<getHistoryTaskActorByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryTaskActorByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HISTORY_TASK_ACTOR_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
                struct.historyTaskActorVo.read(iprot);
                struct.setHistoryTaskActorVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryTaskActorByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.historyTaskActorVo != null) {
          oprot.writeFieldBegin(HISTORY_TASK_ACTOR_VO_FIELD_DESC);
          struct.historyTaskActorVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryTaskActorByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getHistoryTaskActorByPage_argsTupleScheme getScheme() {
        return new getHistoryTaskActorByPage_argsTupleScheme();
      }
    }

    private static class getHistoryTaskActorByPage_argsTupleScheme extends TupleScheme<getHistoryTaskActorByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskActorByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetHistoryTaskActorVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetHistoryTaskActorVo()) {
          struct.historyTaskActorVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskActorByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.historyTaskActorVo = new com.froad.thrift.vo.HistoryTaskActorVo();
          struct.historyTaskActorVo.read(iprot);
          struct.setHistoryTaskActorVoIsSet(true);
        }
      }
    }

  }

  public static class getHistoryTaskActorByPage_result implements org.apache.thrift.TBase<getHistoryTaskActorByPage_result, getHistoryTaskActorByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHistoryTaskActorByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHistoryTaskActorByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getHistoryTaskActorByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getHistoryTaskActorByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.HistoryTaskActorPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.HistoryTaskActorPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHistoryTaskActorByPage_result.class, metaDataMap);
    }

    public getHistoryTaskActorByPage_result() {
    }

    public getHistoryTaskActorByPage_result(
      com.froad.thrift.vo.HistoryTaskActorPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHistoryTaskActorByPage_result(getHistoryTaskActorByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.HistoryTaskActorPageVoRes(other.success);
      }
    }

    public getHistoryTaskActorByPage_result deepCopy() {
      return new getHistoryTaskActorByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.HistoryTaskActorPageVoRes getSuccess() {
      return this.success;
    }

    public getHistoryTaskActorByPage_result setSuccess(com.froad.thrift.vo.HistoryTaskActorPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.HistoryTaskActorPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHistoryTaskActorByPage_result)
        return this.equals((getHistoryTaskActorByPage_result)that);
      return false;
    }

    public boolean equals(getHistoryTaskActorByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getHistoryTaskActorByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getHistoryTaskActorByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHistoryTaskActorByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getHistoryTaskActorByPage_resultStandardScheme getScheme() {
        return new getHistoryTaskActorByPage_resultStandardScheme();
      }
    }

    private static class getHistoryTaskActorByPage_resultStandardScheme extends StandardScheme<getHistoryTaskActorByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHistoryTaskActorByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.HistoryTaskActorPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHistoryTaskActorByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHistoryTaskActorByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getHistoryTaskActorByPage_resultTupleScheme getScheme() {
        return new getHistoryTaskActorByPage_resultTupleScheme();
      }
    }

    private static class getHistoryTaskActorByPage_resultTupleScheme extends TupleScheme<getHistoryTaskActorByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskActorByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHistoryTaskActorByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.HistoryTaskActorPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
