/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.refund;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 券过期自动退款responseVo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class RefundTicketsResponseVo implements org.apache.thrift.TBase<RefundTicketsResponseVo, RefundTicketsResponseVo._Fields>, java.io.Serializable, Cloneable, Comparable<RefundTicketsResponseVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RefundTicketsResponseVo");

  private static final org.apache.thrift.protocol.TField RESULT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("resultVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SUCCESS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("successList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField FAILED_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("failedList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RefundTicketsResponseVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RefundTicketsResponseVoTupleSchemeFactory());
  }

  /**
   * 返回结果
   */
  public com.froad.thrift.vo.ResultVo resultVo; // required
  /**
   * 处理成功的过期券
   */
  public List<RefundTicketVo> successList; // required
  /**
   * 处理失败的过期券
   */
  public List<RefundTicketVo> failedList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 返回结果
     */
    RESULT_VO((short)1, "resultVo"),
    /**
     * 处理成功的过期券
     */
    SUCCESS_LIST((short)2, "successList"),
    /**
     * 处理失败的过期券
     */
    FAILED_LIST((short)3, "failedList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT_VO
          return RESULT_VO;
        case 2: // SUCCESS_LIST
          return SUCCESS_LIST;
        case 3: // FAILED_LIST
          return FAILED_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT_VO, new org.apache.thrift.meta_data.FieldMetaData("resultVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
    tmpMap.put(_Fields.SUCCESS_LIST, new org.apache.thrift.meta_data.FieldMetaData("successList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundTicketVo.class))));
    tmpMap.put(_Fields.FAILED_LIST, new org.apache.thrift.meta_data.FieldMetaData("failedList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundTicketVo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RefundTicketsResponseVo.class, metaDataMap);
  }

  public RefundTicketsResponseVo() {
  }

  public RefundTicketsResponseVo(
    com.froad.thrift.vo.ResultVo resultVo,
    List<RefundTicketVo> successList,
    List<RefundTicketVo> failedList)
  {
    this();
    this.resultVo = resultVo;
    this.successList = successList;
    this.failedList = failedList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RefundTicketsResponseVo(RefundTicketsResponseVo other) {
    if (other.isSetResultVo()) {
      this.resultVo = new com.froad.thrift.vo.ResultVo(other.resultVo);
    }
    if (other.isSetSuccessList()) {
      List<RefundTicketVo> __this__successList = new ArrayList<RefundTicketVo>(other.successList.size());
      for (RefundTicketVo other_element : other.successList) {
        __this__successList.add(new RefundTicketVo(other_element));
      }
      this.successList = __this__successList;
    }
    if (other.isSetFailedList()) {
      List<RefundTicketVo> __this__failedList = new ArrayList<RefundTicketVo>(other.failedList.size());
      for (RefundTicketVo other_element : other.failedList) {
        __this__failedList.add(new RefundTicketVo(other_element));
      }
      this.failedList = __this__failedList;
    }
  }

  public RefundTicketsResponseVo deepCopy() {
    return new RefundTicketsResponseVo(this);
  }

  @Override
  public void clear() {
    this.resultVo = null;
    this.successList = null;
    this.failedList = null;
  }

  /**
   * 返回结果
   */
  public com.froad.thrift.vo.ResultVo getResultVo() {
    return this.resultVo;
  }

  /**
   * 返回结果
   */
  public RefundTicketsResponseVo setResultVo(com.froad.thrift.vo.ResultVo resultVo) {
    this.resultVo = resultVo;
    return this;
  }

  public void unsetResultVo() {
    this.resultVo = null;
  }

  /** Returns true if field resultVo is set (has been assigned a value) and false otherwise */
  public boolean isSetResultVo() {
    return this.resultVo != null;
  }

  public void setResultVoIsSet(boolean value) {
    if (!value) {
      this.resultVo = null;
    }
  }

  public int getSuccessListSize() {
    return (this.successList == null) ? 0 : this.successList.size();
  }

  public java.util.Iterator<RefundTicketVo> getSuccessListIterator() {
    return (this.successList == null) ? null : this.successList.iterator();
  }

  public void addToSuccessList(RefundTicketVo elem) {
    if (this.successList == null) {
      this.successList = new ArrayList<RefundTicketVo>();
    }
    this.successList.add(elem);
  }

  /**
   * 处理成功的过期券
   */
  public List<RefundTicketVo> getSuccessList() {
    return this.successList;
  }

  /**
   * 处理成功的过期券
   */
  public RefundTicketsResponseVo setSuccessList(List<RefundTicketVo> successList) {
    this.successList = successList;
    return this;
  }

  public void unsetSuccessList() {
    this.successList = null;
  }

  /** Returns true if field successList is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessList() {
    return this.successList != null;
  }

  public void setSuccessListIsSet(boolean value) {
    if (!value) {
      this.successList = null;
    }
  }

  public int getFailedListSize() {
    return (this.failedList == null) ? 0 : this.failedList.size();
  }

  public java.util.Iterator<RefundTicketVo> getFailedListIterator() {
    return (this.failedList == null) ? null : this.failedList.iterator();
  }

  public void addToFailedList(RefundTicketVo elem) {
    if (this.failedList == null) {
      this.failedList = new ArrayList<RefundTicketVo>();
    }
    this.failedList.add(elem);
  }

  /**
   * 处理失败的过期券
   */
  public List<RefundTicketVo> getFailedList() {
    return this.failedList;
  }

  /**
   * 处理失败的过期券
   */
  public RefundTicketsResponseVo setFailedList(List<RefundTicketVo> failedList) {
    this.failedList = failedList;
    return this;
  }

  public void unsetFailedList() {
    this.failedList = null;
  }

  /** Returns true if field failedList is set (has been assigned a value) and false otherwise */
  public boolean isSetFailedList() {
    return this.failedList != null;
  }

  public void setFailedListIsSet(boolean value) {
    if (!value) {
      this.failedList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT_VO:
      if (value == null) {
        unsetResultVo();
      } else {
        setResultVo((com.froad.thrift.vo.ResultVo)value);
      }
      break;

    case SUCCESS_LIST:
      if (value == null) {
        unsetSuccessList();
      } else {
        setSuccessList((List<RefundTicketVo>)value);
      }
      break;

    case FAILED_LIST:
      if (value == null) {
        unsetFailedList();
      } else {
        setFailedList((List<RefundTicketVo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT_VO:
      return getResultVo();

    case SUCCESS_LIST:
      return getSuccessList();

    case FAILED_LIST:
      return getFailedList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT_VO:
      return isSetResultVo();
    case SUCCESS_LIST:
      return isSetSuccessList();
    case FAILED_LIST:
      return isSetFailedList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RefundTicketsResponseVo)
      return this.equals((RefundTicketsResponseVo)that);
    return false;
  }

  public boolean equals(RefundTicketsResponseVo that) {
    if (that == null)
      return false;

    boolean this_present_resultVo = true && this.isSetResultVo();
    boolean that_present_resultVo = true && that.isSetResultVo();
    if (this_present_resultVo || that_present_resultVo) {
      if (!(this_present_resultVo && that_present_resultVo))
        return false;
      if (!this.resultVo.equals(that.resultVo))
        return false;
    }

    boolean this_present_successList = true && this.isSetSuccessList();
    boolean that_present_successList = true && that.isSetSuccessList();
    if (this_present_successList || that_present_successList) {
      if (!(this_present_successList && that_present_successList))
        return false;
      if (!this.successList.equals(that.successList))
        return false;
    }

    boolean this_present_failedList = true && this.isSetFailedList();
    boolean that_present_failedList = true && that.isSetFailedList();
    if (this_present_failedList || that_present_failedList) {
      if (!(this_present_failedList && that_present_failedList))
        return false;
      if (!this.failedList.equals(that.failedList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resultVo = true && (isSetResultVo());
    list.add(present_resultVo);
    if (present_resultVo)
      list.add(resultVo);

    boolean present_successList = true && (isSetSuccessList());
    list.add(present_successList);
    if (present_successList)
      list.add(successList);

    boolean present_failedList = true && (isSetFailedList());
    list.add(present_failedList);
    if (present_failedList)
      list.add(failedList);

    return list.hashCode();
  }

  @Override
  public int compareTo(RefundTicketsResponseVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResultVo()).compareTo(other.isSetResultVo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultVo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultVo, other.resultVo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccessList()).compareTo(other.isSetSuccessList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successList, other.successList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailedList()).compareTo(other.isSetFailedList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailedList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failedList, other.failedList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RefundTicketsResponseVo(");
    boolean first = true;

    sb.append("resultVo:");
    if (this.resultVo == null) {
      sb.append("null");
    } else {
      sb.append(this.resultVo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("successList:");
    if (this.successList == null) {
      sb.append("null");
    } else {
      sb.append(this.successList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("failedList:");
    if (this.failedList == null) {
      sb.append("null");
    } else {
      sb.append(this.failedList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (resultVo != null) {
      resultVo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RefundTicketsResponseVoStandardSchemeFactory implements SchemeFactory {
    public RefundTicketsResponseVoStandardScheme getScheme() {
      return new RefundTicketsResponseVoStandardScheme();
    }
  }

  private static class RefundTicketsResponseVoStandardScheme extends StandardScheme<RefundTicketsResponseVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RefundTicketsResponseVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resultVo = new com.froad.thrift.vo.ResultVo();
              struct.resultVo.read(iprot);
              struct.setResultVoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUCCESS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.successList = new ArrayList<RefundTicketVo>(_list40.size);
                RefundTicketVo _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new RefundTicketVo();
                  _elem41.read(iprot);
                  struct.successList.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setSuccessListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FAILED_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.failedList = new ArrayList<RefundTicketVo>(_list43.size);
                RefundTicketVo _elem44;
                for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                {
                  _elem44 = new RefundTicketVo();
                  _elem44.read(iprot);
                  struct.failedList.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setFailedListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RefundTicketsResponseVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resultVo != null) {
        oprot.writeFieldBegin(RESULT_VO_FIELD_DESC);
        struct.resultVo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.successList != null) {
        oprot.writeFieldBegin(SUCCESS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.successList.size()));
          for (RefundTicketVo _iter46 : struct.successList)
          {
            _iter46.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.failedList != null) {
        oprot.writeFieldBegin(FAILED_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.failedList.size()));
          for (RefundTicketVo _iter47 : struct.failedList)
          {
            _iter47.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RefundTicketsResponseVoTupleSchemeFactory implements SchemeFactory {
    public RefundTicketsResponseVoTupleScheme getScheme() {
      return new RefundTicketsResponseVoTupleScheme();
    }
  }

  private static class RefundTicketsResponseVoTupleScheme extends TupleScheme<RefundTicketsResponseVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RefundTicketsResponseVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResultVo()) {
        optionals.set(0);
      }
      if (struct.isSetSuccessList()) {
        optionals.set(1);
      }
      if (struct.isSetFailedList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetResultVo()) {
        struct.resultVo.write(oprot);
      }
      if (struct.isSetSuccessList()) {
        {
          oprot.writeI32(struct.successList.size());
          for (RefundTicketVo _iter48 : struct.successList)
          {
            _iter48.write(oprot);
          }
        }
      }
      if (struct.isSetFailedList()) {
        {
          oprot.writeI32(struct.failedList.size());
          for (RefundTicketVo _iter49 : struct.failedList)
          {
            _iter49.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RefundTicketsResponseVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.resultVo = new com.froad.thrift.vo.ResultVo();
        struct.resultVo.read(iprot);
        struct.setResultVoIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.successList = new ArrayList<RefundTicketVo>(_list50.size);
          RefundTicketVo _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = new RefundTicketVo();
            _elem51.read(iprot);
            struct.successList.add(_elem51);
          }
        }
        struct.setSuccessListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.failedList = new ArrayList<RefundTicketVo>(_list53.size);
          RefundTicketVo _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new RefundTicketVo();
            _elem54.read(iprot);
            struct.failedList.add(_elem54);
          }
        }
        struct.setFailedListIsSet(true);
      }
    }
  }

}

