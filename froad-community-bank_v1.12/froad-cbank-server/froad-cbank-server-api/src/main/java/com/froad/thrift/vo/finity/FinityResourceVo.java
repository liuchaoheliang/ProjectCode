/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.finity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 资源Vo
 * FinityResourceVo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class FinityResourceVo implements org.apache.thrift.TBase<FinityResourceVo, FinityResourceVo._Fields>, java.io.Serializable, Cloneable, Comparable<FinityResourceVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinityResourceVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PARENT_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentResourceId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField RESOURCE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceUrl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RESOURCE_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceIcon", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TREE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("treePath", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("isDelete", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField API_FIELD_DESC = new org.apache.thrift.protocol.TField("api", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ORDER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderValue", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField RESOURCE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceKey", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField IS_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("isSystem", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField IS_MENU_FIELD_DESC = new org.apache.thrift.protocol.TField("isMenu", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField FINITY_RESOURCE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("finityResourceList", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField IS_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("isLimit", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinityResourceVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinityResourceVoTupleSchemeFactory());
  }

  /**
   * 资源id 主键id
   */
  public long id; // optional
  /**
   * 资源名称
   */
  public String resourceName; // optional
  /**
   * 0:菜单1:按钮
   */
  public int type; // optional
  /**
   * 父级资源Id(顶级资源的父资源ID为0)
   */
  public long parentResourceId; // optional
  /**
   * 0-不可用 1-可用
   */
  public boolean status; // optional
  /**
   * 资源url
   */
  public String resourceUrl; // optional
  /**
   * 资源图标
   */
  public String resourceIcon; // optional
  /**
   * 资源路径
   */
  public String treePath; // optional
  /**
   * 是否删除 0-未删除 1-删除
   */
  public boolean isDelete; // optional
  /**
   * 资源接口
   */
  public String api; // optional
  /**
   * 资源排序
   */
  public int orderValue; // optional
  /**
   * 资源KEY
   */
  public String resourceKey; // optional
  /**
   * 是否是系统资源 是否系统资源1是 0否
   */
  public boolean isSystem; // optional
  /**
   * 是否为菜单:1是，0否
   */
  public boolean isMenu; // optional
  /**
   * 资源所属平台 boss bank merchant
   */
  public String platform; // optional
  /**
   * 子集资源列表
   */
  public List<FinityResourceVo> finityResourceList; // optional
  /**
   * 是否需要数据权限控制 0-否 1-是
   */
  public boolean isLimit; // optional
  /**
   * 更新时间
   */
  public long updateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 资源id 主键id
     */
    ID((short)1, "id"),
    /**
     * 资源名称
     */
    RESOURCE_NAME((short)2, "resourceName"),
    /**
     * 0:菜单1:按钮
     */
    TYPE((short)3, "type"),
    /**
     * 父级资源Id(顶级资源的父资源ID为0)
     */
    PARENT_RESOURCE_ID((short)4, "parentResourceId"),
    /**
     * 0-不可用 1-可用
     */
    STATUS((short)5, "status"),
    /**
     * 资源url
     */
    RESOURCE_URL((short)6, "resourceUrl"),
    /**
     * 资源图标
     */
    RESOURCE_ICON((short)7, "resourceIcon"),
    /**
     * 资源路径
     */
    TREE_PATH((short)8, "treePath"),
    /**
     * 是否删除 0-未删除 1-删除
     */
    IS_DELETE((short)9, "isDelete"),
    /**
     * 资源接口
     */
    API((short)10, "api"),
    /**
     * 资源排序
     */
    ORDER_VALUE((short)11, "orderValue"),
    /**
     * 资源KEY
     */
    RESOURCE_KEY((short)12, "resourceKey"),
    /**
     * 是否是系统资源 是否系统资源1是 0否
     */
    IS_SYSTEM((short)13, "isSystem"),
    /**
     * 是否为菜单:1是，0否
     */
    IS_MENU((short)14, "isMenu"),
    /**
     * 资源所属平台 boss bank merchant
     */
    PLATFORM((short)15, "platform"),
    /**
     * 子集资源列表
     */
    FINITY_RESOURCE_LIST((short)16, "finityResourceList"),
    /**
     * 是否需要数据权限控制 0-否 1-是
     */
    IS_LIMIT((short)17, "isLimit"),
    /**
     * 更新时间
     */
    UPDATE_TIME((short)18, "updateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // RESOURCE_NAME
          return RESOURCE_NAME;
        case 3: // TYPE
          return TYPE;
        case 4: // PARENT_RESOURCE_ID
          return PARENT_RESOURCE_ID;
        case 5: // STATUS
          return STATUS;
        case 6: // RESOURCE_URL
          return RESOURCE_URL;
        case 7: // RESOURCE_ICON
          return RESOURCE_ICON;
        case 8: // TREE_PATH
          return TREE_PATH;
        case 9: // IS_DELETE
          return IS_DELETE;
        case 10: // API
          return API;
        case 11: // ORDER_VALUE
          return ORDER_VALUE;
        case 12: // RESOURCE_KEY
          return RESOURCE_KEY;
        case 13: // IS_SYSTEM
          return IS_SYSTEM;
        case 14: // IS_MENU
          return IS_MENU;
        case 15: // PLATFORM
          return PLATFORM;
        case 16: // FINITY_RESOURCE_LIST
          return FINITY_RESOURCE_LIST;
        case 17: // IS_LIMIT
          return IS_LIMIT;
        case 18: // UPDATE_TIME
          return UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __PARENTRESOURCEID_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __ISDELETE_ISSET_ID = 4;
  private static final int __ORDERVALUE_ISSET_ID = 5;
  private static final int __ISSYSTEM_ISSET_ID = 6;
  private static final int __ISMENU_ISSET_ID = 7;
  private static final int __ISLIMIT_ISSET_ID = 8;
  private static final int __UPDATETIME_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.RESOURCE_NAME,_Fields.TYPE,_Fields.PARENT_RESOURCE_ID,_Fields.STATUS,_Fields.RESOURCE_URL,_Fields.RESOURCE_ICON,_Fields.TREE_PATH,_Fields.IS_DELETE,_Fields.API,_Fields.ORDER_VALUE,_Fields.RESOURCE_KEY,_Fields.IS_SYSTEM,_Fields.IS_MENU,_Fields.PLATFORM,_Fields.FINITY_RESOURCE_LIST,_Fields.IS_LIMIT,_Fields.UPDATE_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("resourceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("parentResourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESOURCE_URL, new org.apache.thrift.meta_data.FieldMetaData("resourceUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_ICON, new org.apache.thrift.meta_data.FieldMetaData("resourceIcon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TREE_PATH, new org.apache.thrift.meta_data.FieldMetaData("treePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DELETE, new org.apache.thrift.meta_data.FieldMetaData("isDelete", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.API, new org.apache.thrift.meta_data.FieldMetaData("api", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("orderValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESOURCE_KEY, new org.apache.thrift.meta_data.FieldMetaData("resourceKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("isSystem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_MENU, new org.apache.thrift.meta_data.FieldMetaData("isMenu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINITY_RESOURCE_LIST, new org.apache.thrift.meta_data.FieldMetaData("finityResourceList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "FinityResourceVo"))));
    tmpMap.put(_Fields.IS_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("isLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinityResourceVo.class, metaDataMap);
  }

  public FinityResourceVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinityResourceVo(FinityResourceVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetResourceName()) {
      this.resourceName = other.resourceName;
    }
    this.type = other.type;
    this.parentResourceId = other.parentResourceId;
    this.status = other.status;
    if (other.isSetResourceUrl()) {
      this.resourceUrl = other.resourceUrl;
    }
    if (other.isSetResourceIcon()) {
      this.resourceIcon = other.resourceIcon;
    }
    if (other.isSetTreePath()) {
      this.treePath = other.treePath;
    }
    this.isDelete = other.isDelete;
    if (other.isSetApi()) {
      this.api = other.api;
    }
    this.orderValue = other.orderValue;
    if (other.isSetResourceKey()) {
      this.resourceKey = other.resourceKey;
    }
    this.isSystem = other.isSystem;
    this.isMenu = other.isMenu;
    if (other.isSetPlatform()) {
      this.platform = other.platform;
    }
    if (other.isSetFinityResourceList()) {
      List<FinityResourceVo> __this__finityResourceList = new ArrayList<FinityResourceVo>(other.finityResourceList.size());
      for (FinityResourceVo other_element : other.finityResourceList) {
        __this__finityResourceList.add(other_element);
      }
      this.finityResourceList = __this__finityResourceList;
    }
    this.isLimit = other.isLimit;
    this.updateTime = other.updateTime;
  }

  public FinityResourceVo deepCopy() {
    return new FinityResourceVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.resourceName = null;
    setTypeIsSet(false);
    this.type = 0;
    setParentResourceIdIsSet(false);
    this.parentResourceId = 0;
    setStatusIsSet(false);
    this.status = false;
    this.resourceUrl = null;
    this.resourceIcon = null;
    this.treePath = null;
    setIsDeleteIsSet(false);
    this.isDelete = false;
    this.api = null;
    setOrderValueIsSet(false);
    this.orderValue = 0;
    this.resourceKey = null;
    setIsSystemIsSet(false);
    this.isSystem = false;
    setIsMenuIsSet(false);
    this.isMenu = false;
    this.platform = null;
    this.finityResourceList = null;
    setIsLimitIsSet(false);
    this.isLimit = false;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
  }

  /**
   * 资源id 主键id
   */
  public long getId() {
    return this.id;
  }

  /**
   * 资源id 主键id
   */
  public FinityResourceVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 资源名称
   */
  public String getResourceName() {
    return this.resourceName;
  }

  /**
   * 资源名称
   */
  public FinityResourceVo setResourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  public void unsetResourceName() {
    this.resourceName = null;
  }

  /** Returns true if field resourceName is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceName() {
    return this.resourceName != null;
  }

  public void setResourceNameIsSet(boolean value) {
    if (!value) {
      this.resourceName = null;
    }
  }

  /**
   * 0:菜单1:按钮
   */
  public int getType() {
    return this.type;
  }

  /**
   * 0:菜单1:按钮
   */
  public FinityResourceVo setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  /**
   * 父级资源Id(顶级资源的父资源ID为0)
   */
  public long getParentResourceId() {
    return this.parentResourceId;
  }

  /**
   * 父级资源Id(顶级资源的父资源ID为0)
   */
  public FinityResourceVo setParentResourceId(long parentResourceId) {
    this.parentResourceId = parentResourceId;
    setParentResourceIdIsSet(true);
    return this;
  }

  public void unsetParentResourceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTRESOURCEID_ISSET_ID);
  }

  /** Returns true if field parentResourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentResourceId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTRESOURCEID_ISSET_ID);
  }

  public void setParentResourceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTRESOURCEID_ISSET_ID, value);
  }

  /**
   * 0-不可用 1-可用
   */
  public boolean isStatus() {
    return this.status;
  }

  /**
   * 0-不可用 1-可用
   */
  public FinityResourceVo setStatus(boolean status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  /**
   * 资源url
   */
  public String getResourceUrl() {
    return this.resourceUrl;
  }

  /**
   * 资源url
   */
  public FinityResourceVo setResourceUrl(String resourceUrl) {
    this.resourceUrl = resourceUrl;
    return this;
  }

  public void unsetResourceUrl() {
    this.resourceUrl = null;
  }

  /** Returns true if field resourceUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceUrl() {
    return this.resourceUrl != null;
  }

  public void setResourceUrlIsSet(boolean value) {
    if (!value) {
      this.resourceUrl = null;
    }
  }

  /**
   * 资源图标
   */
  public String getResourceIcon() {
    return this.resourceIcon;
  }

  /**
   * 资源图标
   */
  public FinityResourceVo setResourceIcon(String resourceIcon) {
    this.resourceIcon = resourceIcon;
    return this;
  }

  public void unsetResourceIcon() {
    this.resourceIcon = null;
  }

  /** Returns true if field resourceIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceIcon() {
    return this.resourceIcon != null;
  }

  public void setResourceIconIsSet(boolean value) {
    if (!value) {
      this.resourceIcon = null;
    }
  }

  /**
   * 资源路径
   */
  public String getTreePath() {
    return this.treePath;
  }

  /**
   * 资源路径
   */
  public FinityResourceVo setTreePath(String treePath) {
    this.treePath = treePath;
    return this;
  }

  public void unsetTreePath() {
    this.treePath = null;
  }

  /** Returns true if field treePath is set (has been assigned a value) and false otherwise */
  public boolean isSetTreePath() {
    return this.treePath != null;
  }

  public void setTreePathIsSet(boolean value) {
    if (!value) {
      this.treePath = null;
    }
  }

  /**
   * 是否删除 0-未删除 1-删除
   */
  public boolean isIsDelete() {
    return this.isDelete;
  }

  /**
   * 是否删除 0-未删除 1-删除
   */
  public FinityResourceVo setIsDelete(boolean isDelete) {
    this.isDelete = isDelete;
    setIsDeleteIsSet(true);
    return this;
  }

  public void unsetIsDelete() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDELETE_ISSET_ID);
  }

  /** Returns true if field isDelete is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDelete() {
    return EncodingUtils.testBit(__isset_bitfield, __ISDELETE_ISSET_ID);
  }

  public void setIsDeleteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDELETE_ISSET_ID, value);
  }

  /**
   * 资源接口
   */
  public String getApi() {
    return this.api;
  }

  /**
   * 资源接口
   */
  public FinityResourceVo setApi(String api) {
    this.api = api;
    return this;
  }

  public void unsetApi() {
    this.api = null;
  }

  /** Returns true if field api is set (has been assigned a value) and false otherwise */
  public boolean isSetApi() {
    return this.api != null;
  }

  public void setApiIsSet(boolean value) {
    if (!value) {
      this.api = null;
    }
  }

  /**
   * 资源排序
   */
  public int getOrderValue() {
    return this.orderValue;
  }

  /**
   * 资源排序
   */
  public FinityResourceVo setOrderValue(int orderValue) {
    this.orderValue = orderValue;
    setOrderValueIsSet(true);
    return this;
  }

  public void unsetOrderValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERVALUE_ISSET_ID);
  }

  /** Returns true if field orderValue is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderValue() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERVALUE_ISSET_ID);
  }

  public void setOrderValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERVALUE_ISSET_ID, value);
  }

  /**
   * 资源KEY
   */
  public String getResourceKey() {
    return this.resourceKey;
  }

  /**
   * 资源KEY
   */
  public FinityResourceVo setResourceKey(String resourceKey) {
    this.resourceKey = resourceKey;
    return this;
  }

  public void unsetResourceKey() {
    this.resourceKey = null;
  }

  /** Returns true if field resourceKey is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceKey() {
    return this.resourceKey != null;
  }

  public void setResourceKeyIsSet(boolean value) {
    if (!value) {
      this.resourceKey = null;
    }
  }

  /**
   * 是否是系统资源 是否系统资源1是 0否
   */
  public boolean isIsSystem() {
    return this.isSystem;
  }

  /**
   * 是否是系统资源 是否系统资源1是 0否
   */
  public FinityResourceVo setIsSystem(boolean isSystem) {
    this.isSystem = isSystem;
    setIsSystemIsSet(true);
    return this;
  }

  public void unsetIsSystem() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSYSTEM_ISSET_ID);
  }

  /** Returns true if field isSystem is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSystem() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSYSTEM_ISSET_ID);
  }

  public void setIsSystemIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSYSTEM_ISSET_ID, value);
  }

  /**
   * 是否为菜单:1是，0否
   */
  public boolean isIsMenu() {
    return this.isMenu;
  }

  /**
   * 是否为菜单:1是，0否
   */
  public FinityResourceVo setIsMenu(boolean isMenu) {
    this.isMenu = isMenu;
    setIsMenuIsSet(true);
    return this;
  }

  public void unsetIsMenu() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMENU_ISSET_ID);
  }

  /** Returns true if field isMenu is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMenu() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMENU_ISSET_ID);
  }

  public void setIsMenuIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMENU_ISSET_ID, value);
  }

  /**
   * 资源所属平台 boss bank merchant
   */
  public String getPlatform() {
    return this.platform;
  }

  /**
   * 资源所属平台 boss bank merchant
   */
  public FinityResourceVo setPlatform(String platform) {
    this.platform = platform;
    return this;
  }

  public void unsetPlatform() {
    this.platform = null;
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return this.platform != null;
  }

  public void setPlatformIsSet(boolean value) {
    if (!value) {
      this.platform = null;
    }
  }

  public int getFinityResourceListSize() {
    return (this.finityResourceList == null) ? 0 : this.finityResourceList.size();
  }

  public java.util.Iterator<FinityResourceVo> getFinityResourceListIterator() {
    return (this.finityResourceList == null) ? null : this.finityResourceList.iterator();
  }

  public void addToFinityResourceList(FinityResourceVo elem) {
    if (this.finityResourceList == null) {
      this.finityResourceList = new ArrayList<FinityResourceVo>();
    }
    this.finityResourceList.add(elem);
  }

  /**
   * 子集资源列表
   */
  public List<FinityResourceVo> getFinityResourceList() {
    return this.finityResourceList;
  }

  /**
   * 子集资源列表
   */
  public FinityResourceVo setFinityResourceList(List<FinityResourceVo> finityResourceList) {
    this.finityResourceList = finityResourceList;
    return this;
  }

  public void unsetFinityResourceList() {
    this.finityResourceList = null;
  }

  /** Returns true if field finityResourceList is set (has been assigned a value) and false otherwise */
  public boolean isSetFinityResourceList() {
    return this.finityResourceList != null;
  }

  public void setFinityResourceListIsSet(boolean value) {
    if (!value) {
      this.finityResourceList = null;
    }
  }

  /**
   * 是否需要数据权限控制 0-否 1-是
   */
  public boolean isIsLimit() {
    return this.isLimit;
  }

  /**
   * 是否需要数据权限控制 0-否 1-是
   */
  public FinityResourceVo setIsLimit(boolean isLimit) {
    this.isLimit = isLimit;
    setIsLimitIsSet(true);
    return this;
  }

  public void unsetIsLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLIMIT_ISSET_ID);
  }

  /** Returns true if field isLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLIMIT_ISSET_ID);
  }

  public void setIsLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLIMIT_ISSET_ID, value);
  }

  /**
   * 更新时间
   */
  public long getUpdateTime() {
    return this.updateTime;
  }

  /**
   * 更新时间
   */
  public FinityResourceVo setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case RESOURCE_NAME:
      if (value == null) {
        unsetResourceName();
      } else {
        setResourceName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case PARENT_RESOURCE_ID:
      if (value == null) {
        unsetParentResourceId();
      } else {
        setParentResourceId((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Boolean)value);
      }
      break;

    case RESOURCE_URL:
      if (value == null) {
        unsetResourceUrl();
      } else {
        setResourceUrl((String)value);
      }
      break;

    case RESOURCE_ICON:
      if (value == null) {
        unsetResourceIcon();
      } else {
        setResourceIcon((String)value);
      }
      break;

    case TREE_PATH:
      if (value == null) {
        unsetTreePath();
      } else {
        setTreePath((String)value);
      }
      break;

    case IS_DELETE:
      if (value == null) {
        unsetIsDelete();
      } else {
        setIsDelete((Boolean)value);
      }
      break;

    case API:
      if (value == null) {
        unsetApi();
      } else {
        setApi((String)value);
      }
      break;

    case ORDER_VALUE:
      if (value == null) {
        unsetOrderValue();
      } else {
        setOrderValue((Integer)value);
      }
      break;

    case RESOURCE_KEY:
      if (value == null) {
        unsetResourceKey();
      } else {
        setResourceKey((String)value);
      }
      break;

    case IS_SYSTEM:
      if (value == null) {
        unsetIsSystem();
      } else {
        setIsSystem((Boolean)value);
      }
      break;

    case IS_MENU:
      if (value == null) {
        unsetIsMenu();
      } else {
        setIsMenu((Boolean)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((String)value);
      }
      break;

    case FINITY_RESOURCE_LIST:
      if (value == null) {
        unsetFinityResourceList();
      } else {
        setFinityResourceList((List<FinityResourceVo>)value);
      }
      break;

    case IS_LIMIT:
      if (value == null) {
        unsetIsLimit();
      } else {
        setIsLimit((Boolean)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case RESOURCE_NAME:
      return getResourceName();

    case TYPE:
      return Integer.valueOf(getType());

    case PARENT_RESOURCE_ID:
      return Long.valueOf(getParentResourceId());

    case STATUS:
      return Boolean.valueOf(isStatus());

    case RESOURCE_URL:
      return getResourceUrl();

    case RESOURCE_ICON:
      return getResourceIcon();

    case TREE_PATH:
      return getTreePath();

    case IS_DELETE:
      return Boolean.valueOf(isIsDelete());

    case API:
      return getApi();

    case ORDER_VALUE:
      return Integer.valueOf(getOrderValue());

    case RESOURCE_KEY:
      return getResourceKey();

    case IS_SYSTEM:
      return Boolean.valueOf(isIsSystem());

    case IS_MENU:
      return Boolean.valueOf(isIsMenu());

    case PLATFORM:
      return getPlatform();

    case FINITY_RESOURCE_LIST:
      return getFinityResourceList();

    case IS_LIMIT:
      return Boolean.valueOf(isIsLimit());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case RESOURCE_NAME:
      return isSetResourceName();
    case TYPE:
      return isSetType();
    case PARENT_RESOURCE_ID:
      return isSetParentResourceId();
    case STATUS:
      return isSetStatus();
    case RESOURCE_URL:
      return isSetResourceUrl();
    case RESOURCE_ICON:
      return isSetResourceIcon();
    case TREE_PATH:
      return isSetTreePath();
    case IS_DELETE:
      return isSetIsDelete();
    case API:
      return isSetApi();
    case ORDER_VALUE:
      return isSetOrderValue();
    case RESOURCE_KEY:
      return isSetResourceKey();
    case IS_SYSTEM:
      return isSetIsSystem();
    case IS_MENU:
      return isSetIsMenu();
    case PLATFORM:
      return isSetPlatform();
    case FINITY_RESOURCE_LIST:
      return isSetFinityResourceList();
    case IS_LIMIT:
      return isSetIsLimit();
    case UPDATE_TIME:
      return isSetUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinityResourceVo)
      return this.equals((FinityResourceVo)that);
    return false;
  }

  public boolean equals(FinityResourceVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_resourceName = true && this.isSetResourceName();
    boolean that_present_resourceName = true && that.isSetResourceName();
    if (this_present_resourceName || that_present_resourceName) {
      if (!(this_present_resourceName && that_present_resourceName))
        return false;
      if (!this.resourceName.equals(that.resourceName))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_parentResourceId = true && this.isSetParentResourceId();
    boolean that_present_parentResourceId = true && that.isSetParentResourceId();
    if (this_present_parentResourceId || that_present_parentResourceId) {
      if (!(this_present_parentResourceId && that_present_parentResourceId))
        return false;
      if (this.parentResourceId != that.parentResourceId)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_resourceUrl = true && this.isSetResourceUrl();
    boolean that_present_resourceUrl = true && that.isSetResourceUrl();
    if (this_present_resourceUrl || that_present_resourceUrl) {
      if (!(this_present_resourceUrl && that_present_resourceUrl))
        return false;
      if (!this.resourceUrl.equals(that.resourceUrl))
        return false;
    }

    boolean this_present_resourceIcon = true && this.isSetResourceIcon();
    boolean that_present_resourceIcon = true && that.isSetResourceIcon();
    if (this_present_resourceIcon || that_present_resourceIcon) {
      if (!(this_present_resourceIcon && that_present_resourceIcon))
        return false;
      if (!this.resourceIcon.equals(that.resourceIcon))
        return false;
    }

    boolean this_present_treePath = true && this.isSetTreePath();
    boolean that_present_treePath = true && that.isSetTreePath();
    if (this_present_treePath || that_present_treePath) {
      if (!(this_present_treePath && that_present_treePath))
        return false;
      if (!this.treePath.equals(that.treePath))
        return false;
    }

    boolean this_present_isDelete = true && this.isSetIsDelete();
    boolean that_present_isDelete = true && that.isSetIsDelete();
    if (this_present_isDelete || that_present_isDelete) {
      if (!(this_present_isDelete && that_present_isDelete))
        return false;
      if (this.isDelete != that.isDelete)
        return false;
    }

    boolean this_present_api = true && this.isSetApi();
    boolean that_present_api = true && that.isSetApi();
    if (this_present_api || that_present_api) {
      if (!(this_present_api && that_present_api))
        return false;
      if (!this.api.equals(that.api))
        return false;
    }

    boolean this_present_orderValue = true && this.isSetOrderValue();
    boolean that_present_orderValue = true && that.isSetOrderValue();
    if (this_present_orderValue || that_present_orderValue) {
      if (!(this_present_orderValue && that_present_orderValue))
        return false;
      if (this.orderValue != that.orderValue)
        return false;
    }

    boolean this_present_resourceKey = true && this.isSetResourceKey();
    boolean that_present_resourceKey = true && that.isSetResourceKey();
    if (this_present_resourceKey || that_present_resourceKey) {
      if (!(this_present_resourceKey && that_present_resourceKey))
        return false;
      if (!this.resourceKey.equals(that.resourceKey))
        return false;
    }

    boolean this_present_isSystem = true && this.isSetIsSystem();
    boolean that_present_isSystem = true && that.isSetIsSystem();
    if (this_present_isSystem || that_present_isSystem) {
      if (!(this_present_isSystem && that_present_isSystem))
        return false;
      if (this.isSystem != that.isSystem)
        return false;
    }

    boolean this_present_isMenu = true && this.isSetIsMenu();
    boolean that_present_isMenu = true && that.isSetIsMenu();
    if (this_present_isMenu || that_present_isMenu) {
      if (!(this_present_isMenu && that_present_isMenu))
        return false;
      if (this.isMenu != that.isMenu)
        return false;
    }

    boolean this_present_platform = true && this.isSetPlatform();
    boolean that_present_platform = true && that.isSetPlatform();
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (!this.platform.equals(that.platform))
        return false;
    }

    boolean this_present_finityResourceList = true && this.isSetFinityResourceList();
    boolean that_present_finityResourceList = true && that.isSetFinityResourceList();
    if (this_present_finityResourceList || that_present_finityResourceList) {
      if (!(this_present_finityResourceList && that_present_finityResourceList))
        return false;
      if (!this.finityResourceList.equals(that.finityResourceList))
        return false;
    }

    boolean this_present_isLimit = true && this.isSetIsLimit();
    boolean that_present_isLimit = true && that.isSetIsLimit();
    if (this_present_isLimit || that_present_isLimit) {
      if (!(this_present_isLimit && that_present_isLimit))
        return false;
      if (this.isLimit != that.isLimit)
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_resourceName = true && (isSetResourceName());
    list.add(present_resourceName);
    if (present_resourceName)
      list.add(resourceName);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_parentResourceId = true && (isSetParentResourceId());
    list.add(present_parentResourceId);
    if (present_parentResourceId)
      list.add(parentResourceId);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_resourceUrl = true && (isSetResourceUrl());
    list.add(present_resourceUrl);
    if (present_resourceUrl)
      list.add(resourceUrl);

    boolean present_resourceIcon = true && (isSetResourceIcon());
    list.add(present_resourceIcon);
    if (present_resourceIcon)
      list.add(resourceIcon);

    boolean present_treePath = true && (isSetTreePath());
    list.add(present_treePath);
    if (present_treePath)
      list.add(treePath);

    boolean present_isDelete = true && (isSetIsDelete());
    list.add(present_isDelete);
    if (present_isDelete)
      list.add(isDelete);

    boolean present_api = true && (isSetApi());
    list.add(present_api);
    if (present_api)
      list.add(api);

    boolean present_orderValue = true && (isSetOrderValue());
    list.add(present_orderValue);
    if (present_orderValue)
      list.add(orderValue);

    boolean present_resourceKey = true && (isSetResourceKey());
    list.add(present_resourceKey);
    if (present_resourceKey)
      list.add(resourceKey);

    boolean present_isSystem = true && (isSetIsSystem());
    list.add(present_isSystem);
    if (present_isSystem)
      list.add(isSystem);

    boolean present_isMenu = true && (isSetIsMenu());
    list.add(present_isMenu);
    if (present_isMenu)
      list.add(isMenu);

    boolean present_platform = true && (isSetPlatform());
    list.add(present_platform);
    if (present_platform)
      list.add(platform);

    boolean present_finityResourceList = true && (isSetFinityResourceList());
    list.add(present_finityResourceList);
    if (present_finityResourceList)
      list.add(finityResourceList);

    boolean present_isLimit = true && (isSetIsLimit());
    list.add(present_isLimit);
    if (present_isLimit)
      list.add(isLimit);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinityResourceVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceName()).compareTo(other.isSetResourceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceName, other.resourceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentResourceId()).compareTo(other.isSetParentResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentResourceId, other.parentResourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceUrl()).compareTo(other.isSetResourceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceUrl, other.resourceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceIcon()).compareTo(other.isSetResourceIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceIcon, other.resourceIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreePath()).compareTo(other.isSetTreePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treePath, other.treePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDelete()).compareTo(other.isSetIsDelete());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDelete()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, other.isDelete);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApi()).compareTo(other.isSetApi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.api, other.api);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderValue()).compareTo(other.isSetOrderValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderValue, other.orderValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceKey()).compareTo(other.isSetResourceKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceKey, other.resourceKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSystem()).compareTo(other.isSetIsSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSystem, other.isSystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMenu()).compareTo(other.isSetIsMenu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMenu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMenu, other.isMenu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinityResourceList()).compareTo(other.isSetFinityResourceList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinityResourceList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finityResourceList, other.finityResourceList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLimit()).compareTo(other.isSetIsLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLimit, other.isLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinityResourceVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetResourceName()) {
      if (!first) sb.append(", ");
      sb.append("resourceName:");
      if (this.resourceName == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceName);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
    }
    if (isSetParentResourceId()) {
      if (!first) sb.append(", ");
      sb.append("parentResourceId:");
      sb.append(this.parentResourceId);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetResourceUrl()) {
      if (!first) sb.append(", ");
      sb.append("resourceUrl:");
      if (this.resourceUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceUrl);
      }
      first = false;
    }
    if (isSetResourceIcon()) {
      if (!first) sb.append(", ");
      sb.append("resourceIcon:");
      if (this.resourceIcon == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceIcon);
      }
      first = false;
    }
    if (isSetTreePath()) {
      if (!first) sb.append(", ");
      sb.append("treePath:");
      if (this.treePath == null) {
        sb.append("null");
      } else {
        sb.append(this.treePath);
      }
      first = false;
    }
    if (isSetIsDelete()) {
      if (!first) sb.append(", ");
      sb.append("isDelete:");
      sb.append(this.isDelete);
      first = false;
    }
    if (isSetApi()) {
      if (!first) sb.append(", ");
      sb.append("api:");
      if (this.api == null) {
        sb.append("null");
      } else {
        sb.append(this.api);
      }
      first = false;
    }
    if (isSetOrderValue()) {
      if (!first) sb.append(", ");
      sb.append("orderValue:");
      sb.append(this.orderValue);
      first = false;
    }
    if (isSetResourceKey()) {
      if (!first) sb.append(", ");
      sb.append("resourceKey:");
      if (this.resourceKey == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceKey);
      }
      first = false;
    }
    if (isSetIsSystem()) {
      if (!first) sb.append(", ");
      sb.append("isSystem:");
      sb.append(this.isSystem);
      first = false;
    }
    if (isSetIsMenu()) {
      if (!first) sb.append(", ");
      sb.append("isMenu:");
      sb.append(this.isMenu);
      first = false;
    }
    if (isSetPlatform()) {
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
    }
    if (isSetFinityResourceList()) {
      if (!first) sb.append(", ");
      sb.append("finityResourceList:");
      if (this.finityResourceList == null) {
        sb.append("null");
      } else {
        sb.append(this.finityResourceList);
      }
      first = false;
    }
    if (isSetIsLimit()) {
      if (!first) sb.append(", ");
      sb.append("isLimit:");
      sb.append(this.isLimit);
      first = false;
    }
    if (isSetUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("updateTime:");
      sb.append(this.updateTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinityResourceVoStandardSchemeFactory implements SchemeFactory {
    public FinityResourceVoStandardScheme getScheme() {
      return new FinityResourceVoStandardScheme();
    }
  }

  private static class FinityResourceVoStandardScheme extends StandardScheme<FinityResourceVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinityResourceVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceName = iprot.readString();
              struct.setResourceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARENT_RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentResourceId = iprot.readI64();
              struct.setParentResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.status = iprot.readBool();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESOURCE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceUrl = iprot.readString();
              struct.setResourceUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESOURCE_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceIcon = iprot.readString();
              struct.setResourceIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TREE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.treePath = iprot.readString();
              struct.setTreePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_DELETE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isDelete = iprot.readBool();
              struct.setIsDeleteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // API
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.api = iprot.readString();
              struct.setApiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ORDER_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderValue = iprot.readI32();
              struct.setOrderValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RESOURCE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceKey = iprot.readString();
              struct.setResourceKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSystem = iprot.readBool();
              struct.setIsSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_MENU
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMenu = iprot.readBool();
              struct.setIsMenuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platform = iprot.readString();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FINITY_RESOURCE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.finityResourceList = new ArrayList<FinityResourceVo>(_list0.size);
                FinityResourceVo _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new FinityResourceVo();
                  _elem1.read(iprot);
                  struct.finityResourceList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFinityResourceListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLimit = iprot.readBool();
              struct.setIsLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinityResourceVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.resourceName != null) {
        if (struct.isSetResourceName()) {
          oprot.writeFieldBegin(RESOURCE_NAME_FIELD_DESC);
          oprot.writeString(struct.resourceName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetType()) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetParentResourceId()) {
        oprot.writeFieldBegin(PARENT_RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.parentResourceId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeBool(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.resourceUrl != null) {
        if (struct.isSetResourceUrl()) {
          oprot.writeFieldBegin(RESOURCE_URL_FIELD_DESC);
          oprot.writeString(struct.resourceUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceIcon != null) {
        if (struct.isSetResourceIcon()) {
          oprot.writeFieldBegin(RESOURCE_ICON_FIELD_DESC);
          oprot.writeString(struct.resourceIcon);
          oprot.writeFieldEnd();
        }
      }
      if (struct.treePath != null) {
        if (struct.isSetTreePath()) {
          oprot.writeFieldBegin(TREE_PATH_FIELD_DESC);
          oprot.writeString(struct.treePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsDelete()) {
        oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
        oprot.writeBool(struct.isDelete);
        oprot.writeFieldEnd();
      }
      if (struct.api != null) {
        if (struct.isSetApi()) {
          oprot.writeFieldBegin(API_FIELD_DESC);
          oprot.writeString(struct.api);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderValue()) {
        oprot.writeFieldBegin(ORDER_VALUE_FIELD_DESC);
        oprot.writeI32(struct.orderValue);
        oprot.writeFieldEnd();
      }
      if (struct.resourceKey != null) {
        if (struct.isSetResourceKey()) {
          oprot.writeFieldBegin(RESOURCE_KEY_FIELD_DESC);
          oprot.writeString(struct.resourceKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsSystem()) {
        oprot.writeFieldBegin(IS_SYSTEM_FIELD_DESC);
        oprot.writeBool(struct.isSystem);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsMenu()) {
        oprot.writeFieldBegin(IS_MENU_FIELD_DESC);
        oprot.writeBool(struct.isMenu);
        oprot.writeFieldEnd();
      }
      if (struct.platform != null) {
        if (struct.isSetPlatform()) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
      }
      if (struct.finityResourceList != null) {
        if (struct.isSetFinityResourceList()) {
          oprot.writeFieldBegin(FINITY_RESOURCE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.finityResourceList.size()));
            for (FinityResourceVo _iter3 : struct.finityResourceList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsLimit()) {
        oprot.writeFieldBegin(IS_LIMIT_FIELD_DESC);
        oprot.writeBool(struct.isLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.updateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinityResourceVoTupleSchemeFactory implements SchemeFactory {
    public FinityResourceVoTupleScheme getScheme() {
      return new FinityResourceVoTupleScheme();
    }
  }

  private static class FinityResourceVoTupleScheme extends TupleScheme<FinityResourceVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinityResourceVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetResourceName()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetParentResourceId()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetResourceUrl()) {
        optionals.set(5);
      }
      if (struct.isSetResourceIcon()) {
        optionals.set(6);
      }
      if (struct.isSetTreePath()) {
        optionals.set(7);
      }
      if (struct.isSetIsDelete()) {
        optionals.set(8);
      }
      if (struct.isSetApi()) {
        optionals.set(9);
      }
      if (struct.isSetOrderValue()) {
        optionals.set(10);
      }
      if (struct.isSetResourceKey()) {
        optionals.set(11);
      }
      if (struct.isSetIsSystem()) {
        optionals.set(12);
      }
      if (struct.isSetIsMenu()) {
        optionals.set(13);
      }
      if (struct.isSetPlatform()) {
        optionals.set(14);
      }
      if (struct.isSetFinityResourceList()) {
        optionals.set(15);
      }
      if (struct.isSetIsLimit()) {
        optionals.set(16);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetResourceName()) {
        oprot.writeString(struct.resourceName);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetParentResourceId()) {
        oprot.writeI64(struct.parentResourceId);
      }
      if (struct.isSetStatus()) {
        oprot.writeBool(struct.status);
      }
      if (struct.isSetResourceUrl()) {
        oprot.writeString(struct.resourceUrl);
      }
      if (struct.isSetResourceIcon()) {
        oprot.writeString(struct.resourceIcon);
      }
      if (struct.isSetTreePath()) {
        oprot.writeString(struct.treePath);
      }
      if (struct.isSetIsDelete()) {
        oprot.writeBool(struct.isDelete);
      }
      if (struct.isSetApi()) {
        oprot.writeString(struct.api);
      }
      if (struct.isSetOrderValue()) {
        oprot.writeI32(struct.orderValue);
      }
      if (struct.isSetResourceKey()) {
        oprot.writeString(struct.resourceKey);
      }
      if (struct.isSetIsSystem()) {
        oprot.writeBool(struct.isSystem);
      }
      if (struct.isSetIsMenu()) {
        oprot.writeBool(struct.isMenu);
      }
      if (struct.isSetPlatform()) {
        oprot.writeString(struct.platform);
      }
      if (struct.isSetFinityResourceList()) {
        {
          oprot.writeI32(struct.finityResourceList.size());
          for (FinityResourceVo _iter4 : struct.finityResourceList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetIsLimit()) {
        oprot.writeBool(struct.isLimit);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinityResourceVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resourceName = iprot.readString();
        struct.setResourceNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.parentResourceId = iprot.readI64();
        struct.setParentResourceIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readBool();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.resourceUrl = iprot.readString();
        struct.setResourceUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.resourceIcon = iprot.readString();
        struct.setResourceIconIsSet(true);
      }
      if (incoming.get(7)) {
        struct.treePath = iprot.readString();
        struct.setTreePathIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isDelete = iprot.readBool();
        struct.setIsDeleteIsSet(true);
      }
      if (incoming.get(9)) {
        struct.api = iprot.readString();
        struct.setApiIsSet(true);
      }
      if (incoming.get(10)) {
        struct.orderValue = iprot.readI32();
        struct.setOrderValueIsSet(true);
      }
      if (incoming.get(11)) {
        struct.resourceKey = iprot.readString();
        struct.setResourceKeyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.isSystem = iprot.readBool();
        struct.setIsSystemIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isMenu = iprot.readBool();
        struct.setIsMenuIsSet(true);
      }
      if (incoming.get(14)) {
        struct.platform = iprot.readString();
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.finityResourceList = new ArrayList<FinityResourceVo>(_list5.size);
          FinityResourceVo _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new FinityResourceVo();
            _elem6.read(iprot);
            struct.finityResourceList.add(_elem6);
          }
        }
        struct.setFinityResourceListIsSet(true);
      }
      if (incoming.get(16)) {
        struct.isLimit = iprot.readBool();
        struct.setIsLimitIsSet(true);
      }
      if (incoming.get(17)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
    }
  }

}

