/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 银行角色资源Vo
 * ResourcesInfoVo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ResourcesInfoVo implements org.apache.thrift.TBase<ResourcesInfoVo, ResourcesInfoVo._Fields>, java.io.Serializable, Cloneable, Comparable<ResourcesInfoVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourcesInfoVo");

  private static final org.apache.thrift.protocol.TField RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RESOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TREE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("treePath", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RESOURCE_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceIcon", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RESOURCE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceUrl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PARENT_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentResourceId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField API_FIELD_DESC = new org.apache.thrift.protocol.TField("api", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ORDER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderValue", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResourcesInfoVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResourcesInfoVoTupleSchemeFactory());
  }

  /**
   * 资源ID
   */
  public long resourceId; // optional
  /**
   * 资源名称
   */
  public String resourceName; // optional
  /**
   * 资源类型
   */
  public String resourceType; // optional
  /**
   * 资源路径
   */
  public String treePath; // optional
  /**
   * 资源图标
   */
  public String resourceIcon; // optional
  /**
   * 资源url
   */
  public String resourceUrl; // optional
  /**
   * 父级资源id
   */
  public long parentResourceId; // optional
  /**
   * 资源接口
   */
  public String api; // optional
  /**
   * 资源排序
   */
  public int orderValue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 资源ID
     */
    RESOURCE_ID((short)1, "resourceId"),
    /**
     * 资源名称
     */
    RESOURCE_NAME((short)2, "resourceName"),
    /**
     * 资源类型
     */
    RESOURCE_TYPE((short)3, "resourceType"),
    /**
     * 资源路径
     */
    TREE_PATH((short)4, "treePath"),
    /**
     * 资源图标
     */
    RESOURCE_ICON((short)5, "resourceIcon"),
    /**
     * 资源url
     */
    RESOURCE_URL((short)6, "resourceUrl"),
    /**
     * 父级资源id
     */
    PARENT_RESOURCE_ID((short)7, "parentResourceId"),
    /**
     * 资源接口
     */
    API((short)8, "api"),
    /**
     * 资源排序
     */
    ORDER_VALUE((short)9, "orderValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESOURCE_ID
          return RESOURCE_ID;
        case 2: // RESOURCE_NAME
          return RESOURCE_NAME;
        case 3: // RESOURCE_TYPE
          return RESOURCE_TYPE;
        case 4: // TREE_PATH
          return TREE_PATH;
        case 5: // RESOURCE_ICON
          return RESOURCE_ICON;
        case 6: // RESOURCE_URL
          return RESOURCE_URL;
        case 7: // PARENT_RESOURCE_ID
          return PARENT_RESOURCE_ID;
        case 8: // API
          return API;
        case 9: // ORDER_VALUE
          return ORDER_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESOURCEID_ISSET_ID = 0;
  private static final int __PARENTRESOURCEID_ISSET_ID = 1;
  private static final int __ORDERVALUE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RESOURCE_ID,_Fields.RESOURCE_NAME,_Fields.RESOURCE_TYPE,_Fields.TREE_PATH,_Fields.RESOURCE_ICON,_Fields.RESOURCE_URL,_Fields.PARENT_RESOURCE_ID,_Fields.API,_Fields.ORDER_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("resourceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resourceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TREE_PATH, new org.apache.thrift.meta_data.FieldMetaData("treePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_ICON, new org.apache.thrift.meta_data.FieldMetaData("resourceIcon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_URL, new org.apache.thrift.meta_data.FieldMetaData("resourceUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("parentResourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.API, new org.apache.thrift.meta_data.FieldMetaData("api", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("orderValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourcesInfoVo.class, metaDataMap);
  }

  public ResourcesInfoVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResourcesInfoVo(ResourcesInfoVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.resourceId = other.resourceId;
    if (other.isSetResourceName()) {
      this.resourceName = other.resourceName;
    }
    if (other.isSetResourceType()) {
      this.resourceType = other.resourceType;
    }
    if (other.isSetTreePath()) {
      this.treePath = other.treePath;
    }
    if (other.isSetResourceIcon()) {
      this.resourceIcon = other.resourceIcon;
    }
    if (other.isSetResourceUrl()) {
      this.resourceUrl = other.resourceUrl;
    }
    this.parentResourceId = other.parentResourceId;
    if (other.isSetApi()) {
      this.api = other.api;
    }
    this.orderValue = other.orderValue;
  }

  public ResourcesInfoVo deepCopy() {
    return new ResourcesInfoVo(this);
  }

  @Override
  public void clear() {
    setResourceIdIsSet(false);
    this.resourceId = 0;
    this.resourceName = null;
    this.resourceType = null;
    this.treePath = null;
    this.resourceIcon = null;
    this.resourceUrl = null;
    setParentResourceIdIsSet(false);
    this.parentResourceId = 0;
    this.api = null;
    setOrderValueIsSet(false);
    this.orderValue = 0;
  }

  /**
   * 资源ID
   */
  public long getResourceId() {
    return this.resourceId;
  }

  /**
   * 资源ID
   */
  public ResourcesInfoVo setResourceId(long resourceId) {
    this.resourceId = resourceId;
    setResourceIdIsSet(true);
    return this;
  }

  public void unsetResourceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCEID_ISSET_ID);
  }

  /** Returns true if field resourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceId() {
    return EncodingUtils.testBit(__isset_bitfield, __RESOURCEID_ISSET_ID);
  }

  public void setResourceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCEID_ISSET_ID, value);
  }

  /**
   * 资源名称
   */
  public String getResourceName() {
    return this.resourceName;
  }

  /**
   * 资源名称
   */
  public ResourcesInfoVo setResourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  public void unsetResourceName() {
    this.resourceName = null;
  }

  /** Returns true if field resourceName is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceName() {
    return this.resourceName != null;
  }

  public void setResourceNameIsSet(boolean value) {
    if (!value) {
      this.resourceName = null;
    }
  }

  /**
   * 资源类型
   */
  public String getResourceType() {
    return this.resourceType;
  }

  /**
   * 资源类型
   */
  public ResourcesInfoVo setResourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  public void unsetResourceType() {
    this.resourceType = null;
  }

  /** Returns true if field resourceType is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceType() {
    return this.resourceType != null;
  }

  public void setResourceTypeIsSet(boolean value) {
    if (!value) {
      this.resourceType = null;
    }
  }

  /**
   * 资源路径
   */
  public String getTreePath() {
    return this.treePath;
  }

  /**
   * 资源路径
   */
  public ResourcesInfoVo setTreePath(String treePath) {
    this.treePath = treePath;
    return this;
  }

  public void unsetTreePath() {
    this.treePath = null;
  }

  /** Returns true if field treePath is set (has been assigned a value) and false otherwise */
  public boolean isSetTreePath() {
    return this.treePath != null;
  }

  public void setTreePathIsSet(boolean value) {
    if (!value) {
      this.treePath = null;
    }
  }

  /**
   * 资源图标
   */
  public String getResourceIcon() {
    return this.resourceIcon;
  }

  /**
   * 资源图标
   */
  public ResourcesInfoVo setResourceIcon(String resourceIcon) {
    this.resourceIcon = resourceIcon;
    return this;
  }

  public void unsetResourceIcon() {
    this.resourceIcon = null;
  }

  /** Returns true if field resourceIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceIcon() {
    return this.resourceIcon != null;
  }

  public void setResourceIconIsSet(boolean value) {
    if (!value) {
      this.resourceIcon = null;
    }
  }

  /**
   * 资源url
   */
  public String getResourceUrl() {
    return this.resourceUrl;
  }

  /**
   * 资源url
   */
  public ResourcesInfoVo setResourceUrl(String resourceUrl) {
    this.resourceUrl = resourceUrl;
    return this;
  }

  public void unsetResourceUrl() {
    this.resourceUrl = null;
  }

  /** Returns true if field resourceUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceUrl() {
    return this.resourceUrl != null;
  }

  public void setResourceUrlIsSet(boolean value) {
    if (!value) {
      this.resourceUrl = null;
    }
  }

  /**
   * 父级资源id
   */
  public long getParentResourceId() {
    return this.parentResourceId;
  }

  /**
   * 父级资源id
   */
  public ResourcesInfoVo setParentResourceId(long parentResourceId) {
    this.parentResourceId = parentResourceId;
    setParentResourceIdIsSet(true);
    return this;
  }

  public void unsetParentResourceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTRESOURCEID_ISSET_ID);
  }

  /** Returns true if field parentResourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentResourceId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTRESOURCEID_ISSET_ID);
  }

  public void setParentResourceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTRESOURCEID_ISSET_ID, value);
  }

  /**
   * 资源接口
   */
  public String getApi() {
    return this.api;
  }

  /**
   * 资源接口
   */
  public ResourcesInfoVo setApi(String api) {
    this.api = api;
    return this;
  }

  public void unsetApi() {
    this.api = null;
  }

  /** Returns true if field api is set (has been assigned a value) and false otherwise */
  public boolean isSetApi() {
    return this.api != null;
  }

  public void setApiIsSet(boolean value) {
    if (!value) {
      this.api = null;
    }
  }

  /**
   * 资源排序
   */
  public int getOrderValue() {
    return this.orderValue;
  }

  /**
   * 资源排序
   */
  public ResourcesInfoVo setOrderValue(int orderValue) {
    this.orderValue = orderValue;
    setOrderValueIsSet(true);
    return this;
  }

  public void unsetOrderValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERVALUE_ISSET_ID);
  }

  /** Returns true if field orderValue is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderValue() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERVALUE_ISSET_ID);
  }

  public void setOrderValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERVALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESOURCE_ID:
      if (value == null) {
        unsetResourceId();
      } else {
        setResourceId((Long)value);
      }
      break;

    case RESOURCE_NAME:
      if (value == null) {
        unsetResourceName();
      } else {
        setResourceName((String)value);
      }
      break;

    case RESOURCE_TYPE:
      if (value == null) {
        unsetResourceType();
      } else {
        setResourceType((String)value);
      }
      break;

    case TREE_PATH:
      if (value == null) {
        unsetTreePath();
      } else {
        setTreePath((String)value);
      }
      break;

    case RESOURCE_ICON:
      if (value == null) {
        unsetResourceIcon();
      } else {
        setResourceIcon((String)value);
      }
      break;

    case RESOURCE_URL:
      if (value == null) {
        unsetResourceUrl();
      } else {
        setResourceUrl((String)value);
      }
      break;

    case PARENT_RESOURCE_ID:
      if (value == null) {
        unsetParentResourceId();
      } else {
        setParentResourceId((Long)value);
      }
      break;

    case API:
      if (value == null) {
        unsetApi();
      } else {
        setApi((String)value);
      }
      break;

    case ORDER_VALUE:
      if (value == null) {
        unsetOrderValue();
      } else {
        setOrderValue((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESOURCE_ID:
      return Long.valueOf(getResourceId());

    case RESOURCE_NAME:
      return getResourceName();

    case RESOURCE_TYPE:
      return getResourceType();

    case TREE_PATH:
      return getTreePath();

    case RESOURCE_ICON:
      return getResourceIcon();

    case RESOURCE_URL:
      return getResourceUrl();

    case PARENT_RESOURCE_ID:
      return Long.valueOf(getParentResourceId());

    case API:
      return getApi();

    case ORDER_VALUE:
      return Integer.valueOf(getOrderValue());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESOURCE_ID:
      return isSetResourceId();
    case RESOURCE_NAME:
      return isSetResourceName();
    case RESOURCE_TYPE:
      return isSetResourceType();
    case TREE_PATH:
      return isSetTreePath();
    case RESOURCE_ICON:
      return isSetResourceIcon();
    case RESOURCE_URL:
      return isSetResourceUrl();
    case PARENT_RESOURCE_ID:
      return isSetParentResourceId();
    case API:
      return isSetApi();
    case ORDER_VALUE:
      return isSetOrderValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResourcesInfoVo)
      return this.equals((ResourcesInfoVo)that);
    return false;
  }

  public boolean equals(ResourcesInfoVo that) {
    if (that == null)
      return false;

    boolean this_present_resourceId = true && this.isSetResourceId();
    boolean that_present_resourceId = true && that.isSetResourceId();
    if (this_present_resourceId || that_present_resourceId) {
      if (!(this_present_resourceId && that_present_resourceId))
        return false;
      if (this.resourceId != that.resourceId)
        return false;
    }

    boolean this_present_resourceName = true && this.isSetResourceName();
    boolean that_present_resourceName = true && that.isSetResourceName();
    if (this_present_resourceName || that_present_resourceName) {
      if (!(this_present_resourceName && that_present_resourceName))
        return false;
      if (!this.resourceName.equals(that.resourceName))
        return false;
    }

    boolean this_present_resourceType = true && this.isSetResourceType();
    boolean that_present_resourceType = true && that.isSetResourceType();
    if (this_present_resourceType || that_present_resourceType) {
      if (!(this_present_resourceType && that_present_resourceType))
        return false;
      if (!this.resourceType.equals(that.resourceType))
        return false;
    }

    boolean this_present_treePath = true && this.isSetTreePath();
    boolean that_present_treePath = true && that.isSetTreePath();
    if (this_present_treePath || that_present_treePath) {
      if (!(this_present_treePath && that_present_treePath))
        return false;
      if (!this.treePath.equals(that.treePath))
        return false;
    }

    boolean this_present_resourceIcon = true && this.isSetResourceIcon();
    boolean that_present_resourceIcon = true && that.isSetResourceIcon();
    if (this_present_resourceIcon || that_present_resourceIcon) {
      if (!(this_present_resourceIcon && that_present_resourceIcon))
        return false;
      if (!this.resourceIcon.equals(that.resourceIcon))
        return false;
    }

    boolean this_present_resourceUrl = true && this.isSetResourceUrl();
    boolean that_present_resourceUrl = true && that.isSetResourceUrl();
    if (this_present_resourceUrl || that_present_resourceUrl) {
      if (!(this_present_resourceUrl && that_present_resourceUrl))
        return false;
      if (!this.resourceUrl.equals(that.resourceUrl))
        return false;
    }

    boolean this_present_parentResourceId = true && this.isSetParentResourceId();
    boolean that_present_parentResourceId = true && that.isSetParentResourceId();
    if (this_present_parentResourceId || that_present_parentResourceId) {
      if (!(this_present_parentResourceId && that_present_parentResourceId))
        return false;
      if (this.parentResourceId != that.parentResourceId)
        return false;
    }

    boolean this_present_api = true && this.isSetApi();
    boolean that_present_api = true && that.isSetApi();
    if (this_present_api || that_present_api) {
      if (!(this_present_api && that_present_api))
        return false;
      if (!this.api.equals(that.api))
        return false;
    }

    boolean this_present_orderValue = true && this.isSetOrderValue();
    boolean that_present_orderValue = true && that.isSetOrderValue();
    if (this_present_orderValue || that_present_orderValue) {
      if (!(this_present_orderValue && that_present_orderValue))
        return false;
      if (this.orderValue != that.orderValue)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resourceId = true && (isSetResourceId());
    list.add(present_resourceId);
    if (present_resourceId)
      list.add(resourceId);

    boolean present_resourceName = true && (isSetResourceName());
    list.add(present_resourceName);
    if (present_resourceName)
      list.add(resourceName);

    boolean present_resourceType = true && (isSetResourceType());
    list.add(present_resourceType);
    if (present_resourceType)
      list.add(resourceType);

    boolean present_treePath = true && (isSetTreePath());
    list.add(present_treePath);
    if (present_treePath)
      list.add(treePath);

    boolean present_resourceIcon = true && (isSetResourceIcon());
    list.add(present_resourceIcon);
    if (present_resourceIcon)
      list.add(resourceIcon);

    boolean present_resourceUrl = true && (isSetResourceUrl());
    list.add(present_resourceUrl);
    if (present_resourceUrl)
      list.add(resourceUrl);

    boolean present_parentResourceId = true && (isSetParentResourceId());
    list.add(present_parentResourceId);
    if (present_parentResourceId)
      list.add(parentResourceId);

    boolean present_api = true && (isSetApi());
    list.add(present_api);
    if (present_api)
      list.add(api);

    boolean present_orderValue = true && (isSetOrderValue());
    list.add(present_orderValue);
    if (present_orderValue)
      list.add(orderValue);

    return list.hashCode();
  }

  @Override
  public int compareTo(ResourcesInfoVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResourceId()).compareTo(other.isSetResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceId, other.resourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceName()).compareTo(other.isSetResourceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceName, other.resourceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceType()).compareTo(other.isSetResourceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceType, other.resourceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreePath()).compareTo(other.isSetTreePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treePath, other.treePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceIcon()).compareTo(other.isSetResourceIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceIcon, other.resourceIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceUrl()).compareTo(other.isSetResourceUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceUrl, other.resourceUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentResourceId()).compareTo(other.isSetParentResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentResourceId, other.parentResourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApi()).compareTo(other.isSetApi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.api, other.api);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderValue()).compareTo(other.isSetOrderValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderValue, other.orderValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResourcesInfoVo(");
    boolean first = true;

    if (isSetResourceId()) {
      sb.append("resourceId:");
      sb.append(this.resourceId);
      first = false;
    }
    if (isSetResourceName()) {
      if (!first) sb.append(", ");
      sb.append("resourceName:");
      if (this.resourceName == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceName);
      }
      first = false;
    }
    if (isSetResourceType()) {
      if (!first) sb.append(", ");
      sb.append("resourceType:");
      if (this.resourceType == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceType);
      }
      first = false;
    }
    if (isSetTreePath()) {
      if (!first) sb.append(", ");
      sb.append("treePath:");
      if (this.treePath == null) {
        sb.append("null");
      } else {
        sb.append(this.treePath);
      }
      first = false;
    }
    if (isSetResourceIcon()) {
      if (!first) sb.append(", ");
      sb.append("resourceIcon:");
      if (this.resourceIcon == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceIcon);
      }
      first = false;
    }
    if (isSetResourceUrl()) {
      if (!first) sb.append(", ");
      sb.append("resourceUrl:");
      if (this.resourceUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceUrl);
      }
      first = false;
    }
    if (isSetParentResourceId()) {
      if (!first) sb.append(", ");
      sb.append("parentResourceId:");
      sb.append(this.parentResourceId);
      first = false;
    }
    if (isSetApi()) {
      if (!first) sb.append(", ");
      sb.append("api:");
      if (this.api == null) {
        sb.append("null");
      } else {
        sb.append(this.api);
      }
      first = false;
    }
    if (isSetOrderValue()) {
      if (!first) sb.append(", ");
      sb.append("orderValue:");
      sb.append(this.orderValue);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResourcesInfoVoStandardSchemeFactory implements SchemeFactory {
    public ResourcesInfoVoStandardScheme getScheme() {
      return new ResourcesInfoVoStandardScheme();
    }
  }

  private static class ResourcesInfoVoStandardScheme extends StandardScheme<ResourcesInfoVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResourcesInfoVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.resourceId = iprot.readI64();
              struct.setResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceName = iprot.readString();
              struct.setResourceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceType = iprot.readString();
              struct.setResourceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TREE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.treePath = iprot.readString();
              struct.setTreePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESOURCE_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceIcon = iprot.readString();
              struct.setResourceIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESOURCE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceUrl = iprot.readString();
              struct.setResourceUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARENT_RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentResourceId = iprot.readI64();
              struct.setParentResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // API
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.api = iprot.readString();
              struct.setApiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORDER_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderValue = iprot.readI32();
              struct.setOrderValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResourcesInfoVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetResourceId()) {
        oprot.writeFieldBegin(RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.resourceId);
        oprot.writeFieldEnd();
      }
      if (struct.resourceName != null) {
        if (struct.isSetResourceName()) {
          oprot.writeFieldBegin(RESOURCE_NAME_FIELD_DESC);
          oprot.writeString(struct.resourceName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceType != null) {
        if (struct.isSetResourceType()) {
          oprot.writeFieldBegin(RESOURCE_TYPE_FIELD_DESC);
          oprot.writeString(struct.resourceType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.treePath != null) {
        if (struct.isSetTreePath()) {
          oprot.writeFieldBegin(TREE_PATH_FIELD_DESC);
          oprot.writeString(struct.treePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceIcon != null) {
        if (struct.isSetResourceIcon()) {
          oprot.writeFieldBegin(RESOURCE_ICON_FIELD_DESC);
          oprot.writeString(struct.resourceIcon);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceUrl != null) {
        if (struct.isSetResourceUrl()) {
          oprot.writeFieldBegin(RESOURCE_URL_FIELD_DESC);
          oprot.writeString(struct.resourceUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetParentResourceId()) {
        oprot.writeFieldBegin(PARENT_RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.parentResourceId);
        oprot.writeFieldEnd();
      }
      if (struct.api != null) {
        if (struct.isSetApi()) {
          oprot.writeFieldBegin(API_FIELD_DESC);
          oprot.writeString(struct.api);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderValue()) {
        oprot.writeFieldBegin(ORDER_VALUE_FIELD_DESC);
        oprot.writeI32(struct.orderValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResourcesInfoVoTupleSchemeFactory implements SchemeFactory {
    public ResourcesInfoVoTupleScheme getScheme() {
      return new ResourcesInfoVoTupleScheme();
    }
  }

  private static class ResourcesInfoVoTupleScheme extends TupleScheme<ResourcesInfoVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResourcesInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResourceId()) {
        optionals.set(0);
      }
      if (struct.isSetResourceName()) {
        optionals.set(1);
      }
      if (struct.isSetResourceType()) {
        optionals.set(2);
      }
      if (struct.isSetTreePath()) {
        optionals.set(3);
      }
      if (struct.isSetResourceIcon()) {
        optionals.set(4);
      }
      if (struct.isSetResourceUrl()) {
        optionals.set(5);
      }
      if (struct.isSetParentResourceId()) {
        optionals.set(6);
      }
      if (struct.isSetApi()) {
        optionals.set(7);
      }
      if (struct.isSetOrderValue()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetResourceId()) {
        oprot.writeI64(struct.resourceId);
      }
      if (struct.isSetResourceName()) {
        oprot.writeString(struct.resourceName);
      }
      if (struct.isSetResourceType()) {
        oprot.writeString(struct.resourceType);
      }
      if (struct.isSetTreePath()) {
        oprot.writeString(struct.treePath);
      }
      if (struct.isSetResourceIcon()) {
        oprot.writeString(struct.resourceIcon);
      }
      if (struct.isSetResourceUrl()) {
        oprot.writeString(struct.resourceUrl);
      }
      if (struct.isSetParentResourceId()) {
        oprot.writeI64(struct.parentResourceId);
      }
      if (struct.isSetApi()) {
        oprot.writeString(struct.api);
      }
      if (struct.isSetOrderValue()) {
        oprot.writeI32(struct.orderValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResourcesInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.resourceId = iprot.readI64();
        struct.setResourceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resourceName = iprot.readString();
        struct.setResourceNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.resourceType = iprot.readString();
        struct.setResourceTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.treePath = iprot.readString();
        struct.setTreePathIsSet(true);
      }
      if (incoming.get(4)) {
        struct.resourceIcon = iprot.readString();
        struct.setResourceIconIsSet(true);
      }
      if (incoming.get(5)) {
        struct.resourceUrl = iprot.readString();
        struct.setResourceUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.parentResourceId = iprot.readI64();
        struct.setParentResourceIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.api = iprot.readString();
        struct.setApiIsSet(true);
      }
      if (incoming.get(8)) {
        struct.orderValue = iprot.readI32();
        struct.setOrderValueIsSet(true);
      }
    }
  }

}

