/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 业务类型销售统计详情列表
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class BusinessSaleDetailVo implements org.apache.thrift.TBase<BusinessSaleDetailVo, BusinessSaleDetailVo._Fields>, java.io.Serializable, Cloneable, Comparable<BusinessSaleDetailVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BusinessSaleDetailVo");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ORDER_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField CASH_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cashAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField BANK_POINT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPointAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField FFT_POINT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("fftPointAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField PRODUCT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("productCount", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PRODUCT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("productAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField BUY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("buyCount", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BusinessSaleDetailVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BusinessSaleDetailVoTupleSchemeFactory());
  }

  /**
   * 业务类型 *
   */
  public String type; // optional
  /**
   * 机构号 *
   */
  public String orgCode; // optional
  /**
   * 机构名 *
   */
  public String orgName; // optional
  /**
   * 订单数 *
   */
  public int orderCount; // optional
  /**
   * 总订单金额 *
   */
  public double orderAmount; // optional
  /**
   * 现金总额 *
   */
  public double cashAmount; // optional
  /**
   * 银行积分总额 *
   */
  public double bankPointAmount; // optional
  /**
   * 联盟积分总额 *
   */
  public double fftPointAmount; // optional
  /**
   * 商品销售数量 *
   */
  public int productCount; // optional
  /**
   * 商品销售金额 *
   */
  public double productAmount; // optional
  /**
   * 购买人次 *
   */
  public int buyCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 业务类型 *
     */
    TYPE((short)1, "type"),
    /**
     * 机构号 *
     */
    ORG_CODE((short)2, "orgCode"),
    /**
     * 机构名 *
     */
    ORG_NAME((short)3, "orgName"),
    /**
     * 订单数 *
     */
    ORDER_COUNT((short)4, "orderCount"),
    /**
     * 总订单金额 *
     */
    ORDER_AMOUNT((short)5, "orderAmount"),
    /**
     * 现金总额 *
     */
    CASH_AMOUNT((short)6, "cashAmount"),
    /**
     * 银行积分总额 *
     */
    BANK_POINT_AMOUNT((short)7, "bankPointAmount"),
    /**
     * 联盟积分总额 *
     */
    FFT_POINT_AMOUNT((short)8, "fftPointAmount"),
    /**
     * 商品销售数量 *
     */
    PRODUCT_COUNT((short)9, "productCount"),
    /**
     * 商品销售金额 *
     */
    PRODUCT_AMOUNT((short)10, "productAmount"),
    /**
     * 购买人次 *
     */
    BUY_COUNT((short)11, "buyCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // ORG_CODE
          return ORG_CODE;
        case 3: // ORG_NAME
          return ORG_NAME;
        case 4: // ORDER_COUNT
          return ORDER_COUNT;
        case 5: // ORDER_AMOUNT
          return ORDER_AMOUNT;
        case 6: // CASH_AMOUNT
          return CASH_AMOUNT;
        case 7: // BANK_POINT_AMOUNT
          return BANK_POINT_AMOUNT;
        case 8: // FFT_POINT_AMOUNT
          return FFT_POINT_AMOUNT;
        case 9: // PRODUCT_COUNT
          return PRODUCT_COUNT;
        case 10: // PRODUCT_AMOUNT
          return PRODUCT_AMOUNT;
        case 11: // BUY_COUNT
          return BUY_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERCOUNT_ISSET_ID = 0;
  private static final int __ORDERAMOUNT_ISSET_ID = 1;
  private static final int __CASHAMOUNT_ISSET_ID = 2;
  private static final int __BANKPOINTAMOUNT_ISSET_ID = 3;
  private static final int __FFTPOINTAMOUNT_ISSET_ID = 4;
  private static final int __PRODUCTCOUNT_ISSET_ID = 5;
  private static final int __PRODUCTAMOUNT_ISSET_ID = 6;
  private static final int __BUYCOUNT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TYPE,_Fields.ORG_CODE,_Fields.ORG_NAME,_Fields.ORDER_COUNT,_Fields.ORDER_AMOUNT,_Fields.CASH_AMOUNT,_Fields.BANK_POINT_AMOUNT,_Fields.FFT_POINT_AMOUNT,_Fields.PRODUCT_COUNT,_Fields.PRODUCT_AMOUNT,_Fields.BUY_COUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("orderCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("orderAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CASH_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("cashAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BANK_POINT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("bankPointAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FFT_POINT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("fftPointAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("productCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("productAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("buyCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BusinessSaleDetailVo.class, metaDataMap);
  }

  public BusinessSaleDetailVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BusinessSaleDetailVo(BusinessSaleDetailVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    this.orderCount = other.orderCount;
    this.orderAmount = other.orderAmount;
    this.cashAmount = other.cashAmount;
    this.bankPointAmount = other.bankPointAmount;
    this.fftPointAmount = other.fftPointAmount;
    this.productCount = other.productCount;
    this.productAmount = other.productAmount;
    this.buyCount = other.buyCount;
  }

  public BusinessSaleDetailVo deepCopy() {
    return new BusinessSaleDetailVo(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.orgCode = null;
    this.orgName = null;
    setOrderCountIsSet(false);
    this.orderCount = 0;
    setOrderAmountIsSet(false);
    this.orderAmount = 0.0;
    setCashAmountIsSet(false);
    this.cashAmount = 0.0;
    setBankPointAmountIsSet(false);
    this.bankPointAmount = 0.0;
    setFftPointAmountIsSet(false);
    this.fftPointAmount = 0.0;
    setProductCountIsSet(false);
    this.productCount = 0;
    setProductAmountIsSet(false);
    this.productAmount = 0.0;
    setBuyCountIsSet(false);
    this.buyCount = 0;
  }

  /**
   * 业务类型 *
   */
  public String getType() {
    return this.type;
  }

  /**
   * 业务类型 *
   */
  public BusinessSaleDetailVo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 机构号 *
   */
  public String getOrgCode() {
    return this.orgCode;
  }

  /**
   * 机构号 *
   */
  public BusinessSaleDetailVo setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  /**
   * 机构名 *
   */
  public String getOrgName() {
    return this.orgName;
  }

  /**
   * 机构名 *
   */
  public BusinessSaleDetailVo setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  /**
   * 订单数 *
   */
  public int getOrderCount() {
    return this.orderCount;
  }

  /**
   * 订单数 *
   */
  public BusinessSaleDetailVo setOrderCount(int orderCount) {
    this.orderCount = orderCount;
    setOrderCountIsSet(true);
    return this;
  }

  public void unsetOrderCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERCOUNT_ISSET_ID);
  }

  /** Returns true if field orderCount is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERCOUNT_ISSET_ID);
  }

  public void setOrderCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERCOUNT_ISSET_ID, value);
  }

  /**
   * 总订单金额 *
   */
  public double getOrderAmount() {
    return this.orderAmount;
  }

  /**
   * 总订单金额 *
   */
  public BusinessSaleDetailVo setOrderAmount(double orderAmount) {
    this.orderAmount = orderAmount;
    setOrderAmountIsSet(true);
    return this;
  }

  public void unsetOrderAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERAMOUNT_ISSET_ID);
  }

  /** Returns true if field orderAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERAMOUNT_ISSET_ID);
  }

  public void setOrderAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERAMOUNT_ISSET_ID, value);
  }

  /**
   * 现金总额 *
   */
  public double getCashAmount() {
    return this.cashAmount;
  }

  /**
   * 现金总额 *
   */
  public BusinessSaleDetailVo setCashAmount(double cashAmount) {
    this.cashAmount = cashAmount;
    setCashAmountIsSet(true);
    return this;
  }

  public void unsetCashAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHAMOUNT_ISSET_ID);
  }

  /** Returns true if field cashAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetCashAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHAMOUNT_ISSET_ID);
  }

  public void setCashAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHAMOUNT_ISSET_ID, value);
  }

  /**
   * 银行积分总额 *
   */
  public double getBankPointAmount() {
    return this.bankPointAmount;
  }

  /**
   * 银行积分总额 *
   */
  public BusinessSaleDetailVo setBankPointAmount(double bankPointAmount) {
    this.bankPointAmount = bankPointAmount;
    setBankPointAmountIsSet(true);
    return this;
  }

  public void unsetBankPointAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKPOINTAMOUNT_ISSET_ID);
  }

  /** Returns true if field bankPointAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPointAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKPOINTAMOUNT_ISSET_ID);
  }

  public void setBankPointAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKPOINTAMOUNT_ISSET_ID, value);
  }

  /**
   * 联盟积分总额 *
   */
  public double getFftPointAmount() {
    return this.fftPointAmount;
  }

  /**
   * 联盟积分总额 *
   */
  public BusinessSaleDetailVo setFftPointAmount(double fftPointAmount) {
    this.fftPointAmount = fftPointAmount;
    setFftPointAmountIsSet(true);
    return this;
  }

  public void unsetFftPointAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FFTPOINTAMOUNT_ISSET_ID);
  }

  /** Returns true if field fftPointAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetFftPointAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __FFTPOINTAMOUNT_ISSET_ID);
  }

  public void setFftPointAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FFTPOINTAMOUNT_ISSET_ID, value);
  }

  /**
   * 商品销售数量 *
   */
  public int getProductCount() {
    return this.productCount;
  }

  /**
   * 商品销售数量 *
   */
  public BusinessSaleDetailVo setProductCount(int productCount) {
    this.productCount = productCount;
    setProductCountIsSet(true);
    return this;
  }

  public void unsetProductCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTCOUNT_ISSET_ID);
  }

  /** Returns true if field productCount is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTCOUNT_ISSET_ID);
  }

  public void setProductCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTCOUNT_ISSET_ID, value);
  }

  /**
   * 商品销售金额 *
   */
  public double getProductAmount() {
    return this.productAmount;
  }

  /**
   * 商品销售金额 *
   */
  public BusinessSaleDetailVo setProductAmount(double productAmount) {
    this.productAmount = productAmount;
    setProductAmountIsSet(true);
    return this;
  }

  public void unsetProductAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTAMOUNT_ISSET_ID);
  }

  /** Returns true if field productAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetProductAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTAMOUNT_ISSET_ID);
  }

  public void setProductAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTAMOUNT_ISSET_ID, value);
  }

  /**
   * 购买人次 *
   */
  public int getBuyCount() {
    return this.buyCount;
  }

  /**
   * 购买人次 *
   */
  public BusinessSaleDetailVo setBuyCount(int buyCount) {
    this.buyCount = buyCount;
    setBuyCountIsSet(true);
    return this;
  }

  public void unsetBuyCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUYCOUNT_ISSET_ID);
  }

  /** Returns true if field buyCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyCount() {
    return EncodingUtils.testBit(__isset_bitfield, __BUYCOUNT_ISSET_ID);
  }

  public void setBuyCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUYCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case ORDER_COUNT:
      if (value == null) {
        unsetOrderCount();
      } else {
        setOrderCount((Integer)value);
      }
      break;

    case ORDER_AMOUNT:
      if (value == null) {
        unsetOrderAmount();
      } else {
        setOrderAmount((Double)value);
      }
      break;

    case CASH_AMOUNT:
      if (value == null) {
        unsetCashAmount();
      } else {
        setCashAmount((Double)value);
      }
      break;

    case BANK_POINT_AMOUNT:
      if (value == null) {
        unsetBankPointAmount();
      } else {
        setBankPointAmount((Double)value);
      }
      break;

    case FFT_POINT_AMOUNT:
      if (value == null) {
        unsetFftPointAmount();
      } else {
        setFftPointAmount((Double)value);
      }
      break;

    case PRODUCT_COUNT:
      if (value == null) {
        unsetProductCount();
      } else {
        setProductCount((Integer)value);
      }
      break;

    case PRODUCT_AMOUNT:
      if (value == null) {
        unsetProductAmount();
      } else {
        setProductAmount((Double)value);
      }
      break;

    case BUY_COUNT:
      if (value == null) {
        unsetBuyCount();
      } else {
        setBuyCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case ORG_CODE:
      return getOrgCode();

    case ORG_NAME:
      return getOrgName();

    case ORDER_COUNT:
      return Integer.valueOf(getOrderCount());

    case ORDER_AMOUNT:
      return Double.valueOf(getOrderAmount());

    case CASH_AMOUNT:
      return Double.valueOf(getCashAmount());

    case BANK_POINT_AMOUNT:
      return Double.valueOf(getBankPointAmount());

    case FFT_POINT_AMOUNT:
      return Double.valueOf(getFftPointAmount());

    case PRODUCT_COUNT:
      return Integer.valueOf(getProductCount());

    case PRODUCT_AMOUNT:
      return Double.valueOf(getProductAmount());

    case BUY_COUNT:
      return Integer.valueOf(getBuyCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case ORG_CODE:
      return isSetOrgCode();
    case ORG_NAME:
      return isSetOrgName();
    case ORDER_COUNT:
      return isSetOrderCount();
    case ORDER_AMOUNT:
      return isSetOrderAmount();
    case CASH_AMOUNT:
      return isSetCashAmount();
    case BANK_POINT_AMOUNT:
      return isSetBankPointAmount();
    case FFT_POINT_AMOUNT:
      return isSetFftPointAmount();
    case PRODUCT_COUNT:
      return isSetProductCount();
    case PRODUCT_AMOUNT:
      return isSetProductAmount();
    case BUY_COUNT:
      return isSetBuyCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BusinessSaleDetailVo)
      return this.equals((BusinessSaleDetailVo)that);
    return false;
  }

  public boolean equals(BusinessSaleDetailVo that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_orderCount = true && this.isSetOrderCount();
    boolean that_present_orderCount = true && that.isSetOrderCount();
    if (this_present_orderCount || that_present_orderCount) {
      if (!(this_present_orderCount && that_present_orderCount))
        return false;
      if (this.orderCount != that.orderCount)
        return false;
    }

    boolean this_present_orderAmount = true && this.isSetOrderAmount();
    boolean that_present_orderAmount = true && that.isSetOrderAmount();
    if (this_present_orderAmount || that_present_orderAmount) {
      if (!(this_present_orderAmount && that_present_orderAmount))
        return false;
      if (this.orderAmount != that.orderAmount)
        return false;
    }

    boolean this_present_cashAmount = true && this.isSetCashAmount();
    boolean that_present_cashAmount = true && that.isSetCashAmount();
    if (this_present_cashAmount || that_present_cashAmount) {
      if (!(this_present_cashAmount && that_present_cashAmount))
        return false;
      if (this.cashAmount != that.cashAmount)
        return false;
    }

    boolean this_present_bankPointAmount = true && this.isSetBankPointAmount();
    boolean that_present_bankPointAmount = true && that.isSetBankPointAmount();
    if (this_present_bankPointAmount || that_present_bankPointAmount) {
      if (!(this_present_bankPointAmount && that_present_bankPointAmount))
        return false;
      if (this.bankPointAmount != that.bankPointAmount)
        return false;
    }

    boolean this_present_fftPointAmount = true && this.isSetFftPointAmount();
    boolean that_present_fftPointAmount = true && that.isSetFftPointAmount();
    if (this_present_fftPointAmount || that_present_fftPointAmount) {
      if (!(this_present_fftPointAmount && that_present_fftPointAmount))
        return false;
      if (this.fftPointAmount != that.fftPointAmount)
        return false;
    }

    boolean this_present_productCount = true && this.isSetProductCount();
    boolean that_present_productCount = true && that.isSetProductCount();
    if (this_present_productCount || that_present_productCount) {
      if (!(this_present_productCount && that_present_productCount))
        return false;
      if (this.productCount != that.productCount)
        return false;
    }

    boolean this_present_productAmount = true && this.isSetProductAmount();
    boolean that_present_productAmount = true && that.isSetProductAmount();
    if (this_present_productAmount || that_present_productAmount) {
      if (!(this_present_productAmount && that_present_productAmount))
        return false;
      if (this.productAmount != that.productAmount)
        return false;
    }

    boolean this_present_buyCount = true && this.isSetBuyCount();
    boolean that_present_buyCount = true && that.isSetBuyCount();
    if (this_present_buyCount || that_present_buyCount) {
      if (!(this_present_buyCount && that_present_buyCount))
        return false;
      if (this.buyCount != that.buyCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_orderCount = true && (isSetOrderCount());
    list.add(present_orderCount);
    if (present_orderCount)
      list.add(orderCount);

    boolean present_orderAmount = true && (isSetOrderAmount());
    list.add(present_orderAmount);
    if (present_orderAmount)
      list.add(orderAmount);

    boolean present_cashAmount = true && (isSetCashAmount());
    list.add(present_cashAmount);
    if (present_cashAmount)
      list.add(cashAmount);

    boolean present_bankPointAmount = true && (isSetBankPointAmount());
    list.add(present_bankPointAmount);
    if (present_bankPointAmount)
      list.add(bankPointAmount);

    boolean present_fftPointAmount = true && (isSetFftPointAmount());
    list.add(present_fftPointAmount);
    if (present_fftPointAmount)
      list.add(fftPointAmount);

    boolean present_productCount = true && (isSetProductCount());
    list.add(present_productCount);
    if (present_productCount)
      list.add(productCount);

    boolean present_productAmount = true && (isSetProductAmount());
    list.add(present_productAmount);
    if (present_productAmount)
      list.add(productAmount);

    boolean present_buyCount = true && (isSetBuyCount());
    list.add(present_buyCount);
    if (present_buyCount)
      list.add(buyCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(BusinessSaleDetailVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderCount()).compareTo(other.isSetOrderCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderCount, other.orderCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderAmount()).compareTo(other.isSetOrderAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderAmount, other.orderAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashAmount()).compareTo(other.isSetCashAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashAmount, other.cashAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPointAmount()).compareTo(other.isSetBankPointAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPointAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPointAmount, other.bankPointAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFftPointAmount()).compareTo(other.isSetFftPointAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFftPointAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fftPointAmount, other.fftPointAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductCount()).compareTo(other.isSetProductCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCount, other.productCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductAmount()).compareTo(other.isSetProductAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productAmount, other.productAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyCount()).compareTo(other.isSetBuyCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyCount, other.buyCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BusinessSaleDetailVo(");
    boolean first = true;

    if (isSetType()) {
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetOrgCode()) {
      if (!first) sb.append(", ");
      sb.append("orgCode:");
      if (this.orgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCode);
      }
      first = false;
    }
    if (isSetOrgName()) {
      if (!first) sb.append(", ");
      sb.append("orgName:");
      if (this.orgName == null) {
        sb.append("null");
      } else {
        sb.append(this.orgName);
      }
      first = false;
    }
    if (isSetOrderCount()) {
      if (!first) sb.append(", ");
      sb.append("orderCount:");
      sb.append(this.orderCount);
      first = false;
    }
    if (isSetOrderAmount()) {
      if (!first) sb.append(", ");
      sb.append("orderAmount:");
      sb.append(this.orderAmount);
      first = false;
    }
    if (isSetCashAmount()) {
      if (!first) sb.append(", ");
      sb.append("cashAmount:");
      sb.append(this.cashAmount);
      first = false;
    }
    if (isSetBankPointAmount()) {
      if (!first) sb.append(", ");
      sb.append("bankPointAmount:");
      sb.append(this.bankPointAmount);
      first = false;
    }
    if (isSetFftPointAmount()) {
      if (!first) sb.append(", ");
      sb.append("fftPointAmount:");
      sb.append(this.fftPointAmount);
      first = false;
    }
    if (isSetProductCount()) {
      if (!first) sb.append(", ");
      sb.append("productCount:");
      sb.append(this.productCount);
      first = false;
    }
    if (isSetProductAmount()) {
      if (!first) sb.append(", ");
      sb.append("productAmount:");
      sb.append(this.productAmount);
      first = false;
    }
    if (isSetBuyCount()) {
      if (!first) sb.append(", ");
      sb.append("buyCount:");
      sb.append(this.buyCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BusinessSaleDetailVoStandardSchemeFactory implements SchemeFactory {
    public BusinessSaleDetailVoStandardScheme getScheme() {
      return new BusinessSaleDetailVoStandardScheme();
    }
  }

  private static class BusinessSaleDetailVoStandardScheme extends StandardScheme<BusinessSaleDetailVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BusinessSaleDetailVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderCount = iprot.readI32();
              struct.setOrderCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDER_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.orderAmount = iprot.readDouble();
              struct.setOrderAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CASH_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cashAmount = iprot.readDouble();
              struct.setCashAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BANK_POINT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bankPointAmount = iprot.readDouble();
              struct.setBankPointAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FFT_POINT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fftPointAmount = iprot.readDouble();
              struct.setFftPointAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PRODUCT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productCount = iprot.readI32();
              struct.setProductCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRODUCT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.productAmount = iprot.readDouble();
              struct.setProductAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BUY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.buyCount = iprot.readI32();
              struct.setBuyCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BusinessSaleDetailVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orgCode != null) {
        if (struct.isSetOrgCode()) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.orgCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orgName != null) {
        if (struct.isSetOrgName()) {
          oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
          oprot.writeString(struct.orgName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderCount()) {
        oprot.writeFieldBegin(ORDER_COUNT_FIELD_DESC);
        oprot.writeI32(struct.orderCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderAmount()) {
        oprot.writeFieldBegin(ORDER_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.orderAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCashAmount()) {
        oprot.writeFieldBegin(CASH_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.cashAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBankPointAmount()) {
        oprot.writeFieldBegin(BANK_POINT_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.bankPointAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFftPointAmount()) {
        oprot.writeFieldBegin(FFT_POINT_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.fftPointAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProductCount()) {
        oprot.writeFieldBegin(PRODUCT_COUNT_FIELD_DESC);
        oprot.writeI32(struct.productCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProductAmount()) {
        oprot.writeFieldBegin(PRODUCT_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.productAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBuyCount()) {
        oprot.writeFieldBegin(BUY_COUNT_FIELD_DESC);
        oprot.writeI32(struct.buyCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BusinessSaleDetailVoTupleSchemeFactory implements SchemeFactory {
    public BusinessSaleDetailVoTupleScheme getScheme() {
      return new BusinessSaleDetailVoTupleScheme();
    }
  }

  private static class BusinessSaleDetailVoTupleScheme extends TupleScheme<BusinessSaleDetailVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BusinessSaleDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(1);
      }
      if (struct.isSetOrgName()) {
        optionals.set(2);
      }
      if (struct.isSetOrderCount()) {
        optionals.set(3);
      }
      if (struct.isSetOrderAmount()) {
        optionals.set(4);
      }
      if (struct.isSetCashAmount()) {
        optionals.set(5);
      }
      if (struct.isSetBankPointAmount()) {
        optionals.set(6);
      }
      if (struct.isSetFftPointAmount()) {
        optionals.set(7);
      }
      if (struct.isSetProductCount()) {
        optionals.set(8);
      }
      if (struct.isSetProductAmount()) {
        optionals.set(9);
      }
      if (struct.isSetBuyCount()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetOrderCount()) {
        oprot.writeI32(struct.orderCount);
      }
      if (struct.isSetOrderAmount()) {
        oprot.writeDouble(struct.orderAmount);
      }
      if (struct.isSetCashAmount()) {
        oprot.writeDouble(struct.cashAmount);
      }
      if (struct.isSetBankPointAmount()) {
        oprot.writeDouble(struct.bankPointAmount);
      }
      if (struct.isSetFftPointAmount()) {
        oprot.writeDouble(struct.fftPointAmount);
      }
      if (struct.isSetProductCount()) {
        oprot.writeI32(struct.productCount);
      }
      if (struct.isSetProductAmount()) {
        oprot.writeDouble(struct.productAmount);
      }
      if (struct.isSetBuyCount()) {
        oprot.writeI32(struct.buyCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BusinessSaleDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderCount = iprot.readI32();
        struct.setOrderCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orderAmount = iprot.readDouble();
        struct.setOrderAmountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cashAmount = iprot.readDouble();
        struct.setCashAmountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bankPointAmount = iprot.readDouble();
        struct.setBankPointAmountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fftPointAmount = iprot.readDouble();
        struct.setFftPointAmountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.productCount = iprot.readI32();
        struct.setProductCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.productAmount = iprot.readDouble();
        struct.setProductAmountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.buyCount = iprot.readI32();
        struct.setBuyCountIsSet(true);
      }
    }
  }

}

