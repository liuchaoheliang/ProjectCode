/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.member;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 用户通过卡号查询银行积分返回体
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class PointsAccountVo implements org.apache.thrift.TBase<PointsAccountVo, PointsAccountVo._Fields>, java.io.Serializable, Cloneable, Comparable<PointsAccountVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PointsAccountVo");

  private static final org.apache.thrift.protocol.TField ORG_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("orgNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXCHAGE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchageRate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FROZEN_POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenPoints", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("points", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RESULT_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultMessage", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RESULT_SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("resultSuccess", org.apache.thrift.protocol.TType.BOOL, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PointsAccountVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PointsAccountVoTupleSchemeFactory());
  }

  public String orgNo; // required
  public String userId; // required
  public String exchageRate; // required
  public String frozenPoints; // required
  public String points; // required
  public String orgName; // required
  public String displayName; // required
  public String resultMessage; // required
  public boolean resultSuccess; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORG_NO((short)1, "orgNo"),
    USER_ID((short)2, "userId"),
    EXCHAGE_RATE((short)3, "exchageRate"),
    FROZEN_POINTS((short)4, "frozenPoints"),
    POINTS((short)5, "points"),
    ORG_NAME((short)6, "orgName"),
    DISPLAY_NAME((short)7, "displayName"),
    RESULT_MESSAGE((short)8, "resultMessage"),
    RESULT_SUCCESS((short)9, "resultSuccess");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORG_NO
          return ORG_NO;
        case 2: // USER_ID
          return USER_ID;
        case 3: // EXCHAGE_RATE
          return EXCHAGE_RATE;
        case 4: // FROZEN_POINTS
          return FROZEN_POINTS;
        case 5: // POINTS
          return POINTS;
        case 6: // ORG_NAME
          return ORG_NAME;
        case 7: // DISPLAY_NAME
          return DISPLAY_NAME;
        case 8: // RESULT_MESSAGE
          return RESULT_MESSAGE;
        case 9: // RESULT_SUCCESS
          return RESULT_SUCCESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESULTSUCCESS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORG_NO, new org.apache.thrift.meta_data.FieldMetaData("orgNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCHAGE_RATE, new org.apache.thrift.meta_data.FieldMetaData("exchageRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROZEN_POINTS, new org.apache.thrift.meta_data.FieldMetaData("frozenPoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POINTS, new org.apache.thrift.meta_data.FieldMetaData("points", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("resultMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("resultSuccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PointsAccountVo.class, metaDataMap);
  }

  public PointsAccountVo() {
  }

  public PointsAccountVo(
    String orgNo,
    String userId,
    String exchageRate,
    String frozenPoints,
    String points,
    String orgName,
    String displayName,
    String resultMessage,
    boolean resultSuccess)
  {
    this();
    this.orgNo = orgNo;
    this.userId = userId;
    this.exchageRate = exchageRate;
    this.frozenPoints = frozenPoints;
    this.points = points;
    this.orgName = orgName;
    this.displayName = displayName;
    this.resultMessage = resultMessage;
    this.resultSuccess = resultSuccess;
    setResultSuccessIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PointsAccountVo(PointsAccountVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrgNo()) {
      this.orgNo = other.orgNo;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetExchageRate()) {
      this.exchageRate = other.exchageRate;
    }
    if (other.isSetFrozenPoints()) {
      this.frozenPoints = other.frozenPoints;
    }
    if (other.isSetPoints()) {
      this.points = other.points;
    }
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    if (other.isSetDisplayName()) {
      this.displayName = other.displayName;
    }
    if (other.isSetResultMessage()) {
      this.resultMessage = other.resultMessage;
    }
    this.resultSuccess = other.resultSuccess;
  }

  public PointsAccountVo deepCopy() {
    return new PointsAccountVo(this);
  }

  @Override
  public void clear() {
    this.orgNo = null;
    this.userId = null;
    this.exchageRate = null;
    this.frozenPoints = null;
    this.points = null;
    this.orgName = null;
    this.displayName = null;
    this.resultMessage = null;
    setResultSuccessIsSet(false);
    this.resultSuccess = false;
  }

  public String getOrgNo() {
    return this.orgNo;
  }

  public PointsAccountVo setOrgNo(String orgNo) {
    this.orgNo = orgNo;
    return this;
  }

  public void unsetOrgNo() {
    this.orgNo = null;
  }

  /** Returns true if field orgNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgNo() {
    return this.orgNo != null;
  }

  public void setOrgNoIsSet(boolean value) {
    if (!value) {
      this.orgNo = null;
    }
  }

  public String getUserId() {
    return this.userId;
  }

  public PointsAccountVo setUserId(String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public String getExchageRate() {
    return this.exchageRate;
  }

  public PointsAccountVo setExchageRate(String exchageRate) {
    this.exchageRate = exchageRate;
    return this;
  }

  public void unsetExchageRate() {
    this.exchageRate = null;
  }

  /** Returns true if field exchageRate is set (has been assigned a value) and false otherwise */
  public boolean isSetExchageRate() {
    return this.exchageRate != null;
  }

  public void setExchageRateIsSet(boolean value) {
    if (!value) {
      this.exchageRate = null;
    }
  }

  public String getFrozenPoints() {
    return this.frozenPoints;
  }

  public PointsAccountVo setFrozenPoints(String frozenPoints) {
    this.frozenPoints = frozenPoints;
    return this;
  }

  public void unsetFrozenPoints() {
    this.frozenPoints = null;
  }

  /** Returns true if field frozenPoints is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenPoints() {
    return this.frozenPoints != null;
  }

  public void setFrozenPointsIsSet(boolean value) {
    if (!value) {
      this.frozenPoints = null;
    }
  }

  public String getPoints() {
    return this.points;
  }

  public PointsAccountVo setPoints(String points) {
    this.points = points;
    return this;
  }

  public void unsetPoints() {
    this.points = null;
  }

  /** Returns true if field points is set (has been assigned a value) and false otherwise */
  public boolean isSetPoints() {
    return this.points != null;
  }

  public void setPointsIsSet(boolean value) {
    if (!value) {
      this.points = null;
    }
  }

  public String getOrgName() {
    return this.orgName;
  }

  public PointsAccountVo setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public String getDisplayName() {
    return this.displayName;
  }

  public PointsAccountVo setDisplayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  public String getResultMessage() {
    return this.resultMessage;
  }

  public PointsAccountVo setResultMessage(String resultMessage) {
    this.resultMessage = resultMessage;
    return this;
  }

  public void unsetResultMessage() {
    this.resultMessage = null;
  }

  /** Returns true if field resultMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetResultMessage() {
    return this.resultMessage != null;
  }

  public void setResultMessageIsSet(boolean value) {
    if (!value) {
      this.resultMessage = null;
    }
  }

  public boolean isResultSuccess() {
    return this.resultSuccess;
  }

  public PointsAccountVo setResultSuccess(boolean resultSuccess) {
    this.resultSuccess = resultSuccess;
    setResultSuccessIsSet(true);
    return this;
  }

  public void unsetResultSuccess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULTSUCCESS_ISSET_ID);
  }

  /** Returns true if field resultSuccess is set (has been assigned a value) and false otherwise */
  public boolean isSetResultSuccess() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULTSUCCESS_ISSET_ID);
  }

  public void setResultSuccessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULTSUCCESS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORG_NO:
      if (value == null) {
        unsetOrgNo();
      } else {
        setOrgNo((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((String)value);
      }
      break;

    case EXCHAGE_RATE:
      if (value == null) {
        unsetExchageRate();
      } else {
        setExchageRate((String)value);
      }
      break;

    case FROZEN_POINTS:
      if (value == null) {
        unsetFrozenPoints();
      } else {
        setFrozenPoints((String)value);
      }
      break;

    case POINTS:
      if (value == null) {
        unsetPoints();
      } else {
        setPoints((String)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplayName();
      } else {
        setDisplayName((String)value);
      }
      break;

    case RESULT_MESSAGE:
      if (value == null) {
        unsetResultMessage();
      } else {
        setResultMessage((String)value);
      }
      break;

    case RESULT_SUCCESS:
      if (value == null) {
        unsetResultSuccess();
      } else {
        setResultSuccess((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORG_NO:
      return getOrgNo();

    case USER_ID:
      return getUserId();

    case EXCHAGE_RATE:
      return getExchageRate();

    case FROZEN_POINTS:
      return getFrozenPoints();

    case POINTS:
      return getPoints();

    case ORG_NAME:
      return getOrgName();

    case DISPLAY_NAME:
      return getDisplayName();

    case RESULT_MESSAGE:
      return getResultMessage();

    case RESULT_SUCCESS:
      return Boolean.valueOf(isResultSuccess());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORG_NO:
      return isSetOrgNo();
    case USER_ID:
      return isSetUserId();
    case EXCHAGE_RATE:
      return isSetExchageRate();
    case FROZEN_POINTS:
      return isSetFrozenPoints();
    case POINTS:
      return isSetPoints();
    case ORG_NAME:
      return isSetOrgName();
    case DISPLAY_NAME:
      return isSetDisplayName();
    case RESULT_MESSAGE:
      return isSetResultMessage();
    case RESULT_SUCCESS:
      return isSetResultSuccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PointsAccountVo)
      return this.equals((PointsAccountVo)that);
    return false;
  }

  public boolean equals(PointsAccountVo that) {
    if (that == null)
      return false;

    boolean this_present_orgNo = true && this.isSetOrgNo();
    boolean that_present_orgNo = true && that.isSetOrgNo();
    if (this_present_orgNo || that_present_orgNo) {
      if (!(this_present_orgNo && that_present_orgNo))
        return false;
      if (!this.orgNo.equals(that.orgNo))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_exchageRate = true && this.isSetExchageRate();
    boolean that_present_exchageRate = true && that.isSetExchageRate();
    if (this_present_exchageRate || that_present_exchageRate) {
      if (!(this_present_exchageRate && that_present_exchageRate))
        return false;
      if (!this.exchageRate.equals(that.exchageRate))
        return false;
    }

    boolean this_present_frozenPoints = true && this.isSetFrozenPoints();
    boolean that_present_frozenPoints = true && that.isSetFrozenPoints();
    if (this_present_frozenPoints || that_present_frozenPoints) {
      if (!(this_present_frozenPoints && that_present_frozenPoints))
        return false;
      if (!this.frozenPoints.equals(that.frozenPoints))
        return false;
    }

    boolean this_present_points = true && this.isSetPoints();
    boolean that_present_points = true && that.isSetPoints();
    if (this_present_points || that_present_points) {
      if (!(this_present_points && that_present_points))
        return false;
      if (!this.points.equals(that.points))
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    boolean this_present_resultMessage = true && this.isSetResultMessage();
    boolean that_present_resultMessage = true && that.isSetResultMessage();
    if (this_present_resultMessage || that_present_resultMessage) {
      if (!(this_present_resultMessage && that_present_resultMessage))
        return false;
      if (!this.resultMessage.equals(that.resultMessage))
        return false;
    }

    boolean this_present_resultSuccess = true;
    boolean that_present_resultSuccess = true;
    if (this_present_resultSuccess || that_present_resultSuccess) {
      if (!(this_present_resultSuccess && that_present_resultSuccess))
        return false;
      if (this.resultSuccess != that.resultSuccess)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orgNo = true && (isSetOrgNo());
    list.add(present_orgNo);
    if (present_orgNo)
      list.add(orgNo);

    boolean present_userId = true && (isSetUserId());
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_exchageRate = true && (isSetExchageRate());
    list.add(present_exchageRate);
    if (present_exchageRate)
      list.add(exchageRate);

    boolean present_frozenPoints = true && (isSetFrozenPoints());
    list.add(present_frozenPoints);
    if (present_frozenPoints)
      list.add(frozenPoints);

    boolean present_points = true && (isSetPoints());
    list.add(present_points);
    if (present_points)
      list.add(points);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_displayName = true && (isSetDisplayName());
    list.add(present_displayName);
    if (present_displayName)
      list.add(displayName);

    boolean present_resultMessage = true && (isSetResultMessage());
    list.add(present_resultMessage);
    if (present_resultMessage)
      list.add(resultMessage);

    boolean present_resultSuccess = true;
    list.add(present_resultSuccess);
    if (present_resultSuccess)
      list.add(resultSuccess);

    return list.hashCode();
  }

  @Override
  public int compareTo(PointsAccountVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrgNo()).compareTo(other.isSetOrgNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgNo, other.orgNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchageRate()).compareTo(other.isSetExchageRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchageRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchageRate, other.exchageRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenPoints()).compareTo(other.isSetFrozenPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenPoints, other.frozenPoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoints()).compareTo(other.isSetPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.points, other.points);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayName()).compareTo(other.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, other.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultMessage()).compareTo(other.isSetResultMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultMessage, other.resultMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultSuccess()).compareTo(other.isSetResultSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultSuccess, other.resultSuccess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PointsAccountVo(");
    boolean first = true;

    sb.append("orgNo:");
    if (this.orgNo == null) {
      sb.append("null");
    } else {
      sb.append(this.orgNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exchageRate:");
    if (this.exchageRate == null) {
      sb.append("null");
    } else {
      sb.append(this.exchageRate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("frozenPoints:");
    if (this.frozenPoints == null) {
      sb.append("null");
    } else {
      sb.append(this.frozenPoints);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("points:");
    if (this.points == null) {
      sb.append("null");
    } else {
      sb.append(this.points);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayName:");
    if (this.displayName == null) {
      sb.append("null");
    } else {
      sb.append(this.displayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultMessage:");
    if (this.resultMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.resultMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultSuccess:");
    sb.append(this.resultSuccess);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PointsAccountVoStandardSchemeFactory implements SchemeFactory {
    public PointsAccountVoStandardScheme getScheme() {
      return new PointsAccountVoStandardScheme();
    }
  }

  private static class PointsAccountVoStandardScheme extends StandardScheme<PointsAccountVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PointsAccountVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORG_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgNo = iprot.readString();
              struct.setOrgNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXCHAGE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchageRate = iprot.readString();
              struct.setExchageRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FROZEN_POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.frozenPoints = iprot.readString();
              struct.setFrozenPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.points = iprot.readString();
              struct.setPointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayName = iprot.readString();
              struct.setDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RESULT_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultMessage = iprot.readString();
              struct.setResultMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RESULT_SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.resultSuccess = iprot.readBool();
              struct.setResultSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PointsAccountVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orgNo != null) {
        oprot.writeFieldBegin(ORG_NO_FIELD_DESC);
        oprot.writeString(struct.orgNo);
        oprot.writeFieldEnd();
      }
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.exchageRate != null) {
        oprot.writeFieldBegin(EXCHAGE_RATE_FIELD_DESC);
        oprot.writeString(struct.exchageRate);
        oprot.writeFieldEnd();
      }
      if (struct.frozenPoints != null) {
        oprot.writeFieldBegin(FROZEN_POINTS_FIELD_DESC);
        oprot.writeString(struct.frozenPoints);
        oprot.writeFieldEnd();
      }
      if (struct.points != null) {
        oprot.writeFieldBegin(POINTS_FIELD_DESC);
        oprot.writeString(struct.points);
        oprot.writeFieldEnd();
      }
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      if (struct.displayName != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(struct.displayName);
        oprot.writeFieldEnd();
      }
      if (struct.resultMessage != null) {
        oprot.writeFieldBegin(RESULT_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.resultMessage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESULT_SUCCESS_FIELD_DESC);
      oprot.writeBool(struct.resultSuccess);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PointsAccountVoTupleSchemeFactory implements SchemeFactory {
    public PointsAccountVoTupleScheme getScheme() {
      return new PointsAccountVoTupleScheme();
    }
  }

  private static class PointsAccountVoTupleScheme extends TupleScheme<PointsAccountVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PointsAccountVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrgNo()) {
        optionals.set(0);
      }
      if (struct.isSetUserId()) {
        optionals.set(1);
      }
      if (struct.isSetExchageRate()) {
        optionals.set(2);
      }
      if (struct.isSetFrozenPoints()) {
        optionals.set(3);
      }
      if (struct.isSetPoints()) {
        optionals.set(4);
      }
      if (struct.isSetOrgName()) {
        optionals.set(5);
      }
      if (struct.isSetDisplayName()) {
        optionals.set(6);
      }
      if (struct.isSetResultMessage()) {
        optionals.set(7);
      }
      if (struct.isSetResultSuccess()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetOrgNo()) {
        oprot.writeString(struct.orgNo);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetExchageRate()) {
        oprot.writeString(struct.exchageRate);
      }
      if (struct.isSetFrozenPoints()) {
        oprot.writeString(struct.frozenPoints);
      }
      if (struct.isSetPoints()) {
        oprot.writeString(struct.points);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetDisplayName()) {
        oprot.writeString(struct.displayName);
      }
      if (struct.isSetResultMessage()) {
        oprot.writeString(struct.resultMessage);
      }
      if (struct.isSetResultSuccess()) {
        oprot.writeBool(struct.resultSuccess);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PointsAccountVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.orgNo = iprot.readString();
        struct.setOrgNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.exchageRate = iprot.readString();
        struct.setExchageRateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.frozenPoints = iprot.readString();
        struct.setFrozenPointsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.points = iprot.readString();
        struct.setPointsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.displayName = iprot.readString();
        struct.setDisplayNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.resultMessage = iprot.readString();
        struct.setResultMessageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.resultSuccess = iprot.readBool();
        struct.setResultSuccessIsSet(true);
      }
    }
  }

}

