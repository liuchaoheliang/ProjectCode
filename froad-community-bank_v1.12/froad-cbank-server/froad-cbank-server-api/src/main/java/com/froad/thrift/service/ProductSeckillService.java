/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ProductSeckillService {

  /**
   * 商品秒杀配置接口
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 ProductSeckill
     * @param productSeckillInfoVo
     * @return ResultVo
     * 
     * @param productSeckillVoList
     * @param originVo
     */
    public com.froad.thrift.vo.ResultVo addProductSeckill(List<com.froad.thrift.vo.ProductSeckillVo> productSeckillVoList, com.froad.thrift.vo.OriginVo originVo) throws org.apache.thrift.TException;

    /**
     * 删除 ProductSeckill
     * @param productSeckillVo
     * @return ResultVo
     * 
     * @param productSeckillVo
     * @param originVo
     */
    public com.froad.thrift.vo.ResultVo deleteProductSeckill(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo) throws org.apache.thrift.TException;

    /**
     * 修改 ProductSeckill
     * @param productSeckillVo
     * @return ResultVo
     * 
     * @param productSeckillVo
     * @param originVo
     */
    public com.froad.thrift.vo.ResultVo updateProductSeckill(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo) throws org.apache.thrift.TException;

    /**
     * 上下架 ProductSeckill
     * @param productSeckillVo
     * @return ResultVo
     * 
     * @param productSeckillVo
     * @param originVo
     */
    public com.froad.thrift.vo.ResultVo updateProductSeckillStatus(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo) throws org.apache.thrift.TException;

    /**
     * 查询详情 ProductSeckill
     * @param productSeckill
     * @return productSeckillInfoVo
     * 
     * @param productSeckillVo
     */
    public com.froad.thrift.vo.ProductSeckillInfoVo getProductSeckillDetail(com.froad.thrift.vo.ProductSeckillVo productSeckillVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 ProductSeckillVo
     *  @param productSeckillVo
     *  @param pageVo
     *  @return ProductSeckillPageVo
     * 
     * @param productFilterVoReq
     * @param pageVo
     */
    public com.froad.thrift.vo.ProductSeckillPageVo findSeckillByPage(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * 分页查询H5 ProductSeckillVo
     *  @param productSeckillVo
     *  @param pageVo
     *  @return ProductSeckillPageVo
     * 
     * @param productFilterVoReq
     * @param pageVo
     */
    public com.froad.thrift.vo.ProductSeckillInfoPageVo findH5SeckillByPage(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addProductSeckill(List<com.froad.thrift.vo.ProductSeckillVo> productSeckillVoList, com.froad.thrift.vo.OriginVo originVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteProductSeckill(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateProductSeckill(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateProductSeckillStatus(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductSeckillDetail(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findSeckillByPage(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findH5SeckillByPage(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.ResultVo addProductSeckill(List<com.froad.thrift.vo.ProductSeckillVo> productSeckillVoList, com.froad.thrift.vo.OriginVo originVo) throws org.apache.thrift.TException
    {
      send_addProductSeckill(productSeckillVoList, originVo);
      return recv_addProductSeckill();
    }

    public void send_addProductSeckill(List<com.froad.thrift.vo.ProductSeckillVo> productSeckillVoList, com.froad.thrift.vo.OriginVo originVo) throws org.apache.thrift.TException
    {
      addProductSeckill_args args = new addProductSeckill_args();
      args.setProductSeckillVoList(productSeckillVoList);
      args.setOriginVo(originVo);
      sendBase("addProductSeckill", args);
    }

    public com.froad.thrift.vo.ResultVo recv_addProductSeckill() throws org.apache.thrift.TException
    {
      addProductSeckill_result result = new addProductSeckill_result();
      receiveBase(result, "addProductSeckill");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addProductSeckill failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteProductSeckill(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo) throws org.apache.thrift.TException
    {
      send_deleteProductSeckill(productSeckillVo, originVo);
      return recv_deleteProductSeckill();
    }

    public void send_deleteProductSeckill(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo) throws org.apache.thrift.TException
    {
      deleteProductSeckill_args args = new deleteProductSeckill_args();
      args.setProductSeckillVo(productSeckillVo);
      args.setOriginVo(originVo);
      sendBase("deleteProductSeckill", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteProductSeckill() throws org.apache.thrift.TException
    {
      deleteProductSeckill_result result = new deleteProductSeckill_result();
      receiveBase(result, "deleteProductSeckill");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteProductSeckill failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateProductSeckill(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo) throws org.apache.thrift.TException
    {
      send_updateProductSeckill(productSeckillVo, originVo);
      return recv_updateProductSeckill();
    }

    public void send_updateProductSeckill(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo) throws org.apache.thrift.TException
    {
      updateProductSeckill_args args = new updateProductSeckill_args();
      args.setProductSeckillVo(productSeckillVo);
      args.setOriginVo(originVo);
      sendBase("updateProductSeckill", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateProductSeckill() throws org.apache.thrift.TException
    {
      updateProductSeckill_result result = new updateProductSeckill_result();
      receiveBase(result, "updateProductSeckill");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProductSeckill failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateProductSeckillStatus(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo) throws org.apache.thrift.TException
    {
      send_updateProductSeckillStatus(productSeckillVo, originVo);
      return recv_updateProductSeckillStatus();
    }

    public void send_updateProductSeckillStatus(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo) throws org.apache.thrift.TException
    {
      updateProductSeckillStatus_args args = new updateProductSeckillStatus_args();
      args.setProductSeckillVo(productSeckillVo);
      args.setOriginVo(originVo);
      sendBase("updateProductSeckillStatus", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateProductSeckillStatus() throws org.apache.thrift.TException
    {
      updateProductSeckillStatus_result result = new updateProductSeckillStatus_result();
      receiveBase(result, "updateProductSeckillStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProductSeckillStatus failed: unknown result");
    }

    public com.froad.thrift.vo.ProductSeckillInfoVo getProductSeckillDetail(com.froad.thrift.vo.ProductSeckillVo productSeckillVo) throws org.apache.thrift.TException
    {
      send_getProductSeckillDetail(productSeckillVo);
      return recv_getProductSeckillDetail();
    }

    public void send_getProductSeckillDetail(com.froad.thrift.vo.ProductSeckillVo productSeckillVo) throws org.apache.thrift.TException
    {
      getProductSeckillDetail_args args = new getProductSeckillDetail_args();
      args.setProductSeckillVo(productSeckillVo);
      sendBase("getProductSeckillDetail", args);
    }

    public com.froad.thrift.vo.ProductSeckillInfoVo recv_getProductSeckillDetail() throws org.apache.thrift.TException
    {
      getProductSeckillDetail_result result = new getProductSeckillDetail_result();
      receiveBase(result, "getProductSeckillDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductSeckillDetail failed: unknown result");
    }

    public com.froad.thrift.vo.ProductSeckillPageVo findSeckillByPage(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_findSeckillByPage(productFilterVoReq, pageVo);
      return recv_findSeckillByPage();
    }

    public void send_findSeckillByPage(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      findSeckillByPage_args args = new findSeckillByPage_args();
      args.setProductFilterVoReq(productFilterVoReq);
      args.setPageVo(pageVo);
      sendBase("findSeckillByPage", args);
    }

    public com.froad.thrift.vo.ProductSeckillPageVo recv_findSeckillByPage() throws org.apache.thrift.TException
    {
      findSeckillByPage_result result = new findSeckillByPage_result();
      receiveBase(result, "findSeckillByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findSeckillByPage failed: unknown result");
    }

    public com.froad.thrift.vo.ProductSeckillInfoPageVo findH5SeckillByPage(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_findH5SeckillByPage(productFilterVoReq, pageVo);
      return recv_findH5SeckillByPage();
    }

    public void send_findH5SeckillByPage(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      findH5SeckillByPage_args args = new findH5SeckillByPage_args();
      args.setProductFilterVoReq(productFilterVoReq);
      args.setPageVo(pageVo);
      sendBase("findH5SeckillByPage", args);
    }

    public com.froad.thrift.vo.ProductSeckillInfoPageVo recv_findH5SeckillByPage() throws org.apache.thrift.TException
    {
      findH5SeckillByPage_result result = new findH5SeckillByPage_result();
      receiveBase(result, "findH5SeckillByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findH5SeckillByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addProductSeckill(List<com.froad.thrift.vo.ProductSeckillVo> productSeckillVoList, com.froad.thrift.vo.OriginVo originVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addProductSeckill_call method_call = new addProductSeckill_call(productSeckillVoList, originVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addProductSeckill_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.froad.thrift.vo.ProductSeckillVo> productSeckillVoList;
      private com.froad.thrift.vo.OriginVo originVo;
      public addProductSeckill_call(List<com.froad.thrift.vo.ProductSeckillVo> productSeckillVoList, com.froad.thrift.vo.OriginVo originVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productSeckillVoList = productSeckillVoList;
        this.originVo = originVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProductSeckill", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addProductSeckill_args args = new addProductSeckill_args();
        args.setProductSeckillVoList(productSeckillVoList);
        args.setOriginVo(originVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addProductSeckill();
      }
    }

    public void deleteProductSeckill(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteProductSeckill_call method_call = new deleteProductSeckill_call(productSeckillVo, originVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteProductSeckill_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductSeckillVo productSeckillVo;
      private com.froad.thrift.vo.OriginVo originVo;
      public deleteProductSeckill_call(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productSeckillVo = productSeckillVo;
        this.originVo = originVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteProductSeckill", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteProductSeckill_args args = new deleteProductSeckill_args();
        args.setProductSeckillVo(productSeckillVo);
        args.setOriginVo(originVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteProductSeckill();
      }
    }

    public void updateProductSeckill(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProductSeckill_call method_call = new updateProductSeckill_call(productSeckillVo, originVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProductSeckill_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductSeckillVo productSeckillVo;
      private com.froad.thrift.vo.OriginVo originVo;
      public updateProductSeckill_call(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productSeckillVo = productSeckillVo;
        this.originVo = originVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProductSeckill", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProductSeckill_args args = new updateProductSeckill_args();
        args.setProductSeckillVo(productSeckillVo);
        args.setOriginVo(originVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProductSeckill();
      }
    }

    public void updateProductSeckillStatus(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProductSeckillStatus_call method_call = new updateProductSeckillStatus_call(productSeckillVo, originVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProductSeckillStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductSeckillVo productSeckillVo;
      private com.froad.thrift.vo.OriginVo originVo;
      public updateProductSeckillStatus_call(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, com.froad.thrift.vo.OriginVo originVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productSeckillVo = productSeckillVo;
        this.originVo = originVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProductSeckillStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProductSeckillStatus_args args = new updateProductSeckillStatus_args();
        args.setProductSeckillVo(productSeckillVo);
        args.setOriginVo(originVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProductSeckillStatus();
      }
    }

    public void getProductSeckillDetail(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductSeckillDetail_call method_call = new getProductSeckillDetail_call(productSeckillVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductSeckillDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductSeckillVo productSeckillVo;
      public getProductSeckillDetail_call(com.froad.thrift.vo.ProductSeckillVo productSeckillVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productSeckillVo = productSeckillVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductSeckillDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductSeckillDetail_args args = new getProductSeckillDetail_args();
        args.setProductSeckillVo(productSeckillVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductSeckillInfoVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductSeckillDetail();
      }
    }

    public void findSeckillByPage(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findSeckillByPage_call method_call = new findSeckillByPage_call(productFilterVoReq, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findSeckillByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq;
      private com.froad.thrift.vo.PageVo pageVo;
      public findSeckillByPage_call(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productFilterVoReq = productFilterVoReq;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findSeckillByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findSeckillByPage_args args = new findSeckillByPage_args();
        args.setProductFilterVoReq(productFilterVoReq);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductSeckillPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findSeckillByPage();
      }
    }

    public void findH5SeckillByPage(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findH5SeckillByPage_call method_call = new findH5SeckillByPage_call(productFilterVoReq, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findH5SeckillByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq;
      private com.froad.thrift.vo.PageVo pageVo;
      public findH5SeckillByPage_call(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productFilterVoReq = productFilterVoReq;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findH5SeckillByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findH5SeckillByPage_args args = new findH5SeckillByPage_args();
        args.setProductFilterVoReq(productFilterVoReq);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductSeckillInfoPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findH5SeckillByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addProductSeckill", new addProductSeckill());
      processMap.put("deleteProductSeckill", new deleteProductSeckill());
      processMap.put("updateProductSeckill", new updateProductSeckill());
      processMap.put("updateProductSeckillStatus", new updateProductSeckillStatus());
      processMap.put("getProductSeckillDetail", new getProductSeckillDetail());
      processMap.put("findSeckillByPage", new findSeckillByPage());
      processMap.put("findH5SeckillByPage", new findH5SeckillByPage());
      return processMap;
    }

    public static class addProductSeckill<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProductSeckill_args> {
      public addProductSeckill() {
        super("addProductSeckill");
      }

      public addProductSeckill_args getEmptyArgsInstance() {
        return new addProductSeckill_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addProductSeckill_result getResult(I iface, addProductSeckill_args args) throws org.apache.thrift.TException {
        addProductSeckill_result result = new addProductSeckill_result();
        result.success = iface.addProductSeckill(args.productSeckillVoList, args.originVo);
        return result;
      }
    }

    public static class deleteProductSeckill<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteProductSeckill_args> {
      public deleteProductSeckill() {
        super("deleteProductSeckill");
      }

      public deleteProductSeckill_args getEmptyArgsInstance() {
        return new deleteProductSeckill_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteProductSeckill_result getResult(I iface, deleteProductSeckill_args args) throws org.apache.thrift.TException {
        deleteProductSeckill_result result = new deleteProductSeckill_result();
        result.success = iface.deleteProductSeckill(args.productSeckillVo, args.originVo);
        return result;
      }
    }

    public static class updateProductSeckill<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProductSeckill_args> {
      public updateProductSeckill() {
        super("updateProductSeckill");
      }

      public updateProductSeckill_args getEmptyArgsInstance() {
        return new updateProductSeckill_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateProductSeckill_result getResult(I iface, updateProductSeckill_args args) throws org.apache.thrift.TException {
        updateProductSeckill_result result = new updateProductSeckill_result();
        result.success = iface.updateProductSeckill(args.productSeckillVo, args.originVo);
        return result;
      }
    }

    public static class updateProductSeckillStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProductSeckillStatus_args> {
      public updateProductSeckillStatus() {
        super("updateProductSeckillStatus");
      }

      public updateProductSeckillStatus_args getEmptyArgsInstance() {
        return new updateProductSeckillStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateProductSeckillStatus_result getResult(I iface, updateProductSeckillStatus_args args) throws org.apache.thrift.TException {
        updateProductSeckillStatus_result result = new updateProductSeckillStatus_result();
        result.success = iface.updateProductSeckillStatus(args.productSeckillVo, args.originVo);
        return result;
      }
    }

    public static class getProductSeckillDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductSeckillDetail_args> {
      public getProductSeckillDetail() {
        super("getProductSeckillDetail");
      }

      public getProductSeckillDetail_args getEmptyArgsInstance() {
        return new getProductSeckillDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductSeckillDetail_result getResult(I iface, getProductSeckillDetail_args args) throws org.apache.thrift.TException {
        getProductSeckillDetail_result result = new getProductSeckillDetail_result();
        result.success = iface.getProductSeckillDetail(args.productSeckillVo);
        return result;
      }
    }

    public static class findSeckillByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findSeckillByPage_args> {
      public findSeckillByPage() {
        super("findSeckillByPage");
      }

      public findSeckillByPage_args getEmptyArgsInstance() {
        return new findSeckillByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findSeckillByPage_result getResult(I iface, findSeckillByPage_args args) throws org.apache.thrift.TException {
        findSeckillByPage_result result = new findSeckillByPage_result();
        result.success = iface.findSeckillByPage(args.productFilterVoReq, args.pageVo);
        return result;
      }
    }

    public static class findH5SeckillByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findH5SeckillByPage_args> {
      public findH5SeckillByPage() {
        super("findH5SeckillByPage");
      }

      public findH5SeckillByPage_args getEmptyArgsInstance() {
        return new findH5SeckillByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findH5SeckillByPage_result getResult(I iface, findH5SeckillByPage_args args) throws org.apache.thrift.TException {
        findH5SeckillByPage_result result = new findH5SeckillByPage_result();
        result.success = iface.findH5SeckillByPage(args.productFilterVoReq, args.pageVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addProductSeckill", new addProductSeckill());
      processMap.put("deleteProductSeckill", new deleteProductSeckill());
      processMap.put("updateProductSeckill", new updateProductSeckill());
      processMap.put("updateProductSeckillStatus", new updateProductSeckillStatus());
      processMap.put("getProductSeckillDetail", new getProductSeckillDetail());
      processMap.put("findSeckillByPage", new findSeckillByPage());
      processMap.put("findH5SeckillByPage", new findH5SeckillByPage());
      return processMap;
    }

    public static class addProductSeckill<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addProductSeckill_args, com.froad.thrift.vo.ResultVo> {
      public addProductSeckill() {
        super("addProductSeckill");
      }

      public addProductSeckill_args getEmptyArgsInstance() {
        return new addProductSeckill_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            addProductSeckill_result result = new addProductSeckill_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addProductSeckill_result result = new addProductSeckill_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addProductSeckill_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.addProductSeckill(args.productSeckillVoList, args.originVo,resultHandler);
      }
    }

    public static class deleteProductSeckill<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteProductSeckill_args, com.froad.thrift.vo.ResultVo> {
      public deleteProductSeckill() {
        super("deleteProductSeckill");
      }

      public deleteProductSeckill_args getEmptyArgsInstance() {
        return new deleteProductSeckill_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteProductSeckill_result result = new deleteProductSeckill_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteProductSeckill_result result = new deleteProductSeckill_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteProductSeckill_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteProductSeckill(args.productSeckillVo, args.originVo,resultHandler);
      }
    }

    public static class updateProductSeckill<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProductSeckill_args, com.froad.thrift.vo.ResultVo> {
      public updateProductSeckill() {
        super("updateProductSeckill");
      }

      public updateProductSeckill_args getEmptyArgsInstance() {
        return new updateProductSeckill_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateProductSeckill_result result = new updateProductSeckill_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateProductSeckill_result result = new updateProductSeckill_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProductSeckill_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateProductSeckill(args.productSeckillVo, args.originVo,resultHandler);
      }
    }

    public static class updateProductSeckillStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProductSeckillStatus_args, com.froad.thrift.vo.ResultVo> {
      public updateProductSeckillStatus() {
        super("updateProductSeckillStatus");
      }

      public updateProductSeckillStatus_args getEmptyArgsInstance() {
        return new updateProductSeckillStatus_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateProductSeckillStatus_result result = new updateProductSeckillStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateProductSeckillStatus_result result = new updateProductSeckillStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProductSeckillStatus_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateProductSeckillStatus(args.productSeckillVo, args.originVo,resultHandler);
      }
    }

    public static class getProductSeckillDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductSeckillDetail_args, com.froad.thrift.vo.ProductSeckillInfoVo> {
      public getProductSeckillDetail() {
        super("getProductSeckillDetail");
      }

      public getProductSeckillDetail_args getEmptyArgsInstance() {
        return new getProductSeckillDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductSeckillInfoVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductSeckillInfoVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductSeckillInfoVo o) {
            getProductSeckillDetail_result result = new getProductSeckillDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductSeckillDetail_result result = new getProductSeckillDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductSeckillDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductSeckillInfoVo> resultHandler) throws TException {
        iface.getProductSeckillDetail(args.productSeckillVo,resultHandler);
      }
    }

    public static class findSeckillByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findSeckillByPage_args, com.froad.thrift.vo.ProductSeckillPageVo> {
      public findSeckillByPage() {
        super("findSeckillByPage");
      }

      public findSeckillByPage_args getEmptyArgsInstance() {
        return new findSeckillByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductSeckillPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductSeckillPageVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductSeckillPageVo o) {
            findSeckillByPage_result result = new findSeckillByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findSeckillByPage_result result = new findSeckillByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findSeckillByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductSeckillPageVo> resultHandler) throws TException {
        iface.findSeckillByPage(args.productFilterVoReq, args.pageVo,resultHandler);
      }
    }

    public static class findH5SeckillByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findH5SeckillByPage_args, com.froad.thrift.vo.ProductSeckillInfoPageVo> {
      public findH5SeckillByPage() {
        super("findH5SeckillByPage");
      }

      public findH5SeckillByPage_args getEmptyArgsInstance() {
        return new findH5SeckillByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductSeckillInfoPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductSeckillInfoPageVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductSeckillInfoPageVo o) {
            findH5SeckillByPage_result result = new findH5SeckillByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findH5SeckillByPage_result result = new findH5SeckillByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findH5SeckillByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductSeckillInfoPageVo> resultHandler) throws TException {
        iface.findH5SeckillByPage(args.productFilterVoReq, args.pageVo,resultHandler);
      }
    }

  }

  public static class addProductSeckill_args implements org.apache.thrift.TBase<addProductSeckill_args, addProductSeckill_args._Fields>, java.io.Serializable, Cloneable, Comparable<addProductSeckill_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductSeckill_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_SECKILL_VO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("productSeckillVoList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductSeckill_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductSeckill_argsTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ProductSeckillVo> productSeckillVoList; // required
    public com.froad.thrift.vo.OriginVo originVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_SECKILL_VO_LIST((short)1, "productSeckillVoList"),
      ORIGIN_VO((short)2, "originVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_SECKILL_VO_LIST
            return PRODUCT_SECKILL_VO_LIST;
          case 2: // ORIGIN_VO
            return ORIGIN_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_SECKILL_VO_LIST, new org.apache.thrift.meta_data.FieldMetaData("productSeckillVoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductSeckillVo.class))));
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductSeckill_args.class, metaDataMap);
    }

    public addProductSeckill_args() {
    }

    public addProductSeckill_args(
      List<com.froad.thrift.vo.ProductSeckillVo> productSeckillVoList,
      com.froad.thrift.vo.OriginVo originVo)
    {
      this();
      this.productSeckillVoList = productSeckillVoList;
      this.originVo = originVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductSeckill_args(addProductSeckill_args other) {
      if (other.isSetProductSeckillVoList()) {
        List<com.froad.thrift.vo.ProductSeckillVo> __this__productSeckillVoList = new ArrayList<com.froad.thrift.vo.ProductSeckillVo>(other.productSeckillVoList.size());
        for (com.froad.thrift.vo.ProductSeckillVo other_element : other.productSeckillVoList) {
          __this__productSeckillVoList.add(new com.froad.thrift.vo.ProductSeckillVo(other_element));
        }
        this.productSeckillVoList = __this__productSeckillVoList;
      }
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
    }

    public addProductSeckill_args deepCopy() {
      return new addProductSeckill_args(this);
    }

    @Override
    public void clear() {
      this.productSeckillVoList = null;
      this.originVo = null;
    }

    public int getProductSeckillVoListSize() {
      return (this.productSeckillVoList == null) ? 0 : this.productSeckillVoList.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductSeckillVo> getProductSeckillVoListIterator() {
      return (this.productSeckillVoList == null) ? null : this.productSeckillVoList.iterator();
    }

    public void addToProductSeckillVoList(com.froad.thrift.vo.ProductSeckillVo elem) {
      if (this.productSeckillVoList == null) {
        this.productSeckillVoList = new ArrayList<com.froad.thrift.vo.ProductSeckillVo>();
      }
      this.productSeckillVoList.add(elem);
    }

    public List<com.froad.thrift.vo.ProductSeckillVo> getProductSeckillVoList() {
      return this.productSeckillVoList;
    }

    public addProductSeckill_args setProductSeckillVoList(List<com.froad.thrift.vo.ProductSeckillVo> productSeckillVoList) {
      this.productSeckillVoList = productSeckillVoList;
      return this;
    }

    public void unsetProductSeckillVoList() {
      this.productSeckillVoList = null;
    }

    /** Returns true if field productSeckillVoList is set (has been assigned a value) and false otherwise */
    public boolean isSetProductSeckillVoList() {
      return this.productSeckillVoList != null;
    }

    public void setProductSeckillVoListIsSet(boolean value) {
      if (!value) {
        this.productSeckillVoList = null;
      }
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addProductSeckill_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_SECKILL_VO_LIST:
        if (value == null) {
          unsetProductSeckillVoList();
        } else {
          setProductSeckillVoList((List<com.froad.thrift.vo.ProductSeckillVo>)value);
        }
        break;

      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_SECKILL_VO_LIST:
        return getProductSeckillVoList();

      case ORIGIN_VO:
        return getOriginVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_SECKILL_VO_LIST:
        return isSetProductSeckillVoList();
      case ORIGIN_VO:
        return isSetOriginVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductSeckill_args)
        return this.equals((addProductSeckill_args)that);
      return false;
    }

    public boolean equals(addProductSeckill_args that) {
      if (that == null)
        return false;

      boolean this_present_productSeckillVoList = true && this.isSetProductSeckillVoList();
      boolean that_present_productSeckillVoList = true && that.isSetProductSeckillVoList();
      if (this_present_productSeckillVoList || that_present_productSeckillVoList) {
        if (!(this_present_productSeckillVoList && that_present_productSeckillVoList))
          return false;
        if (!this.productSeckillVoList.equals(that.productSeckillVoList))
          return false;
      }

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productSeckillVoList = true && (isSetProductSeckillVoList());
      list.add(present_productSeckillVoList);
      if (present_productSeckillVoList)
        list.add(productSeckillVoList);

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductSeckill_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductSeckillVoList()).compareTo(other.isSetProductSeckillVoList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductSeckillVoList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productSeckillVoList, other.productSeckillVoList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductSeckill_args(");
      boolean first = true;

      sb.append("productSeckillVoList:");
      if (this.productSeckillVoList == null) {
        sb.append("null");
      } else {
        sb.append(this.productSeckillVoList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductSeckill_argsStandardSchemeFactory implements SchemeFactory {
      public addProductSeckill_argsStandardScheme getScheme() {
        return new addProductSeckill_argsStandardScheme();
      }
    }

    private static class addProductSeckill_argsStandardScheme extends StandardScheme<addProductSeckill_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductSeckill_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_SECKILL_VO_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                  struct.productSeckillVoList = new ArrayList<com.froad.thrift.vo.ProductSeckillVo>(_list232.size);
                  com.froad.thrift.vo.ProductSeckillVo _elem233;
                  for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                  {
                    _elem233 = new com.froad.thrift.vo.ProductSeckillVo();
                    _elem233.read(iprot);
                    struct.productSeckillVoList.add(_elem233);
                  }
                  iprot.readListEnd();
                }
                struct.setProductSeckillVoListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductSeckill_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productSeckillVoList != null) {
          oprot.writeFieldBegin(PRODUCT_SECKILL_VO_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productSeckillVoList.size()));
            for (com.froad.thrift.vo.ProductSeckillVo _iter235 : struct.productSeckillVoList)
            {
              _iter235.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductSeckill_argsTupleSchemeFactory implements SchemeFactory {
      public addProductSeckill_argsTupleScheme getScheme() {
        return new addProductSeckill_argsTupleScheme();
      }
    }

    private static class addProductSeckill_argsTupleScheme extends TupleScheme<addProductSeckill_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductSeckill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductSeckillVoList()) {
          optionals.set(0);
        }
        if (struct.isSetOriginVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductSeckillVoList()) {
          {
            oprot.writeI32(struct.productSeckillVoList.size());
            for (com.froad.thrift.vo.ProductSeckillVo _iter236 : struct.productSeckillVoList)
            {
              _iter236.write(oprot);
            }
          }
        }
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductSeckill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.productSeckillVoList = new ArrayList<com.froad.thrift.vo.ProductSeckillVo>(_list237.size);
            com.froad.thrift.vo.ProductSeckillVo _elem238;
            for (int _i239 = 0; _i239 < _list237.size; ++_i239)
            {
              _elem238 = new com.froad.thrift.vo.ProductSeckillVo();
              _elem238.read(iprot);
              struct.productSeckillVoList.add(_elem238);
            }
          }
          struct.setProductSeckillVoListIsSet(true);
        }
        if (incoming.get(1)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
      }
    }

  }

  public static class addProductSeckill_result implements org.apache.thrift.TBase<addProductSeckill_result, addProductSeckill_result._Fields>, java.io.Serializable, Cloneable, Comparable<addProductSeckill_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductSeckill_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductSeckill_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductSeckill_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductSeckill_result.class, metaDataMap);
    }

    public addProductSeckill_result() {
    }

    public addProductSeckill_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductSeckill_result(addProductSeckill_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public addProductSeckill_result deepCopy() {
      return new addProductSeckill_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public addProductSeckill_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductSeckill_result)
        return this.equals((addProductSeckill_result)that);
      return false;
    }

    public boolean equals(addProductSeckill_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductSeckill_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductSeckill_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductSeckill_resultStandardSchemeFactory implements SchemeFactory {
      public addProductSeckill_resultStandardScheme getScheme() {
        return new addProductSeckill_resultStandardScheme();
      }
    }

    private static class addProductSeckill_resultStandardScheme extends StandardScheme<addProductSeckill_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductSeckill_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductSeckill_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductSeckill_resultTupleSchemeFactory implements SchemeFactory {
      public addProductSeckill_resultTupleScheme getScheme() {
        return new addProductSeckill_resultTupleScheme();
      }
    }

    private static class addProductSeckill_resultTupleScheme extends TupleScheme<addProductSeckill_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductSeckill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductSeckill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteProductSeckill_args implements org.apache.thrift.TBase<deleteProductSeckill_args, deleteProductSeckill_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProductSeckill_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProductSeckill_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_SECKILL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productSeckillVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProductSeckill_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProductSeckill_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductSeckillVo productSeckillVo; // required
    public com.froad.thrift.vo.OriginVo originVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_SECKILL_VO((short)1, "productSeckillVo"),
      ORIGIN_VO((short)2, "originVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_SECKILL_VO
            return PRODUCT_SECKILL_VO;
          case 2: // ORIGIN_VO
            return ORIGIN_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_SECKILL_VO, new org.apache.thrift.meta_data.FieldMetaData("productSeckillVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductSeckillVo.class)));
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProductSeckill_args.class, metaDataMap);
    }

    public deleteProductSeckill_args() {
    }

    public deleteProductSeckill_args(
      com.froad.thrift.vo.ProductSeckillVo productSeckillVo,
      com.froad.thrift.vo.OriginVo originVo)
    {
      this();
      this.productSeckillVo = productSeckillVo;
      this.originVo = originVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProductSeckill_args(deleteProductSeckill_args other) {
      if (other.isSetProductSeckillVo()) {
        this.productSeckillVo = new com.froad.thrift.vo.ProductSeckillVo(other.productSeckillVo);
      }
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
    }

    public deleteProductSeckill_args deepCopy() {
      return new deleteProductSeckill_args(this);
    }

    @Override
    public void clear() {
      this.productSeckillVo = null;
      this.originVo = null;
    }

    public com.froad.thrift.vo.ProductSeckillVo getProductSeckillVo() {
      return this.productSeckillVo;
    }

    public deleteProductSeckill_args setProductSeckillVo(com.froad.thrift.vo.ProductSeckillVo productSeckillVo) {
      this.productSeckillVo = productSeckillVo;
      return this;
    }

    public void unsetProductSeckillVo() {
      this.productSeckillVo = null;
    }

    /** Returns true if field productSeckillVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductSeckillVo() {
      return this.productSeckillVo != null;
    }

    public void setProductSeckillVoIsSet(boolean value) {
      if (!value) {
        this.productSeckillVo = null;
      }
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteProductSeckill_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_SECKILL_VO:
        if (value == null) {
          unsetProductSeckillVo();
        } else {
          setProductSeckillVo((com.froad.thrift.vo.ProductSeckillVo)value);
        }
        break;

      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_SECKILL_VO:
        return getProductSeckillVo();

      case ORIGIN_VO:
        return getOriginVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_SECKILL_VO:
        return isSetProductSeckillVo();
      case ORIGIN_VO:
        return isSetOriginVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProductSeckill_args)
        return this.equals((deleteProductSeckill_args)that);
      return false;
    }

    public boolean equals(deleteProductSeckill_args that) {
      if (that == null)
        return false;

      boolean this_present_productSeckillVo = true && this.isSetProductSeckillVo();
      boolean that_present_productSeckillVo = true && that.isSetProductSeckillVo();
      if (this_present_productSeckillVo || that_present_productSeckillVo) {
        if (!(this_present_productSeckillVo && that_present_productSeckillVo))
          return false;
        if (!this.productSeckillVo.equals(that.productSeckillVo))
          return false;
      }

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productSeckillVo = true && (isSetProductSeckillVo());
      list.add(present_productSeckillVo);
      if (present_productSeckillVo)
        list.add(productSeckillVo);

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProductSeckill_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductSeckillVo()).compareTo(other.isSetProductSeckillVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductSeckillVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productSeckillVo, other.productSeckillVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProductSeckill_args(");
      boolean first = true;

      sb.append("productSeckillVo:");
      if (this.productSeckillVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productSeckillVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productSeckillVo != null) {
        productSeckillVo.validate();
      }
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProductSeckill_argsStandardSchemeFactory implements SchemeFactory {
      public deleteProductSeckill_argsStandardScheme getScheme() {
        return new deleteProductSeckill_argsStandardScheme();
      }
    }

    private static class deleteProductSeckill_argsStandardScheme extends StandardScheme<deleteProductSeckill_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProductSeckill_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_SECKILL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productSeckillVo = new com.froad.thrift.vo.ProductSeckillVo();
                struct.productSeckillVo.read(iprot);
                struct.setProductSeckillVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProductSeckill_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productSeckillVo != null) {
          oprot.writeFieldBegin(PRODUCT_SECKILL_VO_FIELD_DESC);
          struct.productSeckillVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProductSeckill_argsTupleSchemeFactory implements SchemeFactory {
      public deleteProductSeckill_argsTupleScheme getScheme() {
        return new deleteProductSeckill_argsTupleScheme();
      }
    }

    private static class deleteProductSeckill_argsTupleScheme extends TupleScheme<deleteProductSeckill_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProductSeckill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductSeckillVo()) {
          optionals.set(0);
        }
        if (struct.isSetOriginVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductSeckillVo()) {
          struct.productSeckillVo.write(oprot);
        }
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProductSeckill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productSeckillVo = new com.froad.thrift.vo.ProductSeckillVo();
          struct.productSeckillVo.read(iprot);
          struct.setProductSeckillVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
      }
    }

  }

  public static class deleteProductSeckill_result implements org.apache.thrift.TBase<deleteProductSeckill_result, deleteProductSeckill_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProductSeckill_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProductSeckill_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProductSeckill_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProductSeckill_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProductSeckill_result.class, metaDataMap);
    }

    public deleteProductSeckill_result() {
    }

    public deleteProductSeckill_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProductSeckill_result(deleteProductSeckill_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteProductSeckill_result deepCopy() {
      return new deleteProductSeckill_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteProductSeckill_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProductSeckill_result)
        return this.equals((deleteProductSeckill_result)that);
      return false;
    }

    public boolean equals(deleteProductSeckill_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProductSeckill_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProductSeckill_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProductSeckill_resultStandardSchemeFactory implements SchemeFactory {
      public deleteProductSeckill_resultStandardScheme getScheme() {
        return new deleteProductSeckill_resultStandardScheme();
      }
    }

    private static class deleteProductSeckill_resultStandardScheme extends StandardScheme<deleteProductSeckill_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProductSeckill_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProductSeckill_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProductSeckill_resultTupleSchemeFactory implements SchemeFactory {
      public deleteProductSeckill_resultTupleScheme getScheme() {
        return new deleteProductSeckill_resultTupleScheme();
      }
    }

    private static class deleteProductSeckill_resultTupleScheme extends TupleScheme<deleteProductSeckill_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProductSeckill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProductSeckill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateProductSeckill_args implements org.apache.thrift.TBase<updateProductSeckill_args, updateProductSeckill_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductSeckill_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductSeckill_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_SECKILL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productSeckillVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductSeckill_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductSeckill_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductSeckillVo productSeckillVo; // required
    public com.froad.thrift.vo.OriginVo originVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_SECKILL_VO((short)1, "productSeckillVo"),
      ORIGIN_VO((short)2, "originVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_SECKILL_VO
            return PRODUCT_SECKILL_VO;
          case 2: // ORIGIN_VO
            return ORIGIN_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_SECKILL_VO, new org.apache.thrift.meta_data.FieldMetaData("productSeckillVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductSeckillVo.class)));
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductSeckill_args.class, metaDataMap);
    }

    public updateProductSeckill_args() {
    }

    public updateProductSeckill_args(
      com.froad.thrift.vo.ProductSeckillVo productSeckillVo,
      com.froad.thrift.vo.OriginVo originVo)
    {
      this();
      this.productSeckillVo = productSeckillVo;
      this.originVo = originVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductSeckill_args(updateProductSeckill_args other) {
      if (other.isSetProductSeckillVo()) {
        this.productSeckillVo = new com.froad.thrift.vo.ProductSeckillVo(other.productSeckillVo);
      }
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
    }

    public updateProductSeckill_args deepCopy() {
      return new updateProductSeckill_args(this);
    }

    @Override
    public void clear() {
      this.productSeckillVo = null;
      this.originVo = null;
    }

    public com.froad.thrift.vo.ProductSeckillVo getProductSeckillVo() {
      return this.productSeckillVo;
    }

    public updateProductSeckill_args setProductSeckillVo(com.froad.thrift.vo.ProductSeckillVo productSeckillVo) {
      this.productSeckillVo = productSeckillVo;
      return this;
    }

    public void unsetProductSeckillVo() {
      this.productSeckillVo = null;
    }

    /** Returns true if field productSeckillVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductSeckillVo() {
      return this.productSeckillVo != null;
    }

    public void setProductSeckillVoIsSet(boolean value) {
      if (!value) {
        this.productSeckillVo = null;
      }
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateProductSeckill_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_SECKILL_VO:
        if (value == null) {
          unsetProductSeckillVo();
        } else {
          setProductSeckillVo((com.froad.thrift.vo.ProductSeckillVo)value);
        }
        break;

      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_SECKILL_VO:
        return getProductSeckillVo();

      case ORIGIN_VO:
        return getOriginVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_SECKILL_VO:
        return isSetProductSeckillVo();
      case ORIGIN_VO:
        return isSetOriginVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductSeckill_args)
        return this.equals((updateProductSeckill_args)that);
      return false;
    }

    public boolean equals(updateProductSeckill_args that) {
      if (that == null)
        return false;

      boolean this_present_productSeckillVo = true && this.isSetProductSeckillVo();
      boolean that_present_productSeckillVo = true && that.isSetProductSeckillVo();
      if (this_present_productSeckillVo || that_present_productSeckillVo) {
        if (!(this_present_productSeckillVo && that_present_productSeckillVo))
          return false;
        if (!this.productSeckillVo.equals(that.productSeckillVo))
          return false;
      }

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productSeckillVo = true && (isSetProductSeckillVo());
      list.add(present_productSeckillVo);
      if (present_productSeckillVo)
        list.add(productSeckillVo);

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductSeckill_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductSeckillVo()).compareTo(other.isSetProductSeckillVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductSeckillVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productSeckillVo, other.productSeckillVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductSeckill_args(");
      boolean first = true;

      sb.append("productSeckillVo:");
      if (this.productSeckillVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productSeckillVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productSeckillVo != null) {
        productSeckillVo.validate();
      }
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductSeckill_argsStandardSchemeFactory implements SchemeFactory {
      public updateProductSeckill_argsStandardScheme getScheme() {
        return new updateProductSeckill_argsStandardScheme();
      }
    }

    private static class updateProductSeckill_argsStandardScheme extends StandardScheme<updateProductSeckill_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductSeckill_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_SECKILL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productSeckillVo = new com.froad.thrift.vo.ProductSeckillVo();
                struct.productSeckillVo.read(iprot);
                struct.setProductSeckillVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductSeckill_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productSeckillVo != null) {
          oprot.writeFieldBegin(PRODUCT_SECKILL_VO_FIELD_DESC);
          struct.productSeckillVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductSeckill_argsTupleSchemeFactory implements SchemeFactory {
      public updateProductSeckill_argsTupleScheme getScheme() {
        return new updateProductSeckill_argsTupleScheme();
      }
    }

    private static class updateProductSeckill_argsTupleScheme extends TupleScheme<updateProductSeckill_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductSeckill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductSeckillVo()) {
          optionals.set(0);
        }
        if (struct.isSetOriginVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductSeckillVo()) {
          struct.productSeckillVo.write(oprot);
        }
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductSeckill_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productSeckillVo = new com.froad.thrift.vo.ProductSeckillVo();
          struct.productSeckillVo.read(iprot);
          struct.setProductSeckillVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
      }
    }

  }

  public static class updateProductSeckill_result implements org.apache.thrift.TBase<updateProductSeckill_result, updateProductSeckill_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductSeckill_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductSeckill_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductSeckill_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductSeckill_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductSeckill_result.class, metaDataMap);
    }

    public updateProductSeckill_result() {
    }

    public updateProductSeckill_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductSeckill_result(updateProductSeckill_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateProductSeckill_result deepCopy() {
      return new updateProductSeckill_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateProductSeckill_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductSeckill_result)
        return this.equals((updateProductSeckill_result)that);
      return false;
    }

    public boolean equals(updateProductSeckill_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductSeckill_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductSeckill_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductSeckill_resultStandardSchemeFactory implements SchemeFactory {
      public updateProductSeckill_resultStandardScheme getScheme() {
        return new updateProductSeckill_resultStandardScheme();
      }
    }

    private static class updateProductSeckill_resultStandardScheme extends StandardScheme<updateProductSeckill_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductSeckill_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductSeckill_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductSeckill_resultTupleSchemeFactory implements SchemeFactory {
      public updateProductSeckill_resultTupleScheme getScheme() {
        return new updateProductSeckill_resultTupleScheme();
      }
    }

    private static class updateProductSeckill_resultTupleScheme extends TupleScheme<updateProductSeckill_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductSeckill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductSeckill_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateProductSeckillStatus_args implements org.apache.thrift.TBase<updateProductSeckillStatus_args, updateProductSeckillStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductSeckillStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductSeckillStatus_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_SECKILL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productSeckillVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductSeckillStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductSeckillStatus_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductSeckillVo productSeckillVo; // required
    public com.froad.thrift.vo.OriginVo originVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_SECKILL_VO((short)1, "productSeckillVo"),
      ORIGIN_VO((short)2, "originVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_SECKILL_VO
            return PRODUCT_SECKILL_VO;
          case 2: // ORIGIN_VO
            return ORIGIN_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_SECKILL_VO, new org.apache.thrift.meta_data.FieldMetaData("productSeckillVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductSeckillVo.class)));
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductSeckillStatus_args.class, metaDataMap);
    }

    public updateProductSeckillStatus_args() {
    }

    public updateProductSeckillStatus_args(
      com.froad.thrift.vo.ProductSeckillVo productSeckillVo,
      com.froad.thrift.vo.OriginVo originVo)
    {
      this();
      this.productSeckillVo = productSeckillVo;
      this.originVo = originVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductSeckillStatus_args(updateProductSeckillStatus_args other) {
      if (other.isSetProductSeckillVo()) {
        this.productSeckillVo = new com.froad.thrift.vo.ProductSeckillVo(other.productSeckillVo);
      }
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
    }

    public updateProductSeckillStatus_args deepCopy() {
      return new updateProductSeckillStatus_args(this);
    }

    @Override
    public void clear() {
      this.productSeckillVo = null;
      this.originVo = null;
    }

    public com.froad.thrift.vo.ProductSeckillVo getProductSeckillVo() {
      return this.productSeckillVo;
    }

    public updateProductSeckillStatus_args setProductSeckillVo(com.froad.thrift.vo.ProductSeckillVo productSeckillVo) {
      this.productSeckillVo = productSeckillVo;
      return this;
    }

    public void unsetProductSeckillVo() {
      this.productSeckillVo = null;
    }

    /** Returns true if field productSeckillVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductSeckillVo() {
      return this.productSeckillVo != null;
    }

    public void setProductSeckillVoIsSet(boolean value) {
      if (!value) {
        this.productSeckillVo = null;
      }
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateProductSeckillStatus_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_SECKILL_VO:
        if (value == null) {
          unsetProductSeckillVo();
        } else {
          setProductSeckillVo((com.froad.thrift.vo.ProductSeckillVo)value);
        }
        break;

      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_SECKILL_VO:
        return getProductSeckillVo();

      case ORIGIN_VO:
        return getOriginVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_SECKILL_VO:
        return isSetProductSeckillVo();
      case ORIGIN_VO:
        return isSetOriginVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductSeckillStatus_args)
        return this.equals((updateProductSeckillStatus_args)that);
      return false;
    }

    public boolean equals(updateProductSeckillStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_productSeckillVo = true && this.isSetProductSeckillVo();
      boolean that_present_productSeckillVo = true && that.isSetProductSeckillVo();
      if (this_present_productSeckillVo || that_present_productSeckillVo) {
        if (!(this_present_productSeckillVo && that_present_productSeckillVo))
          return false;
        if (!this.productSeckillVo.equals(that.productSeckillVo))
          return false;
      }

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productSeckillVo = true && (isSetProductSeckillVo());
      list.add(present_productSeckillVo);
      if (present_productSeckillVo)
        list.add(productSeckillVo);

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductSeckillStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductSeckillVo()).compareTo(other.isSetProductSeckillVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductSeckillVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productSeckillVo, other.productSeckillVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductSeckillStatus_args(");
      boolean first = true;

      sb.append("productSeckillVo:");
      if (this.productSeckillVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productSeckillVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productSeckillVo != null) {
        productSeckillVo.validate();
      }
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductSeckillStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateProductSeckillStatus_argsStandardScheme getScheme() {
        return new updateProductSeckillStatus_argsStandardScheme();
      }
    }

    private static class updateProductSeckillStatus_argsStandardScheme extends StandardScheme<updateProductSeckillStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductSeckillStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_SECKILL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productSeckillVo = new com.froad.thrift.vo.ProductSeckillVo();
                struct.productSeckillVo.read(iprot);
                struct.setProductSeckillVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductSeckillStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productSeckillVo != null) {
          oprot.writeFieldBegin(PRODUCT_SECKILL_VO_FIELD_DESC);
          struct.productSeckillVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductSeckillStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateProductSeckillStatus_argsTupleScheme getScheme() {
        return new updateProductSeckillStatus_argsTupleScheme();
      }
    }

    private static class updateProductSeckillStatus_argsTupleScheme extends TupleScheme<updateProductSeckillStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductSeckillStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductSeckillVo()) {
          optionals.set(0);
        }
        if (struct.isSetOriginVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductSeckillVo()) {
          struct.productSeckillVo.write(oprot);
        }
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductSeckillStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productSeckillVo = new com.froad.thrift.vo.ProductSeckillVo();
          struct.productSeckillVo.read(iprot);
          struct.setProductSeckillVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
      }
    }

  }

  public static class updateProductSeckillStatus_result implements org.apache.thrift.TBase<updateProductSeckillStatus_result, updateProductSeckillStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductSeckillStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductSeckillStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductSeckillStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductSeckillStatus_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductSeckillStatus_result.class, metaDataMap);
    }

    public updateProductSeckillStatus_result() {
    }

    public updateProductSeckillStatus_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductSeckillStatus_result(updateProductSeckillStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateProductSeckillStatus_result deepCopy() {
      return new updateProductSeckillStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateProductSeckillStatus_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductSeckillStatus_result)
        return this.equals((updateProductSeckillStatus_result)that);
      return false;
    }

    public boolean equals(updateProductSeckillStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductSeckillStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductSeckillStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductSeckillStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateProductSeckillStatus_resultStandardScheme getScheme() {
        return new updateProductSeckillStatus_resultStandardScheme();
      }
    }

    private static class updateProductSeckillStatus_resultStandardScheme extends StandardScheme<updateProductSeckillStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductSeckillStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductSeckillStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductSeckillStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateProductSeckillStatus_resultTupleScheme getScheme() {
        return new updateProductSeckillStatus_resultTupleScheme();
      }
    }

    private static class updateProductSeckillStatus_resultTupleScheme extends TupleScheme<updateProductSeckillStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductSeckillStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductSeckillStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductSeckillDetail_args implements org.apache.thrift.TBase<getProductSeckillDetail_args, getProductSeckillDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductSeckillDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductSeckillDetail_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_SECKILL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productSeckillVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductSeckillDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductSeckillDetail_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductSeckillVo productSeckillVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_SECKILL_VO((short)1, "productSeckillVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_SECKILL_VO
            return PRODUCT_SECKILL_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_SECKILL_VO, new org.apache.thrift.meta_data.FieldMetaData("productSeckillVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductSeckillVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductSeckillDetail_args.class, metaDataMap);
    }

    public getProductSeckillDetail_args() {
    }

    public getProductSeckillDetail_args(
      com.froad.thrift.vo.ProductSeckillVo productSeckillVo)
    {
      this();
      this.productSeckillVo = productSeckillVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductSeckillDetail_args(getProductSeckillDetail_args other) {
      if (other.isSetProductSeckillVo()) {
        this.productSeckillVo = new com.froad.thrift.vo.ProductSeckillVo(other.productSeckillVo);
      }
    }

    public getProductSeckillDetail_args deepCopy() {
      return new getProductSeckillDetail_args(this);
    }

    @Override
    public void clear() {
      this.productSeckillVo = null;
    }

    public com.froad.thrift.vo.ProductSeckillVo getProductSeckillVo() {
      return this.productSeckillVo;
    }

    public getProductSeckillDetail_args setProductSeckillVo(com.froad.thrift.vo.ProductSeckillVo productSeckillVo) {
      this.productSeckillVo = productSeckillVo;
      return this;
    }

    public void unsetProductSeckillVo() {
      this.productSeckillVo = null;
    }

    /** Returns true if field productSeckillVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductSeckillVo() {
      return this.productSeckillVo != null;
    }

    public void setProductSeckillVoIsSet(boolean value) {
      if (!value) {
        this.productSeckillVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_SECKILL_VO:
        if (value == null) {
          unsetProductSeckillVo();
        } else {
          setProductSeckillVo((com.froad.thrift.vo.ProductSeckillVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_SECKILL_VO:
        return getProductSeckillVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_SECKILL_VO:
        return isSetProductSeckillVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductSeckillDetail_args)
        return this.equals((getProductSeckillDetail_args)that);
      return false;
    }

    public boolean equals(getProductSeckillDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_productSeckillVo = true && this.isSetProductSeckillVo();
      boolean that_present_productSeckillVo = true && that.isSetProductSeckillVo();
      if (this_present_productSeckillVo || that_present_productSeckillVo) {
        if (!(this_present_productSeckillVo && that_present_productSeckillVo))
          return false;
        if (!this.productSeckillVo.equals(that.productSeckillVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productSeckillVo = true && (isSetProductSeckillVo());
      list.add(present_productSeckillVo);
      if (present_productSeckillVo)
        list.add(productSeckillVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductSeckillDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductSeckillVo()).compareTo(other.isSetProductSeckillVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductSeckillVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productSeckillVo, other.productSeckillVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductSeckillDetail_args(");
      boolean first = true;

      sb.append("productSeckillVo:");
      if (this.productSeckillVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productSeckillVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productSeckillVo != null) {
        productSeckillVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductSeckillDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getProductSeckillDetail_argsStandardScheme getScheme() {
        return new getProductSeckillDetail_argsStandardScheme();
      }
    }

    private static class getProductSeckillDetail_argsStandardScheme extends StandardScheme<getProductSeckillDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductSeckillDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_SECKILL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productSeckillVo = new com.froad.thrift.vo.ProductSeckillVo();
                struct.productSeckillVo.read(iprot);
                struct.setProductSeckillVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductSeckillDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productSeckillVo != null) {
          oprot.writeFieldBegin(PRODUCT_SECKILL_VO_FIELD_DESC);
          struct.productSeckillVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductSeckillDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getProductSeckillDetail_argsTupleScheme getScheme() {
        return new getProductSeckillDetail_argsTupleScheme();
      }
    }

    private static class getProductSeckillDetail_argsTupleScheme extends TupleScheme<getProductSeckillDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductSeckillDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductSeckillVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductSeckillVo()) {
          struct.productSeckillVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductSeckillDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productSeckillVo = new com.froad.thrift.vo.ProductSeckillVo();
          struct.productSeckillVo.read(iprot);
          struct.setProductSeckillVoIsSet(true);
        }
      }
    }

  }

  public static class getProductSeckillDetail_result implements org.apache.thrift.TBase<getProductSeckillDetail_result, getProductSeckillDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductSeckillDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductSeckillDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductSeckillDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductSeckillDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductSeckillInfoVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductSeckillInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductSeckillDetail_result.class, metaDataMap);
    }

    public getProductSeckillDetail_result() {
    }

    public getProductSeckillDetail_result(
      com.froad.thrift.vo.ProductSeckillInfoVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductSeckillDetail_result(getProductSeckillDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductSeckillInfoVo(other.success);
      }
    }

    public getProductSeckillDetail_result deepCopy() {
      return new getProductSeckillDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductSeckillInfoVo getSuccess() {
      return this.success;
    }

    public getProductSeckillDetail_result setSuccess(com.froad.thrift.vo.ProductSeckillInfoVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductSeckillInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductSeckillDetail_result)
        return this.equals((getProductSeckillDetail_result)that);
      return false;
    }

    public boolean equals(getProductSeckillDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductSeckillDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductSeckillDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductSeckillDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getProductSeckillDetail_resultStandardScheme getScheme() {
        return new getProductSeckillDetail_resultStandardScheme();
      }
    }

    private static class getProductSeckillDetail_resultStandardScheme extends StandardScheme<getProductSeckillDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductSeckillDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductSeckillInfoVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductSeckillDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductSeckillDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getProductSeckillDetail_resultTupleScheme getScheme() {
        return new getProductSeckillDetail_resultTupleScheme();
      }
    }

    private static class getProductSeckillDetail_resultTupleScheme extends TupleScheme<getProductSeckillDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductSeckillDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductSeckillDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductSeckillInfoVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findSeckillByPage_args implements org.apache.thrift.TBase<findSeckillByPage_args, findSeckillByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findSeckillByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSeckillByPage_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_FILTER_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productFilterVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findSeckillByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findSeckillByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_FILTER_VO_REQ((short)1, "productFilterVoReq"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_FILTER_VO_REQ
            return PRODUCT_FILTER_VO_REQ;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_FILTER_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("productFilterVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductFilterVoReq.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSeckillByPage_args.class, metaDataMap);
    }

    public findSeckillByPage_args() {
    }

    public findSeckillByPage_args(
      com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.productFilterVoReq = productFilterVoReq;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSeckillByPage_args(findSeckillByPage_args other) {
      if (other.isSetProductFilterVoReq()) {
        this.productFilterVoReq = new com.froad.thrift.vo.ProductFilterVoReq(other.productFilterVoReq);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public findSeckillByPage_args deepCopy() {
      return new findSeckillByPage_args(this);
    }

    @Override
    public void clear() {
      this.productFilterVoReq = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.ProductFilterVoReq getProductFilterVoReq() {
      return this.productFilterVoReq;
    }

    public findSeckillByPage_args setProductFilterVoReq(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq) {
      this.productFilterVoReq = productFilterVoReq;
      return this;
    }

    public void unsetProductFilterVoReq() {
      this.productFilterVoReq = null;
    }

    /** Returns true if field productFilterVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductFilterVoReq() {
      return this.productFilterVoReq != null;
    }

    public void setProductFilterVoReqIsSet(boolean value) {
      if (!value) {
        this.productFilterVoReq = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public findSeckillByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_FILTER_VO_REQ:
        if (value == null) {
          unsetProductFilterVoReq();
        } else {
          setProductFilterVoReq((com.froad.thrift.vo.ProductFilterVoReq)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_FILTER_VO_REQ:
        return getProductFilterVoReq();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_FILTER_VO_REQ:
        return isSetProductFilterVoReq();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findSeckillByPage_args)
        return this.equals((findSeckillByPage_args)that);
      return false;
    }

    public boolean equals(findSeckillByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_productFilterVoReq = true && this.isSetProductFilterVoReq();
      boolean that_present_productFilterVoReq = true && that.isSetProductFilterVoReq();
      if (this_present_productFilterVoReq || that_present_productFilterVoReq) {
        if (!(this_present_productFilterVoReq && that_present_productFilterVoReq))
          return false;
        if (!this.productFilterVoReq.equals(that.productFilterVoReq))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productFilterVoReq = true && (isSetProductFilterVoReq());
      list.add(present_productFilterVoReq);
      if (present_productFilterVoReq)
        list.add(productFilterVoReq);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findSeckillByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductFilterVoReq()).compareTo(other.isSetProductFilterVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductFilterVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productFilterVoReq, other.productFilterVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findSeckillByPage_args(");
      boolean first = true;

      sb.append("productFilterVoReq:");
      if (this.productFilterVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productFilterVoReq);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productFilterVoReq != null) {
        productFilterVoReq.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSeckillByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findSeckillByPage_argsStandardScheme getScheme() {
        return new findSeckillByPage_argsStandardScheme();
      }
    }

    private static class findSeckillByPage_argsStandardScheme extends StandardScheme<findSeckillByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSeckillByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_FILTER_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productFilterVoReq = new com.froad.thrift.vo.ProductFilterVoReq();
                struct.productFilterVoReq.read(iprot);
                struct.setProductFilterVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSeckillByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productFilterVoReq != null) {
          oprot.writeFieldBegin(PRODUCT_FILTER_VO_REQ_FIELD_DESC);
          struct.productFilterVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSeckillByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findSeckillByPage_argsTupleScheme getScheme() {
        return new findSeckillByPage_argsTupleScheme();
      }
    }

    private static class findSeckillByPage_argsTupleScheme extends TupleScheme<findSeckillByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSeckillByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductFilterVoReq()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductFilterVoReq()) {
          struct.productFilterVoReq.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSeckillByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productFilterVoReq = new com.froad.thrift.vo.ProductFilterVoReq();
          struct.productFilterVoReq.read(iprot);
          struct.setProductFilterVoReqIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class findSeckillByPage_result implements org.apache.thrift.TBase<findSeckillByPage_result, findSeckillByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findSeckillByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findSeckillByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findSeckillByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findSeckillByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductSeckillPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductSeckillPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findSeckillByPage_result.class, metaDataMap);
    }

    public findSeckillByPage_result() {
    }

    public findSeckillByPage_result(
      com.froad.thrift.vo.ProductSeckillPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSeckillByPage_result(findSeckillByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductSeckillPageVo(other.success);
      }
    }

    public findSeckillByPage_result deepCopy() {
      return new findSeckillByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductSeckillPageVo getSuccess() {
      return this.success;
    }

    public findSeckillByPage_result setSuccess(com.froad.thrift.vo.ProductSeckillPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductSeckillPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findSeckillByPage_result)
        return this.equals((findSeckillByPage_result)that);
      return false;
    }

    public boolean equals(findSeckillByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findSeckillByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findSeckillByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findSeckillByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findSeckillByPage_resultStandardScheme getScheme() {
        return new findSeckillByPage_resultStandardScheme();
      }
    }

    private static class findSeckillByPage_resultStandardScheme extends StandardScheme<findSeckillByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findSeckillByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductSeckillPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findSeckillByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findSeckillByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findSeckillByPage_resultTupleScheme getScheme() {
        return new findSeckillByPage_resultTupleScheme();
      }
    }

    private static class findSeckillByPage_resultTupleScheme extends TupleScheme<findSeckillByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findSeckillByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findSeckillByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductSeckillPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findH5SeckillByPage_args implements org.apache.thrift.TBase<findH5SeckillByPage_args, findH5SeckillByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findH5SeckillByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findH5SeckillByPage_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_FILTER_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productFilterVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findH5SeckillByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findH5SeckillByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_FILTER_VO_REQ((short)1, "productFilterVoReq"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_FILTER_VO_REQ
            return PRODUCT_FILTER_VO_REQ;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_FILTER_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("productFilterVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductFilterVoReq.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findH5SeckillByPage_args.class, metaDataMap);
    }

    public findH5SeckillByPage_args() {
    }

    public findH5SeckillByPage_args(
      com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.productFilterVoReq = productFilterVoReq;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findH5SeckillByPage_args(findH5SeckillByPage_args other) {
      if (other.isSetProductFilterVoReq()) {
        this.productFilterVoReq = new com.froad.thrift.vo.ProductFilterVoReq(other.productFilterVoReq);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public findH5SeckillByPage_args deepCopy() {
      return new findH5SeckillByPage_args(this);
    }

    @Override
    public void clear() {
      this.productFilterVoReq = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.ProductFilterVoReq getProductFilterVoReq() {
      return this.productFilterVoReq;
    }

    public findH5SeckillByPage_args setProductFilterVoReq(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq) {
      this.productFilterVoReq = productFilterVoReq;
      return this;
    }

    public void unsetProductFilterVoReq() {
      this.productFilterVoReq = null;
    }

    /** Returns true if field productFilterVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductFilterVoReq() {
      return this.productFilterVoReq != null;
    }

    public void setProductFilterVoReqIsSet(boolean value) {
      if (!value) {
        this.productFilterVoReq = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public findH5SeckillByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_FILTER_VO_REQ:
        if (value == null) {
          unsetProductFilterVoReq();
        } else {
          setProductFilterVoReq((com.froad.thrift.vo.ProductFilterVoReq)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_FILTER_VO_REQ:
        return getProductFilterVoReq();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_FILTER_VO_REQ:
        return isSetProductFilterVoReq();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findH5SeckillByPage_args)
        return this.equals((findH5SeckillByPage_args)that);
      return false;
    }

    public boolean equals(findH5SeckillByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_productFilterVoReq = true && this.isSetProductFilterVoReq();
      boolean that_present_productFilterVoReq = true && that.isSetProductFilterVoReq();
      if (this_present_productFilterVoReq || that_present_productFilterVoReq) {
        if (!(this_present_productFilterVoReq && that_present_productFilterVoReq))
          return false;
        if (!this.productFilterVoReq.equals(that.productFilterVoReq))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productFilterVoReq = true && (isSetProductFilterVoReq());
      list.add(present_productFilterVoReq);
      if (present_productFilterVoReq)
        list.add(productFilterVoReq);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findH5SeckillByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductFilterVoReq()).compareTo(other.isSetProductFilterVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductFilterVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productFilterVoReq, other.productFilterVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findH5SeckillByPage_args(");
      boolean first = true;

      sb.append("productFilterVoReq:");
      if (this.productFilterVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productFilterVoReq);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productFilterVoReq != null) {
        productFilterVoReq.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findH5SeckillByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findH5SeckillByPage_argsStandardScheme getScheme() {
        return new findH5SeckillByPage_argsStandardScheme();
      }
    }

    private static class findH5SeckillByPage_argsStandardScheme extends StandardScheme<findH5SeckillByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findH5SeckillByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_FILTER_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productFilterVoReq = new com.froad.thrift.vo.ProductFilterVoReq();
                struct.productFilterVoReq.read(iprot);
                struct.setProductFilterVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findH5SeckillByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productFilterVoReq != null) {
          oprot.writeFieldBegin(PRODUCT_FILTER_VO_REQ_FIELD_DESC);
          struct.productFilterVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findH5SeckillByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findH5SeckillByPage_argsTupleScheme getScheme() {
        return new findH5SeckillByPage_argsTupleScheme();
      }
    }

    private static class findH5SeckillByPage_argsTupleScheme extends TupleScheme<findH5SeckillByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findH5SeckillByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductFilterVoReq()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductFilterVoReq()) {
          struct.productFilterVoReq.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findH5SeckillByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productFilterVoReq = new com.froad.thrift.vo.ProductFilterVoReq();
          struct.productFilterVoReq.read(iprot);
          struct.setProductFilterVoReqIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class findH5SeckillByPage_result implements org.apache.thrift.TBase<findH5SeckillByPage_result, findH5SeckillByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findH5SeckillByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findH5SeckillByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findH5SeckillByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findH5SeckillByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductSeckillInfoPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductSeckillInfoPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findH5SeckillByPage_result.class, metaDataMap);
    }

    public findH5SeckillByPage_result() {
    }

    public findH5SeckillByPage_result(
      com.froad.thrift.vo.ProductSeckillInfoPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findH5SeckillByPage_result(findH5SeckillByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductSeckillInfoPageVo(other.success);
      }
    }

    public findH5SeckillByPage_result deepCopy() {
      return new findH5SeckillByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductSeckillInfoPageVo getSuccess() {
      return this.success;
    }

    public findH5SeckillByPage_result setSuccess(com.froad.thrift.vo.ProductSeckillInfoPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductSeckillInfoPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findH5SeckillByPage_result)
        return this.equals((findH5SeckillByPage_result)that);
      return false;
    }

    public boolean equals(findH5SeckillByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findH5SeckillByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findH5SeckillByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findH5SeckillByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findH5SeckillByPage_resultStandardScheme getScheme() {
        return new findH5SeckillByPage_resultStandardScheme();
      }
    }

    private static class findH5SeckillByPage_resultStandardScheme extends StandardScheme<findH5SeckillByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findH5SeckillByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductSeckillInfoPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findH5SeckillByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findH5SeckillByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findH5SeckillByPage_resultTupleScheme getScheme() {
        return new findH5SeckillByPage_resultTupleScheme();
      }
    }

    private static class findH5SeckillByPage_resultTupleScheme extends TupleScheme<findH5SeckillByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findH5SeckillByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findH5SeckillByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductSeckillInfoPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
