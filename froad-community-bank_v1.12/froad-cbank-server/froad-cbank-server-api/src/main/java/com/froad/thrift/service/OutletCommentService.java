/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class OutletCommentService {

  /**
   * OutletCommentService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 OutletComment
     * @param OutletComment
     * @return OutletCommentAddVoRes
     * 
     * @param originVo
     * @param outletCommentVo
     */
    public com.froad.thrift.vo.OutletCommentAddVoRes addOutletComment(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException;

    /**
     * 删除 OutletComment
     * @param OutletComment
     * @return ResultVo
     * 
     * @param originVo
     * @param id
     */
    public com.froad.thrift.vo.ResultVo deleteOutletComment(com.froad.thrift.vo.OriginVo originVo, String id) throws org.apache.thrift.TException;

    /**
     * 修改 OutletComment
     * @param OutletComment
     * @return ResultVo
     * 
     * @param originVo
     * @param outletCommentVo
     */
    public com.froad.thrift.vo.ResultVo updateOutletComment(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException;

    /**
     * 查询 OutletComment
     * @param string id
     * @return OutletCommentVo
     * 
     * @param id
     */
    public com.froad.thrift.vo.OutletCommentVo getOutletCommentById(String id) throws org.apache.thrift.TException;

    /**
     * 查询 OutletComment
     * @param OutletComment
     * @return List<OutletCommentVo>
     * 
     * @param outletCommentVo
     */
    public List<com.froad.thrift.vo.OutletCommentVo> getOutletComment(com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 OutletComment
     * @param OutletComment
     * @return List<OutletCommentVo>
     * 
     * @param page
     * @param outletCommentVo
     */
    public com.froad.thrift.vo.OutletCommentPageVoRes getOutletCommentByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException;

    /**
     * 增加 评论回复
     * @param OutletComment
     * @return ResultVo
     * 
     * @param originVo
     * @param outletCommentVo
     */
    public com.froad.thrift.vo.ResultVo addOutletCommentOfRecomment(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException;

    /**
     * 门店评论数量查询
     * @param outletCommentVo - clientId merchantId outletId
     * @return i32
     * 
     * @param outletCommentVo
     */
    public int getOutletCommentSum(com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException;

    /**
     * 门店评论级别数量查询
     * @param outletCommentVo - merchantId outletId
     * @return OutletCommentLevelAmount
     * 
     * @param outletCommentVo
     */
    public com.froad.thrift.vo.OutletCommentLevelAmountVo getOutletCommentLevelAmount(com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException;

    /**
     * 商户评论级别数量查询
     * @param outletCommentVo - merchantId
     * @return list<OutletCommentLevelAmount>
     * 
     * @param merchantId
     */
    public List<com.froad.thrift.vo.OutletCommentLevelAmountVo> getMerchantCommentLevelAmount(String merchantId) throws org.apache.thrift.TException;

    /**
     * 分页查询 OutletComment
     * @param OutletComment(+orgCode)
     * @return Page
     * 
     * @param page
     * @param outletCommentVo
     */
    public com.froad.thrift.vo.OutletCommentPageVoRes getOutletCommentPageByOrgCode(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException;

    /**
     * 是否存某会员在某天针对某门店的评论
     * @return bool
     * 
     * @param memberCode
     * @param outletId
     * @param time
     */
    public boolean isExistComment(String memberCode, String outletId, long time) throws org.apache.thrift.TException;

    /**
     * 是否存在某会员已经对门店进行了面对面的评论.
     * @return bool
     * 
     * @param memberCode
     * @param outletId
     * @param orderId
     */
    public boolean isExitsFaceToFaceComment(String memberCode, String outletId, String orderId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addOutletComment(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteOutletComment(com.froad.thrift.vo.OriginVo originVo, String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateOutletComment(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletCommentById(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletComment(com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletCommentByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addOutletCommentOfRecomment(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletCommentSum(com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletCommentLevelAmount(com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantCommentLevelAmount(String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletCommentPageByOrgCode(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isExistComment(String memberCode, String outletId, long time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isExitsFaceToFaceComment(String memberCode, String outletId, String orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.OutletCommentAddVoRes addOutletComment(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      send_addOutletComment(originVo, outletCommentVo);
      return recv_addOutletComment();
    }

    public void send_addOutletComment(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      addOutletComment_args args = new addOutletComment_args();
      args.setOriginVo(originVo);
      args.setOutletCommentVo(outletCommentVo);
      sendBase("addOutletComment", args);
    }

    public com.froad.thrift.vo.OutletCommentAddVoRes recv_addOutletComment() throws org.apache.thrift.TException
    {
      addOutletComment_result result = new addOutletComment_result();
      receiveBase(result, "addOutletComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOutletComment failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteOutletComment(com.froad.thrift.vo.OriginVo originVo, String id) throws org.apache.thrift.TException
    {
      send_deleteOutletComment(originVo, id);
      return recv_deleteOutletComment();
    }

    public void send_deleteOutletComment(com.froad.thrift.vo.OriginVo originVo, String id) throws org.apache.thrift.TException
    {
      deleteOutletComment_args args = new deleteOutletComment_args();
      args.setOriginVo(originVo);
      args.setId(id);
      sendBase("deleteOutletComment", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteOutletComment() throws org.apache.thrift.TException
    {
      deleteOutletComment_result result = new deleteOutletComment_result();
      receiveBase(result, "deleteOutletComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteOutletComment failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateOutletComment(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      send_updateOutletComment(originVo, outletCommentVo);
      return recv_updateOutletComment();
    }

    public void send_updateOutletComment(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      updateOutletComment_args args = new updateOutletComment_args();
      args.setOriginVo(originVo);
      args.setOutletCommentVo(outletCommentVo);
      sendBase("updateOutletComment", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateOutletComment() throws org.apache.thrift.TException
    {
      updateOutletComment_result result = new updateOutletComment_result();
      receiveBase(result, "updateOutletComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateOutletComment failed: unknown result");
    }

    public com.froad.thrift.vo.OutletCommentVo getOutletCommentById(String id) throws org.apache.thrift.TException
    {
      send_getOutletCommentById(id);
      return recv_getOutletCommentById();
    }

    public void send_getOutletCommentById(String id) throws org.apache.thrift.TException
    {
      getOutletCommentById_args args = new getOutletCommentById_args();
      args.setId(id);
      sendBase("getOutletCommentById", args);
    }

    public com.froad.thrift.vo.OutletCommentVo recv_getOutletCommentById() throws org.apache.thrift.TException
    {
      getOutletCommentById_result result = new getOutletCommentById_result();
      receiveBase(result, "getOutletCommentById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletCommentById failed: unknown result");
    }

    public List<com.froad.thrift.vo.OutletCommentVo> getOutletComment(com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      send_getOutletComment(outletCommentVo);
      return recv_getOutletComment();
    }

    public void send_getOutletComment(com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      getOutletComment_args args = new getOutletComment_args();
      args.setOutletCommentVo(outletCommentVo);
      sendBase("getOutletComment", args);
    }

    public List<com.froad.thrift.vo.OutletCommentVo> recv_getOutletComment() throws org.apache.thrift.TException
    {
      getOutletComment_result result = new getOutletComment_result();
      receiveBase(result, "getOutletComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletComment failed: unknown result");
    }

    public com.froad.thrift.vo.OutletCommentPageVoRes getOutletCommentByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      send_getOutletCommentByPage(page, outletCommentVo);
      return recv_getOutletCommentByPage();
    }

    public void send_getOutletCommentByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      getOutletCommentByPage_args args = new getOutletCommentByPage_args();
      args.setPage(page);
      args.setOutletCommentVo(outletCommentVo);
      sendBase("getOutletCommentByPage", args);
    }

    public com.froad.thrift.vo.OutletCommentPageVoRes recv_getOutletCommentByPage() throws org.apache.thrift.TException
    {
      getOutletCommentByPage_result result = new getOutletCommentByPage_result();
      receiveBase(result, "getOutletCommentByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletCommentByPage failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo addOutletCommentOfRecomment(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      send_addOutletCommentOfRecomment(originVo, outletCommentVo);
      return recv_addOutletCommentOfRecomment();
    }

    public void send_addOutletCommentOfRecomment(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      addOutletCommentOfRecomment_args args = new addOutletCommentOfRecomment_args();
      args.setOriginVo(originVo);
      args.setOutletCommentVo(outletCommentVo);
      sendBase("addOutletCommentOfRecomment", args);
    }

    public com.froad.thrift.vo.ResultVo recv_addOutletCommentOfRecomment() throws org.apache.thrift.TException
    {
      addOutletCommentOfRecomment_result result = new addOutletCommentOfRecomment_result();
      receiveBase(result, "addOutletCommentOfRecomment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOutletCommentOfRecomment failed: unknown result");
    }

    public int getOutletCommentSum(com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      send_getOutletCommentSum(outletCommentVo);
      return recv_getOutletCommentSum();
    }

    public void send_getOutletCommentSum(com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      getOutletCommentSum_args args = new getOutletCommentSum_args();
      args.setOutletCommentVo(outletCommentVo);
      sendBase("getOutletCommentSum", args);
    }

    public int recv_getOutletCommentSum() throws org.apache.thrift.TException
    {
      getOutletCommentSum_result result = new getOutletCommentSum_result();
      receiveBase(result, "getOutletCommentSum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletCommentSum failed: unknown result");
    }

    public com.froad.thrift.vo.OutletCommentLevelAmountVo getOutletCommentLevelAmount(com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      send_getOutletCommentLevelAmount(outletCommentVo);
      return recv_getOutletCommentLevelAmount();
    }

    public void send_getOutletCommentLevelAmount(com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      getOutletCommentLevelAmount_args args = new getOutletCommentLevelAmount_args();
      args.setOutletCommentVo(outletCommentVo);
      sendBase("getOutletCommentLevelAmount", args);
    }

    public com.froad.thrift.vo.OutletCommentLevelAmountVo recv_getOutletCommentLevelAmount() throws org.apache.thrift.TException
    {
      getOutletCommentLevelAmount_result result = new getOutletCommentLevelAmount_result();
      receiveBase(result, "getOutletCommentLevelAmount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletCommentLevelAmount failed: unknown result");
    }

    public List<com.froad.thrift.vo.OutletCommentLevelAmountVo> getMerchantCommentLevelAmount(String merchantId) throws org.apache.thrift.TException
    {
      send_getMerchantCommentLevelAmount(merchantId);
      return recv_getMerchantCommentLevelAmount();
    }

    public void send_getMerchantCommentLevelAmount(String merchantId) throws org.apache.thrift.TException
    {
      getMerchantCommentLevelAmount_args args = new getMerchantCommentLevelAmount_args();
      args.setMerchantId(merchantId);
      sendBase("getMerchantCommentLevelAmount", args);
    }

    public List<com.froad.thrift.vo.OutletCommentLevelAmountVo> recv_getMerchantCommentLevelAmount() throws org.apache.thrift.TException
    {
      getMerchantCommentLevelAmount_result result = new getMerchantCommentLevelAmount_result();
      receiveBase(result, "getMerchantCommentLevelAmount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantCommentLevelAmount failed: unknown result");
    }

    public com.froad.thrift.vo.OutletCommentPageVoRes getOutletCommentPageByOrgCode(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      send_getOutletCommentPageByOrgCode(page, outletCommentVo);
      return recv_getOutletCommentPageByOrgCode();
    }

    public void send_getOutletCommentPageByOrgCode(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletCommentVo outletCommentVo) throws org.apache.thrift.TException
    {
      getOutletCommentPageByOrgCode_args args = new getOutletCommentPageByOrgCode_args();
      args.setPage(page);
      args.setOutletCommentVo(outletCommentVo);
      sendBase("getOutletCommentPageByOrgCode", args);
    }

    public com.froad.thrift.vo.OutletCommentPageVoRes recv_getOutletCommentPageByOrgCode() throws org.apache.thrift.TException
    {
      getOutletCommentPageByOrgCode_result result = new getOutletCommentPageByOrgCode_result();
      receiveBase(result, "getOutletCommentPageByOrgCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletCommentPageByOrgCode failed: unknown result");
    }

    public boolean isExistComment(String memberCode, String outletId, long time) throws org.apache.thrift.TException
    {
      send_isExistComment(memberCode, outletId, time);
      return recv_isExistComment();
    }

    public void send_isExistComment(String memberCode, String outletId, long time) throws org.apache.thrift.TException
    {
      isExistComment_args args = new isExistComment_args();
      args.setMemberCode(memberCode);
      args.setOutletId(outletId);
      args.setTime(time);
      sendBase("isExistComment", args);
    }

    public boolean recv_isExistComment() throws org.apache.thrift.TException
    {
      isExistComment_result result = new isExistComment_result();
      receiveBase(result, "isExistComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isExistComment failed: unknown result");
    }

    public boolean isExitsFaceToFaceComment(String memberCode, String outletId, String orderId) throws org.apache.thrift.TException
    {
      send_isExitsFaceToFaceComment(memberCode, outletId, orderId);
      return recv_isExitsFaceToFaceComment();
    }

    public void send_isExitsFaceToFaceComment(String memberCode, String outletId, String orderId) throws org.apache.thrift.TException
    {
      isExitsFaceToFaceComment_args args = new isExitsFaceToFaceComment_args();
      args.setMemberCode(memberCode);
      args.setOutletId(outletId);
      args.setOrderId(orderId);
      sendBase("isExitsFaceToFaceComment", args);
    }

    public boolean recv_isExitsFaceToFaceComment() throws org.apache.thrift.TException
    {
      isExitsFaceToFaceComment_result result = new isExitsFaceToFaceComment_result();
      receiveBase(result, "isExitsFaceToFaceComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isExitsFaceToFaceComment failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addOutletComment(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOutletComment_call method_call = new addOutletComment_call(originVo, outletCommentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOutletComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.OutletCommentVo outletCommentVo;
      public addOutletComment_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.outletCommentVo = outletCommentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOutletComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOutletComment_args args = new addOutletComment_args();
        args.setOriginVo(originVo);
        args.setOutletCommentVo(outletCommentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletCommentAddVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addOutletComment();
      }
    }

    public void deleteOutletComment(com.froad.thrift.vo.OriginVo originVo, String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteOutletComment_call method_call = new deleteOutletComment_call(originVo, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteOutletComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String id;
      public deleteOutletComment_call(com.froad.thrift.vo.OriginVo originVo, String id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteOutletComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteOutletComment_args args = new deleteOutletComment_args();
        args.setOriginVo(originVo);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteOutletComment();
      }
    }

    public void updateOutletComment(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateOutletComment_call method_call = new updateOutletComment_call(originVo, outletCommentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateOutletComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.OutletCommentVo outletCommentVo;
      public updateOutletComment_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.outletCommentVo = outletCommentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateOutletComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateOutletComment_args args = new updateOutletComment_args();
        args.setOriginVo(originVo);
        args.setOutletCommentVo(outletCommentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateOutletComment();
      }
    }

    public void getOutletCommentById(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletCommentById_call method_call = new getOutletCommentById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletCommentById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public getOutletCommentById_call(String id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletCommentById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletCommentById_args args = new getOutletCommentById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletCommentVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletCommentById();
      }
    }

    public void getOutletComment(com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletComment_call method_call = new getOutletComment_call(outletCommentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OutletCommentVo outletCommentVo;
      public getOutletComment_call(com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletCommentVo = outletCommentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletComment_args args = new getOutletComment_args();
        args.setOutletCommentVo(outletCommentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.OutletCommentVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletComment();
      }
    }

    public void getOutletCommentByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletCommentByPage_call method_call = new getOutletCommentByPage_call(page, outletCommentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletCommentByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.OutletCommentVo outletCommentVo;
      public getOutletCommentByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.outletCommentVo = outletCommentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletCommentByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletCommentByPage_args args = new getOutletCommentByPage_args();
        args.setPage(page);
        args.setOutletCommentVo(outletCommentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletCommentPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletCommentByPage();
      }
    }

    public void addOutletCommentOfRecomment(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOutletCommentOfRecomment_call method_call = new addOutletCommentOfRecomment_call(originVo, outletCommentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOutletCommentOfRecomment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.OutletCommentVo outletCommentVo;
      public addOutletCommentOfRecomment_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.outletCommentVo = outletCommentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOutletCommentOfRecomment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOutletCommentOfRecomment_args args = new addOutletCommentOfRecomment_args();
        args.setOriginVo(originVo);
        args.setOutletCommentVo(outletCommentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addOutletCommentOfRecomment();
      }
    }

    public void getOutletCommentSum(com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletCommentSum_call method_call = new getOutletCommentSum_call(outletCommentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletCommentSum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OutletCommentVo outletCommentVo;
      public getOutletCommentSum_call(com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletCommentVo = outletCommentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletCommentSum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletCommentSum_args args = new getOutletCommentSum_args();
        args.setOutletCommentVo(outletCommentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletCommentSum();
      }
    }

    public void getOutletCommentLevelAmount(com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletCommentLevelAmount_call method_call = new getOutletCommentLevelAmount_call(outletCommentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletCommentLevelAmount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OutletCommentVo outletCommentVo;
      public getOutletCommentLevelAmount_call(com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletCommentVo = outletCommentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletCommentLevelAmount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletCommentLevelAmount_args args = new getOutletCommentLevelAmount_args();
        args.setOutletCommentVo(outletCommentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletCommentLevelAmountVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletCommentLevelAmount();
      }
    }

    public void getMerchantCommentLevelAmount(String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantCommentLevelAmount_call method_call = new getMerchantCommentLevelAmount_call(merchantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantCommentLevelAmount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      public getMerchantCommentLevelAmount_call(String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantCommentLevelAmount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantCommentLevelAmount_args args = new getMerchantCommentLevelAmount_args();
        args.setMerchantId(merchantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.OutletCommentLevelAmountVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantCommentLevelAmount();
      }
    }

    public void getOutletCommentPageByOrgCode(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletCommentPageByOrgCode_call method_call = new getOutletCommentPageByOrgCode_call(page, outletCommentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletCommentPageByOrgCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.OutletCommentVo outletCommentVo;
      public getOutletCommentPageByOrgCode_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.OutletCommentVo outletCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.outletCommentVo = outletCommentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletCommentPageByOrgCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletCommentPageByOrgCode_args args = new getOutletCommentPageByOrgCode_args();
        args.setPage(page);
        args.setOutletCommentVo(outletCommentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletCommentPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletCommentPageByOrgCode();
      }
    }

    public void isExistComment(String memberCode, String outletId, long time, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isExistComment_call method_call = new isExistComment_call(memberCode, outletId, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isExistComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String memberCode;
      private String outletId;
      private long time;
      public isExistComment_call(String memberCode, String outletId, long time, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.outletId = outletId;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isExistComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isExistComment_args args = new isExistComment_args();
        args.setMemberCode(memberCode);
        args.setOutletId(outletId);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isExistComment();
      }
    }

    public void isExitsFaceToFaceComment(String memberCode, String outletId, String orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isExitsFaceToFaceComment_call method_call = new isExitsFaceToFaceComment_call(memberCode, outletId, orderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isExitsFaceToFaceComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String memberCode;
      private String outletId;
      private String orderId;
      public isExitsFaceToFaceComment_call(String memberCode, String outletId, String orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.outletId = outletId;
        this.orderId = orderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isExitsFaceToFaceComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isExitsFaceToFaceComment_args args = new isExitsFaceToFaceComment_args();
        args.setMemberCode(memberCode);
        args.setOutletId(outletId);
        args.setOrderId(orderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isExitsFaceToFaceComment();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addOutletComment", new addOutletComment());
      processMap.put("deleteOutletComment", new deleteOutletComment());
      processMap.put("updateOutletComment", new updateOutletComment());
      processMap.put("getOutletCommentById", new getOutletCommentById());
      processMap.put("getOutletComment", new getOutletComment());
      processMap.put("getOutletCommentByPage", new getOutletCommentByPage());
      processMap.put("addOutletCommentOfRecomment", new addOutletCommentOfRecomment());
      processMap.put("getOutletCommentSum", new getOutletCommentSum());
      processMap.put("getOutletCommentLevelAmount", new getOutletCommentLevelAmount());
      processMap.put("getMerchantCommentLevelAmount", new getMerchantCommentLevelAmount());
      processMap.put("getOutletCommentPageByOrgCode", new getOutletCommentPageByOrgCode());
      processMap.put("isExistComment", new isExistComment());
      processMap.put("isExitsFaceToFaceComment", new isExitsFaceToFaceComment());
      return processMap;
    }

    public static class addOutletComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOutletComment_args> {
      public addOutletComment() {
        super("addOutletComment");
      }

      public addOutletComment_args getEmptyArgsInstance() {
        return new addOutletComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOutletComment_result getResult(I iface, addOutletComment_args args) throws org.apache.thrift.TException {
        addOutletComment_result result = new addOutletComment_result();
        result.success = iface.addOutletComment(args.originVo, args.outletCommentVo);
        return result;
      }
    }

    public static class deleteOutletComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteOutletComment_args> {
      public deleteOutletComment() {
        super("deleteOutletComment");
      }

      public deleteOutletComment_args getEmptyArgsInstance() {
        return new deleteOutletComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteOutletComment_result getResult(I iface, deleteOutletComment_args args) throws org.apache.thrift.TException {
        deleteOutletComment_result result = new deleteOutletComment_result();
        result.success = iface.deleteOutletComment(args.originVo, args.id);
        return result;
      }
    }

    public static class updateOutletComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateOutletComment_args> {
      public updateOutletComment() {
        super("updateOutletComment");
      }

      public updateOutletComment_args getEmptyArgsInstance() {
        return new updateOutletComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateOutletComment_result getResult(I iface, updateOutletComment_args args) throws org.apache.thrift.TException {
        updateOutletComment_result result = new updateOutletComment_result();
        result.success = iface.updateOutletComment(args.originVo, args.outletCommentVo);
        return result;
      }
    }

    public static class getOutletCommentById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletCommentById_args> {
      public getOutletCommentById() {
        super("getOutletCommentById");
      }

      public getOutletCommentById_args getEmptyArgsInstance() {
        return new getOutletCommentById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletCommentById_result getResult(I iface, getOutletCommentById_args args) throws org.apache.thrift.TException {
        getOutletCommentById_result result = new getOutletCommentById_result();
        result.success = iface.getOutletCommentById(args.id);
        return result;
      }
    }

    public static class getOutletComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletComment_args> {
      public getOutletComment() {
        super("getOutletComment");
      }

      public getOutletComment_args getEmptyArgsInstance() {
        return new getOutletComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletComment_result getResult(I iface, getOutletComment_args args) throws org.apache.thrift.TException {
        getOutletComment_result result = new getOutletComment_result();
        result.success = iface.getOutletComment(args.outletCommentVo);
        return result;
      }
    }

    public static class getOutletCommentByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletCommentByPage_args> {
      public getOutletCommentByPage() {
        super("getOutletCommentByPage");
      }

      public getOutletCommentByPage_args getEmptyArgsInstance() {
        return new getOutletCommentByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletCommentByPage_result getResult(I iface, getOutletCommentByPage_args args) throws org.apache.thrift.TException {
        getOutletCommentByPage_result result = new getOutletCommentByPage_result();
        result.success = iface.getOutletCommentByPage(args.page, args.outletCommentVo);
        return result;
      }
    }

    public static class addOutletCommentOfRecomment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOutletCommentOfRecomment_args> {
      public addOutletCommentOfRecomment() {
        super("addOutletCommentOfRecomment");
      }

      public addOutletCommentOfRecomment_args getEmptyArgsInstance() {
        return new addOutletCommentOfRecomment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOutletCommentOfRecomment_result getResult(I iface, addOutletCommentOfRecomment_args args) throws org.apache.thrift.TException {
        addOutletCommentOfRecomment_result result = new addOutletCommentOfRecomment_result();
        result.success = iface.addOutletCommentOfRecomment(args.originVo, args.outletCommentVo);
        return result;
      }
    }

    public static class getOutletCommentSum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletCommentSum_args> {
      public getOutletCommentSum() {
        super("getOutletCommentSum");
      }

      public getOutletCommentSum_args getEmptyArgsInstance() {
        return new getOutletCommentSum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletCommentSum_result getResult(I iface, getOutletCommentSum_args args) throws org.apache.thrift.TException {
        getOutletCommentSum_result result = new getOutletCommentSum_result();
        result.success = iface.getOutletCommentSum(args.outletCommentVo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getOutletCommentLevelAmount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletCommentLevelAmount_args> {
      public getOutletCommentLevelAmount() {
        super("getOutletCommentLevelAmount");
      }

      public getOutletCommentLevelAmount_args getEmptyArgsInstance() {
        return new getOutletCommentLevelAmount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletCommentLevelAmount_result getResult(I iface, getOutletCommentLevelAmount_args args) throws org.apache.thrift.TException {
        getOutletCommentLevelAmount_result result = new getOutletCommentLevelAmount_result();
        result.success = iface.getOutletCommentLevelAmount(args.outletCommentVo);
        return result;
      }
    }

    public static class getMerchantCommentLevelAmount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantCommentLevelAmount_args> {
      public getMerchantCommentLevelAmount() {
        super("getMerchantCommentLevelAmount");
      }

      public getMerchantCommentLevelAmount_args getEmptyArgsInstance() {
        return new getMerchantCommentLevelAmount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantCommentLevelAmount_result getResult(I iface, getMerchantCommentLevelAmount_args args) throws org.apache.thrift.TException {
        getMerchantCommentLevelAmount_result result = new getMerchantCommentLevelAmount_result();
        result.success = iface.getMerchantCommentLevelAmount(args.merchantId);
        return result;
      }
    }

    public static class getOutletCommentPageByOrgCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletCommentPageByOrgCode_args> {
      public getOutletCommentPageByOrgCode() {
        super("getOutletCommentPageByOrgCode");
      }

      public getOutletCommentPageByOrgCode_args getEmptyArgsInstance() {
        return new getOutletCommentPageByOrgCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletCommentPageByOrgCode_result getResult(I iface, getOutletCommentPageByOrgCode_args args) throws org.apache.thrift.TException {
        getOutletCommentPageByOrgCode_result result = new getOutletCommentPageByOrgCode_result();
        result.success = iface.getOutletCommentPageByOrgCode(args.page, args.outletCommentVo);
        return result;
      }
    }

    public static class isExistComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isExistComment_args> {
      public isExistComment() {
        super("isExistComment");
      }

      public isExistComment_args getEmptyArgsInstance() {
        return new isExistComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isExistComment_result getResult(I iface, isExistComment_args args) throws org.apache.thrift.TException {
        isExistComment_result result = new isExistComment_result();
        result.success = iface.isExistComment(args.memberCode, args.outletId, args.time);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class isExitsFaceToFaceComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isExitsFaceToFaceComment_args> {
      public isExitsFaceToFaceComment() {
        super("isExitsFaceToFaceComment");
      }

      public isExitsFaceToFaceComment_args getEmptyArgsInstance() {
        return new isExitsFaceToFaceComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isExitsFaceToFaceComment_result getResult(I iface, isExitsFaceToFaceComment_args args) throws org.apache.thrift.TException {
        isExitsFaceToFaceComment_result result = new isExitsFaceToFaceComment_result();
        result.success = iface.isExitsFaceToFaceComment(args.memberCode, args.outletId, args.orderId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addOutletComment", new addOutletComment());
      processMap.put("deleteOutletComment", new deleteOutletComment());
      processMap.put("updateOutletComment", new updateOutletComment());
      processMap.put("getOutletCommentById", new getOutletCommentById());
      processMap.put("getOutletComment", new getOutletComment());
      processMap.put("getOutletCommentByPage", new getOutletCommentByPage());
      processMap.put("addOutletCommentOfRecomment", new addOutletCommentOfRecomment());
      processMap.put("getOutletCommentSum", new getOutletCommentSum());
      processMap.put("getOutletCommentLevelAmount", new getOutletCommentLevelAmount());
      processMap.put("getMerchantCommentLevelAmount", new getMerchantCommentLevelAmount());
      processMap.put("getOutletCommentPageByOrgCode", new getOutletCommentPageByOrgCode());
      processMap.put("isExistComment", new isExistComment());
      processMap.put("isExitsFaceToFaceComment", new isExitsFaceToFaceComment());
      return processMap;
    }

    public static class addOutletComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOutletComment_args, com.froad.thrift.vo.OutletCommentAddVoRes> {
      public addOutletComment() {
        super("addOutletComment");
      }

      public addOutletComment_args getEmptyArgsInstance() {
        return new addOutletComment_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletCommentAddVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletCommentAddVoRes>() { 
          public void onComplete(com.froad.thrift.vo.OutletCommentAddVoRes o) {
            addOutletComment_result result = new addOutletComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOutletComment_result result = new addOutletComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOutletComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletCommentAddVoRes> resultHandler) throws TException {
        iface.addOutletComment(args.originVo, args.outletCommentVo,resultHandler);
      }
    }

    public static class deleteOutletComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteOutletComment_args, com.froad.thrift.vo.ResultVo> {
      public deleteOutletComment() {
        super("deleteOutletComment");
      }

      public deleteOutletComment_args getEmptyArgsInstance() {
        return new deleteOutletComment_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteOutletComment_result result = new deleteOutletComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteOutletComment_result result = new deleteOutletComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteOutletComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteOutletComment(args.originVo, args.id,resultHandler);
      }
    }

    public static class updateOutletComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateOutletComment_args, com.froad.thrift.vo.ResultVo> {
      public updateOutletComment() {
        super("updateOutletComment");
      }

      public updateOutletComment_args getEmptyArgsInstance() {
        return new updateOutletComment_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateOutletComment_result result = new updateOutletComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateOutletComment_result result = new updateOutletComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateOutletComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateOutletComment(args.originVo, args.outletCommentVo,resultHandler);
      }
    }

    public static class getOutletCommentById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletCommentById_args, com.froad.thrift.vo.OutletCommentVo> {
      public getOutletCommentById() {
        super("getOutletCommentById");
      }

      public getOutletCommentById_args getEmptyArgsInstance() {
        return new getOutletCommentById_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletCommentVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletCommentVo>() { 
          public void onComplete(com.froad.thrift.vo.OutletCommentVo o) {
            getOutletCommentById_result result = new getOutletCommentById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletCommentById_result result = new getOutletCommentById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletCommentById_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletCommentVo> resultHandler) throws TException {
        iface.getOutletCommentById(args.id,resultHandler);
      }
    }

    public static class getOutletComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletComment_args, List<com.froad.thrift.vo.OutletCommentVo>> {
      public getOutletComment() {
        super("getOutletComment");
      }

      public getOutletComment_args getEmptyArgsInstance() {
        return new getOutletComment_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.OutletCommentVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.OutletCommentVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.OutletCommentVo> o) {
            getOutletComment_result result = new getOutletComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletComment_result result = new getOutletComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletComment_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.OutletCommentVo>> resultHandler) throws TException {
        iface.getOutletComment(args.outletCommentVo,resultHandler);
      }
    }

    public static class getOutletCommentByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletCommentByPage_args, com.froad.thrift.vo.OutletCommentPageVoRes> {
      public getOutletCommentByPage() {
        super("getOutletCommentByPage");
      }

      public getOutletCommentByPage_args getEmptyArgsInstance() {
        return new getOutletCommentByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletCommentPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletCommentPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.OutletCommentPageVoRes o) {
            getOutletCommentByPage_result result = new getOutletCommentByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletCommentByPage_result result = new getOutletCommentByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletCommentByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletCommentPageVoRes> resultHandler) throws TException {
        iface.getOutletCommentByPage(args.page, args.outletCommentVo,resultHandler);
      }
    }

    public static class addOutletCommentOfRecomment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOutletCommentOfRecomment_args, com.froad.thrift.vo.ResultVo> {
      public addOutletCommentOfRecomment() {
        super("addOutletCommentOfRecomment");
      }

      public addOutletCommentOfRecomment_args getEmptyArgsInstance() {
        return new addOutletCommentOfRecomment_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            addOutletCommentOfRecomment_result result = new addOutletCommentOfRecomment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOutletCommentOfRecomment_result result = new addOutletCommentOfRecomment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOutletCommentOfRecomment_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.addOutletCommentOfRecomment(args.originVo, args.outletCommentVo,resultHandler);
      }
    }

    public static class getOutletCommentSum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletCommentSum_args, Integer> {
      public getOutletCommentSum() {
        super("getOutletCommentSum");
      }

      public getOutletCommentSum_args getEmptyArgsInstance() {
        return new getOutletCommentSum_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getOutletCommentSum_result result = new getOutletCommentSum_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletCommentSum_result result = new getOutletCommentSum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletCommentSum_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getOutletCommentSum(args.outletCommentVo,resultHandler);
      }
    }

    public static class getOutletCommentLevelAmount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletCommentLevelAmount_args, com.froad.thrift.vo.OutletCommentLevelAmountVo> {
      public getOutletCommentLevelAmount() {
        super("getOutletCommentLevelAmount");
      }

      public getOutletCommentLevelAmount_args getEmptyArgsInstance() {
        return new getOutletCommentLevelAmount_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletCommentLevelAmountVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletCommentLevelAmountVo>() { 
          public void onComplete(com.froad.thrift.vo.OutletCommentLevelAmountVo o) {
            getOutletCommentLevelAmount_result result = new getOutletCommentLevelAmount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletCommentLevelAmount_result result = new getOutletCommentLevelAmount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletCommentLevelAmount_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletCommentLevelAmountVo> resultHandler) throws TException {
        iface.getOutletCommentLevelAmount(args.outletCommentVo,resultHandler);
      }
    }

    public static class getMerchantCommentLevelAmount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantCommentLevelAmount_args, List<com.froad.thrift.vo.OutletCommentLevelAmountVo>> {
      public getMerchantCommentLevelAmount() {
        super("getMerchantCommentLevelAmount");
      }

      public getMerchantCommentLevelAmount_args getEmptyArgsInstance() {
        return new getMerchantCommentLevelAmount_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.OutletCommentLevelAmountVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.OutletCommentLevelAmountVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.OutletCommentLevelAmountVo> o) {
            getMerchantCommentLevelAmount_result result = new getMerchantCommentLevelAmount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantCommentLevelAmount_result result = new getMerchantCommentLevelAmount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantCommentLevelAmount_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.OutletCommentLevelAmountVo>> resultHandler) throws TException {
        iface.getMerchantCommentLevelAmount(args.merchantId,resultHandler);
      }
    }

    public static class getOutletCommentPageByOrgCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletCommentPageByOrgCode_args, com.froad.thrift.vo.OutletCommentPageVoRes> {
      public getOutletCommentPageByOrgCode() {
        super("getOutletCommentPageByOrgCode");
      }

      public getOutletCommentPageByOrgCode_args getEmptyArgsInstance() {
        return new getOutletCommentPageByOrgCode_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletCommentPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletCommentPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.OutletCommentPageVoRes o) {
            getOutletCommentPageByOrgCode_result result = new getOutletCommentPageByOrgCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletCommentPageByOrgCode_result result = new getOutletCommentPageByOrgCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletCommentPageByOrgCode_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletCommentPageVoRes> resultHandler) throws TException {
        iface.getOutletCommentPageByOrgCode(args.page, args.outletCommentVo,resultHandler);
      }
    }

    public static class isExistComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isExistComment_args, Boolean> {
      public isExistComment() {
        super("isExistComment");
      }

      public isExistComment_args getEmptyArgsInstance() {
        return new isExistComment_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isExistComment_result result = new isExistComment_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isExistComment_result result = new isExistComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isExistComment_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isExistComment(args.memberCode, args.outletId, args.time,resultHandler);
      }
    }

    public static class isExitsFaceToFaceComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isExitsFaceToFaceComment_args, Boolean> {
      public isExitsFaceToFaceComment() {
        super("isExitsFaceToFaceComment");
      }

      public isExitsFaceToFaceComment_args getEmptyArgsInstance() {
        return new isExitsFaceToFaceComment_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isExitsFaceToFaceComment_result result = new isExitsFaceToFaceComment_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isExitsFaceToFaceComment_result result = new isExitsFaceToFaceComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isExitsFaceToFaceComment_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isExitsFaceToFaceComment(args.memberCode, args.outletId, args.orderId,resultHandler);
      }
    }

  }

  public static class addOutletComment_args implements org.apache.thrift.TBase<addOutletComment_args, addOutletComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOutletComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOutletComment_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_COMMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletCommentVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOutletComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOutletComment_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.OutletCommentVo outletCommentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      OUTLET_COMMENT_VO((short)2, "outletCommentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // OUTLET_COMMENT_VO
            return OUTLET_COMMENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.OUTLET_COMMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("outletCommentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOutletComment_args.class, metaDataMap);
    }

    public addOutletComment_args() {
    }

    public addOutletComment_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.OutletCommentVo outletCommentVo)
    {
      this();
      this.originVo = originVo;
      this.outletCommentVo = outletCommentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOutletComment_args(addOutletComment_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOutletCommentVo()) {
        this.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo(other.outletCommentVo);
      }
    }

    public addOutletComment_args deepCopy() {
      return new addOutletComment_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.outletCommentVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addOutletComment_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.OutletCommentVo getOutletCommentVo() {
      return this.outletCommentVo;
    }

    public addOutletComment_args setOutletCommentVo(com.froad.thrift.vo.OutletCommentVo outletCommentVo) {
      this.outletCommentVo = outletCommentVo;
      return this;
    }

    public void unsetOutletCommentVo() {
      this.outletCommentVo = null;
    }

    /** Returns true if field outletCommentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletCommentVo() {
      return this.outletCommentVo != null;
    }

    public void setOutletCommentVoIsSet(boolean value) {
      if (!value) {
        this.outletCommentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case OUTLET_COMMENT_VO:
        if (value == null) {
          unsetOutletCommentVo();
        } else {
          setOutletCommentVo((com.froad.thrift.vo.OutletCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case OUTLET_COMMENT_VO:
        return getOutletCommentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case OUTLET_COMMENT_VO:
        return isSetOutletCommentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOutletComment_args)
        return this.equals((addOutletComment_args)that);
      return false;
    }

    public boolean equals(addOutletComment_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_outletCommentVo = true && this.isSetOutletCommentVo();
      boolean that_present_outletCommentVo = true && that.isSetOutletCommentVo();
      if (this_present_outletCommentVo || that_present_outletCommentVo) {
        if (!(this_present_outletCommentVo && that_present_outletCommentVo))
          return false;
        if (!this.outletCommentVo.equals(that.outletCommentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_outletCommentVo = true && (isSetOutletCommentVo());
      list.add(present_outletCommentVo);
      if (present_outletCommentVo)
        list.add(outletCommentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOutletComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletCommentVo()).compareTo(other.isSetOutletCommentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletCommentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletCommentVo, other.outletCommentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOutletComment_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletCommentVo:");
      if (this.outletCommentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletCommentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (outletCommentVo != null) {
        outletCommentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOutletComment_argsStandardSchemeFactory implements SchemeFactory {
      public addOutletComment_argsStandardScheme getScheme() {
        return new addOutletComment_argsStandardScheme();
      }
    }

    private static class addOutletComment_argsStandardScheme extends StandardScheme<addOutletComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOutletComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_COMMENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
                struct.outletCommentVo.read(iprot);
                struct.setOutletCommentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOutletComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletCommentVo != null) {
          oprot.writeFieldBegin(OUTLET_COMMENT_VO_FIELD_DESC);
          struct.outletCommentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOutletComment_argsTupleSchemeFactory implements SchemeFactory {
      public addOutletComment_argsTupleScheme getScheme() {
        return new addOutletComment_argsTupleScheme();
      }
    }

    private static class addOutletComment_argsTupleScheme extends TupleScheme<addOutletComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOutletComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOutletCommentVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOutletCommentVo()) {
          struct.outletCommentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOutletComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
          struct.outletCommentVo.read(iprot);
          struct.setOutletCommentVoIsSet(true);
        }
      }
    }

  }

  public static class addOutletComment_result implements org.apache.thrift.TBase<addOutletComment_result, addOutletComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOutletComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOutletComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOutletComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOutletComment_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletCommentAddVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletCommentAddVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOutletComment_result.class, metaDataMap);
    }

    public addOutletComment_result() {
    }

    public addOutletComment_result(
      com.froad.thrift.vo.OutletCommentAddVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOutletComment_result(addOutletComment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletCommentAddVoRes(other.success);
      }
    }

    public addOutletComment_result deepCopy() {
      return new addOutletComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletCommentAddVoRes getSuccess() {
      return this.success;
    }

    public addOutletComment_result setSuccess(com.froad.thrift.vo.OutletCommentAddVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletCommentAddVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOutletComment_result)
        return this.equals((addOutletComment_result)that);
      return false;
    }

    public boolean equals(addOutletComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOutletComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOutletComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOutletComment_resultStandardSchemeFactory implements SchemeFactory {
      public addOutletComment_resultStandardScheme getScheme() {
        return new addOutletComment_resultStandardScheme();
      }
    }

    private static class addOutletComment_resultStandardScheme extends StandardScheme<addOutletComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOutletComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletCommentAddVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOutletComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOutletComment_resultTupleSchemeFactory implements SchemeFactory {
      public addOutletComment_resultTupleScheme getScheme() {
        return new addOutletComment_resultTupleScheme();
      }
    }

    private static class addOutletComment_resultTupleScheme extends TupleScheme<addOutletComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOutletComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOutletComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletCommentAddVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteOutletComment_args implements org.apache.thrift.TBase<deleteOutletComment_args, deleteOutletComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOutletComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOutletComment_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOutletComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOutletComment_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOutletComment_args.class, metaDataMap);
    }

    public deleteOutletComment_args() {
    }

    public deleteOutletComment_args(
      com.froad.thrift.vo.OriginVo originVo,
      String id)
    {
      this();
      this.originVo = originVo;
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOutletComment_args(deleteOutletComment_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public deleteOutletComment_args deepCopy() {
      return new deleteOutletComment_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.id = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteOutletComment_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getId() {
      return this.id;
    }

    public deleteOutletComment_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOutletComment_args)
        return this.equals((deleteOutletComment_args)that);
      return false;
    }

    public boolean equals(deleteOutletComment_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOutletComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOutletComment_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOutletComment_argsStandardSchemeFactory implements SchemeFactory {
      public deleteOutletComment_argsStandardScheme getScheme() {
        return new deleteOutletComment_argsStandardScheme();
      }
    }

    private static class deleteOutletComment_argsStandardScheme extends StandardScheme<deleteOutletComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOutletComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOutletComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOutletComment_argsTupleSchemeFactory implements SchemeFactory {
      public deleteOutletComment_argsTupleScheme getScheme() {
        return new deleteOutletComment_argsTupleScheme();
      }
    }

    private static class deleteOutletComment_argsTupleScheme extends TupleScheme<deleteOutletComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOutletComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOutletComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class deleteOutletComment_result implements org.apache.thrift.TBase<deleteOutletComment_result, deleteOutletComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOutletComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOutletComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOutletComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOutletComment_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOutletComment_result.class, metaDataMap);
    }

    public deleteOutletComment_result() {
    }

    public deleteOutletComment_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOutletComment_result(deleteOutletComment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteOutletComment_result deepCopy() {
      return new deleteOutletComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteOutletComment_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOutletComment_result)
        return this.equals((deleteOutletComment_result)that);
      return false;
    }

    public boolean equals(deleteOutletComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOutletComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOutletComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOutletComment_resultStandardSchemeFactory implements SchemeFactory {
      public deleteOutletComment_resultStandardScheme getScheme() {
        return new deleteOutletComment_resultStandardScheme();
      }
    }

    private static class deleteOutletComment_resultStandardScheme extends StandardScheme<deleteOutletComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOutletComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOutletComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOutletComment_resultTupleSchemeFactory implements SchemeFactory {
      public deleteOutletComment_resultTupleScheme getScheme() {
        return new deleteOutletComment_resultTupleScheme();
      }
    }

    private static class deleteOutletComment_resultTupleScheme extends TupleScheme<deleteOutletComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOutletComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOutletComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateOutletComment_args implements org.apache.thrift.TBase<updateOutletComment_args, updateOutletComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateOutletComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOutletComment_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_COMMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletCommentVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOutletComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOutletComment_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.OutletCommentVo outletCommentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      OUTLET_COMMENT_VO((short)2, "outletCommentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // OUTLET_COMMENT_VO
            return OUTLET_COMMENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.OUTLET_COMMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("outletCommentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOutletComment_args.class, metaDataMap);
    }

    public updateOutletComment_args() {
    }

    public updateOutletComment_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.OutletCommentVo outletCommentVo)
    {
      this();
      this.originVo = originVo;
      this.outletCommentVo = outletCommentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOutletComment_args(updateOutletComment_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOutletCommentVo()) {
        this.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo(other.outletCommentVo);
      }
    }

    public updateOutletComment_args deepCopy() {
      return new updateOutletComment_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.outletCommentVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateOutletComment_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.OutletCommentVo getOutletCommentVo() {
      return this.outletCommentVo;
    }

    public updateOutletComment_args setOutletCommentVo(com.froad.thrift.vo.OutletCommentVo outletCommentVo) {
      this.outletCommentVo = outletCommentVo;
      return this;
    }

    public void unsetOutletCommentVo() {
      this.outletCommentVo = null;
    }

    /** Returns true if field outletCommentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletCommentVo() {
      return this.outletCommentVo != null;
    }

    public void setOutletCommentVoIsSet(boolean value) {
      if (!value) {
        this.outletCommentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case OUTLET_COMMENT_VO:
        if (value == null) {
          unsetOutletCommentVo();
        } else {
          setOutletCommentVo((com.froad.thrift.vo.OutletCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case OUTLET_COMMENT_VO:
        return getOutletCommentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case OUTLET_COMMENT_VO:
        return isSetOutletCommentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOutletComment_args)
        return this.equals((updateOutletComment_args)that);
      return false;
    }

    public boolean equals(updateOutletComment_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_outletCommentVo = true && this.isSetOutletCommentVo();
      boolean that_present_outletCommentVo = true && that.isSetOutletCommentVo();
      if (this_present_outletCommentVo || that_present_outletCommentVo) {
        if (!(this_present_outletCommentVo && that_present_outletCommentVo))
          return false;
        if (!this.outletCommentVo.equals(that.outletCommentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_outletCommentVo = true && (isSetOutletCommentVo());
      list.add(present_outletCommentVo);
      if (present_outletCommentVo)
        list.add(outletCommentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOutletComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletCommentVo()).compareTo(other.isSetOutletCommentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletCommentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletCommentVo, other.outletCommentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOutletComment_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletCommentVo:");
      if (this.outletCommentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletCommentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (outletCommentVo != null) {
        outletCommentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOutletComment_argsStandardSchemeFactory implements SchemeFactory {
      public updateOutletComment_argsStandardScheme getScheme() {
        return new updateOutletComment_argsStandardScheme();
      }
    }

    private static class updateOutletComment_argsStandardScheme extends StandardScheme<updateOutletComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOutletComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_COMMENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
                struct.outletCommentVo.read(iprot);
                struct.setOutletCommentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOutletComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletCommentVo != null) {
          oprot.writeFieldBegin(OUTLET_COMMENT_VO_FIELD_DESC);
          struct.outletCommentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOutletComment_argsTupleSchemeFactory implements SchemeFactory {
      public updateOutletComment_argsTupleScheme getScheme() {
        return new updateOutletComment_argsTupleScheme();
      }
    }

    private static class updateOutletComment_argsTupleScheme extends TupleScheme<updateOutletComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOutletComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOutletCommentVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOutletCommentVo()) {
          struct.outletCommentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOutletComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
          struct.outletCommentVo.read(iprot);
          struct.setOutletCommentVoIsSet(true);
        }
      }
    }

  }

  public static class updateOutletComment_result implements org.apache.thrift.TBase<updateOutletComment_result, updateOutletComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateOutletComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOutletComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOutletComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOutletComment_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOutletComment_result.class, metaDataMap);
    }

    public updateOutletComment_result() {
    }

    public updateOutletComment_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOutletComment_result(updateOutletComment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateOutletComment_result deepCopy() {
      return new updateOutletComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateOutletComment_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOutletComment_result)
        return this.equals((updateOutletComment_result)that);
      return false;
    }

    public boolean equals(updateOutletComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOutletComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOutletComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOutletComment_resultStandardSchemeFactory implements SchemeFactory {
      public updateOutletComment_resultStandardScheme getScheme() {
        return new updateOutletComment_resultStandardScheme();
      }
    }

    private static class updateOutletComment_resultStandardScheme extends StandardScheme<updateOutletComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOutletComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOutletComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOutletComment_resultTupleSchemeFactory implements SchemeFactory {
      public updateOutletComment_resultTupleScheme getScheme() {
        return new updateOutletComment_resultTupleScheme();
      }
    }

    private static class updateOutletComment_resultTupleScheme extends TupleScheme<updateOutletComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOutletComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOutletComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletCommentById_args implements org.apache.thrift.TBase<getOutletCommentById_args, getOutletCommentById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletCommentById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletCommentById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletCommentById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletCommentById_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletCommentById_args.class, metaDataMap);
    }

    public getOutletCommentById_args() {
    }

    public getOutletCommentById_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletCommentById_args(getOutletCommentById_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public getOutletCommentById_args deepCopy() {
      return new getOutletCommentById_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public getOutletCommentById_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletCommentById_args)
        return this.equals((getOutletCommentById_args)that);
      return false;
    }

    public boolean equals(getOutletCommentById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true && (isSetId());
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletCommentById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletCommentById_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletCommentById_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletCommentById_argsStandardScheme getScheme() {
        return new getOutletCommentById_argsStandardScheme();
      }
    }

    private static class getOutletCommentById_argsStandardScheme extends StandardScheme<getOutletCommentById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletCommentById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletCommentById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletCommentById_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletCommentById_argsTupleScheme getScheme() {
        return new getOutletCommentById_argsTupleScheme();
      }
    }

    private static class getOutletCommentById_argsTupleScheme extends TupleScheme<getOutletCommentById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletCommentById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletCommentById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getOutletCommentById_result implements org.apache.thrift.TBase<getOutletCommentById_result, getOutletCommentById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletCommentById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletCommentById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletCommentById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletCommentById_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletCommentVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletCommentById_result.class, metaDataMap);
    }

    public getOutletCommentById_result() {
    }

    public getOutletCommentById_result(
      com.froad.thrift.vo.OutletCommentVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletCommentById_result(getOutletCommentById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletCommentVo(other.success);
      }
    }

    public getOutletCommentById_result deepCopy() {
      return new getOutletCommentById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletCommentVo getSuccess() {
      return this.success;
    }

    public getOutletCommentById_result setSuccess(com.froad.thrift.vo.OutletCommentVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletCommentById_result)
        return this.equals((getOutletCommentById_result)that);
      return false;
    }

    public boolean equals(getOutletCommentById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletCommentById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletCommentById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletCommentById_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletCommentById_resultStandardScheme getScheme() {
        return new getOutletCommentById_resultStandardScheme();
      }
    }

    private static class getOutletCommentById_resultStandardScheme extends StandardScheme<getOutletCommentById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletCommentById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletCommentVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletCommentById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletCommentById_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletCommentById_resultTupleScheme getScheme() {
        return new getOutletCommentById_resultTupleScheme();
      }
    }

    private static class getOutletCommentById_resultTupleScheme extends TupleScheme<getOutletCommentById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletCommentById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletCommentById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletCommentVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletComment_args implements org.apache.thrift.TBase<getOutletComment_args, getOutletComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletComment_args");

    private static final org.apache.thrift.protocol.TField OUTLET_COMMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletCommentVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletComment_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletCommentVo outletCommentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLET_COMMENT_VO((short)1, "outletCommentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLET_COMMENT_VO
            return OUTLET_COMMENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLET_COMMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("outletCommentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletComment_args.class, metaDataMap);
    }

    public getOutletComment_args() {
    }

    public getOutletComment_args(
      com.froad.thrift.vo.OutletCommentVo outletCommentVo)
    {
      this();
      this.outletCommentVo = outletCommentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletComment_args(getOutletComment_args other) {
      if (other.isSetOutletCommentVo()) {
        this.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo(other.outletCommentVo);
      }
    }

    public getOutletComment_args deepCopy() {
      return new getOutletComment_args(this);
    }

    @Override
    public void clear() {
      this.outletCommentVo = null;
    }

    public com.froad.thrift.vo.OutletCommentVo getOutletCommentVo() {
      return this.outletCommentVo;
    }

    public getOutletComment_args setOutletCommentVo(com.froad.thrift.vo.OutletCommentVo outletCommentVo) {
      this.outletCommentVo = outletCommentVo;
      return this;
    }

    public void unsetOutletCommentVo() {
      this.outletCommentVo = null;
    }

    /** Returns true if field outletCommentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletCommentVo() {
      return this.outletCommentVo != null;
    }

    public void setOutletCommentVoIsSet(boolean value) {
      if (!value) {
        this.outletCommentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLET_COMMENT_VO:
        if (value == null) {
          unsetOutletCommentVo();
        } else {
          setOutletCommentVo((com.froad.thrift.vo.OutletCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLET_COMMENT_VO:
        return getOutletCommentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLET_COMMENT_VO:
        return isSetOutletCommentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletComment_args)
        return this.equals((getOutletComment_args)that);
      return false;
    }

    public boolean equals(getOutletComment_args that) {
      if (that == null)
        return false;

      boolean this_present_outletCommentVo = true && this.isSetOutletCommentVo();
      boolean that_present_outletCommentVo = true && that.isSetOutletCommentVo();
      if (this_present_outletCommentVo || that_present_outletCommentVo) {
        if (!(this_present_outletCommentVo && that_present_outletCommentVo))
          return false;
        if (!this.outletCommentVo.equals(that.outletCommentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outletCommentVo = true && (isSetOutletCommentVo());
      list.add(present_outletCommentVo);
      if (present_outletCommentVo)
        list.add(outletCommentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletCommentVo()).compareTo(other.isSetOutletCommentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletCommentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletCommentVo, other.outletCommentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletComment_args(");
      boolean first = true;

      sb.append("outletCommentVo:");
      if (this.outletCommentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletCommentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (outletCommentVo != null) {
        outletCommentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletComment_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletComment_argsStandardScheme getScheme() {
        return new getOutletComment_argsStandardScheme();
      }
    }

    private static class getOutletComment_argsStandardScheme extends StandardScheme<getOutletComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLET_COMMENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
                struct.outletCommentVo.read(iprot);
                struct.setOutletCommentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletCommentVo != null) {
          oprot.writeFieldBegin(OUTLET_COMMENT_VO_FIELD_DESC);
          struct.outletCommentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletComment_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletComment_argsTupleScheme getScheme() {
        return new getOutletComment_argsTupleScheme();
      }
    }

    private static class getOutletComment_argsTupleScheme extends TupleScheme<getOutletComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletCommentVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutletCommentVo()) {
          struct.outletCommentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
          struct.outletCommentVo.read(iprot);
          struct.setOutletCommentVoIsSet(true);
        }
      }
    }

  }

  public static class getOutletComment_result implements org.apache.thrift.TBase<getOutletComment_result, getOutletComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletComment_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.OutletCommentVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletCommentVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletComment_result.class, metaDataMap);
    }

    public getOutletComment_result() {
    }

    public getOutletComment_result(
      List<com.froad.thrift.vo.OutletCommentVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletComment_result(getOutletComment_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.OutletCommentVo> __this__success = new ArrayList<com.froad.thrift.vo.OutletCommentVo>(other.success.size());
        for (com.froad.thrift.vo.OutletCommentVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.OutletCommentVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getOutletComment_result deepCopy() {
      return new getOutletComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.OutletCommentVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.OutletCommentVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.OutletCommentVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.OutletCommentVo> getSuccess() {
      return this.success;
    }

    public getOutletComment_result setSuccess(List<com.froad.thrift.vo.OutletCommentVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.OutletCommentVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletComment_result)
        return this.equals((getOutletComment_result)that);
      return false;
    }

    public boolean equals(getOutletComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletComment_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletComment_resultStandardScheme getScheme() {
        return new getOutletComment_resultStandardScheme();
      }
    }

    private static class getOutletComment_resultStandardScheme extends StandardScheme<getOutletComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.OutletCommentVo>(_list0.size);
                  com.froad.thrift.vo.OutletCommentVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.OutletCommentVo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.OutletCommentVo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletComment_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletComment_resultTupleScheme getScheme() {
        return new getOutletComment_resultTupleScheme();
      }
    }

    private static class getOutletComment_resultTupleScheme extends TupleScheme<getOutletComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.OutletCommentVo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.OutletCommentVo>(_list5.size);
            com.froad.thrift.vo.OutletCommentVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.OutletCommentVo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletCommentByPage_args implements org.apache.thrift.TBase<getOutletCommentByPage_args, getOutletCommentByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletCommentByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletCommentByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_COMMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletCommentVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletCommentByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletCommentByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.OutletCommentVo outletCommentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      OUTLET_COMMENT_VO((short)2, "outletCommentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // OUTLET_COMMENT_VO
            return OUTLET_COMMENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.OUTLET_COMMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("outletCommentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletCommentByPage_args.class, metaDataMap);
    }

    public getOutletCommentByPage_args() {
    }

    public getOutletCommentByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.OutletCommentVo outletCommentVo)
    {
      this();
      this.page = page;
      this.outletCommentVo = outletCommentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletCommentByPage_args(getOutletCommentByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetOutletCommentVo()) {
        this.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo(other.outletCommentVo);
      }
    }

    public getOutletCommentByPage_args deepCopy() {
      return new getOutletCommentByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.outletCommentVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getOutletCommentByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.OutletCommentVo getOutletCommentVo() {
      return this.outletCommentVo;
    }

    public getOutletCommentByPage_args setOutletCommentVo(com.froad.thrift.vo.OutletCommentVo outletCommentVo) {
      this.outletCommentVo = outletCommentVo;
      return this;
    }

    public void unsetOutletCommentVo() {
      this.outletCommentVo = null;
    }

    /** Returns true if field outletCommentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletCommentVo() {
      return this.outletCommentVo != null;
    }

    public void setOutletCommentVoIsSet(boolean value) {
      if (!value) {
        this.outletCommentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case OUTLET_COMMENT_VO:
        if (value == null) {
          unsetOutletCommentVo();
        } else {
          setOutletCommentVo((com.froad.thrift.vo.OutletCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case OUTLET_COMMENT_VO:
        return getOutletCommentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case OUTLET_COMMENT_VO:
        return isSetOutletCommentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletCommentByPage_args)
        return this.equals((getOutletCommentByPage_args)that);
      return false;
    }

    public boolean equals(getOutletCommentByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_outletCommentVo = true && this.isSetOutletCommentVo();
      boolean that_present_outletCommentVo = true && that.isSetOutletCommentVo();
      if (this_present_outletCommentVo || that_present_outletCommentVo) {
        if (!(this_present_outletCommentVo && that_present_outletCommentVo))
          return false;
        if (!this.outletCommentVo.equals(that.outletCommentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_outletCommentVo = true && (isSetOutletCommentVo());
      list.add(present_outletCommentVo);
      if (present_outletCommentVo)
        list.add(outletCommentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletCommentByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletCommentVo()).compareTo(other.isSetOutletCommentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletCommentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletCommentVo, other.outletCommentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletCommentByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletCommentVo:");
      if (this.outletCommentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletCommentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (outletCommentVo != null) {
        outletCommentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletCommentByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletCommentByPage_argsStandardScheme getScheme() {
        return new getOutletCommentByPage_argsStandardScheme();
      }
    }

    private static class getOutletCommentByPage_argsStandardScheme extends StandardScheme<getOutletCommentByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletCommentByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_COMMENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
                struct.outletCommentVo.read(iprot);
                struct.setOutletCommentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletCommentByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletCommentVo != null) {
          oprot.writeFieldBegin(OUTLET_COMMENT_VO_FIELD_DESC);
          struct.outletCommentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletCommentByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletCommentByPage_argsTupleScheme getScheme() {
        return new getOutletCommentByPage_argsTupleScheme();
      }
    }

    private static class getOutletCommentByPage_argsTupleScheme extends TupleScheme<getOutletCommentByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletCommentByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetOutletCommentVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetOutletCommentVo()) {
          struct.outletCommentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletCommentByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
          struct.outletCommentVo.read(iprot);
          struct.setOutletCommentVoIsSet(true);
        }
      }
    }

  }

  public static class getOutletCommentByPage_result implements org.apache.thrift.TBase<getOutletCommentByPage_result, getOutletCommentByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletCommentByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletCommentByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletCommentByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletCommentByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletCommentPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletCommentPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletCommentByPage_result.class, metaDataMap);
    }

    public getOutletCommentByPage_result() {
    }

    public getOutletCommentByPage_result(
      com.froad.thrift.vo.OutletCommentPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletCommentByPage_result(getOutletCommentByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletCommentPageVoRes(other.success);
      }
    }

    public getOutletCommentByPage_result deepCopy() {
      return new getOutletCommentByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletCommentPageVoRes getSuccess() {
      return this.success;
    }

    public getOutletCommentByPage_result setSuccess(com.froad.thrift.vo.OutletCommentPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletCommentPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletCommentByPage_result)
        return this.equals((getOutletCommentByPage_result)that);
      return false;
    }

    public boolean equals(getOutletCommentByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletCommentByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletCommentByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletCommentByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletCommentByPage_resultStandardScheme getScheme() {
        return new getOutletCommentByPage_resultStandardScheme();
      }
    }

    private static class getOutletCommentByPage_resultStandardScheme extends StandardScheme<getOutletCommentByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletCommentByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletCommentPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletCommentByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletCommentByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletCommentByPage_resultTupleScheme getScheme() {
        return new getOutletCommentByPage_resultTupleScheme();
      }
    }

    private static class getOutletCommentByPage_resultTupleScheme extends TupleScheme<getOutletCommentByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletCommentByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletCommentByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletCommentPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addOutletCommentOfRecomment_args implements org.apache.thrift.TBase<addOutletCommentOfRecomment_args, addOutletCommentOfRecomment_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOutletCommentOfRecomment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOutletCommentOfRecomment_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_COMMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletCommentVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOutletCommentOfRecomment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOutletCommentOfRecomment_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.OutletCommentVo outletCommentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      OUTLET_COMMENT_VO((short)2, "outletCommentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // OUTLET_COMMENT_VO
            return OUTLET_COMMENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.OUTLET_COMMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("outletCommentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOutletCommentOfRecomment_args.class, metaDataMap);
    }

    public addOutletCommentOfRecomment_args() {
    }

    public addOutletCommentOfRecomment_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.OutletCommentVo outletCommentVo)
    {
      this();
      this.originVo = originVo;
      this.outletCommentVo = outletCommentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOutletCommentOfRecomment_args(addOutletCommentOfRecomment_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOutletCommentVo()) {
        this.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo(other.outletCommentVo);
      }
    }

    public addOutletCommentOfRecomment_args deepCopy() {
      return new addOutletCommentOfRecomment_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.outletCommentVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addOutletCommentOfRecomment_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.OutletCommentVo getOutletCommentVo() {
      return this.outletCommentVo;
    }

    public addOutletCommentOfRecomment_args setOutletCommentVo(com.froad.thrift.vo.OutletCommentVo outletCommentVo) {
      this.outletCommentVo = outletCommentVo;
      return this;
    }

    public void unsetOutletCommentVo() {
      this.outletCommentVo = null;
    }

    /** Returns true if field outletCommentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletCommentVo() {
      return this.outletCommentVo != null;
    }

    public void setOutletCommentVoIsSet(boolean value) {
      if (!value) {
        this.outletCommentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case OUTLET_COMMENT_VO:
        if (value == null) {
          unsetOutletCommentVo();
        } else {
          setOutletCommentVo((com.froad.thrift.vo.OutletCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case OUTLET_COMMENT_VO:
        return getOutletCommentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case OUTLET_COMMENT_VO:
        return isSetOutletCommentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOutletCommentOfRecomment_args)
        return this.equals((addOutletCommentOfRecomment_args)that);
      return false;
    }

    public boolean equals(addOutletCommentOfRecomment_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_outletCommentVo = true && this.isSetOutletCommentVo();
      boolean that_present_outletCommentVo = true && that.isSetOutletCommentVo();
      if (this_present_outletCommentVo || that_present_outletCommentVo) {
        if (!(this_present_outletCommentVo && that_present_outletCommentVo))
          return false;
        if (!this.outletCommentVo.equals(that.outletCommentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_outletCommentVo = true && (isSetOutletCommentVo());
      list.add(present_outletCommentVo);
      if (present_outletCommentVo)
        list.add(outletCommentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOutletCommentOfRecomment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletCommentVo()).compareTo(other.isSetOutletCommentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletCommentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletCommentVo, other.outletCommentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOutletCommentOfRecomment_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletCommentVo:");
      if (this.outletCommentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletCommentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (outletCommentVo != null) {
        outletCommentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOutletCommentOfRecomment_argsStandardSchemeFactory implements SchemeFactory {
      public addOutletCommentOfRecomment_argsStandardScheme getScheme() {
        return new addOutletCommentOfRecomment_argsStandardScheme();
      }
    }

    private static class addOutletCommentOfRecomment_argsStandardScheme extends StandardScheme<addOutletCommentOfRecomment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOutletCommentOfRecomment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_COMMENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
                struct.outletCommentVo.read(iprot);
                struct.setOutletCommentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOutletCommentOfRecomment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletCommentVo != null) {
          oprot.writeFieldBegin(OUTLET_COMMENT_VO_FIELD_DESC);
          struct.outletCommentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOutletCommentOfRecomment_argsTupleSchemeFactory implements SchemeFactory {
      public addOutletCommentOfRecomment_argsTupleScheme getScheme() {
        return new addOutletCommentOfRecomment_argsTupleScheme();
      }
    }

    private static class addOutletCommentOfRecomment_argsTupleScheme extends TupleScheme<addOutletCommentOfRecomment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOutletCommentOfRecomment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOutletCommentVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOutletCommentVo()) {
          struct.outletCommentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOutletCommentOfRecomment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
          struct.outletCommentVo.read(iprot);
          struct.setOutletCommentVoIsSet(true);
        }
      }
    }

  }

  public static class addOutletCommentOfRecomment_result implements org.apache.thrift.TBase<addOutletCommentOfRecomment_result, addOutletCommentOfRecomment_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOutletCommentOfRecomment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOutletCommentOfRecomment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOutletCommentOfRecomment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOutletCommentOfRecomment_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOutletCommentOfRecomment_result.class, metaDataMap);
    }

    public addOutletCommentOfRecomment_result() {
    }

    public addOutletCommentOfRecomment_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOutletCommentOfRecomment_result(addOutletCommentOfRecomment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public addOutletCommentOfRecomment_result deepCopy() {
      return new addOutletCommentOfRecomment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public addOutletCommentOfRecomment_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOutletCommentOfRecomment_result)
        return this.equals((addOutletCommentOfRecomment_result)that);
      return false;
    }

    public boolean equals(addOutletCommentOfRecomment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOutletCommentOfRecomment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOutletCommentOfRecomment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOutletCommentOfRecomment_resultStandardSchemeFactory implements SchemeFactory {
      public addOutletCommentOfRecomment_resultStandardScheme getScheme() {
        return new addOutletCommentOfRecomment_resultStandardScheme();
      }
    }

    private static class addOutletCommentOfRecomment_resultStandardScheme extends StandardScheme<addOutletCommentOfRecomment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOutletCommentOfRecomment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOutletCommentOfRecomment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOutletCommentOfRecomment_resultTupleSchemeFactory implements SchemeFactory {
      public addOutletCommentOfRecomment_resultTupleScheme getScheme() {
        return new addOutletCommentOfRecomment_resultTupleScheme();
      }
    }

    private static class addOutletCommentOfRecomment_resultTupleScheme extends TupleScheme<addOutletCommentOfRecomment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOutletCommentOfRecomment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOutletCommentOfRecomment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletCommentSum_args implements org.apache.thrift.TBase<getOutletCommentSum_args, getOutletCommentSum_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletCommentSum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletCommentSum_args");

    private static final org.apache.thrift.protocol.TField OUTLET_COMMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletCommentVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletCommentSum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletCommentSum_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletCommentVo outletCommentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLET_COMMENT_VO((short)1, "outletCommentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLET_COMMENT_VO
            return OUTLET_COMMENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLET_COMMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("outletCommentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletCommentSum_args.class, metaDataMap);
    }

    public getOutletCommentSum_args() {
    }

    public getOutletCommentSum_args(
      com.froad.thrift.vo.OutletCommentVo outletCommentVo)
    {
      this();
      this.outletCommentVo = outletCommentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletCommentSum_args(getOutletCommentSum_args other) {
      if (other.isSetOutletCommentVo()) {
        this.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo(other.outletCommentVo);
      }
    }

    public getOutletCommentSum_args deepCopy() {
      return new getOutletCommentSum_args(this);
    }

    @Override
    public void clear() {
      this.outletCommentVo = null;
    }

    public com.froad.thrift.vo.OutletCommentVo getOutletCommentVo() {
      return this.outletCommentVo;
    }

    public getOutletCommentSum_args setOutletCommentVo(com.froad.thrift.vo.OutletCommentVo outletCommentVo) {
      this.outletCommentVo = outletCommentVo;
      return this;
    }

    public void unsetOutletCommentVo() {
      this.outletCommentVo = null;
    }

    /** Returns true if field outletCommentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletCommentVo() {
      return this.outletCommentVo != null;
    }

    public void setOutletCommentVoIsSet(boolean value) {
      if (!value) {
        this.outletCommentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLET_COMMENT_VO:
        if (value == null) {
          unsetOutletCommentVo();
        } else {
          setOutletCommentVo((com.froad.thrift.vo.OutletCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLET_COMMENT_VO:
        return getOutletCommentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLET_COMMENT_VO:
        return isSetOutletCommentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletCommentSum_args)
        return this.equals((getOutletCommentSum_args)that);
      return false;
    }

    public boolean equals(getOutletCommentSum_args that) {
      if (that == null)
        return false;

      boolean this_present_outletCommentVo = true && this.isSetOutletCommentVo();
      boolean that_present_outletCommentVo = true && that.isSetOutletCommentVo();
      if (this_present_outletCommentVo || that_present_outletCommentVo) {
        if (!(this_present_outletCommentVo && that_present_outletCommentVo))
          return false;
        if (!this.outletCommentVo.equals(that.outletCommentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outletCommentVo = true && (isSetOutletCommentVo());
      list.add(present_outletCommentVo);
      if (present_outletCommentVo)
        list.add(outletCommentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletCommentSum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletCommentVo()).compareTo(other.isSetOutletCommentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletCommentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletCommentVo, other.outletCommentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletCommentSum_args(");
      boolean first = true;

      sb.append("outletCommentVo:");
      if (this.outletCommentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletCommentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (outletCommentVo != null) {
        outletCommentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletCommentSum_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletCommentSum_argsStandardScheme getScheme() {
        return new getOutletCommentSum_argsStandardScheme();
      }
    }

    private static class getOutletCommentSum_argsStandardScheme extends StandardScheme<getOutletCommentSum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletCommentSum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLET_COMMENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
                struct.outletCommentVo.read(iprot);
                struct.setOutletCommentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletCommentSum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletCommentVo != null) {
          oprot.writeFieldBegin(OUTLET_COMMENT_VO_FIELD_DESC);
          struct.outletCommentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletCommentSum_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletCommentSum_argsTupleScheme getScheme() {
        return new getOutletCommentSum_argsTupleScheme();
      }
    }

    private static class getOutletCommentSum_argsTupleScheme extends TupleScheme<getOutletCommentSum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletCommentSum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletCommentVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutletCommentVo()) {
          struct.outletCommentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletCommentSum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
          struct.outletCommentVo.read(iprot);
          struct.setOutletCommentVoIsSet(true);
        }
      }
    }

  }

  public static class getOutletCommentSum_result implements org.apache.thrift.TBase<getOutletCommentSum_result, getOutletCommentSum_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletCommentSum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletCommentSum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletCommentSum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletCommentSum_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletCommentSum_result.class, metaDataMap);
    }

    public getOutletCommentSum_result() {
    }

    public getOutletCommentSum_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletCommentSum_result(getOutletCommentSum_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getOutletCommentSum_result deepCopy() {
      return new getOutletCommentSum_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getOutletCommentSum_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletCommentSum_result)
        return this.equals((getOutletCommentSum_result)that);
      return false;
    }

    public boolean equals(getOutletCommentSum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletCommentSum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletCommentSum_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletCommentSum_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletCommentSum_resultStandardScheme getScheme() {
        return new getOutletCommentSum_resultStandardScheme();
      }
    }

    private static class getOutletCommentSum_resultStandardScheme extends StandardScheme<getOutletCommentSum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletCommentSum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletCommentSum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletCommentSum_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletCommentSum_resultTupleScheme getScheme() {
        return new getOutletCommentSum_resultTupleScheme();
      }
    }

    private static class getOutletCommentSum_resultTupleScheme extends TupleScheme<getOutletCommentSum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletCommentSum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletCommentSum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletCommentLevelAmount_args implements org.apache.thrift.TBase<getOutletCommentLevelAmount_args, getOutletCommentLevelAmount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletCommentLevelAmount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletCommentLevelAmount_args");

    private static final org.apache.thrift.protocol.TField OUTLET_COMMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletCommentVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletCommentLevelAmount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletCommentLevelAmount_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletCommentVo outletCommentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLET_COMMENT_VO((short)1, "outletCommentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLET_COMMENT_VO
            return OUTLET_COMMENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLET_COMMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("outletCommentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletCommentLevelAmount_args.class, metaDataMap);
    }

    public getOutletCommentLevelAmount_args() {
    }

    public getOutletCommentLevelAmount_args(
      com.froad.thrift.vo.OutletCommentVo outletCommentVo)
    {
      this();
      this.outletCommentVo = outletCommentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletCommentLevelAmount_args(getOutletCommentLevelAmount_args other) {
      if (other.isSetOutletCommentVo()) {
        this.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo(other.outletCommentVo);
      }
    }

    public getOutletCommentLevelAmount_args deepCopy() {
      return new getOutletCommentLevelAmount_args(this);
    }

    @Override
    public void clear() {
      this.outletCommentVo = null;
    }

    public com.froad.thrift.vo.OutletCommentVo getOutletCommentVo() {
      return this.outletCommentVo;
    }

    public getOutletCommentLevelAmount_args setOutletCommentVo(com.froad.thrift.vo.OutletCommentVo outletCommentVo) {
      this.outletCommentVo = outletCommentVo;
      return this;
    }

    public void unsetOutletCommentVo() {
      this.outletCommentVo = null;
    }

    /** Returns true if field outletCommentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletCommentVo() {
      return this.outletCommentVo != null;
    }

    public void setOutletCommentVoIsSet(boolean value) {
      if (!value) {
        this.outletCommentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLET_COMMENT_VO:
        if (value == null) {
          unsetOutletCommentVo();
        } else {
          setOutletCommentVo((com.froad.thrift.vo.OutletCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLET_COMMENT_VO:
        return getOutletCommentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLET_COMMENT_VO:
        return isSetOutletCommentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletCommentLevelAmount_args)
        return this.equals((getOutletCommentLevelAmount_args)that);
      return false;
    }

    public boolean equals(getOutletCommentLevelAmount_args that) {
      if (that == null)
        return false;

      boolean this_present_outletCommentVo = true && this.isSetOutletCommentVo();
      boolean that_present_outletCommentVo = true && that.isSetOutletCommentVo();
      if (this_present_outletCommentVo || that_present_outletCommentVo) {
        if (!(this_present_outletCommentVo && that_present_outletCommentVo))
          return false;
        if (!this.outletCommentVo.equals(that.outletCommentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outletCommentVo = true && (isSetOutletCommentVo());
      list.add(present_outletCommentVo);
      if (present_outletCommentVo)
        list.add(outletCommentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletCommentLevelAmount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletCommentVo()).compareTo(other.isSetOutletCommentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletCommentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletCommentVo, other.outletCommentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletCommentLevelAmount_args(");
      boolean first = true;

      sb.append("outletCommentVo:");
      if (this.outletCommentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletCommentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (outletCommentVo != null) {
        outletCommentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletCommentLevelAmount_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletCommentLevelAmount_argsStandardScheme getScheme() {
        return new getOutletCommentLevelAmount_argsStandardScheme();
      }
    }

    private static class getOutletCommentLevelAmount_argsStandardScheme extends StandardScheme<getOutletCommentLevelAmount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletCommentLevelAmount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLET_COMMENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
                struct.outletCommentVo.read(iprot);
                struct.setOutletCommentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletCommentLevelAmount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletCommentVo != null) {
          oprot.writeFieldBegin(OUTLET_COMMENT_VO_FIELD_DESC);
          struct.outletCommentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletCommentLevelAmount_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletCommentLevelAmount_argsTupleScheme getScheme() {
        return new getOutletCommentLevelAmount_argsTupleScheme();
      }
    }

    private static class getOutletCommentLevelAmount_argsTupleScheme extends TupleScheme<getOutletCommentLevelAmount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletCommentLevelAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletCommentVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutletCommentVo()) {
          struct.outletCommentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletCommentLevelAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
          struct.outletCommentVo.read(iprot);
          struct.setOutletCommentVoIsSet(true);
        }
      }
    }

  }

  public static class getOutletCommentLevelAmount_result implements org.apache.thrift.TBase<getOutletCommentLevelAmount_result, getOutletCommentLevelAmount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletCommentLevelAmount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletCommentLevelAmount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletCommentLevelAmount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletCommentLevelAmount_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletCommentLevelAmountVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletCommentLevelAmountVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletCommentLevelAmount_result.class, metaDataMap);
    }

    public getOutletCommentLevelAmount_result() {
    }

    public getOutletCommentLevelAmount_result(
      com.froad.thrift.vo.OutletCommentLevelAmountVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletCommentLevelAmount_result(getOutletCommentLevelAmount_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletCommentLevelAmountVo(other.success);
      }
    }

    public getOutletCommentLevelAmount_result deepCopy() {
      return new getOutletCommentLevelAmount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletCommentLevelAmountVo getSuccess() {
      return this.success;
    }

    public getOutletCommentLevelAmount_result setSuccess(com.froad.thrift.vo.OutletCommentLevelAmountVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletCommentLevelAmountVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletCommentLevelAmount_result)
        return this.equals((getOutletCommentLevelAmount_result)that);
      return false;
    }

    public boolean equals(getOutletCommentLevelAmount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletCommentLevelAmount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletCommentLevelAmount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletCommentLevelAmount_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletCommentLevelAmount_resultStandardScheme getScheme() {
        return new getOutletCommentLevelAmount_resultStandardScheme();
      }
    }

    private static class getOutletCommentLevelAmount_resultStandardScheme extends StandardScheme<getOutletCommentLevelAmount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletCommentLevelAmount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletCommentLevelAmountVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletCommentLevelAmount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletCommentLevelAmount_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletCommentLevelAmount_resultTupleScheme getScheme() {
        return new getOutletCommentLevelAmount_resultTupleScheme();
      }
    }

    private static class getOutletCommentLevelAmount_resultTupleScheme extends TupleScheme<getOutletCommentLevelAmount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletCommentLevelAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletCommentLevelAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletCommentLevelAmountVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantCommentLevelAmount_args implements org.apache.thrift.TBase<getMerchantCommentLevelAmount_args, getMerchantCommentLevelAmount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantCommentLevelAmount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantCommentLevelAmount_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantCommentLevelAmount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantCommentLevelAmount_argsTupleSchemeFactory());
    }

    public String merchantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantCommentLevelAmount_args.class, metaDataMap);
    }

    public getMerchantCommentLevelAmount_args() {
    }

    public getMerchantCommentLevelAmount_args(
      String merchantId)
    {
      this();
      this.merchantId = merchantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantCommentLevelAmount_args(getMerchantCommentLevelAmount_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
    }

    public getMerchantCommentLevelAmount_args deepCopy() {
      return new getMerchantCommentLevelAmount_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public getMerchantCommentLevelAmount_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantCommentLevelAmount_args)
        return this.equals((getMerchantCommentLevelAmount_args)that);
      return false;
    }

    public boolean equals(getMerchantCommentLevelAmount_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantCommentLevelAmount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantCommentLevelAmount_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantCommentLevelAmount_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantCommentLevelAmount_argsStandardScheme getScheme() {
        return new getMerchantCommentLevelAmount_argsStandardScheme();
      }
    }

    private static class getMerchantCommentLevelAmount_argsStandardScheme extends StandardScheme<getMerchantCommentLevelAmount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantCommentLevelAmount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantCommentLevelAmount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantCommentLevelAmount_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantCommentLevelAmount_argsTupleScheme getScheme() {
        return new getMerchantCommentLevelAmount_argsTupleScheme();
      }
    }

    private static class getMerchantCommentLevelAmount_argsTupleScheme extends TupleScheme<getMerchantCommentLevelAmount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantCommentLevelAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantCommentLevelAmount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
      }
    }

  }

  public static class getMerchantCommentLevelAmount_result implements org.apache.thrift.TBase<getMerchantCommentLevelAmount_result, getMerchantCommentLevelAmount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantCommentLevelAmount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantCommentLevelAmount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantCommentLevelAmount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantCommentLevelAmount_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.OutletCommentLevelAmountVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletCommentLevelAmountVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantCommentLevelAmount_result.class, metaDataMap);
    }

    public getMerchantCommentLevelAmount_result() {
    }

    public getMerchantCommentLevelAmount_result(
      List<com.froad.thrift.vo.OutletCommentLevelAmountVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantCommentLevelAmount_result(getMerchantCommentLevelAmount_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.OutletCommentLevelAmountVo> __this__success = new ArrayList<com.froad.thrift.vo.OutletCommentLevelAmountVo>(other.success.size());
        for (com.froad.thrift.vo.OutletCommentLevelAmountVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.OutletCommentLevelAmountVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMerchantCommentLevelAmount_result deepCopy() {
      return new getMerchantCommentLevelAmount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.OutletCommentLevelAmountVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.OutletCommentLevelAmountVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.OutletCommentLevelAmountVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.OutletCommentLevelAmountVo> getSuccess() {
      return this.success;
    }

    public getMerchantCommentLevelAmount_result setSuccess(List<com.froad.thrift.vo.OutletCommentLevelAmountVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.OutletCommentLevelAmountVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantCommentLevelAmount_result)
        return this.equals((getMerchantCommentLevelAmount_result)that);
      return false;
    }

    public boolean equals(getMerchantCommentLevelAmount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantCommentLevelAmount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantCommentLevelAmount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantCommentLevelAmount_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantCommentLevelAmount_resultStandardScheme getScheme() {
        return new getMerchantCommentLevelAmount_resultStandardScheme();
      }
    }

    private static class getMerchantCommentLevelAmount_resultStandardScheme extends StandardScheme<getMerchantCommentLevelAmount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantCommentLevelAmount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.OutletCommentLevelAmountVo>(_list8.size);
                  com.froad.thrift.vo.OutletCommentLevelAmountVo _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.froad.thrift.vo.OutletCommentLevelAmountVo();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantCommentLevelAmount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.OutletCommentLevelAmountVo _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantCommentLevelAmount_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantCommentLevelAmount_resultTupleScheme getScheme() {
        return new getMerchantCommentLevelAmount_resultTupleScheme();
      }
    }

    private static class getMerchantCommentLevelAmount_resultTupleScheme extends TupleScheme<getMerchantCommentLevelAmount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantCommentLevelAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.OutletCommentLevelAmountVo _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantCommentLevelAmount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.OutletCommentLevelAmountVo>(_list13.size);
            com.froad.thrift.vo.OutletCommentLevelAmountVo _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.froad.thrift.vo.OutletCommentLevelAmountVo();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletCommentPageByOrgCode_args implements org.apache.thrift.TBase<getOutletCommentPageByOrgCode_args, getOutletCommentPageByOrgCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletCommentPageByOrgCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletCommentPageByOrgCode_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_COMMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletCommentVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletCommentPageByOrgCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletCommentPageByOrgCode_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.OutletCommentVo outletCommentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      OUTLET_COMMENT_VO((short)2, "outletCommentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // OUTLET_COMMENT_VO
            return OUTLET_COMMENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.OUTLET_COMMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("outletCommentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletCommentPageByOrgCode_args.class, metaDataMap);
    }

    public getOutletCommentPageByOrgCode_args() {
    }

    public getOutletCommentPageByOrgCode_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.OutletCommentVo outletCommentVo)
    {
      this();
      this.page = page;
      this.outletCommentVo = outletCommentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletCommentPageByOrgCode_args(getOutletCommentPageByOrgCode_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetOutletCommentVo()) {
        this.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo(other.outletCommentVo);
      }
    }

    public getOutletCommentPageByOrgCode_args deepCopy() {
      return new getOutletCommentPageByOrgCode_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.outletCommentVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getOutletCommentPageByOrgCode_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.OutletCommentVo getOutletCommentVo() {
      return this.outletCommentVo;
    }

    public getOutletCommentPageByOrgCode_args setOutletCommentVo(com.froad.thrift.vo.OutletCommentVo outletCommentVo) {
      this.outletCommentVo = outletCommentVo;
      return this;
    }

    public void unsetOutletCommentVo() {
      this.outletCommentVo = null;
    }

    /** Returns true if field outletCommentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletCommentVo() {
      return this.outletCommentVo != null;
    }

    public void setOutletCommentVoIsSet(boolean value) {
      if (!value) {
        this.outletCommentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case OUTLET_COMMENT_VO:
        if (value == null) {
          unsetOutletCommentVo();
        } else {
          setOutletCommentVo((com.froad.thrift.vo.OutletCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case OUTLET_COMMENT_VO:
        return getOutletCommentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case OUTLET_COMMENT_VO:
        return isSetOutletCommentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletCommentPageByOrgCode_args)
        return this.equals((getOutletCommentPageByOrgCode_args)that);
      return false;
    }

    public boolean equals(getOutletCommentPageByOrgCode_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_outletCommentVo = true && this.isSetOutletCommentVo();
      boolean that_present_outletCommentVo = true && that.isSetOutletCommentVo();
      if (this_present_outletCommentVo || that_present_outletCommentVo) {
        if (!(this_present_outletCommentVo && that_present_outletCommentVo))
          return false;
        if (!this.outletCommentVo.equals(that.outletCommentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_outletCommentVo = true && (isSetOutletCommentVo());
      list.add(present_outletCommentVo);
      if (present_outletCommentVo)
        list.add(outletCommentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletCommentPageByOrgCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletCommentVo()).compareTo(other.isSetOutletCommentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletCommentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletCommentVo, other.outletCommentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletCommentPageByOrgCode_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletCommentVo:");
      if (this.outletCommentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletCommentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (outletCommentVo != null) {
        outletCommentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletCommentPageByOrgCode_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletCommentPageByOrgCode_argsStandardScheme getScheme() {
        return new getOutletCommentPageByOrgCode_argsStandardScheme();
      }
    }

    private static class getOutletCommentPageByOrgCode_argsStandardScheme extends StandardScheme<getOutletCommentPageByOrgCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletCommentPageByOrgCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_COMMENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
                struct.outletCommentVo.read(iprot);
                struct.setOutletCommentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletCommentPageByOrgCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletCommentVo != null) {
          oprot.writeFieldBegin(OUTLET_COMMENT_VO_FIELD_DESC);
          struct.outletCommentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletCommentPageByOrgCode_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletCommentPageByOrgCode_argsTupleScheme getScheme() {
        return new getOutletCommentPageByOrgCode_argsTupleScheme();
      }
    }

    private static class getOutletCommentPageByOrgCode_argsTupleScheme extends TupleScheme<getOutletCommentPageByOrgCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletCommentPageByOrgCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetOutletCommentVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetOutletCommentVo()) {
          struct.outletCommentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletCommentPageByOrgCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletCommentVo = new com.froad.thrift.vo.OutletCommentVo();
          struct.outletCommentVo.read(iprot);
          struct.setOutletCommentVoIsSet(true);
        }
      }
    }

  }

  public static class getOutletCommentPageByOrgCode_result implements org.apache.thrift.TBase<getOutletCommentPageByOrgCode_result, getOutletCommentPageByOrgCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletCommentPageByOrgCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletCommentPageByOrgCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletCommentPageByOrgCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletCommentPageByOrgCode_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletCommentPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletCommentPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletCommentPageByOrgCode_result.class, metaDataMap);
    }

    public getOutletCommentPageByOrgCode_result() {
    }

    public getOutletCommentPageByOrgCode_result(
      com.froad.thrift.vo.OutletCommentPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletCommentPageByOrgCode_result(getOutletCommentPageByOrgCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletCommentPageVoRes(other.success);
      }
    }

    public getOutletCommentPageByOrgCode_result deepCopy() {
      return new getOutletCommentPageByOrgCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletCommentPageVoRes getSuccess() {
      return this.success;
    }

    public getOutletCommentPageByOrgCode_result setSuccess(com.froad.thrift.vo.OutletCommentPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletCommentPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletCommentPageByOrgCode_result)
        return this.equals((getOutletCommentPageByOrgCode_result)that);
      return false;
    }

    public boolean equals(getOutletCommentPageByOrgCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletCommentPageByOrgCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletCommentPageByOrgCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletCommentPageByOrgCode_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletCommentPageByOrgCode_resultStandardScheme getScheme() {
        return new getOutletCommentPageByOrgCode_resultStandardScheme();
      }
    }

    private static class getOutletCommentPageByOrgCode_resultStandardScheme extends StandardScheme<getOutletCommentPageByOrgCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletCommentPageByOrgCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletCommentPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletCommentPageByOrgCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletCommentPageByOrgCode_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletCommentPageByOrgCode_resultTupleScheme getScheme() {
        return new getOutletCommentPageByOrgCode_resultTupleScheme();
      }
    }

    private static class getOutletCommentPageByOrgCode_resultTupleScheme extends TupleScheme<getOutletCommentPageByOrgCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletCommentPageByOrgCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletCommentPageByOrgCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletCommentPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isExistComment_args implements org.apache.thrift.TBase<isExistComment_args, isExistComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<isExistComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isExistComment_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isExistComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isExistComment_argsTupleSchemeFactory());
    }

    public String memberCode; // required
    public String outletId; // required
    public long time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      OUTLET_ID((short)2, "outletId"),
      TIME((short)3, "time");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // OUTLET_ID
            return OUTLET_ID;
          case 3: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isExistComment_args.class, metaDataMap);
    }

    public isExistComment_args() {
    }

    public isExistComment_args(
      String memberCode,
      String outletId,
      long time)
    {
      this();
      this.memberCode = memberCode;
      this.outletId = outletId;
      this.time = time;
      setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isExistComment_args(isExistComment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMemberCode()) {
        this.memberCode = other.memberCode;
      }
      if (other.isSetOutletId()) {
        this.outletId = other.outletId;
      }
      this.time = other.time;
    }

    public isExistComment_args deepCopy() {
      return new isExistComment_args(this);
    }

    @Override
    public void clear() {
      this.memberCode = null;
      this.outletId = null;
      setTimeIsSet(false);
      this.time = 0;
    }

    public String getMemberCode() {
      return this.memberCode;
    }

    public isExistComment_args setMemberCode(String memberCode) {
      this.memberCode = memberCode;
      return this;
    }

    public void unsetMemberCode() {
      this.memberCode = null;
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return this.memberCode != null;
    }

    public void setMemberCodeIsSet(boolean value) {
      if (!value) {
        this.memberCode = null;
      }
    }

    public String getOutletId() {
      return this.outletId;
    }

    public isExistComment_args setOutletId(String outletId) {
      this.outletId = outletId;
      return this;
    }

    public void unsetOutletId() {
      this.outletId = null;
    }

    /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletId() {
      return this.outletId != null;
    }

    public void setOutletIdIsSet(boolean value) {
      if (!value) {
        this.outletId = null;
      }
    }

    public long getTime() {
      return this.time;
    }

    public isExistComment_args setTime(long time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((String)value);
        }
        break;

      case OUTLET_ID:
        if (value == null) {
          unsetOutletId();
        } else {
          setOutletId((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return getMemberCode();

      case OUTLET_ID:
        return getOutletId();

      case TIME:
        return Long.valueOf(getTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case OUTLET_ID:
        return isSetOutletId();
      case TIME:
        return isSetTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isExistComment_args)
        return this.equals((isExistComment_args)that);
      return false;
    }

    public boolean equals(isExistComment_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true && this.isSetMemberCode();
      boolean that_present_memberCode = true && that.isSetMemberCode();
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (!this.memberCode.equals(that.memberCode))
          return false;
      }

      boolean this_present_outletId = true && this.isSetOutletId();
      boolean that_present_outletId = true && that.isSetOutletId();
      if (this_present_outletId || that_present_outletId) {
        if (!(this_present_outletId && that_present_outletId))
          return false;
        if (!this.outletId.equals(that.outletId))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true && (isSetMemberCode());
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_outletId = true && (isSetOutletId());
      list.add(present_outletId);
      if (present_outletId)
        list.add(outletId);

      boolean present_time = true;
      list.add(present_time);
      if (present_time)
        list.add(time);

      return list.hashCode();
    }

    @Override
    public int compareTo(isExistComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isExistComment_args(");
      boolean first = true;

      sb.append("memberCode:");
      if (this.memberCode == null) {
        sb.append("null");
      } else {
        sb.append(this.memberCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletId:");
      if (this.outletId == null) {
        sb.append("null");
      } else {
        sb.append(this.outletId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isExistComment_argsStandardSchemeFactory implements SchemeFactory {
      public isExistComment_argsStandardScheme getScheme() {
        return new isExistComment_argsStandardScheme();
      }
    }

    private static class isExistComment_argsStandardScheme extends StandardScheme<isExistComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isExistComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.memberCode = iprot.readString();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outletId = iprot.readString();
                struct.setOutletIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.time = iprot.readI64();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isExistComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.memberCode != null) {
          oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
          oprot.writeString(struct.memberCode);
          oprot.writeFieldEnd();
        }
        if (struct.outletId != null) {
          oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
          oprot.writeString(struct.outletId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI64(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isExistComment_argsTupleSchemeFactory implements SchemeFactory {
      public isExistComment_argsTupleScheme getScheme() {
        return new isExistComment_argsTupleScheme();
      }
    }

    private static class isExistComment_argsTupleScheme extends TupleScheme<isExistComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isExistComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetOutletId()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMemberCode()) {
          oprot.writeString(struct.memberCode);
        }
        if (struct.isSetOutletId()) {
          oprot.writeString(struct.outletId);
        }
        if (struct.isSetTime()) {
          oprot.writeI64(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isExistComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readString();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletId = iprot.readString();
          struct.setOutletIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readI64();
          struct.setTimeIsSet(true);
        }
      }
    }

  }

  public static class isExistComment_result implements org.apache.thrift.TBase<isExistComment_result, isExistComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<isExistComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isExistComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isExistComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isExistComment_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isExistComment_result.class, metaDataMap);
    }

    public isExistComment_result() {
    }

    public isExistComment_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isExistComment_result(isExistComment_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isExistComment_result deepCopy() {
      return new isExistComment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isExistComment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isExistComment_result)
        return this.equals((isExistComment_result)that);
      return false;
    }

    public boolean equals(isExistComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isExistComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isExistComment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isExistComment_resultStandardSchemeFactory implements SchemeFactory {
      public isExistComment_resultStandardScheme getScheme() {
        return new isExistComment_resultStandardScheme();
      }
    }

    private static class isExistComment_resultStandardScheme extends StandardScheme<isExistComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isExistComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isExistComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isExistComment_resultTupleSchemeFactory implements SchemeFactory {
      public isExistComment_resultTupleScheme getScheme() {
        return new isExistComment_resultTupleScheme();
      }
    }

    private static class isExistComment_resultTupleScheme extends TupleScheme<isExistComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isExistComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isExistComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isExitsFaceToFaceComment_args implements org.apache.thrift.TBase<isExitsFaceToFaceComment_args, isExitsFaceToFaceComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<isExitsFaceToFaceComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isExitsFaceToFaceComment_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isExitsFaceToFaceComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isExitsFaceToFaceComment_argsTupleSchemeFactory());
    }

    public String memberCode; // required
    public String outletId; // required
    public String orderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      OUTLET_ID((short)2, "outletId"),
      ORDER_ID((short)3, "orderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // OUTLET_ID
            return OUTLET_ID;
          case 3: // ORDER_ID
            return ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isExitsFaceToFaceComment_args.class, metaDataMap);
    }

    public isExitsFaceToFaceComment_args() {
    }

    public isExitsFaceToFaceComment_args(
      String memberCode,
      String outletId,
      String orderId)
    {
      this();
      this.memberCode = memberCode;
      this.outletId = outletId;
      this.orderId = orderId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isExitsFaceToFaceComment_args(isExitsFaceToFaceComment_args other) {
      if (other.isSetMemberCode()) {
        this.memberCode = other.memberCode;
      }
      if (other.isSetOutletId()) {
        this.outletId = other.outletId;
      }
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
    }

    public isExitsFaceToFaceComment_args deepCopy() {
      return new isExitsFaceToFaceComment_args(this);
    }

    @Override
    public void clear() {
      this.memberCode = null;
      this.outletId = null;
      this.orderId = null;
    }

    public String getMemberCode() {
      return this.memberCode;
    }

    public isExitsFaceToFaceComment_args setMemberCode(String memberCode) {
      this.memberCode = memberCode;
      return this;
    }

    public void unsetMemberCode() {
      this.memberCode = null;
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return this.memberCode != null;
    }

    public void setMemberCodeIsSet(boolean value) {
      if (!value) {
        this.memberCode = null;
      }
    }

    public String getOutletId() {
      return this.outletId;
    }

    public isExitsFaceToFaceComment_args setOutletId(String outletId) {
      this.outletId = outletId;
      return this;
    }

    public void unsetOutletId() {
      this.outletId = null;
    }

    /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletId() {
      return this.outletId != null;
    }

    public void setOutletIdIsSet(boolean value) {
      if (!value) {
        this.outletId = null;
      }
    }

    public String getOrderId() {
      return this.orderId;
    }

    public isExitsFaceToFaceComment_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((String)value);
        }
        break;

      case OUTLET_ID:
        if (value == null) {
          unsetOutletId();
        } else {
          setOutletId((String)value);
        }
        break;

      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return getMemberCode();

      case OUTLET_ID:
        return getOutletId();

      case ORDER_ID:
        return getOrderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case OUTLET_ID:
        return isSetOutletId();
      case ORDER_ID:
        return isSetOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isExitsFaceToFaceComment_args)
        return this.equals((isExitsFaceToFaceComment_args)that);
      return false;
    }

    public boolean equals(isExitsFaceToFaceComment_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true && this.isSetMemberCode();
      boolean that_present_memberCode = true && that.isSetMemberCode();
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (!this.memberCode.equals(that.memberCode))
          return false;
      }

      boolean this_present_outletId = true && this.isSetOutletId();
      boolean that_present_outletId = true && that.isSetOutletId();
      if (this_present_outletId || that_present_outletId) {
        if (!(this_present_outletId && that_present_outletId))
          return false;
        if (!this.outletId.equals(that.outletId))
          return false;
      }

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true && (isSetMemberCode());
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_outletId = true && (isSetOutletId());
      list.add(present_outletId);
      if (present_outletId)
        list.add(outletId);

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      return list.hashCode();
    }

    @Override
    public int compareTo(isExitsFaceToFaceComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isExitsFaceToFaceComment_args(");
      boolean first = true;

      sb.append("memberCode:");
      if (this.memberCode == null) {
        sb.append("null");
      } else {
        sb.append(this.memberCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletId:");
      if (this.outletId == null) {
        sb.append("null");
      } else {
        sb.append(this.outletId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isExitsFaceToFaceComment_argsStandardSchemeFactory implements SchemeFactory {
      public isExitsFaceToFaceComment_argsStandardScheme getScheme() {
        return new isExitsFaceToFaceComment_argsStandardScheme();
      }
    }

    private static class isExitsFaceToFaceComment_argsStandardScheme extends StandardScheme<isExitsFaceToFaceComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isExitsFaceToFaceComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.memberCode = iprot.readString();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outletId = iprot.readString();
                struct.setOutletIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isExitsFaceToFaceComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.memberCode != null) {
          oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
          oprot.writeString(struct.memberCode);
          oprot.writeFieldEnd();
        }
        if (struct.outletId != null) {
          oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
          oprot.writeString(struct.outletId);
          oprot.writeFieldEnd();
        }
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isExitsFaceToFaceComment_argsTupleSchemeFactory implements SchemeFactory {
      public isExitsFaceToFaceComment_argsTupleScheme getScheme() {
        return new isExitsFaceToFaceComment_argsTupleScheme();
      }
    }

    private static class isExitsFaceToFaceComment_argsTupleScheme extends TupleScheme<isExitsFaceToFaceComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isExitsFaceToFaceComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetOutletId()) {
          optionals.set(1);
        }
        if (struct.isSetOrderId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMemberCode()) {
          oprot.writeString(struct.memberCode);
        }
        if (struct.isSetOutletId()) {
          oprot.writeString(struct.outletId);
        }
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isExitsFaceToFaceComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readString();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletId = iprot.readString();
          struct.setOutletIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
      }
    }

  }

  public static class isExitsFaceToFaceComment_result implements org.apache.thrift.TBase<isExitsFaceToFaceComment_result, isExitsFaceToFaceComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<isExitsFaceToFaceComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isExitsFaceToFaceComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isExitsFaceToFaceComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isExitsFaceToFaceComment_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isExitsFaceToFaceComment_result.class, metaDataMap);
    }

    public isExitsFaceToFaceComment_result() {
    }

    public isExitsFaceToFaceComment_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isExitsFaceToFaceComment_result(isExitsFaceToFaceComment_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isExitsFaceToFaceComment_result deepCopy() {
      return new isExitsFaceToFaceComment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isExitsFaceToFaceComment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isExitsFaceToFaceComment_result)
        return this.equals((isExitsFaceToFaceComment_result)that);
      return false;
    }

    public boolean equals(isExitsFaceToFaceComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isExitsFaceToFaceComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isExitsFaceToFaceComment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isExitsFaceToFaceComment_resultStandardSchemeFactory implements SchemeFactory {
      public isExitsFaceToFaceComment_resultStandardScheme getScheme() {
        return new isExitsFaceToFaceComment_resultStandardScheme();
      }
    }

    private static class isExitsFaceToFaceComment_resultStandardScheme extends StandardScheme<isExitsFaceToFaceComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isExitsFaceToFaceComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isExitsFaceToFaceComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isExitsFaceToFaceComment_resultTupleSchemeFactory implements SchemeFactory {
      public isExitsFaceToFaceComment_resultTupleScheme getScheme() {
        return new isExitsFaceToFaceComment_resultTupleScheme();
      }
    }

    private static class isExitsFaceToFaceComment_resultTupleScheme extends TupleScheme<isExitsFaceToFaceComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isExitsFaceToFaceComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isExitsFaceToFaceComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
