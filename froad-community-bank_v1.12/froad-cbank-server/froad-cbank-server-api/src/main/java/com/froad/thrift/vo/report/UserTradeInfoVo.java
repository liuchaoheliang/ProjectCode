/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 用户交易信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class UserTradeInfoVo implements org.apache.thrift.TBase<UserTradeInfoVo, UserTradeInfoVo._Fields>, java.io.Serializable, Cloneable, Comparable<UserTradeInfoVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserTradeInfoVo");

  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IS_VIP_FIELD_DESC = new org.apache.thrift.protocol.TField("isVip", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PRODUCT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("productNumber", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PRODUCT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("productAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField REFUNDS_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundsAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserTradeInfoVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTradeInfoVoTupleSchemeFactory());
  }

  /**
   * 用户名称*
   */
  public String userName; // optional
  /**
   * 注册手机号 *
   */
  public String mobile; // optional
  /**
   * 是否VIP *
   */
  public String isVip; // required
  /**
   * 订单总数 *
   */
  public int orderCount; // required
  /**
   * 订单总金额 *
   */
  public double totalAmount; // required
  /**
   * 购买商品数 *
   */
  public int productNumber; // required
  /**
   * 购买商品金额 *
   */
  public double productAmount; // required
  /**
   * 退款金额 *
   */
  public double refundsAmount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 用户名称*
     */
    USER_NAME((short)1, "userName"),
    /**
     * 注册手机号 *
     */
    MOBILE((short)2, "mobile"),
    /**
     * 是否VIP *
     */
    IS_VIP((short)3, "isVip"),
    /**
     * 订单总数 *
     */
    ORDER_COUNT((short)4, "orderCount"),
    /**
     * 订单总金额 *
     */
    TOTAL_AMOUNT((short)5, "totalAmount"),
    /**
     * 购买商品数 *
     */
    PRODUCT_NUMBER((short)6, "productNumber"),
    /**
     * 购买商品金额 *
     */
    PRODUCT_AMOUNT((short)7, "productAmount"),
    /**
     * 退款金额 *
     */
    REFUNDS_AMOUNT((short)8, "refundsAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_NAME
          return USER_NAME;
        case 2: // MOBILE
          return MOBILE;
        case 3: // IS_VIP
          return IS_VIP;
        case 4: // ORDER_COUNT
          return ORDER_COUNT;
        case 5: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 6: // PRODUCT_NUMBER
          return PRODUCT_NUMBER;
        case 7: // PRODUCT_AMOUNT
          return PRODUCT_AMOUNT;
        case 8: // REFUNDS_AMOUNT
          return REFUNDS_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERCOUNT_ISSET_ID = 0;
  private static final int __TOTALAMOUNT_ISSET_ID = 1;
  private static final int __PRODUCTNUMBER_ISSET_ID = 2;
  private static final int __PRODUCTAMOUNT_ISSET_ID = 3;
  private static final int __REFUNDSAMOUNT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER_NAME,_Fields.MOBILE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_VIP, new org.apache.thrift.meta_data.FieldMetaData("isVip", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("orderCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("productNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("productAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUNDS_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("refundsAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserTradeInfoVo.class, metaDataMap);
  }

  public UserTradeInfoVo() {
  }

  public UserTradeInfoVo(
    String isVip,
    int orderCount,
    double totalAmount,
    int productNumber,
    double productAmount,
    double refundsAmount)
  {
    this();
    this.isVip = isVip;
    this.orderCount = orderCount;
    setOrderCountIsSet(true);
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    this.productNumber = productNumber;
    setProductNumberIsSet(true);
    this.productAmount = productAmount;
    setProductAmountIsSet(true);
    this.refundsAmount = refundsAmount;
    setRefundsAmountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserTradeInfoVo(UserTradeInfoVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetIsVip()) {
      this.isVip = other.isVip;
    }
    this.orderCount = other.orderCount;
    this.totalAmount = other.totalAmount;
    this.productNumber = other.productNumber;
    this.productAmount = other.productAmount;
    this.refundsAmount = other.refundsAmount;
  }

  public UserTradeInfoVo deepCopy() {
    return new UserTradeInfoVo(this);
  }

  @Override
  public void clear() {
    this.userName = null;
    this.mobile = null;
    this.isVip = null;
    setOrderCountIsSet(false);
    this.orderCount = 0;
    setTotalAmountIsSet(false);
    this.totalAmount = 0.0;
    setProductNumberIsSet(false);
    this.productNumber = 0;
    setProductAmountIsSet(false);
    this.productAmount = 0.0;
    setRefundsAmountIsSet(false);
    this.refundsAmount = 0.0;
  }

  /**
   * 用户名称*
   */
  public String getUserName() {
    return this.userName;
  }

  /**
   * 用户名称*
   */
  public UserTradeInfoVo setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  /**
   * 注册手机号 *
   */
  public String getMobile() {
    return this.mobile;
  }

  /**
   * 注册手机号 *
   */
  public UserTradeInfoVo setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  /**
   * 是否VIP *
   */
  public String getIsVip() {
    return this.isVip;
  }

  /**
   * 是否VIP *
   */
  public UserTradeInfoVo setIsVip(String isVip) {
    this.isVip = isVip;
    return this;
  }

  public void unsetIsVip() {
    this.isVip = null;
  }

  /** Returns true if field isVip is set (has been assigned a value) and false otherwise */
  public boolean isSetIsVip() {
    return this.isVip != null;
  }

  public void setIsVipIsSet(boolean value) {
    if (!value) {
      this.isVip = null;
    }
  }

  /**
   * 订单总数 *
   */
  public int getOrderCount() {
    return this.orderCount;
  }

  /**
   * 订单总数 *
   */
  public UserTradeInfoVo setOrderCount(int orderCount) {
    this.orderCount = orderCount;
    setOrderCountIsSet(true);
    return this;
  }

  public void unsetOrderCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERCOUNT_ISSET_ID);
  }

  /** Returns true if field orderCount is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERCOUNT_ISSET_ID);
  }

  public void setOrderCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERCOUNT_ISSET_ID, value);
  }

  /**
   * 订单总金额 *
   */
  public double getTotalAmount() {
    return this.totalAmount;
  }

  /**
   * 订单总金额 *
   */
  public UserTradeInfoVo setTotalAmount(double totalAmount) {
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    return this;
  }

  public void unsetTotalAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  public void setTotalAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID, value);
  }

  /**
   * 购买商品数 *
   */
  public int getProductNumber() {
    return this.productNumber;
  }

  /**
   * 购买商品数 *
   */
  public UserTradeInfoVo setProductNumber(int productNumber) {
    this.productNumber = productNumber;
    setProductNumberIsSet(true);
    return this;
  }

  public void unsetProductNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTNUMBER_ISSET_ID);
  }

  /** Returns true if field productNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProductNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTNUMBER_ISSET_ID);
  }

  public void setProductNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTNUMBER_ISSET_ID, value);
  }

  /**
   * 购买商品金额 *
   */
  public double getProductAmount() {
    return this.productAmount;
  }

  /**
   * 购买商品金额 *
   */
  public UserTradeInfoVo setProductAmount(double productAmount) {
    this.productAmount = productAmount;
    setProductAmountIsSet(true);
    return this;
  }

  public void unsetProductAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTAMOUNT_ISSET_ID);
  }

  /** Returns true if field productAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetProductAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTAMOUNT_ISSET_ID);
  }

  public void setProductAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTAMOUNT_ISSET_ID, value);
  }

  /**
   * 退款金额 *
   */
  public double getRefundsAmount() {
    return this.refundsAmount;
  }

  /**
   * 退款金额 *
   */
  public UserTradeInfoVo setRefundsAmount(double refundsAmount) {
    this.refundsAmount = refundsAmount;
    setRefundsAmountIsSet(true);
    return this;
  }

  public void unsetRefundsAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDSAMOUNT_ISSET_ID);
  }

  /** Returns true if field refundsAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundsAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDSAMOUNT_ISSET_ID);
  }

  public void setRefundsAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDSAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case IS_VIP:
      if (value == null) {
        unsetIsVip();
      } else {
        setIsVip((String)value);
      }
      break;

    case ORDER_COUNT:
      if (value == null) {
        unsetOrderCount();
      } else {
        setOrderCount((Integer)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((Double)value);
      }
      break;

    case PRODUCT_NUMBER:
      if (value == null) {
        unsetProductNumber();
      } else {
        setProductNumber((Integer)value);
      }
      break;

    case PRODUCT_AMOUNT:
      if (value == null) {
        unsetProductAmount();
      } else {
        setProductAmount((Double)value);
      }
      break;

    case REFUNDS_AMOUNT:
      if (value == null) {
        unsetRefundsAmount();
      } else {
        setRefundsAmount((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_NAME:
      return getUserName();

    case MOBILE:
      return getMobile();

    case IS_VIP:
      return getIsVip();

    case ORDER_COUNT:
      return Integer.valueOf(getOrderCount());

    case TOTAL_AMOUNT:
      return Double.valueOf(getTotalAmount());

    case PRODUCT_NUMBER:
      return Integer.valueOf(getProductNumber());

    case PRODUCT_AMOUNT:
      return Double.valueOf(getProductAmount());

    case REFUNDS_AMOUNT:
      return Double.valueOf(getRefundsAmount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_NAME:
      return isSetUserName();
    case MOBILE:
      return isSetMobile();
    case IS_VIP:
      return isSetIsVip();
    case ORDER_COUNT:
      return isSetOrderCount();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case PRODUCT_NUMBER:
      return isSetProductNumber();
    case PRODUCT_AMOUNT:
      return isSetProductAmount();
    case REFUNDS_AMOUNT:
      return isSetRefundsAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserTradeInfoVo)
      return this.equals((UserTradeInfoVo)that);
    return false;
  }

  public boolean equals(UserTradeInfoVo that) {
    if (that == null)
      return false;

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_isVip = true && this.isSetIsVip();
    boolean that_present_isVip = true && that.isSetIsVip();
    if (this_present_isVip || that_present_isVip) {
      if (!(this_present_isVip && that_present_isVip))
        return false;
      if (!this.isVip.equals(that.isVip))
        return false;
    }

    boolean this_present_orderCount = true;
    boolean that_present_orderCount = true;
    if (this_present_orderCount || that_present_orderCount) {
      if (!(this_present_orderCount && that_present_orderCount))
        return false;
      if (this.orderCount != that.orderCount)
        return false;
    }

    boolean this_present_totalAmount = true;
    boolean that_present_totalAmount = true;
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (this.totalAmount != that.totalAmount)
        return false;
    }

    boolean this_present_productNumber = true;
    boolean that_present_productNumber = true;
    if (this_present_productNumber || that_present_productNumber) {
      if (!(this_present_productNumber && that_present_productNumber))
        return false;
      if (this.productNumber != that.productNumber)
        return false;
    }

    boolean this_present_productAmount = true;
    boolean that_present_productAmount = true;
    if (this_present_productAmount || that_present_productAmount) {
      if (!(this_present_productAmount && that_present_productAmount))
        return false;
      if (this.productAmount != that.productAmount)
        return false;
    }

    boolean this_present_refundsAmount = true;
    boolean that_present_refundsAmount = true;
    if (this_present_refundsAmount || that_present_refundsAmount) {
      if (!(this_present_refundsAmount && that_present_refundsAmount))
        return false;
      if (this.refundsAmount != that.refundsAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userName = true && (isSetUserName());
    list.add(present_userName);
    if (present_userName)
      list.add(userName);

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    boolean present_isVip = true && (isSetIsVip());
    list.add(present_isVip);
    if (present_isVip)
      list.add(isVip);

    boolean present_orderCount = true;
    list.add(present_orderCount);
    if (present_orderCount)
      list.add(orderCount);

    boolean present_totalAmount = true;
    list.add(present_totalAmount);
    if (present_totalAmount)
      list.add(totalAmount);

    boolean present_productNumber = true;
    list.add(present_productNumber);
    if (present_productNumber)
      list.add(productNumber);

    boolean present_productAmount = true;
    list.add(present_productAmount);
    if (present_productAmount)
      list.add(productAmount);

    boolean present_refundsAmount = true;
    list.add(present_refundsAmount);
    if (present_refundsAmount)
      list.add(refundsAmount);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserTradeInfoVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsVip()).compareTo(other.isSetIsVip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsVip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isVip, other.isVip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderCount()).compareTo(other.isSetOrderCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderCount, other.orderCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductNumber()).compareTo(other.isSetProductNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productNumber, other.productNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductAmount()).compareTo(other.isSetProductAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productAmount, other.productAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundsAmount()).compareTo(other.isSetRefundsAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundsAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundsAmount, other.refundsAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserTradeInfoVo(");
    boolean first = true;

    if (isSetUserName()) {
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("isVip:");
    if (this.isVip == null) {
      sb.append("null");
    } else {
      sb.append(this.isVip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderCount:");
    sb.append(this.orderCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmount:");
    sb.append(this.totalAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productNumber:");
    sb.append(this.productNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productAmount:");
    sb.append(this.productAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundsAmount:");
    sb.append(this.refundsAmount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (isVip == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'isVip' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'orderCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalAmount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'productNumber' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'productAmount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'refundsAmount' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserTradeInfoVoStandardSchemeFactory implements SchemeFactory {
    public UserTradeInfoVoStandardScheme getScheme() {
      return new UserTradeInfoVoStandardScheme();
    }
  }

  private static class UserTradeInfoVoStandardScheme extends StandardScheme<UserTradeInfoVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserTradeInfoVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_VIP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isVip = iprot.readString();
              struct.setIsVipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderCount = iprot.readI32();
              struct.setOrderCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalAmount = iprot.readDouble();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRODUCT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productNumber = iprot.readI32();
              struct.setProductNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRODUCT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.productAmount = iprot.readDouble();
              struct.setProductAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REFUNDS_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundsAmount = iprot.readDouble();
              struct.setRefundsAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOrderCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalAmount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProductNumber()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'productNumber' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetProductAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'productAmount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRefundsAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'refundsAmount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserTradeInfoVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userName != null) {
        if (struct.isSetUserName()) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobile != null) {
        if (struct.isSetMobile()) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isVip != null) {
        oprot.writeFieldBegin(IS_VIP_FIELD_DESC);
        oprot.writeString(struct.isVip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_COUNT_FIELD_DESC);
      oprot.writeI32(struct.orderCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.totalAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.productNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.productAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUNDS_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.refundsAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTradeInfoVoTupleSchemeFactory implements SchemeFactory {
    public UserTradeInfoVoTupleScheme getScheme() {
      return new UserTradeInfoVoTupleScheme();
    }
  }

  private static class UserTradeInfoVoTupleScheme extends TupleScheme<UserTradeInfoVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserTradeInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.isVip);
      oprot.writeI32(struct.orderCount);
      oprot.writeDouble(struct.totalAmount);
      oprot.writeI32(struct.productNumber);
      oprot.writeDouble(struct.productAmount);
      oprot.writeDouble(struct.refundsAmount);
      BitSet optionals = new BitSet();
      if (struct.isSetUserName()) {
        optionals.set(0);
      }
      if (struct.isSetMobile()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserTradeInfoVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.isVip = iprot.readString();
      struct.setIsVipIsSet(true);
      struct.orderCount = iprot.readI32();
      struct.setOrderCountIsSet(true);
      struct.totalAmount = iprot.readDouble();
      struct.setTotalAmountIsSet(true);
      struct.productNumber = iprot.readI32();
      struct.setProductNumberIsSet(true);
      struct.productAmount = iprot.readDouble();
      struct.setProductAmountIsSet(true);
      struct.refundsAmount = iprot.readDouble();
      struct.setRefundsAmountIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
    }
  }

}

