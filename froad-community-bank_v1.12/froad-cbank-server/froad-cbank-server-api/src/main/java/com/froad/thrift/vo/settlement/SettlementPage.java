/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.settlement;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 分页结构
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class SettlementPage implements org.apache.thrift.TBase<SettlementPage, SettlementPage._Fields>, java.io.Serializable, Cloneable, Comparable<SettlementPage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SettlementPage");

  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BEG_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begDate", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SETTLE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("settleState", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RESP_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("respList", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField BILL_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("billNo", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField IN_SETTLE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("inSettleState", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField NOT_IN_SETTLE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("notInSettleState", org.apache.thrift.protocol.TType.LIST, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SettlementPageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SettlementPageTupleSchemeFactory());
  }

  /**
   * 分页信息
   */
  public com.froad.thrift.vo.PageVo page; // required
  /**
   * 开始日期
   */
  public long begDate; // optional
  /**
   * 结束日期
   */
  public long endDate; // optional
  /**
   * 订单号
   */
  public String orderId; // optional
  /**
   * 客户端ID
   */
  public String clientId; // optional
  /**
   * 商户名称
   */
  public String merchantName; // optional
  /**
   * 门店名称
   */
  public String outletName; // optional
  /**
   * 结算状态[等于](0-未结算,1-结算中,2-结算成功,3-结算失败,4-无效结算记录)
   */
  public String settleState; // optional
  /**
   * 查询记录数
   */
  public List<SettlementVo> respList; // optional
  /**
   * 账单编号
   */
  public String billNo; // optional
  /**
   * 结算类型(1-团购,2-名优特惠,3-面对面)
   */
  public String type; // optional
  /**
   * 券ID
   */
  public String ticketId; // optional
  /**
   * 结算状态[等于](同settleState字段)
   */
  public List<String> inSettleState; // optional
  /**
   * 结算状态[不等于](同settleState字段)
   */
  public List<String> notInSettleState; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 分页信息
     */
    PAGE((short)1, "page"),
    /**
     * 开始日期
     */
    BEG_DATE((short)2, "begDate"),
    /**
     * 结束日期
     */
    END_DATE((short)3, "endDate"),
    /**
     * 订单号
     */
    ORDER_ID((short)4, "orderId"),
    /**
     * 客户端ID
     */
    CLIENT_ID((short)5, "clientId"),
    /**
     * 商户名称
     */
    MERCHANT_NAME((short)6, "merchantName"),
    /**
     * 门店名称
     */
    OUTLET_NAME((short)7, "outletName"),
    /**
     * 结算状态[等于](0-未结算,1-结算中,2-结算成功,3-结算失败,4-无效结算记录)
     */
    SETTLE_STATE((short)8, "settleState"),
    /**
     * 查询记录数
     */
    RESP_LIST((short)9, "respList"),
    /**
     * 账单编号
     */
    BILL_NO((short)10, "billNo"),
    /**
     * 结算类型(1-团购,2-名优特惠,3-面对面)
     */
    TYPE((short)11, "type"),
    /**
     * 券ID
     */
    TICKET_ID((short)12, "ticketId"),
    /**
     * 结算状态[等于](同settleState字段)
     */
    IN_SETTLE_STATE((short)13, "inSettleState"),
    /**
     * 结算状态[不等于](同settleState字段)
     */
    NOT_IN_SETTLE_STATE((short)14, "notInSettleState");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE
          return PAGE;
        case 2: // BEG_DATE
          return BEG_DATE;
        case 3: // END_DATE
          return END_DATE;
        case 4: // ORDER_ID
          return ORDER_ID;
        case 5: // CLIENT_ID
          return CLIENT_ID;
        case 6: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 7: // OUTLET_NAME
          return OUTLET_NAME;
        case 8: // SETTLE_STATE
          return SETTLE_STATE;
        case 9: // RESP_LIST
          return RESP_LIST;
        case 10: // BILL_NO
          return BILL_NO;
        case 11: // TYPE
          return TYPE;
        case 12: // TICKET_ID
          return TICKET_ID;
        case 13: // IN_SETTLE_STATE
          return IN_SETTLE_STATE;
        case 14: // NOT_IN_SETTLE_STATE
          return NOT_IN_SETTLE_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BEGDATE_ISSET_ID = 0;
  private static final int __ENDDATE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BEG_DATE,_Fields.END_DATE,_Fields.ORDER_ID,_Fields.CLIENT_ID,_Fields.MERCHANT_NAME,_Fields.OUTLET_NAME,_Fields.SETTLE_STATE,_Fields.RESP_LIST,_Fields.BILL_NO,_Fields.TYPE,_Fields.TICKET_ID,_Fields.IN_SETTLE_STATE,_Fields.NOT_IN_SETTLE_STATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
    tmpMap.put(_Fields.BEG_DATE, new org.apache.thrift.meta_data.FieldMetaData("begDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_STATE, new org.apache.thrift.meta_data.FieldMetaData("settleState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESP_LIST, new org.apache.thrift.meta_data.FieldMetaData("respList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SettlementVo.class))));
    tmpMap.put(_Fields.BILL_NO, new org.apache.thrift.meta_data.FieldMetaData("billNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IN_SETTLE_STATE, new org.apache.thrift.meta_data.FieldMetaData("inSettleState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NOT_IN_SETTLE_STATE, new org.apache.thrift.meta_data.FieldMetaData("notInSettleState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettlementPage.class, metaDataMap);
  }

  public SettlementPage() {
  }

  public SettlementPage(
    com.froad.thrift.vo.PageVo page)
  {
    this();
    this.page = page;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SettlementPage(SettlementPage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPage()) {
      this.page = new com.froad.thrift.vo.PageVo(other.page);
    }
    this.begDate = other.begDate;
    this.endDate = other.endDate;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
    if (other.isSetSettleState()) {
      this.settleState = other.settleState;
    }
    if (other.isSetRespList()) {
      List<SettlementVo> __this__respList = new ArrayList<SettlementVo>(other.respList.size());
      for (SettlementVo other_element : other.respList) {
        __this__respList.add(new SettlementVo(other_element));
      }
      this.respList = __this__respList;
    }
    if (other.isSetBillNo()) {
      this.billNo = other.billNo;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetTicketId()) {
      this.ticketId = other.ticketId;
    }
    if (other.isSetInSettleState()) {
      List<String> __this__inSettleState = new ArrayList<String>(other.inSettleState);
      this.inSettleState = __this__inSettleState;
    }
    if (other.isSetNotInSettleState()) {
      List<String> __this__notInSettleState = new ArrayList<String>(other.notInSettleState);
      this.notInSettleState = __this__notInSettleState;
    }
  }

  public SettlementPage deepCopy() {
    return new SettlementPage(this);
  }

  @Override
  public void clear() {
    this.page = null;
    setBegDateIsSet(false);
    this.begDate = 0;
    setEndDateIsSet(false);
    this.endDate = 0;
    this.orderId = null;
    this.clientId = null;
    this.merchantName = null;
    this.outletName = null;
    this.settleState = null;
    this.respList = null;
    this.billNo = null;
    this.type = null;
    this.ticketId = null;
    this.inSettleState = null;
    this.notInSettleState = null;
  }

  /**
   * 分页信息
   */
  public com.froad.thrift.vo.PageVo getPage() {
    return this.page;
  }

  /**
   * 分页信息
   */
  public SettlementPage setPage(com.froad.thrift.vo.PageVo page) {
    this.page = page;
    return this;
  }

  public void unsetPage() {
    this.page = null;
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return this.page != null;
  }

  public void setPageIsSet(boolean value) {
    if (!value) {
      this.page = null;
    }
  }

  /**
   * 开始日期
   */
  public long getBegDate() {
    return this.begDate;
  }

  /**
   * 开始日期
   */
  public SettlementPage setBegDate(long begDate) {
    this.begDate = begDate;
    setBegDateIsSet(true);
    return this;
  }

  public void unsetBegDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGDATE_ISSET_ID);
  }

  /** Returns true if field begDate is set (has been assigned a value) and false otherwise */
  public boolean isSetBegDate() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGDATE_ISSET_ID);
  }

  public void setBegDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGDATE_ISSET_ID, value);
  }

  /**
   * 结束日期
   */
  public long getEndDate() {
    return this.endDate;
  }

  /**
   * 结束日期
   */
  public SettlementPage setEndDate(long endDate) {
    this.endDate = endDate;
    setEndDateIsSet(true);
    return this;
  }

  public void unsetEndDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
  }

  public void setEndDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
  }

  /**
   * 订单号
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单号
   */
  public SettlementPage setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public SettlementPage setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 商户名称
   */
  public String getMerchantName() {
    return this.merchantName;
  }

  /**
   * 商户名称
   */
  public SettlementPage setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  /**
   * 门店名称
   */
  public String getOutletName() {
    return this.outletName;
  }

  /**
   * 门店名称
   */
  public SettlementPage setOutletName(String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  /**
   * 结算状态[等于](0-未结算,1-结算中,2-结算成功,3-结算失败,4-无效结算记录)
   */
  public String getSettleState() {
    return this.settleState;
  }

  /**
   * 结算状态[等于](0-未结算,1-结算中,2-结算成功,3-结算失败,4-无效结算记录)
   */
  public SettlementPage setSettleState(String settleState) {
    this.settleState = settleState;
    return this;
  }

  public void unsetSettleState() {
    this.settleState = null;
  }

  /** Returns true if field settleState is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleState() {
    return this.settleState != null;
  }

  public void setSettleStateIsSet(boolean value) {
    if (!value) {
      this.settleState = null;
    }
  }

  public int getRespListSize() {
    return (this.respList == null) ? 0 : this.respList.size();
  }

  public java.util.Iterator<SettlementVo> getRespListIterator() {
    return (this.respList == null) ? null : this.respList.iterator();
  }

  public void addToRespList(SettlementVo elem) {
    if (this.respList == null) {
      this.respList = new ArrayList<SettlementVo>();
    }
    this.respList.add(elem);
  }

  /**
   * 查询记录数
   */
  public List<SettlementVo> getRespList() {
    return this.respList;
  }

  /**
   * 查询记录数
   */
  public SettlementPage setRespList(List<SettlementVo> respList) {
    this.respList = respList;
    return this;
  }

  public void unsetRespList() {
    this.respList = null;
  }

  /** Returns true if field respList is set (has been assigned a value) and false otherwise */
  public boolean isSetRespList() {
    return this.respList != null;
  }

  public void setRespListIsSet(boolean value) {
    if (!value) {
      this.respList = null;
    }
  }

  /**
   * 账单编号
   */
  public String getBillNo() {
    return this.billNo;
  }

  /**
   * 账单编号
   */
  public SettlementPage setBillNo(String billNo) {
    this.billNo = billNo;
    return this;
  }

  public void unsetBillNo() {
    this.billNo = null;
  }

  /** Returns true if field billNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBillNo() {
    return this.billNo != null;
  }

  public void setBillNoIsSet(boolean value) {
    if (!value) {
      this.billNo = null;
    }
  }

  /**
   * 结算类型(1-团购,2-名优特惠,3-面对面)
   */
  public String getType() {
    return this.type;
  }

  /**
   * 结算类型(1-团购,2-名优特惠,3-面对面)
   */
  public SettlementPage setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 券ID
   */
  public String getTicketId() {
    return this.ticketId;
  }

  /**
   * 券ID
   */
  public SettlementPage setTicketId(String ticketId) {
    this.ticketId = ticketId;
    return this;
  }

  public void unsetTicketId() {
    this.ticketId = null;
  }

  /** Returns true if field ticketId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketId() {
    return this.ticketId != null;
  }

  public void setTicketIdIsSet(boolean value) {
    if (!value) {
      this.ticketId = null;
    }
  }

  public int getInSettleStateSize() {
    return (this.inSettleState == null) ? 0 : this.inSettleState.size();
  }

  public java.util.Iterator<String> getInSettleStateIterator() {
    return (this.inSettleState == null) ? null : this.inSettleState.iterator();
  }

  public void addToInSettleState(String elem) {
    if (this.inSettleState == null) {
      this.inSettleState = new ArrayList<String>();
    }
    this.inSettleState.add(elem);
  }

  /**
   * 结算状态[等于](同settleState字段)
   */
  public List<String> getInSettleState() {
    return this.inSettleState;
  }

  /**
   * 结算状态[等于](同settleState字段)
   */
  public SettlementPage setInSettleState(List<String> inSettleState) {
    this.inSettleState = inSettleState;
    return this;
  }

  public void unsetInSettleState() {
    this.inSettleState = null;
  }

  /** Returns true if field inSettleState is set (has been assigned a value) and false otherwise */
  public boolean isSetInSettleState() {
    return this.inSettleState != null;
  }

  public void setInSettleStateIsSet(boolean value) {
    if (!value) {
      this.inSettleState = null;
    }
  }

  public int getNotInSettleStateSize() {
    return (this.notInSettleState == null) ? 0 : this.notInSettleState.size();
  }

  public java.util.Iterator<String> getNotInSettleStateIterator() {
    return (this.notInSettleState == null) ? null : this.notInSettleState.iterator();
  }

  public void addToNotInSettleState(String elem) {
    if (this.notInSettleState == null) {
      this.notInSettleState = new ArrayList<String>();
    }
    this.notInSettleState.add(elem);
  }

  /**
   * 结算状态[不等于](同settleState字段)
   */
  public List<String> getNotInSettleState() {
    return this.notInSettleState;
  }

  /**
   * 结算状态[不等于](同settleState字段)
   */
  public SettlementPage setNotInSettleState(List<String> notInSettleState) {
    this.notInSettleState = notInSettleState;
    return this;
  }

  public void unsetNotInSettleState() {
    this.notInSettleState = null;
  }

  /** Returns true if field notInSettleState is set (has been assigned a value) and false otherwise */
  public boolean isSetNotInSettleState() {
    return this.notInSettleState != null;
  }

  public void setNotInSettleStateIsSet(boolean value) {
    if (!value) {
      this.notInSettleState = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((com.froad.thrift.vo.PageVo)value);
      }
      break;

    case BEG_DATE:
      if (value == null) {
        unsetBegDate();
      } else {
        setBegDate((Long)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((Long)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((String)value);
      }
      break;

    case SETTLE_STATE:
      if (value == null) {
        unsetSettleState();
      } else {
        setSettleState((String)value);
      }
      break;

    case RESP_LIST:
      if (value == null) {
        unsetRespList();
      } else {
        setRespList((List<SettlementVo>)value);
      }
      break;

    case BILL_NO:
      if (value == null) {
        unsetBillNo();
      } else {
        setBillNo((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case TICKET_ID:
      if (value == null) {
        unsetTicketId();
      } else {
        setTicketId((String)value);
      }
      break;

    case IN_SETTLE_STATE:
      if (value == null) {
        unsetInSettleState();
      } else {
        setInSettleState((List<String>)value);
      }
      break;

    case NOT_IN_SETTLE_STATE:
      if (value == null) {
        unsetNotInSettleState();
      } else {
        setNotInSettleState((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE:
      return getPage();

    case BEG_DATE:
      return Long.valueOf(getBegDate());

    case END_DATE:
      return Long.valueOf(getEndDate());

    case ORDER_ID:
      return getOrderId();

    case CLIENT_ID:
      return getClientId();

    case MERCHANT_NAME:
      return getMerchantName();

    case OUTLET_NAME:
      return getOutletName();

    case SETTLE_STATE:
      return getSettleState();

    case RESP_LIST:
      return getRespList();

    case BILL_NO:
      return getBillNo();

    case TYPE:
      return getType();

    case TICKET_ID:
      return getTicketId();

    case IN_SETTLE_STATE:
      return getInSettleState();

    case NOT_IN_SETTLE_STATE:
      return getNotInSettleState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE:
      return isSetPage();
    case BEG_DATE:
      return isSetBegDate();
    case END_DATE:
      return isSetEndDate();
    case ORDER_ID:
      return isSetOrderId();
    case CLIENT_ID:
      return isSetClientId();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case OUTLET_NAME:
      return isSetOutletName();
    case SETTLE_STATE:
      return isSetSettleState();
    case RESP_LIST:
      return isSetRespList();
    case BILL_NO:
      return isSetBillNo();
    case TYPE:
      return isSetType();
    case TICKET_ID:
      return isSetTicketId();
    case IN_SETTLE_STATE:
      return isSetInSettleState();
    case NOT_IN_SETTLE_STATE:
      return isSetNotInSettleState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SettlementPage)
      return this.equals((SettlementPage)that);
    return false;
  }

  public boolean equals(SettlementPage that) {
    if (that == null)
      return false;

    boolean this_present_page = true && this.isSetPage();
    boolean that_present_page = true && that.isSetPage();
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (!this.page.equals(that.page))
        return false;
    }

    boolean this_present_begDate = true && this.isSetBegDate();
    boolean that_present_begDate = true && that.isSetBegDate();
    if (this_present_begDate || that_present_begDate) {
      if (!(this_present_begDate && that_present_begDate))
        return false;
      if (this.begDate != that.begDate)
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (this.endDate != that.endDate)
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    boolean this_present_settleState = true && this.isSetSettleState();
    boolean that_present_settleState = true && that.isSetSettleState();
    if (this_present_settleState || that_present_settleState) {
      if (!(this_present_settleState && that_present_settleState))
        return false;
      if (!this.settleState.equals(that.settleState))
        return false;
    }

    boolean this_present_respList = true && this.isSetRespList();
    boolean that_present_respList = true && that.isSetRespList();
    if (this_present_respList || that_present_respList) {
      if (!(this_present_respList && that_present_respList))
        return false;
      if (!this.respList.equals(that.respList))
        return false;
    }

    boolean this_present_billNo = true && this.isSetBillNo();
    boolean that_present_billNo = true && that.isSetBillNo();
    if (this_present_billNo || that_present_billNo) {
      if (!(this_present_billNo && that_present_billNo))
        return false;
      if (!this.billNo.equals(that.billNo))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_ticketId = true && this.isSetTicketId();
    boolean that_present_ticketId = true && that.isSetTicketId();
    if (this_present_ticketId || that_present_ticketId) {
      if (!(this_present_ticketId && that_present_ticketId))
        return false;
      if (!this.ticketId.equals(that.ticketId))
        return false;
    }

    boolean this_present_inSettleState = true && this.isSetInSettleState();
    boolean that_present_inSettleState = true && that.isSetInSettleState();
    if (this_present_inSettleState || that_present_inSettleState) {
      if (!(this_present_inSettleState && that_present_inSettleState))
        return false;
      if (!this.inSettleState.equals(that.inSettleState))
        return false;
    }

    boolean this_present_notInSettleState = true && this.isSetNotInSettleState();
    boolean that_present_notInSettleState = true && that.isSetNotInSettleState();
    if (this_present_notInSettleState || that_present_notInSettleState) {
      if (!(this_present_notInSettleState && that_present_notInSettleState))
        return false;
      if (!this.notInSettleState.equals(that.notInSettleState))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_page = true && (isSetPage());
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_begDate = true && (isSetBegDate());
    list.add(present_begDate);
    if (present_begDate)
      list.add(begDate);

    boolean present_endDate = true && (isSetEndDate());
    list.add(present_endDate);
    if (present_endDate)
      list.add(endDate);

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_outletName = true && (isSetOutletName());
    list.add(present_outletName);
    if (present_outletName)
      list.add(outletName);

    boolean present_settleState = true && (isSetSettleState());
    list.add(present_settleState);
    if (present_settleState)
      list.add(settleState);

    boolean present_respList = true && (isSetRespList());
    list.add(present_respList);
    if (present_respList)
      list.add(respList);

    boolean present_billNo = true && (isSetBillNo());
    list.add(present_billNo);
    if (present_billNo)
      list.add(billNo);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_ticketId = true && (isSetTicketId());
    list.add(present_ticketId);
    if (present_ticketId)
      list.add(ticketId);

    boolean present_inSettleState = true && (isSetInSettleState());
    list.add(present_inSettleState);
    if (present_inSettleState)
      list.add(inSettleState);

    boolean present_notInSettleState = true && (isSetNotInSettleState());
    list.add(present_notInSettleState);
    if (present_notInSettleState)
      list.add(notInSettleState);

    return list.hashCode();
  }

  @Override
  public int compareTo(SettlementPage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBegDate()).compareTo(other.isSetBegDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBegDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begDate, other.begDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleState()).compareTo(other.isSetSettleState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleState, other.settleState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRespList()).compareTo(other.isSetRespList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRespList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.respList, other.respList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBillNo()).compareTo(other.isSetBillNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBillNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.billNo, other.billNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketId()).compareTo(other.isSetTicketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketId, other.ticketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInSettleState()).compareTo(other.isSetInSettleState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInSettleState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inSettleState, other.inSettleState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotInSettleState()).compareTo(other.isSetNotInSettleState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotInSettleState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notInSettleState, other.notInSettleState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SettlementPage(");
    boolean first = true;

    sb.append("page:");
    if (this.page == null) {
      sb.append("null");
    } else {
      sb.append(this.page);
    }
    first = false;
    if (isSetBegDate()) {
      if (!first) sb.append(", ");
      sb.append("begDate:");
      sb.append(this.begDate);
      first = false;
    }
    if (isSetEndDate()) {
      if (!first) sb.append(", ");
      sb.append("endDate:");
      sb.append(this.endDate);
      first = false;
    }
    if (isSetOrderId()) {
      if (!first) sb.append(", ");
      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetMerchantName()) {
      if (!first) sb.append(", ");
      sb.append("merchantName:");
      if (this.merchantName == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantName);
      }
      first = false;
    }
    if (isSetOutletName()) {
      if (!first) sb.append(", ");
      sb.append("outletName:");
      if (this.outletName == null) {
        sb.append("null");
      } else {
        sb.append(this.outletName);
      }
      first = false;
    }
    if (isSetSettleState()) {
      if (!first) sb.append(", ");
      sb.append("settleState:");
      if (this.settleState == null) {
        sb.append("null");
      } else {
        sb.append(this.settleState);
      }
      first = false;
    }
    if (isSetRespList()) {
      if (!first) sb.append(", ");
      sb.append("respList:");
      if (this.respList == null) {
        sb.append("null");
      } else {
        sb.append(this.respList);
      }
      first = false;
    }
    if (isSetBillNo()) {
      if (!first) sb.append(", ");
      sb.append("billNo:");
      if (this.billNo == null) {
        sb.append("null");
      } else {
        sb.append(this.billNo);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetTicketId()) {
      if (!first) sb.append(", ");
      sb.append("ticketId:");
      if (this.ticketId == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketId);
      }
      first = false;
    }
    if (isSetInSettleState()) {
      if (!first) sb.append(", ");
      sb.append("inSettleState:");
      if (this.inSettleState == null) {
        sb.append("null");
      } else {
        sb.append(this.inSettleState);
      }
      first = false;
    }
    if (isSetNotInSettleState()) {
      if (!first) sb.append(", ");
      sb.append("notInSettleState:");
      if (this.notInSettleState == null) {
        sb.append("null");
      } else {
        sb.append(this.notInSettleState);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (page != null) {
      page.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettlementPageStandardSchemeFactory implements SchemeFactory {
    public SettlementPageStandardScheme getScheme() {
      return new SettlementPageStandardScheme();
    }
  }

  private static class SettlementPageStandardScheme extends StandardScheme<SettlementPage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SettlementPage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.page = new com.froad.thrift.vo.PageVo();
              struct.page.read(iprot);
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BEG_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.begDate = iprot.readI64();
              struct.setBegDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endDate = iprot.readI64();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SETTLE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleState = iprot.readString();
              struct.setSettleStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RESP_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.respList = new ArrayList<SettlementVo>(_list8.size);
                SettlementVo _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new SettlementVo();
                  _elem9.read(iprot);
                  struct.respList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setRespListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BILL_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.billNo = iprot.readString();
              struct.setBillNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TICKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketId = iprot.readString();
              struct.setTicketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IN_SETTLE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.inSettleState = new ArrayList<String>(_list11.size);
                String _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = iprot.readString();
                  struct.inSettleState.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setInSettleStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NOT_IN_SETTLE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.notInSettleState = new ArrayList<String>(_list14.size);
                String _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = iprot.readString();
                  struct.notInSettleState.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setNotInSettleStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SettlementPage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.page != null) {
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        struct.page.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBegDate()) {
        oprot.writeFieldBegin(BEG_DATE_FIELD_DESC);
        oprot.writeI64(struct.begDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndDate()) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeI64(struct.endDate);
        oprot.writeFieldEnd();
      }
      if (struct.orderId != null) {
        if (struct.isSetOrderId()) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.merchantName != null) {
        if (struct.isSetMerchantName()) {
          oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
          oprot.writeString(struct.merchantName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.outletName != null) {
        if (struct.isSetOutletName()) {
          oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
          oprot.writeString(struct.outletName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.settleState != null) {
        if (struct.isSetSettleState()) {
          oprot.writeFieldBegin(SETTLE_STATE_FIELD_DESC);
          oprot.writeString(struct.settleState);
          oprot.writeFieldEnd();
        }
      }
      if (struct.respList != null) {
        if (struct.isSetRespList()) {
          oprot.writeFieldBegin(RESP_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.respList.size()));
            for (SettlementVo _iter17 : struct.respList)
            {
              _iter17.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.billNo != null) {
        if (struct.isSetBillNo()) {
          oprot.writeFieldBegin(BILL_NO_FIELD_DESC);
          oprot.writeString(struct.billNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketId != null) {
        if (struct.isSetTicketId()) {
          oprot.writeFieldBegin(TICKET_ID_FIELD_DESC);
          oprot.writeString(struct.ticketId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.inSettleState != null) {
        if (struct.isSetInSettleState()) {
          oprot.writeFieldBegin(IN_SETTLE_STATE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.inSettleState.size()));
            for (String _iter18 : struct.inSettleState)
            {
              oprot.writeString(_iter18);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.notInSettleState != null) {
        if (struct.isSetNotInSettleState()) {
          oprot.writeFieldBegin(NOT_IN_SETTLE_STATE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.notInSettleState.size()));
            for (String _iter19 : struct.notInSettleState)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SettlementPageTupleSchemeFactory implements SchemeFactory {
    public SettlementPageTupleScheme getScheme() {
      return new SettlementPageTupleScheme();
    }
  }

  private static class SettlementPageTupleScheme extends TupleScheme<SettlementPage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SettlementPage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPage()) {
        optionals.set(0);
      }
      if (struct.isSetBegDate()) {
        optionals.set(1);
      }
      if (struct.isSetEndDate()) {
        optionals.set(2);
      }
      if (struct.isSetOrderId()) {
        optionals.set(3);
      }
      if (struct.isSetClientId()) {
        optionals.set(4);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(5);
      }
      if (struct.isSetOutletName()) {
        optionals.set(6);
      }
      if (struct.isSetSettleState()) {
        optionals.set(7);
      }
      if (struct.isSetRespList()) {
        optionals.set(8);
      }
      if (struct.isSetBillNo()) {
        optionals.set(9);
      }
      if (struct.isSetType()) {
        optionals.set(10);
      }
      if (struct.isSetTicketId()) {
        optionals.set(11);
      }
      if (struct.isSetInSettleState()) {
        optionals.set(12);
      }
      if (struct.isSetNotInSettleState()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPage()) {
        struct.page.write(oprot);
      }
      if (struct.isSetBegDate()) {
        oprot.writeI64(struct.begDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeI64(struct.endDate);
      }
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
      if (struct.isSetSettleState()) {
        oprot.writeString(struct.settleState);
      }
      if (struct.isSetRespList()) {
        {
          oprot.writeI32(struct.respList.size());
          for (SettlementVo _iter20 : struct.respList)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetBillNo()) {
        oprot.writeString(struct.billNo);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetTicketId()) {
        oprot.writeString(struct.ticketId);
      }
      if (struct.isSetInSettleState()) {
        {
          oprot.writeI32(struct.inSettleState.size());
          for (String _iter21 : struct.inSettleState)
          {
            oprot.writeString(_iter21);
          }
        }
      }
      if (struct.isSetNotInSettleState()) {
        {
          oprot.writeI32(struct.notInSettleState.size());
          for (String _iter22 : struct.notInSettleState)
          {
            oprot.writeString(_iter22);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SettlementPage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.page = new com.froad.thrift.vo.PageVo();
        struct.page.read(iprot);
        struct.setPageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.begDate = iprot.readI64();
        struct.setBegDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endDate = iprot.readI64();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.settleState = iprot.readString();
        struct.setSettleStateIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.respList = new ArrayList<SettlementVo>(_list23.size);
          SettlementVo _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = new SettlementVo();
            _elem24.read(iprot);
            struct.respList.add(_elem24);
          }
        }
        struct.setRespListIsSet(true);
      }
      if (incoming.get(9)) {
        struct.billNo = iprot.readString();
        struct.setBillNoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ticketId = iprot.readString();
        struct.setTicketIdIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.inSettleState = new ArrayList<String>(_list26.size);
          String _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = iprot.readString();
            struct.inSettleState.add(_elem27);
          }
        }
        struct.setInSettleStateIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.notInSettleState = new ArrayList<String>(_list29.size);
          String _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readString();
            struct.notInSettleState.add(_elem30);
          }
        }
        struct.setNotInSettleStateIsSet(true);
      }
    }
  }

}

