/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 营销活动基础规则
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ActiveBaseRuleVo implements org.apache.thrift.TBase<ActiveBaseRuleVo, ActiveBaseRuleVo._Fields>, java.io.Serializable, Cloneable, Comparable<ActiveBaseRuleVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActiveBaseRuleVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField ACTIVE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("activeName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ACTIVE_LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("activeLogo", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField EXPIRE_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expireStartTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField EXPIRE_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expireEndTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField LIMIT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("limitType", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MERCHANT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantRate", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField BANK_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("bankRate", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField FFT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fftRate", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SETTLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("settleType", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActiveBaseRuleVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActiveBaseRuleVoTupleSchemeFactory());
  }

  /**
   * 主键ID
   */
  public long id; // required
  /**
   * 客户端ID
   */
  public String clientId; // required
  /**
   * 活动ID
   */
  public String activeId; // required
  /**
   * 活动类型(上限100种活动)
   */
  public String type; // required
  /**
   * 活动状态 0-待提交1-审核中2-审核不通过
   * 3-启动 4-禁止
   */
  public String status; // required
  /**
   * 创建时间
   */
  public long createTime; // required
  /**
   * 更新时间
   */
  public long updateTime; // required
  /**
   * 活动名称
   */
  public String activeName; // required
  /**
   * 活动logo对应url(可无)
   */
  public String activeLogo; // required
  /**
   * 有效期开始时间
   */
  public long expireStartTime; // required
  /**
   * 有效期结束时间
   */
  public long expireEndTime; // required
  /**
   * 限制类型
   * 0-不限制 1-限制商户 2-限制门
   * 店(预留) 3-限制商品
   */
  public String limitType; // required
  /**
   * 商户补贴比例
   */
  public int merchantRate; // required
  /**
   * 银行补贴比例
   */
  public int bankRate; // required
  /**
   * 方付通补贴比例
   */
  public int fftRate; // required
  /**
   * 结算方式 0-实时结算 1-延期结算
   */
  public String settleType; // required
  /**
   * 活动描述
   */
  public String description; // required
  /**
   * 操作员
   */
  public String operator; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键ID
     */
    ID((short)1, "id"),
    /**
     * 客户端ID
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 活动ID
     */
    ACTIVE_ID((short)3, "activeId"),
    /**
     * 活动类型(上限100种活动)
     */
    TYPE((short)4, "type"),
    /**
     * 活动状态 0-待提交1-审核中2-审核不通过
     * 3-启动 4-禁止
     */
    STATUS((short)5, "status"),
    /**
     * 创建时间
     */
    CREATE_TIME((short)6, "createTime"),
    /**
     * 更新时间
     */
    UPDATE_TIME((short)7, "updateTime"),
    /**
     * 活动名称
     */
    ACTIVE_NAME((short)8, "activeName"),
    /**
     * 活动logo对应url(可无)
     */
    ACTIVE_LOGO((short)9, "activeLogo"),
    /**
     * 有效期开始时间
     */
    EXPIRE_START_TIME((short)10, "expireStartTime"),
    /**
     * 有效期结束时间
     */
    EXPIRE_END_TIME((short)11, "expireEndTime"),
    /**
     * 限制类型
     * 0-不限制 1-限制商户 2-限制门
     * 店(预留) 3-限制商品
     */
    LIMIT_TYPE((short)12, "limitType"),
    /**
     * 商户补贴比例
     */
    MERCHANT_RATE((short)13, "merchantRate"),
    /**
     * 银行补贴比例
     */
    BANK_RATE((short)14, "bankRate"),
    /**
     * 方付通补贴比例
     */
    FFT_RATE((short)15, "fftRate"),
    /**
     * 结算方式 0-实时结算 1-延期结算
     */
    SETTLE_TYPE((short)16, "settleType"),
    /**
     * 活动描述
     */
    DESCRIPTION((short)17, "description"),
    /**
     * 操作员
     */
    OPERATOR((short)18, "operator");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // ACTIVE_ID
          return ACTIVE_ID;
        case 4: // TYPE
          return TYPE;
        case 5: // STATUS
          return STATUS;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 7: // UPDATE_TIME
          return UPDATE_TIME;
        case 8: // ACTIVE_NAME
          return ACTIVE_NAME;
        case 9: // ACTIVE_LOGO
          return ACTIVE_LOGO;
        case 10: // EXPIRE_START_TIME
          return EXPIRE_START_TIME;
        case 11: // EXPIRE_END_TIME
          return EXPIRE_END_TIME;
        case 12: // LIMIT_TYPE
          return LIMIT_TYPE;
        case 13: // MERCHANT_RATE
          return MERCHANT_RATE;
        case 14: // BANK_RATE
          return BANK_RATE;
        case 15: // FFT_RATE
          return FFT_RATE;
        case 16: // SETTLE_TYPE
          return SETTLE_TYPE;
        case 17: // DESCRIPTION
          return DESCRIPTION;
        case 18: // OPERATOR
          return OPERATOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __UPDATETIME_ISSET_ID = 2;
  private static final int __EXPIRESTARTTIME_ISSET_ID = 3;
  private static final int __EXPIREENDTIME_ISSET_ID = 4;
  private static final int __MERCHANTRATE_ISSET_ID = 5;
  private static final int __BANKRATE_ISSET_ID = 6;
  private static final int __FFTRATE_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVE_NAME, new org.apache.thrift.meta_data.FieldMetaData("activeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_LOGO, new org.apache.thrift.meta_data.FieldMetaData("activeLogo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRE_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPIRE_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LIMIT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("limitType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_RATE, new org.apache.thrift.meta_data.FieldMetaData("merchantRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BANK_RATE, new org.apache.thrift.meta_data.FieldMetaData("bankRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FFT_RATE, new org.apache.thrift.meta_data.FieldMetaData("fftRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SETTLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("settleType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActiveBaseRuleVo.class, metaDataMap);
  }

  public ActiveBaseRuleVo() {
  }

  public ActiveBaseRuleVo(
    long id,
    String clientId,
    String activeId,
    String type,
    String status,
    long createTime,
    long updateTime,
    String activeName,
    String activeLogo,
    long expireStartTime,
    long expireEndTime,
    String limitType,
    int merchantRate,
    int bankRate,
    int fftRate,
    String settleType,
    String description,
    String operator)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.clientId = clientId;
    this.activeId = activeId;
    this.type = type;
    this.status = status;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.activeName = activeName;
    this.activeLogo = activeLogo;
    this.expireStartTime = expireStartTime;
    setExpireStartTimeIsSet(true);
    this.expireEndTime = expireEndTime;
    setExpireEndTimeIsSet(true);
    this.limitType = limitType;
    this.merchantRate = merchantRate;
    setMerchantRateIsSet(true);
    this.bankRate = bankRate;
    setBankRateIsSet(true);
    this.fftRate = fftRate;
    setFftRateIsSet(true);
    this.settleType = settleType;
    this.description = description;
    this.operator = operator;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActiveBaseRuleVo(ActiveBaseRuleVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetActiveId()) {
      this.activeId = other.activeId;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    if (other.isSetActiveName()) {
      this.activeName = other.activeName;
    }
    if (other.isSetActiveLogo()) {
      this.activeLogo = other.activeLogo;
    }
    this.expireStartTime = other.expireStartTime;
    this.expireEndTime = other.expireEndTime;
    if (other.isSetLimitType()) {
      this.limitType = other.limitType;
    }
    this.merchantRate = other.merchantRate;
    this.bankRate = other.bankRate;
    this.fftRate = other.fftRate;
    if (other.isSetSettleType()) {
      this.settleType = other.settleType;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetOperator()) {
      this.operator = other.operator;
    }
  }

  public ActiveBaseRuleVo deepCopy() {
    return new ActiveBaseRuleVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientId = null;
    this.activeId = null;
    this.type = null;
    this.status = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    this.activeName = null;
    this.activeLogo = null;
    setExpireStartTimeIsSet(false);
    this.expireStartTime = 0;
    setExpireEndTimeIsSet(false);
    this.expireEndTime = 0;
    this.limitType = null;
    setMerchantRateIsSet(false);
    this.merchantRate = 0;
    setBankRateIsSet(false);
    this.bankRate = 0;
    setFftRateIsSet(false);
    this.fftRate = 0;
    this.settleType = null;
    this.description = null;
    this.operator = null;
  }

  /**
   * 主键ID
   */
  public long getId() {
    return this.id;
  }

  /**
   * 主键ID
   */
  public ActiveBaseRuleVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public ActiveBaseRuleVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 活动ID
   */
  public String getActiveId() {
    return this.activeId;
  }

  /**
   * 活动ID
   */
  public ActiveBaseRuleVo setActiveId(String activeId) {
    this.activeId = activeId;
    return this;
  }

  public void unsetActiveId() {
    this.activeId = null;
  }

  /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveId() {
    return this.activeId != null;
  }

  public void setActiveIdIsSet(boolean value) {
    if (!value) {
      this.activeId = null;
    }
  }

  /**
   * 活动类型(上限100种活动)
   */
  public String getType() {
    return this.type;
  }

  /**
   * 活动类型(上限100种活动)
   */
  public ActiveBaseRuleVo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 活动状态 0-待提交1-审核中2-审核不通过
   * 3-启动 4-禁止
   */
  public String getStatus() {
    return this.status;
  }

  /**
   * 活动状态 0-待提交1-审核中2-审核不通过
   * 3-启动 4-禁止
   */
  public ActiveBaseRuleVo setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * 创建时间
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * 创建时间
   */
  public ActiveBaseRuleVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * 更新时间
   */
  public long getUpdateTime() {
    return this.updateTime;
  }

  /**
   * 更新时间
   */
  public ActiveBaseRuleVo setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  /**
   * 活动名称
   */
  public String getActiveName() {
    return this.activeName;
  }

  /**
   * 活动名称
   */
  public ActiveBaseRuleVo setActiveName(String activeName) {
    this.activeName = activeName;
    return this;
  }

  public void unsetActiveName() {
    this.activeName = null;
  }

  /** Returns true if field activeName is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveName() {
    return this.activeName != null;
  }

  public void setActiveNameIsSet(boolean value) {
    if (!value) {
      this.activeName = null;
    }
  }

  /**
   * 活动logo对应url(可无)
   */
  public String getActiveLogo() {
    return this.activeLogo;
  }

  /**
   * 活动logo对应url(可无)
   */
  public ActiveBaseRuleVo setActiveLogo(String activeLogo) {
    this.activeLogo = activeLogo;
    return this;
  }

  public void unsetActiveLogo() {
    this.activeLogo = null;
  }

  /** Returns true if field activeLogo is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveLogo() {
    return this.activeLogo != null;
  }

  public void setActiveLogoIsSet(boolean value) {
    if (!value) {
      this.activeLogo = null;
    }
  }

  /**
   * 有效期开始时间
   */
  public long getExpireStartTime() {
    return this.expireStartTime;
  }

  /**
   * 有效期开始时间
   */
  public ActiveBaseRuleVo setExpireStartTime(long expireStartTime) {
    this.expireStartTime = expireStartTime;
    setExpireStartTimeIsSet(true);
    return this;
  }

  public void unsetExpireStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRESTARTTIME_ISSET_ID);
  }

  /** Returns true if field expireStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRESTARTTIME_ISSET_ID);
  }

  public void setExpireStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRESTARTTIME_ISSET_ID, value);
  }

  /**
   * 有效期结束时间
   */
  public long getExpireEndTime() {
    return this.expireEndTime;
  }

  /**
   * 有效期结束时间
   */
  public ActiveBaseRuleVo setExpireEndTime(long expireEndTime) {
    this.expireEndTime = expireEndTime;
    setExpireEndTimeIsSet(true);
    return this;
  }

  public void unsetExpireEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIREENDTIME_ISSET_ID);
  }

  /** Returns true if field expireEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIREENDTIME_ISSET_ID);
  }

  public void setExpireEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIREENDTIME_ISSET_ID, value);
  }

  /**
   * 限制类型
   * 0-不限制 1-限制商户 2-限制门
   * 店(预留) 3-限制商品
   */
  public String getLimitType() {
    return this.limitType;
  }

  /**
   * 限制类型
   * 0-不限制 1-限制商户 2-限制门
   * 店(预留) 3-限制商品
   */
  public ActiveBaseRuleVo setLimitType(String limitType) {
    this.limitType = limitType;
    return this;
  }

  public void unsetLimitType() {
    this.limitType = null;
  }

  /** Returns true if field limitType is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitType() {
    return this.limitType != null;
  }

  public void setLimitTypeIsSet(boolean value) {
    if (!value) {
      this.limitType = null;
    }
  }

  /**
   * 商户补贴比例
   */
  public int getMerchantRate() {
    return this.merchantRate;
  }

  /**
   * 商户补贴比例
   */
  public ActiveBaseRuleVo setMerchantRate(int merchantRate) {
    this.merchantRate = merchantRate;
    setMerchantRateIsSet(true);
    return this;
  }

  public void unsetMerchantRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTRATE_ISSET_ID);
  }

  /** Returns true if field merchantRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantRate() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTRATE_ISSET_ID);
  }

  public void setMerchantRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTRATE_ISSET_ID, value);
  }

  /**
   * 银行补贴比例
   */
  public int getBankRate() {
    return this.bankRate;
  }

  /**
   * 银行补贴比例
   */
  public ActiveBaseRuleVo setBankRate(int bankRate) {
    this.bankRate = bankRate;
    setBankRateIsSet(true);
    return this;
  }

  public void unsetBankRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKRATE_ISSET_ID);
  }

  /** Returns true if field bankRate is set (has been assigned a value) and false otherwise */
  public boolean isSetBankRate() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKRATE_ISSET_ID);
  }

  public void setBankRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKRATE_ISSET_ID, value);
  }

  /**
   * 方付通补贴比例
   */
  public int getFftRate() {
    return this.fftRate;
  }

  /**
   * 方付通补贴比例
   */
  public ActiveBaseRuleVo setFftRate(int fftRate) {
    this.fftRate = fftRate;
    setFftRateIsSet(true);
    return this;
  }

  public void unsetFftRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FFTRATE_ISSET_ID);
  }

  /** Returns true if field fftRate is set (has been assigned a value) and false otherwise */
  public boolean isSetFftRate() {
    return EncodingUtils.testBit(__isset_bitfield, __FFTRATE_ISSET_ID);
  }

  public void setFftRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FFTRATE_ISSET_ID, value);
  }

  /**
   * 结算方式 0-实时结算 1-延期结算
   */
  public String getSettleType() {
    return this.settleType;
  }

  /**
   * 结算方式 0-实时结算 1-延期结算
   */
  public ActiveBaseRuleVo setSettleType(String settleType) {
    this.settleType = settleType;
    return this;
  }

  public void unsetSettleType() {
    this.settleType = null;
  }

  /** Returns true if field settleType is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleType() {
    return this.settleType != null;
  }

  public void setSettleTypeIsSet(boolean value) {
    if (!value) {
      this.settleType = null;
    }
  }

  /**
   * 活动描述
   */
  public String getDescription() {
    return this.description;
  }

  /**
   * 活动描述
   */
  public ActiveBaseRuleVo setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  /**
   * 操作员
   */
  public String getOperator() {
    return this.operator;
  }

  /**
   * 操作员
   */
  public ActiveBaseRuleVo setOperator(String operator) {
    this.operator = operator;
    return this;
  }

  public void unsetOperator() {
    this.operator = null;
  }

  /** Returns true if field operator is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator() {
    return this.operator != null;
  }

  public void setOperatorIsSet(boolean value) {
    if (!value) {
      this.operator = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case ACTIVE_ID:
      if (value == null) {
        unsetActiveId();
      } else {
        setActiveId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case ACTIVE_NAME:
      if (value == null) {
        unsetActiveName();
      } else {
        setActiveName((String)value);
      }
      break;

    case ACTIVE_LOGO:
      if (value == null) {
        unsetActiveLogo();
      } else {
        setActiveLogo((String)value);
      }
      break;

    case EXPIRE_START_TIME:
      if (value == null) {
        unsetExpireStartTime();
      } else {
        setExpireStartTime((Long)value);
      }
      break;

    case EXPIRE_END_TIME:
      if (value == null) {
        unsetExpireEndTime();
      } else {
        setExpireEndTime((Long)value);
      }
      break;

    case LIMIT_TYPE:
      if (value == null) {
        unsetLimitType();
      } else {
        setLimitType((String)value);
      }
      break;

    case MERCHANT_RATE:
      if (value == null) {
        unsetMerchantRate();
      } else {
        setMerchantRate((Integer)value);
      }
      break;

    case BANK_RATE:
      if (value == null) {
        unsetBankRate();
      } else {
        setBankRate((Integer)value);
      }
      break;

    case FFT_RATE:
      if (value == null) {
        unsetFftRate();
      } else {
        setFftRate((Integer)value);
      }
      break;

    case SETTLE_TYPE:
      if (value == null) {
        unsetSettleType();
      } else {
        setSettleType((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case OPERATOR:
      if (value == null) {
        unsetOperator();
      } else {
        setOperator((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CLIENT_ID:
      return getClientId();

    case ACTIVE_ID:
      return getActiveId();

    case TYPE:
      return getType();

    case STATUS:
      return getStatus();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case ACTIVE_NAME:
      return getActiveName();

    case ACTIVE_LOGO:
      return getActiveLogo();

    case EXPIRE_START_TIME:
      return Long.valueOf(getExpireStartTime());

    case EXPIRE_END_TIME:
      return Long.valueOf(getExpireEndTime());

    case LIMIT_TYPE:
      return getLimitType();

    case MERCHANT_RATE:
      return Integer.valueOf(getMerchantRate());

    case BANK_RATE:
      return Integer.valueOf(getBankRate());

    case FFT_RATE:
      return Integer.valueOf(getFftRate());

    case SETTLE_TYPE:
      return getSettleType();

    case DESCRIPTION:
      return getDescription();

    case OPERATOR:
      return getOperator();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_ID:
      return isSetClientId();
    case ACTIVE_ID:
      return isSetActiveId();
    case TYPE:
      return isSetType();
    case STATUS:
      return isSetStatus();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case ACTIVE_NAME:
      return isSetActiveName();
    case ACTIVE_LOGO:
      return isSetActiveLogo();
    case EXPIRE_START_TIME:
      return isSetExpireStartTime();
    case EXPIRE_END_TIME:
      return isSetExpireEndTime();
    case LIMIT_TYPE:
      return isSetLimitType();
    case MERCHANT_RATE:
      return isSetMerchantRate();
    case BANK_RATE:
      return isSetBankRate();
    case FFT_RATE:
      return isSetFftRate();
    case SETTLE_TYPE:
      return isSetSettleType();
    case DESCRIPTION:
      return isSetDescription();
    case OPERATOR:
      return isSetOperator();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActiveBaseRuleVo)
      return this.equals((ActiveBaseRuleVo)that);
    return false;
  }

  public boolean equals(ActiveBaseRuleVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_activeId = true && this.isSetActiveId();
    boolean that_present_activeId = true && that.isSetActiveId();
    if (this_present_activeId || that_present_activeId) {
      if (!(this_present_activeId && that_present_activeId))
        return false;
      if (!this.activeId.equals(that.activeId))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_activeName = true && this.isSetActiveName();
    boolean that_present_activeName = true && that.isSetActiveName();
    if (this_present_activeName || that_present_activeName) {
      if (!(this_present_activeName && that_present_activeName))
        return false;
      if (!this.activeName.equals(that.activeName))
        return false;
    }

    boolean this_present_activeLogo = true && this.isSetActiveLogo();
    boolean that_present_activeLogo = true && that.isSetActiveLogo();
    if (this_present_activeLogo || that_present_activeLogo) {
      if (!(this_present_activeLogo && that_present_activeLogo))
        return false;
      if (!this.activeLogo.equals(that.activeLogo))
        return false;
    }

    boolean this_present_expireStartTime = true;
    boolean that_present_expireStartTime = true;
    if (this_present_expireStartTime || that_present_expireStartTime) {
      if (!(this_present_expireStartTime && that_present_expireStartTime))
        return false;
      if (this.expireStartTime != that.expireStartTime)
        return false;
    }

    boolean this_present_expireEndTime = true;
    boolean that_present_expireEndTime = true;
    if (this_present_expireEndTime || that_present_expireEndTime) {
      if (!(this_present_expireEndTime && that_present_expireEndTime))
        return false;
      if (this.expireEndTime != that.expireEndTime)
        return false;
    }

    boolean this_present_limitType = true && this.isSetLimitType();
    boolean that_present_limitType = true && that.isSetLimitType();
    if (this_present_limitType || that_present_limitType) {
      if (!(this_present_limitType && that_present_limitType))
        return false;
      if (!this.limitType.equals(that.limitType))
        return false;
    }

    boolean this_present_merchantRate = true;
    boolean that_present_merchantRate = true;
    if (this_present_merchantRate || that_present_merchantRate) {
      if (!(this_present_merchantRate && that_present_merchantRate))
        return false;
      if (this.merchantRate != that.merchantRate)
        return false;
    }

    boolean this_present_bankRate = true;
    boolean that_present_bankRate = true;
    if (this_present_bankRate || that_present_bankRate) {
      if (!(this_present_bankRate && that_present_bankRate))
        return false;
      if (this.bankRate != that.bankRate)
        return false;
    }

    boolean this_present_fftRate = true;
    boolean that_present_fftRate = true;
    if (this_present_fftRate || that_present_fftRate) {
      if (!(this_present_fftRate && that_present_fftRate))
        return false;
      if (this.fftRate != that.fftRate)
        return false;
    }

    boolean this_present_settleType = true && this.isSetSettleType();
    boolean that_present_settleType = true && that.isSetSettleType();
    if (this_present_settleType || that_present_settleType) {
      if (!(this_present_settleType && that_present_settleType))
        return false;
      if (!this.settleType.equals(that.settleType))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_operator = true && this.isSetOperator();
    boolean that_present_operator = true && that.isSetOperator();
    if (this_present_operator || that_present_operator) {
      if (!(this_present_operator && that_present_operator))
        return false;
      if (!this.operator.equals(that.operator))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_activeId = true && (isSetActiveId());
    list.add(present_activeId);
    if (present_activeId)
      list.add(activeId);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updateTime = true;
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_activeName = true && (isSetActiveName());
    list.add(present_activeName);
    if (present_activeName)
      list.add(activeName);

    boolean present_activeLogo = true && (isSetActiveLogo());
    list.add(present_activeLogo);
    if (present_activeLogo)
      list.add(activeLogo);

    boolean present_expireStartTime = true;
    list.add(present_expireStartTime);
    if (present_expireStartTime)
      list.add(expireStartTime);

    boolean present_expireEndTime = true;
    list.add(present_expireEndTime);
    if (present_expireEndTime)
      list.add(expireEndTime);

    boolean present_limitType = true && (isSetLimitType());
    list.add(present_limitType);
    if (present_limitType)
      list.add(limitType);

    boolean present_merchantRate = true;
    list.add(present_merchantRate);
    if (present_merchantRate)
      list.add(merchantRate);

    boolean present_bankRate = true;
    list.add(present_bankRate);
    if (present_bankRate)
      list.add(bankRate);

    boolean present_fftRate = true;
    list.add(present_fftRate);
    if (present_fftRate)
      list.add(fftRate);

    boolean present_settleType = true && (isSetSettleType());
    list.add(present_settleType);
    if (present_settleType)
      list.add(settleType);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_operator = true && (isSetOperator());
    list.add(present_operator);
    if (present_operator)
      list.add(operator);

    return list.hashCode();
  }

  @Override
  public int compareTo(ActiveBaseRuleVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveName()).compareTo(other.isSetActiveName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeName, other.activeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveLogo()).compareTo(other.isSetActiveLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeLogo, other.activeLogo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireStartTime()).compareTo(other.isSetExpireStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireStartTime, other.expireStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireEndTime()).compareTo(other.isSetExpireEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireEndTime, other.expireEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitType()).compareTo(other.isSetLimitType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitType, other.limitType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantRate()).compareTo(other.isSetMerchantRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantRate, other.merchantRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankRate()).compareTo(other.isSetBankRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankRate, other.bankRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFftRate()).compareTo(other.isSetFftRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFftRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fftRate, other.fftRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleType()).compareTo(other.isSetSettleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleType, other.settleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator()).compareTo(other.isSetOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, other.operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActiveBaseRuleVo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeId:");
    if (this.activeId == null) {
      sb.append("null");
    } else {
      sb.append(this.activeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeName:");
    if (this.activeName == null) {
      sb.append("null");
    } else {
      sb.append(this.activeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeLogo:");
    if (this.activeLogo == null) {
      sb.append("null");
    } else {
      sb.append(this.activeLogo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireStartTime:");
    sb.append(this.expireStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireEndTime:");
    sb.append(this.expireEndTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitType:");
    if (this.limitType == null) {
      sb.append("null");
    } else {
      sb.append(this.limitType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantRate:");
    sb.append(this.merchantRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankRate:");
    sb.append(this.bankRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fftRate:");
    sb.append(this.fftRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleType:");
    if (this.settleType == null) {
      sb.append("null");
    } else {
      sb.append(this.settleType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator:");
    if (this.operator == null) {
      sb.append("null");
    } else {
      sb.append(this.operator);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActiveBaseRuleVoStandardSchemeFactory implements SchemeFactory {
    public ActiveBaseRuleVoStandardScheme getScheme() {
      return new ActiveBaseRuleVoStandardScheme();
    }
  }

  private static class ActiveBaseRuleVoStandardScheme extends StandardScheme<ActiveBaseRuleVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActiveBaseRuleVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeId = iprot.readString();
              struct.setActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACTIVE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeName = iprot.readString();
              struct.setActiveNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTIVE_LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeLogo = iprot.readString();
              struct.setActiveLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXPIRE_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expireStartTime = iprot.readI64();
              struct.setExpireStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXPIRE_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expireEndTime = iprot.readI64();
              struct.setExpireEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LIMIT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.limitType = iprot.readString();
              struct.setLimitTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MERCHANT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.merchantRate = iprot.readI32();
              struct.setMerchantRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BANK_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankRate = iprot.readI32();
              struct.setBankRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FFT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fftRate = iprot.readI32();
              struct.setFftRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SETTLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleType = iprot.readString();
              struct.setSettleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operator = iprot.readString();
              struct.setOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActiveBaseRuleVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.activeId != null) {
        oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
        oprot.writeString(struct.activeId);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      if (struct.activeName != null) {
        oprot.writeFieldBegin(ACTIVE_NAME_FIELD_DESC);
        oprot.writeString(struct.activeName);
        oprot.writeFieldEnd();
      }
      if (struct.activeLogo != null) {
        oprot.writeFieldBegin(ACTIVE_LOGO_FIELD_DESC);
        oprot.writeString(struct.activeLogo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPIRE_START_TIME_FIELD_DESC);
      oprot.writeI64(struct.expireStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPIRE_END_TIME_FIELD_DESC);
      oprot.writeI64(struct.expireEndTime);
      oprot.writeFieldEnd();
      if (struct.limitType != null) {
        oprot.writeFieldBegin(LIMIT_TYPE_FIELD_DESC);
        oprot.writeString(struct.limitType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MERCHANT_RATE_FIELD_DESC);
      oprot.writeI32(struct.merchantRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BANK_RATE_FIELD_DESC);
      oprot.writeI32(struct.bankRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FFT_RATE_FIELD_DESC);
      oprot.writeI32(struct.fftRate);
      oprot.writeFieldEnd();
      if (struct.settleType != null) {
        oprot.writeFieldBegin(SETTLE_TYPE_FIELD_DESC);
        oprot.writeString(struct.settleType);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.operator != null) {
        oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
        oprot.writeString(struct.operator);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActiveBaseRuleVoTupleSchemeFactory implements SchemeFactory {
    public ActiveBaseRuleVoTupleScheme getScheme() {
      return new ActiveBaseRuleVoTupleScheme();
    }
  }

  private static class ActiveBaseRuleVoTupleScheme extends TupleScheme<ActiveBaseRuleVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActiveBaseRuleVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetActiveId()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(6);
      }
      if (struct.isSetActiveName()) {
        optionals.set(7);
      }
      if (struct.isSetActiveLogo()) {
        optionals.set(8);
      }
      if (struct.isSetExpireStartTime()) {
        optionals.set(9);
      }
      if (struct.isSetExpireEndTime()) {
        optionals.set(10);
      }
      if (struct.isSetLimitType()) {
        optionals.set(11);
      }
      if (struct.isSetMerchantRate()) {
        optionals.set(12);
      }
      if (struct.isSetBankRate()) {
        optionals.set(13);
      }
      if (struct.isSetFftRate()) {
        optionals.set(14);
      }
      if (struct.isSetSettleType()) {
        optionals.set(15);
      }
      if (struct.isSetDescription()) {
        optionals.set(16);
      }
      if (struct.isSetOperator()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetActiveId()) {
        oprot.writeString(struct.activeId);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetActiveName()) {
        oprot.writeString(struct.activeName);
      }
      if (struct.isSetActiveLogo()) {
        oprot.writeString(struct.activeLogo);
      }
      if (struct.isSetExpireStartTime()) {
        oprot.writeI64(struct.expireStartTime);
      }
      if (struct.isSetExpireEndTime()) {
        oprot.writeI64(struct.expireEndTime);
      }
      if (struct.isSetLimitType()) {
        oprot.writeString(struct.limitType);
      }
      if (struct.isSetMerchantRate()) {
        oprot.writeI32(struct.merchantRate);
      }
      if (struct.isSetBankRate()) {
        oprot.writeI32(struct.bankRate);
      }
      if (struct.isSetFftRate()) {
        oprot.writeI32(struct.fftRate);
      }
      if (struct.isSetSettleType()) {
        oprot.writeString(struct.settleType);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetOperator()) {
        oprot.writeString(struct.operator);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActiveBaseRuleVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.activeId = iprot.readString();
        struct.setActiveIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.activeName = iprot.readString();
        struct.setActiveNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.activeLogo = iprot.readString();
        struct.setActiveLogoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.expireStartTime = iprot.readI64();
        struct.setExpireStartTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.expireEndTime = iprot.readI64();
        struct.setExpireEndTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.limitType = iprot.readString();
        struct.setLimitTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.merchantRate = iprot.readI32();
        struct.setMerchantRateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.bankRate = iprot.readI32();
        struct.setBankRateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.fftRate = iprot.readI32();
        struct.setFftRateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.settleType = iprot.readString();
        struct.setSettleTypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(17)) {
        struct.operator = iprot.readString();
        struct.setOperatorIsSet(true);
      }
    }
  }

}

