/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 注册(首单)详细规则
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class RegisteredDetailRuleVo implements org.apache.thrift.TBase<RegisteredDetailRuleVo, RegisteredDetailRuleVo._Fields>, java.io.Serializable, Cloneable, Comparable<RegisteredDetailRuleVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisteredDetailRuleVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TRIGGER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerType", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField AWARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("awardType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LIMIT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("limitMoney", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CUT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("cutMoney", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMoney", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField VOUCHERS_ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchersActiveId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PRODUCT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("productCount", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField AWARD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("awardCount", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PER_BANK_INTEGRAL_FIELD_DESC = new org.apache.thrift.protocol.TField("perBankIntegral", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField TOTAL_BANK_INTEGRAL_FIELD_DESC = new org.apache.thrift.protocol.TField("totalBankIntegral", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField PER_UNION_INTEGRAL_FIELD_DESC = new org.apache.thrift.protocol.TField("perUnionIntegral", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField TOTAL_UNION_INTEGRAL_FIELD_DESC = new org.apache.thrift.protocol.TField("totalUnionIntegral", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField IS_TOTAL_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isTotalDay", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField TOTAL_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalDay", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField IS_AWARD_CRE_FIELD_DESC = new org.apache.thrift.protocol.TField("isAwardCre", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField CRE_AWARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("creAwardType", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField CRE_VOUCHERS_ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creVouchersActiveId", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CRE_PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creProductId", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField IS_LIMIT_CRE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("isLimitCreCount", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField CRE_AWARD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("creAwardCount", org.apache.thrift.protocol.TType.I32, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RegisteredDetailRuleVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RegisteredDetailRuleVoTupleSchemeFactory());
  }

  /**
   * 主键id
   */
  public long id; // required
  /**
   * 客户端id
   */
  public String clientId; // required
  /**
   * 活动id
   */
  public String activeId; // required
  /**
   * 触发方式0注册1收单交易
   */
  public boolean triggerType; // required
  /**
   * 奖励方式1满减2红包3实物
   */
  public String awardType; // required
  /**
   * 满减的金额下限 award_type=1时有效
   */
  public long limitMoney; // optional
  /**
   * 满减的额度 award_type=1时有效
   */
  public long cutMoney; // optional
  /**
   * 满减活动总额 *
   */
  public long totalMoney; // optional
  /**
   * 送红包的代金券规则id award_type=2时有效
   */
  public String vouchersActiveId; // optional
  /**
   * 送实物的商品id award_type=3时有效
   */
  public String productId; // optional
  /**
   * 送实物的商品数量 award_type=3时有效
   */
  public int productCount; // optional
  /**
   * 活动奖励人数 award_type=2/3时要检查红包个数/商品数量和奖励人数的约束
   */
  public int awardCount; // required
  /**
   * 每次送银行积分
   */
  public int perBankIntegral; // required
  /**
   * 银行总积分
   */
  public int totalBankIntegral; // required
  /**
   * 每次送联盟积分
   */
  public int perUnionIntegral; // required
  /**
   * 联盟总积分
   */
  public int totalUnionIntegral; // required
  /**
   * 时间段限制的时间单位天或者日
   */
  public boolean isTotalDay; // required
  /**
   * 时间段限制的时间数量
   */
  public int totalDay; // required
  /**
   * 时间段限制的次数
   */
  public int totalCount; // required
  /**
   * 是否奖励推荐人0不奖励1奖励
   */
  public boolean isAwardCre; // required
  /**
   * 推荐人奖励方式0红包1实物 is_award_cre=1时有效
   */
  public boolean creAwardType; // optional
  /**
   * 推荐人奖励红包的代金券规则id cre_award_type=0时有效
   */
  public String creVouchersActiveId; // optional
  /**
   * 推荐人奖励实物的商品id cre_award_type=1时有效
   */
  public String creProductId; // optional
  /**
   * 是否限制奖励推荐人次数0不限制1限制 is_award_cre=1时有效
   */
  public boolean isLimitCreCount; // optional
  /**
   * 推荐人奖励次数 is_award_cre=1时有效
   */
  public int creAwardCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键id
     */
    ID((short)1, "id"),
    /**
     * 客户端id
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 活动id
     */
    ACTIVE_ID((short)3, "activeId"),
    /**
     * 触发方式0注册1收单交易
     */
    TRIGGER_TYPE((short)4, "triggerType"),
    /**
     * 奖励方式1满减2红包3实物
     */
    AWARD_TYPE((short)5, "awardType"),
    /**
     * 满减的金额下限 award_type=1时有效
     */
    LIMIT_MONEY((short)6, "limitMoney"),
    /**
     * 满减的额度 award_type=1时有效
     */
    CUT_MONEY((short)7, "cutMoney"),
    /**
     * 满减活动总额 *
     */
    TOTAL_MONEY((short)8, "totalMoney"),
    /**
     * 送红包的代金券规则id award_type=2时有效
     */
    VOUCHERS_ACTIVE_ID((short)9, "vouchersActiveId"),
    /**
     * 送实物的商品id award_type=3时有效
     */
    PRODUCT_ID((short)10, "productId"),
    /**
     * 送实物的商品数量 award_type=3时有效
     */
    PRODUCT_COUNT((short)11, "productCount"),
    /**
     * 活动奖励人数 award_type=2/3时要检查红包个数/商品数量和奖励人数的约束
     */
    AWARD_COUNT((short)12, "awardCount"),
    /**
     * 每次送银行积分
     */
    PER_BANK_INTEGRAL((short)13, "perBankIntegral"),
    /**
     * 银行总积分
     */
    TOTAL_BANK_INTEGRAL((short)14, "totalBankIntegral"),
    /**
     * 每次送联盟积分
     */
    PER_UNION_INTEGRAL((short)15, "perUnionIntegral"),
    /**
     * 联盟总积分
     */
    TOTAL_UNION_INTEGRAL((short)16, "totalUnionIntegral"),
    /**
     * 时间段限制的时间单位天或者日
     */
    IS_TOTAL_DAY((short)17, "isTotalDay"),
    /**
     * 时间段限制的时间数量
     */
    TOTAL_DAY((short)18, "totalDay"),
    /**
     * 时间段限制的次数
     */
    TOTAL_COUNT((short)19, "totalCount"),
    /**
     * 是否奖励推荐人0不奖励1奖励
     */
    IS_AWARD_CRE((short)20, "isAwardCre"),
    /**
     * 推荐人奖励方式0红包1实物 is_award_cre=1时有效
     */
    CRE_AWARD_TYPE((short)21, "creAwardType"),
    /**
     * 推荐人奖励红包的代金券规则id cre_award_type=0时有效
     */
    CRE_VOUCHERS_ACTIVE_ID((short)22, "creVouchersActiveId"),
    /**
     * 推荐人奖励实物的商品id cre_award_type=1时有效
     */
    CRE_PRODUCT_ID((short)23, "creProductId"),
    /**
     * 是否限制奖励推荐人次数0不限制1限制 is_award_cre=1时有效
     */
    IS_LIMIT_CRE_COUNT((short)24, "isLimitCreCount"),
    /**
     * 推荐人奖励次数 is_award_cre=1时有效
     */
    CRE_AWARD_COUNT((short)25, "creAwardCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // ACTIVE_ID
          return ACTIVE_ID;
        case 4: // TRIGGER_TYPE
          return TRIGGER_TYPE;
        case 5: // AWARD_TYPE
          return AWARD_TYPE;
        case 6: // LIMIT_MONEY
          return LIMIT_MONEY;
        case 7: // CUT_MONEY
          return CUT_MONEY;
        case 8: // TOTAL_MONEY
          return TOTAL_MONEY;
        case 9: // VOUCHERS_ACTIVE_ID
          return VOUCHERS_ACTIVE_ID;
        case 10: // PRODUCT_ID
          return PRODUCT_ID;
        case 11: // PRODUCT_COUNT
          return PRODUCT_COUNT;
        case 12: // AWARD_COUNT
          return AWARD_COUNT;
        case 13: // PER_BANK_INTEGRAL
          return PER_BANK_INTEGRAL;
        case 14: // TOTAL_BANK_INTEGRAL
          return TOTAL_BANK_INTEGRAL;
        case 15: // PER_UNION_INTEGRAL
          return PER_UNION_INTEGRAL;
        case 16: // TOTAL_UNION_INTEGRAL
          return TOTAL_UNION_INTEGRAL;
        case 17: // IS_TOTAL_DAY
          return IS_TOTAL_DAY;
        case 18: // TOTAL_DAY
          return TOTAL_DAY;
        case 19: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 20: // IS_AWARD_CRE
          return IS_AWARD_CRE;
        case 21: // CRE_AWARD_TYPE
          return CRE_AWARD_TYPE;
        case 22: // CRE_VOUCHERS_ACTIVE_ID
          return CRE_VOUCHERS_ACTIVE_ID;
        case 23: // CRE_PRODUCT_ID
          return CRE_PRODUCT_ID;
        case 24: // IS_LIMIT_CRE_COUNT
          return IS_LIMIT_CRE_COUNT;
        case 25: // CRE_AWARD_COUNT
          return CRE_AWARD_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TRIGGERTYPE_ISSET_ID = 1;
  private static final int __LIMITMONEY_ISSET_ID = 2;
  private static final int __CUTMONEY_ISSET_ID = 3;
  private static final int __TOTALMONEY_ISSET_ID = 4;
  private static final int __PRODUCTCOUNT_ISSET_ID = 5;
  private static final int __AWARDCOUNT_ISSET_ID = 6;
  private static final int __PERBANKINTEGRAL_ISSET_ID = 7;
  private static final int __TOTALBANKINTEGRAL_ISSET_ID = 8;
  private static final int __PERUNIONINTEGRAL_ISSET_ID = 9;
  private static final int __TOTALUNIONINTEGRAL_ISSET_ID = 10;
  private static final int __ISTOTALDAY_ISSET_ID = 11;
  private static final int __TOTALDAY_ISSET_ID = 12;
  private static final int __TOTALCOUNT_ISSET_ID = 13;
  private static final int __ISAWARDCRE_ISSET_ID = 14;
  private static final int __CREAWARDTYPE_ISSET_ID = 15;
  private static final int __ISLIMITCRECOUNT_ISSET_ID = 16;
  private static final int __CREAWARDCOUNT_ISSET_ID = 17;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LIMIT_MONEY,_Fields.CUT_MONEY,_Fields.TOTAL_MONEY,_Fields.VOUCHERS_ACTIVE_ID,_Fields.PRODUCT_ID,_Fields.PRODUCT_COUNT,_Fields.CRE_AWARD_TYPE,_Fields.CRE_VOUCHERS_ACTIVE_ID,_Fields.CRE_PRODUCT_ID,_Fields.IS_LIMIT_CRE_COUNT,_Fields.CRE_AWARD_COUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRIGGER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("triggerType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AWARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("awardType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("limitMoney", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CUT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("cutMoney", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("totalMoney", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VOUCHERS_ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("vouchersActiveId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("productCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AWARD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("awardCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PER_BANK_INTEGRAL, new org.apache.thrift.meta_data.FieldMetaData("perBankIntegral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_BANK_INTEGRAL, new org.apache.thrift.meta_data.FieldMetaData("totalBankIntegral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PER_UNION_INTEGRAL, new org.apache.thrift.meta_data.FieldMetaData("perUnionIntegral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_UNION_INTEGRAL, new org.apache.thrift.meta_data.FieldMetaData("totalUnionIntegral", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_TOTAL_DAY, new org.apache.thrift.meta_data.FieldMetaData("isTotalDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TOTAL_DAY, new org.apache.thrift.meta_data.FieldMetaData("totalDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_AWARD_CRE, new org.apache.thrift.meta_data.FieldMetaData("isAwardCre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CRE_AWARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("creAwardType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CRE_VOUCHERS_ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("creVouchersActiveId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CRE_PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("creProductId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_LIMIT_CRE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("isLimitCreCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CRE_AWARD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("creAwardCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisteredDetailRuleVo.class, metaDataMap);
  }

  public RegisteredDetailRuleVo() {
  }

  public RegisteredDetailRuleVo(
    long id,
    String clientId,
    String activeId,
    boolean triggerType,
    String awardType,
    int awardCount,
    int perBankIntegral,
    int totalBankIntegral,
    int perUnionIntegral,
    int totalUnionIntegral,
    boolean isTotalDay,
    int totalDay,
    int totalCount,
    boolean isAwardCre)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.clientId = clientId;
    this.activeId = activeId;
    this.triggerType = triggerType;
    setTriggerTypeIsSet(true);
    this.awardType = awardType;
    this.awardCount = awardCount;
    setAwardCountIsSet(true);
    this.perBankIntegral = perBankIntegral;
    setPerBankIntegralIsSet(true);
    this.totalBankIntegral = totalBankIntegral;
    setTotalBankIntegralIsSet(true);
    this.perUnionIntegral = perUnionIntegral;
    setPerUnionIntegralIsSet(true);
    this.totalUnionIntegral = totalUnionIntegral;
    setTotalUnionIntegralIsSet(true);
    this.isTotalDay = isTotalDay;
    setIsTotalDayIsSet(true);
    this.totalDay = totalDay;
    setTotalDayIsSet(true);
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.isAwardCre = isAwardCre;
    setIsAwardCreIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RegisteredDetailRuleVo(RegisteredDetailRuleVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetActiveId()) {
      this.activeId = other.activeId;
    }
    this.triggerType = other.triggerType;
    if (other.isSetAwardType()) {
      this.awardType = other.awardType;
    }
    this.limitMoney = other.limitMoney;
    this.cutMoney = other.cutMoney;
    this.totalMoney = other.totalMoney;
    if (other.isSetVouchersActiveId()) {
      this.vouchersActiveId = other.vouchersActiveId;
    }
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    this.productCount = other.productCount;
    this.awardCount = other.awardCount;
    this.perBankIntegral = other.perBankIntegral;
    this.totalBankIntegral = other.totalBankIntegral;
    this.perUnionIntegral = other.perUnionIntegral;
    this.totalUnionIntegral = other.totalUnionIntegral;
    this.isTotalDay = other.isTotalDay;
    this.totalDay = other.totalDay;
    this.totalCount = other.totalCount;
    this.isAwardCre = other.isAwardCre;
    this.creAwardType = other.creAwardType;
    if (other.isSetCreVouchersActiveId()) {
      this.creVouchersActiveId = other.creVouchersActiveId;
    }
    if (other.isSetCreProductId()) {
      this.creProductId = other.creProductId;
    }
    this.isLimitCreCount = other.isLimitCreCount;
    this.creAwardCount = other.creAwardCount;
  }

  public RegisteredDetailRuleVo deepCopy() {
    return new RegisteredDetailRuleVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientId = null;
    this.activeId = null;
    setTriggerTypeIsSet(false);
    this.triggerType = false;
    this.awardType = null;
    setLimitMoneyIsSet(false);
    this.limitMoney = 0;
    setCutMoneyIsSet(false);
    this.cutMoney = 0;
    setTotalMoneyIsSet(false);
    this.totalMoney = 0;
    this.vouchersActiveId = null;
    this.productId = null;
    setProductCountIsSet(false);
    this.productCount = 0;
    setAwardCountIsSet(false);
    this.awardCount = 0;
    setPerBankIntegralIsSet(false);
    this.perBankIntegral = 0;
    setTotalBankIntegralIsSet(false);
    this.totalBankIntegral = 0;
    setPerUnionIntegralIsSet(false);
    this.perUnionIntegral = 0;
    setTotalUnionIntegralIsSet(false);
    this.totalUnionIntegral = 0;
    setIsTotalDayIsSet(false);
    this.isTotalDay = false;
    setTotalDayIsSet(false);
    this.totalDay = 0;
    setTotalCountIsSet(false);
    this.totalCount = 0;
    setIsAwardCreIsSet(false);
    this.isAwardCre = false;
    setCreAwardTypeIsSet(false);
    this.creAwardType = false;
    this.creVouchersActiveId = null;
    this.creProductId = null;
    setIsLimitCreCountIsSet(false);
    this.isLimitCreCount = false;
    setCreAwardCountIsSet(false);
    this.creAwardCount = 0;
  }

  /**
   * 主键id
   */
  public long getId() {
    return this.id;
  }

  /**
   * 主键id
   */
  public RegisteredDetailRuleVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 客户端id
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端id
   */
  public RegisteredDetailRuleVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 活动id
   */
  public String getActiveId() {
    return this.activeId;
  }

  /**
   * 活动id
   */
  public RegisteredDetailRuleVo setActiveId(String activeId) {
    this.activeId = activeId;
    return this;
  }

  public void unsetActiveId() {
    this.activeId = null;
  }

  /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveId() {
    return this.activeId != null;
  }

  public void setActiveIdIsSet(boolean value) {
    if (!value) {
      this.activeId = null;
    }
  }

  /**
   * 触发方式0注册1收单交易
   */
  public boolean isTriggerType() {
    return this.triggerType;
  }

  /**
   * 触发方式0注册1收单交易
   */
  public RegisteredDetailRuleVo setTriggerType(boolean triggerType) {
    this.triggerType = triggerType;
    setTriggerTypeIsSet(true);
    return this;
  }

  public void unsetTriggerType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRIGGERTYPE_ISSET_ID);
  }

  /** Returns true if field triggerType is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggerType() {
    return EncodingUtils.testBit(__isset_bitfield, __TRIGGERTYPE_ISSET_ID);
  }

  public void setTriggerTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRIGGERTYPE_ISSET_ID, value);
  }

  /**
   * 奖励方式1满减2红包3实物
   */
  public String getAwardType() {
    return this.awardType;
  }

  /**
   * 奖励方式1满减2红包3实物
   */
  public RegisteredDetailRuleVo setAwardType(String awardType) {
    this.awardType = awardType;
    return this;
  }

  public void unsetAwardType() {
    this.awardType = null;
  }

  /** Returns true if field awardType is set (has been assigned a value) and false otherwise */
  public boolean isSetAwardType() {
    return this.awardType != null;
  }

  public void setAwardTypeIsSet(boolean value) {
    if (!value) {
      this.awardType = null;
    }
  }

  /**
   * 满减的金额下限 award_type=1时有效
   */
  public long getLimitMoney() {
    return this.limitMoney;
  }

  /**
   * 满减的金额下限 award_type=1时有效
   */
  public RegisteredDetailRuleVo setLimitMoney(long limitMoney) {
    this.limitMoney = limitMoney;
    setLimitMoneyIsSet(true);
    return this;
  }

  public void unsetLimitMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITMONEY_ISSET_ID);
  }

  /** Returns true if field limitMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITMONEY_ISSET_ID);
  }

  public void setLimitMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITMONEY_ISSET_ID, value);
  }

  /**
   * 满减的额度 award_type=1时有效
   */
  public long getCutMoney() {
    return this.cutMoney;
  }

  /**
   * 满减的额度 award_type=1时有效
   */
  public RegisteredDetailRuleVo setCutMoney(long cutMoney) {
    this.cutMoney = cutMoney;
    setCutMoneyIsSet(true);
    return this;
  }

  public void unsetCutMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUTMONEY_ISSET_ID);
  }

  /** Returns true if field cutMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCutMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CUTMONEY_ISSET_ID);
  }

  public void setCutMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUTMONEY_ISSET_ID, value);
  }

  /**
   * 满减活动总额 *
   */
  public long getTotalMoney() {
    return this.totalMoney;
  }

  /**
   * 满减活动总额 *
   */
  public RegisteredDetailRuleVo setTotalMoney(long totalMoney) {
    this.totalMoney = totalMoney;
    setTotalMoneyIsSet(true);
    return this;
  }

  public void unsetTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  /** Returns true if field totalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALMONEY_ISSET_ID);
  }

  public void setTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMONEY_ISSET_ID, value);
  }

  /**
   * 送红包的代金券规则id award_type=2时有效
   */
  public String getVouchersActiveId() {
    return this.vouchersActiveId;
  }

  /**
   * 送红包的代金券规则id award_type=2时有效
   */
  public RegisteredDetailRuleVo setVouchersActiveId(String vouchersActiveId) {
    this.vouchersActiveId = vouchersActiveId;
    return this;
  }

  public void unsetVouchersActiveId() {
    this.vouchersActiveId = null;
  }

  /** Returns true if field vouchersActiveId is set (has been assigned a value) and false otherwise */
  public boolean isSetVouchersActiveId() {
    return this.vouchersActiveId != null;
  }

  public void setVouchersActiveIdIsSet(boolean value) {
    if (!value) {
      this.vouchersActiveId = null;
    }
  }

  /**
   * 送实物的商品id award_type=3时有效
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 送实物的商品id award_type=3时有效
   */
  public RegisteredDetailRuleVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 送实物的商品数量 award_type=3时有效
   */
  public int getProductCount() {
    return this.productCount;
  }

  /**
   * 送实物的商品数量 award_type=3时有效
   */
  public RegisteredDetailRuleVo setProductCount(int productCount) {
    this.productCount = productCount;
    setProductCountIsSet(true);
    return this;
  }

  public void unsetProductCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTCOUNT_ISSET_ID);
  }

  /** Returns true if field productCount is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTCOUNT_ISSET_ID);
  }

  public void setProductCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTCOUNT_ISSET_ID, value);
  }

  /**
   * 活动奖励人数 award_type=2/3时要检查红包个数/商品数量和奖励人数的约束
   */
  public int getAwardCount() {
    return this.awardCount;
  }

  /**
   * 活动奖励人数 award_type=2/3时要检查红包个数/商品数量和奖励人数的约束
   */
  public RegisteredDetailRuleVo setAwardCount(int awardCount) {
    this.awardCount = awardCount;
    setAwardCountIsSet(true);
    return this;
  }

  public void unsetAwardCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AWARDCOUNT_ISSET_ID);
  }

  /** Returns true if field awardCount is set (has been assigned a value) and false otherwise */
  public boolean isSetAwardCount() {
    return EncodingUtils.testBit(__isset_bitfield, __AWARDCOUNT_ISSET_ID);
  }

  public void setAwardCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AWARDCOUNT_ISSET_ID, value);
  }

  /**
   * 每次送银行积分
   */
  public int getPerBankIntegral() {
    return this.perBankIntegral;
  }

  /**
   * 每次送银行积分
   */
  public RegisteredDetailRuleVo setPerBankIntegral(int perBankIntegral) {
    this.perBankIntegral = perBankIntegral;
    setPerBankIntegralIsSet(true);
    return this;
  }

  public void unsetPerBankIntegral() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERBANKINTEGRAL_ISSET_ID);
  }

  /** Returns true if field perBankIntegral is set (has been assigned a value) and false otherwise */
  public boolean isSetPerBankIntegral() {
    return EncodingUtils.testBit(__isset_bitfield, __PERBANKINTEGRAL_ISSET_ID);
  }

  public void setPerBankIntegralIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERBANKINTEGRAL_ISSET_ID, value);
  }

  /**
   * 银行总积分
   */
  public int getTotalBankIntegral() {
    return this.totalBankIntegral;
  }

  /**
   * 银行总积分
   */
  public RegisteredDetailRuleVo setTotalBankIntegral(int totalBankIntegral) {
    this.totalBankIntegral = totalBankIntegral;
    setTotalBankIntegralIsSet(true);
    return this;
  }

  public void unsetTotalBankIntegral() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALBANKINTEGRAL_ISSET_ID);
  }

  /** Returns true if field totalBankIntegral is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalBankIntegral() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALBANKINTEGRAL_ISSET_ID);
  }

  public void setTotalBankIntegralIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALBANKINTEGRAL_ISSET_ID, value);
  }

  /**
   * 每次送联盟积分
   */
  public int getPerUnionIntegral() {
    return this.perUnionIntegral;
  }

  /**
   * 每次送联盟积分
   */
  public RegisteredDetailRuleVo setPerUnionIntegral(int perUnionIntegral) {
    this.perUnionIntegral = perUnionIntegral;
    setPerUnionIntegralIsSet(true);
    return this;
  }

  public void unsetPerUnionIntegral() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERUNIONINTEGRAL_ISSET_ID);
  }

  /** Returns true if field perUnionIntegral is set (has been assigned a value) and false otherwise */
  public boolean isSetPerUnionIntegral() {
    return EncodingUtils.testBit(__isset_bitfield, __PERUNIONINTEGRAL_ISSET_ID);
  }

  public void setPerUnionIntegralIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERUNIONINTEGRAL_ISSET_ID, value);
  }

  /**
   * 联盟总积分
   */
  public int getTotalUnionIntegral() {
    return this.totalUnionIntegral;
  }

  /**
   * 联盟总积分
   */
  public RegisteredDetailRuleVo setTotalUnionIntegral(int totalUnionIntegral) {
    this.totalUnionIntegral = totalUnionIntegral;
    setTotalUnionIntegralIsSet(true);
    return this;
  }

  public void unsetTotalUnionIntegral() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALUNIONINTEGRAL_ISSET_ID);
  }

  /** Returns true if field totalUnionIntegral is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalUnionIntegral() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALUNIONINTEGRAL_ISSET_ID);
  }

  public void setTotalUnionIntegralIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALUNIONINTEGRAL_ISSET_ID, value);
  }

  /**
   * 时间段限制的时间单位天或者日
   */
  public boolean isIsTotalDay() {
    return this.isTotalDay;
  }

  /**
   * 时间段限制的时间单位天或者日
   */
  public RegisteredDetailRuleVo setIsTotalDay(boolean isTotalDay) {
    this.isTotalDay = isTotalDay;
    setIsTotalDayIsSet(true);
    return this;
  }

  public void unsetIsTotalDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTOTALDAY_ISSET_ID);
  }

  /** Returns true if field isTotalDay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTotalDay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTOTALDAY_ISSET_ID);
  }

  public void setIsTotalDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTOTALDAY_ISSET_ID, value);
  }

  /**
   * 时间段限制的时间数量
   */
  public int getTotalDay() {
    return this.totalDay;
  }

  /**
   * 时间段限制的时间数量
   */
  public RegisteredDetailRuleVo setTotalDay(int totalDay) {
    this.totalDay = totalDay;
    setTotalDayIsSet(true);
    return this;
  }

  public void unsetTotalDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALDAY_ISSET_ID);
  }

  /** Returns true if field totalDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalDay() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALDAY_ISSET_ID);
  }

  public void setTotalDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALDAY_ISSET_ID, value);
  }

  /**
   * 时间段限制的次数
   */
  public int getTotalCount() {
    return this.totalCount;
  }

  /**
   * 时间段限制的次数
   */
  public RegisteredDetailRuleVo setTotalCount(int totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  /**
   * 是否奖励推荐人0不奖励1奖励
   */
  public boolean isIsAwardCre() {
    return this.isAwardCre;
  }

  /**
   * 是否奖励推荐人0不奖励1奖励
   */
  public RegisteredDetailRuleVo setIsAwardCre(boolean isAwardCre) {
    this.isAwardCre = isAwardCre;
    setIsAwardCreIsSet(true);
    return this;
  }

  public void unsetIsAwardCre() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAWARDCRE_ISSET_ID);
  }

  /** Returns true if field isAwardCre is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAwardCre() {
    return EncodingUtils.testBit(__isset_bitfield, __ISAWARDCRE_ISSET_ID);
  }

  public void setIsAwardCreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAWARDCRE_ISSET_ID, value);
  }

  /**
   * 推荐人奖励方式0红包1实物 is_award_cre=1时有效
   */
  public boolean isCreAwardType() {
    return this.creAwardType;
  }

  /**
   * 推荐人奖励方式0红包1实物 is_award_cre=1时有效
   */
  public RegisteredDetailRuleVo setCreAwardType(boolean creAwardType) {
    this.creAwardType = creAwardType;
    setCreAwardTypeIsSet(true);
    return this;
  }

  public void unsetCreAwardType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREAWARDTYPE_ISSET_ID);
  }

  /** Returns true if field creAwardType is set (has been assigned a value) and false otherwise */
  public boolean isSetCreAwardType() {
    return EncodingUtils.testBit(__isset_bitfield, __CREAWARDTYPE_ISSET_ID);
  }

  public void setCreAwardTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREAWARDTYPE_ISSET_ID, value);
  }

  /**
   * 推荐人奖励红包的代金券规则id cre_award_type=0时有效
   */
  public String getCreVouchersActiveId() {
    return this.creVouchersActiveId;
  }

  /**
   * 推荐人奖励红包的代金券规则id cre_award_type=0时有效
   */
  public RegisteredDetailRuleVo setCreVouchersActiveId(String creVouchersActiveId) {
    this.creVouchersActiveId = creVouchersActiveId;
    return this;
  }

  public void unsetCreVouchersActiveId() {
    this.creVouchersActiveId = null;
  }

  /** Returns true if field creVouchersActiveId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreVouchersActiveId() {
    return this.creVouchersActiveId != null;
  }

  public void setCreVouchersActiveIdIsSet(boolean value) {
    if (!value) {
      this.creVouchersActiveId = null;
    }
  }

  /**
   * 推荐人奖励实物的商品id cre_award_type=1时有效
   */
  public String getCreProductId() {
    return this.creProductId;
  }

  /**
   * 推荐人奖励实物的商品id cre_award_type=1时有效
   */
  public RegisteredDetailRuleVo setCreProductId(String creProductId) {
    this.creProductId = creProductId;
    return this;
  }

  public void unsetCreProductId() {
    this.creProductId = null;
  }

  /** Returns true if field creProductId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreProductId() {
    return this.creProductId != null;
  }

  public void setCreProductIdIsSet(boolean value) {
    if (!value) {
      this.creProductId = null;
    }
  }

  /**
   * 是否限制奖励推荐人次数0不限制1限制 is_award_cre=1时有效
   */
  public boolean isIsLimitCreCount() {
    return this.isLimitCreCount;
  }

  /**
   * 是否限制奖励推荐人次数0不限制1限制 is_award_cre=1时有效
   */
  public RegisteredDetailRuleVo setIsLimitCreCount(boolean isLimitCreCount) {
    this.isLimitCreCount = isLimitCreCount;
    setIsLimitCreCountIsSet(true);
    return this;
  }

  public void unsetIsLimitCreCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLIMITCRECOUNT_ISSET_ID);
  }

  /** Returns true if field isLimitCreCount is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLimitCreCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLIMITCRECOUNT_ISSET_ID);
  }

  public void setIsLimitCreCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLIMITCRECOUNT_ISSET_ID, value);
  }

  /**
   * 推荐人奖励次数 is_award_cre=1时有效
   */
  public int getCreAwardCount() {
    return this.creAwardCount;
  }

  /**
   * 推荐人奖励次数 is_award_cre=1时有效
   */
  public RegisteredDetailRuleVo setCreAwardCount(int creAwardCount) {
    this.creAwardCount = creAwardCount;
    setCreAwardCountIsSet(true);
    return this;
  }

  public void unsetCreAwardCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREAWARDCOUNT_ISSET_ID);
  }

  /** Returns true if field creAwardCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCreAwardCount() {
    return EncodingUtils.testBit(__isset_bitfield, __CREAWARDCOUNT_ISSET_ID);
  }

  public void setCreAwardCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREAWARDCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case ACTIVE_ID:
      if (value == null) {
        unsetActiveId();
      } else {
        setActiveId((String)value);
      }
      break;

    case TRIGGER_TYPE:
      if (value == null) {
        unsetTriggerType();
      } else {
        setTriggerType((Boolean)value);
      }
      break;

    case AWARD_TYPE:
      if (value == null) {
        unsetAwardType();
      } else {
        setAwardType((String)value);
      }
      break;

    case LIMIT_MONEY:
      if (value == null) {
        unsetLimitMoney();
      } else {
        setLimitMoney((Long)value);
      }
      break;

    case CUT_MONEY:
      if (value == null) {
        unsetCutMoney();
      } else {
        setCutMoney((Long)value);
      }
      break;

    case TOTAL_MONEY:
      if (value == null) {
        unsetTotalMoney();
      } else {
        setTotalMoney((Long)value);
      }
      break;

    case VOUCHERS_ACTIVE_ID:
      if (value == null) {
        unsetVouchersActiveId();
      } else {
        setVouchersActiveId((String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case PRODUCT_COUNT:
      if (value == null) {
        unsetProductCount();
      } else {
        setProductCount((Integer)value);
      }
      break;

    case AWARD_COUNT:
      if (value == null) {
        unsetAwardCount();
      } else {
        setAwardCount((Integer)value);
      }
      break;

    case PER_BANK_INTEGRAL:
      if (value == null) {
        unsetPerBankIntegral();
      } else {
        setPerBankIntegral((Integer)value);
      }
      break;

    case TOTAL_BANK_INTEGRAL:
      if (value == null) {
        unsetTotalBankIntegral();
      } else {
        setTotalBankIntegral((Integer)value);
      }
      break;

    case PER_UNION_INTEGRAL:
      if (value == null) {
        unsetPerUnionIntegral();
      } else {
        setPerUnionIntegral((Integer)value);
      }
      break;

    case TOTAL_UNION_INTEGRAL:
      if (value == null) {
        unsetTotalUnionIntegral();
      } else {
        setTotalUnionIntegral((Integer)value);
      }
      break;

    case IS_TOTAL_DAY:
      if (value == null) {
        unsetIsTotalDay();
      } else {
        setIsTotalDay((Boolean)value);
      }
      break;

    case TOTAL_DAY:
      if (value == null) {
        unsetTotalDay();
      } else {
        setTotalDay((Integer)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Integer)value);
      }
      break;

    case IS_AWARD_CRE:
      if (value == null) {
        unsetIsAwardCre();
      } else {
        setIsAwardCre((Boolean)value);
      }
      break;

    case CRE_AWARD_TYPE:
      if (value == null) {
        unsetCreAwardType();
      } else {
        setCreAwardType((Boolean)value);
      }
      break;

    case CRE_VOUCHERS_ACTIVE_ID:
      if (value == null) {
        unsetCreVouchersActiveId();
      } else {
        setCreVouchersActiveId((String)value);
      }
      break;

    case CRE_PRODUCT_ID:
      if (value == null) {
        unsetCreProductId();
      } else {
        setCreProductId((String)value);
      }
      break;

    case IS_LIMIT_CRE_COUNT:
      if (value == null) {
        unsetIsLimitCreCount();
      } else {
        setIsLimitCreCount((Boolean)value);
      }
      break;

    case CRE_AWARD_COUNT:
      if (value == null) {
        unsetCreAwardCount();
      } else {
        setCreAwardCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CLIENT_ID:
      return getClientId();

    case ACTIVE_ID:
      return getActiveId();

    case TRIGGER_TYPE:
      return Boolean.valueOf(isTriggerType());

    case AWARD_TYPE:
      return getAwardType();

    case LIMIT_MONEY:
      return Long.valueOf(getLimitMoney());

    case CUT_MONEY:
      return Long.valueOf(getCutMoney());

    case TOTAL_MONEY:
      return Long.valueOf(getTotalMoney());

    case VOUCHERS_ACTIVE_ID:
      return getVouchersActiveId();

    case PRODUCT_ID:
      return getProductId();

    case PRODUCT_COUNT:
      return Integer.valueOf(getProductCount());

    case AWARD_COUNT:
      return Integer.valueOf(getAwardCount());

    case PER_BANK_INTEGRAL:
      return Integer.valueOf(getPerBankIntegral());

    case TOTAL_BANK_INTEGRAL:
      return Integer.valueOf(getTotalBankIntegral());

    case PER_UNION_INTEGRAL:
      return Integer.valueOf(getPerUnionIntegral());

    case TOTAL_UNION_INTEGRAL:
      return Integer.valueOf(getTotalUnionIntegral());

    case IS_TOTAL_DAY:
      return Boolean.valueOf(isIsTotalDay());

    case TOTAL_DAY:
      return Integer.valueOf(getTotalDay());

    case TOTAL_COUNT:
      return Integer.valueOf(getTotalCount());

    case IS_AWARD_CRE:
      return Boolean.valueOf(isIsAwardCre());

    case CRE_AWARD_TYPE:
      return Boolean.valueOf(isCreAwardType());

    case CRE_VOUCHERS_ACTIVE_ID:
      return getCreVouchersActiveId();

    case CRE_PRODUCT_ID:
      return getCreProductId();

    case IS_LIMIT_CRE_COUNT:
      return Boolean.valueOf(isIsLimitCreCount());

    case CRE_AWARD_COUNT:
      return Integer.valueOf(getCreAwardCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_ID:
      return isSetClientId();
    case ACTIVE_ID:
      return isSetActiveId();
    case TRIGGER_TYPE:
      return isSetTriggerType();
    case AWARD_TYPE:
      return isSetAwardType();
    case LIMIT_MONEY:
      return isSetLimitMoney();
    case CUT_MONEY:
      return isSetCutMoney();
    case TOTAL_MONEY:
      return isSetTotalMoney();
    case VOUCHERS_ACTIVE_ID:
      return isSetVouchersActiveId();
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_COUNT:
      return isSetProductCount();
    case AWARD_COUNT:
      return isSetAwardCount();
    case PER_BANK_INTEGRAL:
      return isSetPerBankIntegral();
    case TOTAL_BANK_INTEGRAL:
      return isSetTotalBankIntegral();
    case PER_UNION_INTEGRAL:
      return isSetPerUnionIntegral();
    case TOTAL_UNION_INTEGRAL:
      return isSetTotalUnionIntegral();
    case IS_TOTAL_DAY:
      return isSetIsTotalDay();
    case TOTAL_DAY:
      return isSetTotalDay();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case IS_AWARD_CRE:
      return isSetIsAwardCre();
    case CRE_AWARD_TYPE:
      return isSetCreAwardType();
    case CRE_VOUCHERS_ACTIVE_ID:
      return isSetCreVouchersActiveId();
    case CRE_PRODUCT_ID:
      return isSetCreProductId();
    case IS_LIMIT_CRE_COUNT:
      return isSetIsLimitCreCount();
    case CRE_AWARD_COUNT:
      return isSetCreAwardCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RegisteredDetailRuleVo)
      return this.equals((RegisteredDetailRuleVo)that);
    return false;
  }

  public boolean equals(RegisteredDetailRuleVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_activeId = true && this.isSetActiveId();
    boolean that_present_activeId = true && that.isSetActiveId();
    if (this_present_activeId || that_present_activeId) {
      if (!(this_present_activeId && that_present_activeId))
        return false;
      if (!this.activeId.equals(that.activeId))
        return false;
    }

    boolean this_present_triggerType = true;
    boolean that_present_triggerType = true;
    if (this_present_triggerType || that_present_triggerType) {
      if (!(this_present_triggerType && that_present_triggerType))
        return false;
      if (this.triggerType != that.triggerType)
        return false;
    }

    boolean this_present_awardType = true && this.isSetAwardType();
    boolean that_present_awardType = true && that.isSetAwardType();
    if (this_present_awardType || that_present_awardType) {
      if (!(this_present_awardType && that_present_awardType))
        return false;
      if (!this.awardType.equals(that.awardType))
        return false;
    }

    boolean this_present_limitMoney = true && this.isSetLimitMoney();
    boolean that_present_limitMoney = true && that.isSetLimitMoney();
    if (this_present_limitMoney || that_present_limitMoney) {
      if (!(this_present_limitMoney && that_present_limitMoney))
        return false;
      if (this.limitMoney != that.limitMoney)
        return false;
    }

    boolean this_present_cutMoney = true && this.isSetCutMoney();
    boolean that_present_cutMoney = true && that.isSetCutMoney();
    if (this_present_cutMoney || that_present_cutMoney) {
      if (!(this_present_cutMoney && that_present_cutMoney))
        return false;
      if (this.cutMoney != that.cutMoney)
        return false;
    }

    boolean this_present_totalMoney = true && this.isSetTotalMoney();
    boolean that_present_totalMoney = true && that.isSetTotalMoney();
    if (this_present_totalMoney || that_present_totalMoney) {
      if (!(this_present_totalMoney && that_present_totalMoney))
        return false;
      if (this.totalMoney != that.totalMoney)
        return false;
    }

    boolean this_present_vouchersActiveId = true && this.isSetVouchersActiveId();
    boolean that_present_vouchersActiveId = true && that.isSetVouchersActiveId();
    if (this_present_vouchersActiveId || that_present_vouchersActiveId) {
      if (!(this_present_vouchersActiveId && that_present_vouchersActiveId))
        return false;
      if (!this.vouchersActiveId.equals(that.vouchersActiveId))
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_productCount = true && this.isSetProductCount();
    boolean that_present_productCount = true && that.isSetProductCount();
    if (this_present_productCount || that_present_productCount) {
      if (!(this_present_productCount && that_present_productCount))
        return false;
      if (this.productCount != that.productCount)
        return false;
    }

    boolean this_present_awardCount = true;
    boolean that_present_awardCount = true;
    if (this_present_awardCount || that_present_awardCount) {
      if (!(this_present_awardCount && that_present_awardCount))
        return false;
      if (this.awardCount != that.awardCount)
        return false;
    }

    boolean this_present_perBankIntegral = true;
    boolean that_present_perBankIntegral = true;
    if (this_present_perBankIntegral || that_present_perBankIntegral) {
      if (!(this_present_perBankIntegral && that_present_perBankIntegral))
        return false;
      if (this.perBankIntegral != that.perBankIntegral)
        return false;
    }

    boolean this_present_totalBankIntegral = true;
    boolean that_present_totalBankIntegral = true;
    if (this_present_totalBankIntegral || that_present_totalBankIntegral) {
      if (!(this_present_totalBankIntegral && that_present_totalBankIntegral))
        return false;
      if (this.totalBankIntegral != that.totalBankIntegral)
        return false;
    }

    boolean this_present_perUnionIntegral = true;
    boolean that_present_perUnionIntegral = true;
    if (this_present_perUnionIntegral || that_present_perUnionIntegral) {
      if (!(this_present_perUnionIntegral && that_present_perUnionIntegral))
        return false;
      if (this.perUnionIntegral != that.perUnionIntegral)
        return false;
    }

    boolean this_present_totalUnionIntegral = true;
    boolean that_present_totalUnionIntegral = true;
    if (this_present_totalUnionIntegral || that_present_totalUnionIntegral) {
      if (!(this_present_totalUnionIntegral && that_present_totalUnionIntegral))
        return false;
      if (this.totalUnionIntegral != that.totalUnionIntegral)
        return false;
    }

    boolean this_present_isTotalDay = true;
    boolean that_present_isTotalDay = true;
    if (this_present_isTotalDay || that_present_isTotalDay) {
      if (!(this_present_isTotalDay && that_present_isTotalDay))
        return false;
      if (this.isTotalDay != that.isTotalDay)
        return false;
    }

    boolean this_present_totalDay = true;
    boolean that_present_totalDay = true;
    if (this_present_totalDay || that_present_totalDay) {
      if (!(this_present_totalDay && that_present_totalDay))
        return false;
      if (this.totalDay != that.totalDay)
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    boolean this_present_isAwardCre = true;
    boolean that_present_isAwardCre = true;
    if (this_present_isAwardCre || that_present_isAwardCre) {
      if (!(this_present_isAwardCre && that_present_isAwardCre))
        return false;
      if (this.isAwardCre != that.isAwardCre)
        return false;
    }

    boolean this_present_creAwardType = true && this.isSetCreAwardType();
    boolean that_present_creAwardType = true && that.isSetCreAwardType();
    if (this_present_creAwardType || that_present_creAwardType) {
      if (!(this_present_creAwardType && that_present_creAwardType))
        return false;
      if (this.creAwardType != that.creAwardType)
        return false;
    }

    boolean this_present_creVouchersActiveId = true && this.isSetCreVouchersActiveId();
    boolean that_present_creVouchersActiveId = true && that.isSetCreVouchersActiveId();
    if (this_present_creVouchersActiveId || that_present_creVouchersActiveId) {
      if (!(this_present_creVouchersActiveId && that_present_creVouchersActiveId))
        return false;
      if (!this.creVouchersActiveId.equals(that.creVouchersActiveId))
        return false;
    }

    boolean this_present_creProductId = true && this.isSetCreProductId();
    boolean that_present_creProductId = true && that.isSetCreProductId();
    if (this_present_creProductId || that_present_creProductId) {
      if (!(this_present_creProductId && that_present_creProductId))
        return false;
      if (!this.creProductId.equals(that.creProductId))
        return false;
    }

    boolean this_present_isLimitCreCount = true && this.isSetIsLimitCreCount();
    boolean that_present_isLimitCreCount = true && that.isSetIsLimitCreCount();
    if (this_present_isLimitCreCount || that_present_isLimitCreCount) {
      if (!(this_present_isLimitCreCount && that_present_isLimitCreCount))
        return false;
      if (this.isLimitCreCount != that.isLimitCreCount)
        return false;
    }

    boolean this_present_creAwardCount = true && this.isSetCreAwardCount();
    boolean that_present_creAwardCount = true && that.isSetCreAwardCount();
    if (this_present_creAwardCount || that_present_creAwardCount) {
      if (!(this_present_creAwardCount && that_present_creAwardCount))
        return false;
      if (this.creAwardCount != that.creAwardCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_activeId = true && (isSetActiveId());
    list.add(present_activeId);
    if (present_activeId)
      list.add(activeId);

    boolean present_triggerType = true;
    list.add(present_triggerType);
    if (present_triggerType)
      list.add(triggerType);

    boolean present_awardType = true && (isSetAwardType());
    list.add(present_awardType);
    if (present_awardType)
      list.add(awardType);

    boolean present_limitMoney = true && (isSetLimitMoney());
    list.add(present_limitMoney);
    if (present_limitMoney)
      list.add(limitMoney);

    boolean present_cutMoney = true && (isSetCutMoney());
    list.add(present_cutMoney);
    if (present_cutMoney)
      list.add(cutMoney);

    boolean present_totalMoney = true && (isSetTotalMoney());
    list.add(present_totalMoney);
    if (present_totalMoney)
      list.add(totalMoney);

    boolean present_vouchersActiveId = true && (isSetVouchersActiveId());
    list.add(present_vouchersActiveId);
    if (present_vouchersActiveId)
      list.add(vouchersActiveId);

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_productCount = true && (isSetProductCount());
    list.add(present_productCount);
    if (present_productCount)
      list.add(productCount);

    boolean present_awardCount = true;
    list.add(present_awardCount);
    if (present_awardCount)
      list.add(awardCount);

    boolean present_perBankIntegral = true;
    list.add(present_perBankIntegral);
    if (present_perBankIntegral)
      list.add(perBankIntegral);

    boolean present_totalBankIntegral = true;
    list.add(present_totalBankIntegral);
    if (present_totalBankIntegral)
      list.add(totalBankIntegral);

    boolean present_perUnionIntegral = true;
    list.add(present_perUnionIntegral);
    if (present_perUnionIntegral)
      list.add(perUnionIntegral);

    boolean present_totalUnionIntegral = true;
    list.add(present_totalUnionIntegral);
    if (present_totalUnionIntegral)
      list.add(totalUnionIntegral);

    boolean present_isTotalDay = true;
    list.add(present_isTotalDay);
    if (present_isTotalDay)
      list.add(isTotalDay);

    boolean present_totalDay = true;
    list.add(present_totalDay);
    if (present_totalDay)
      list.add(totalDay);

    boolean present_totalCount = true;
    list.add(present_totalCount);
    if (present_totalCount)
      list.add(totalCount);

    boolean present_isAwardCre = true;
    list.add(present_isAwardCre);
    if (present_isAwardCre)
      list.add(isAwardCre);

    boolean present_creAwardType = true && (isSetCreAwardType());
    list.add(present_creAwardType);
    if (present_creAwardType)
      list.add(creAwardType);

    boolean present_creVouchersActiveId = true && (isSetCreVouchersActiveId());
    list.add(present_creVouchersActiveId);
    if (present_creVouchersActiveId)
      list.add(creVouchersActiveId);

    boolean present_creProductId = true && (isSetCreProductId());
    list.add(present_creProductId);
    if (present_creProductId)
      list.add(creProductId);

    boolean present_isLimitCreCount = true && (isSetIsLimitCreCount());
    list.add(present_isLimitCreCount);
    if (present_isLimitCreCount)
      list.add(isLimitCreCount);

    boolean present_creAwardCount = true && (isSetCreAwardCount());
    list.add(present_creAwardCount);
    if (present_creAwardCount)
      list.add(creAwardCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(RegisteredDetailRuleVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggerType()).compareTo(other.isSetTriggerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerType, other.triggerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAwardType()).compareTo(other.isSetAwardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAwardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awardType, other.awardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitMoney()).compareTo(other.isSetLimitMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitMoney, other.limitMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCutMoney()).compareTo(other.isSetCutMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCutMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cutMoney, other.cutMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalMoney()).compareTo(other.isSetTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMoney, other.totalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVouchersActiveId()).compareTo(other.isSetVouchersActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVouchersActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchersActiveId, other.vouchersActiveId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductCount()).compareTo(other.isSetProductCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCount, other.productCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAwardCount()).compareTo(other.isSetAwardCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAwardCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awardCount, other.awardCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerBankIntegral()).compareTo(other.isSetPerBankIntegral());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerBankIntegral()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perBankIntegral, other.perBankIntegral);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalBankIntegral()).compareTo(other.isSetTotalBankIntegral());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalBankIntegral()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalBankIntegral, other.totalBankIntegral);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerUnionIntegral()).compareTo(other.isSetPerUnionIntegral());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerUnionIntegral()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perUnionIntegral, other.perUnionIntegral);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalUnionIntegral()).compareTo(other.isSetTotalUnionIntegral());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalUnionIntegral()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalUnionIntegral, other.totalUnionIntegral);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTotalDay()).compareTo(other.isSetIsTotalDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTotalDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTotalDay, other.isTotalDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalDay()).compareTo(other.isSetTotalDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalDay, other.totalDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(other.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAwardCre()).compareTo(other.isSetIsAwardCre());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAwardCre()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAwardCre, other.isAwardCre);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreAwardType()).compareTo(other.isSetCreAwardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreAwardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creAwardType, other.creAwardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreVouchersActiveId()).compareTo(other.isSetCreVouchersActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreVouchersActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creVouchersActiveId, other.creVouchersActiveId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreProductId()).compareTo(other.isSetCreProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creProductId, other.creProductId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLimitCreCount()).compareTo(other.isSetIsLimitCreCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLimitCreCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLimitCreCount, other.isLimitCreCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreAwardCount()).compareTo(other.isSetCreAwardCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreAwardCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creAwardCount, other.creAwardCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RegisteredDetailRuleVo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeId:");
    if (this.activeId == null) {
      sb.append("null");
    } else {
      sb.append(this.activeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("triggerType:");
    sb.append(this.triggerType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("awardType:");
    if (this.awardType == null) {
      sb.append("null");
    } else {
      sb.append(this.awardType);
    }
    first = false;
    if (isSetLimitMoney()) {
      if (!first) sb.append(", ");
      sb.append("limitMoney:");
      sb.append(this.limitMoney);
      first = false;
    }
    if (isSetCutMoney()) {
      if (!first) sb.append(", ");
      sb.append("cutMoney:");
      sb.append(this.cutMoney);
      first = false;
    }
    if (isSetTotalMoney()) {
      if (!first) sb.append(", ");
      sb.append("totalMoney:");
      sb.append(this.totalMoney);
      first = false;
    }
    if (isSetVouchersActiveId()) {
      if (!first) sb.append(", ");
      sb.append("vouchersActiveId:");
      if (this.vouchersActiveId == null) {
        sb.append("null");
      } else {
        sb.append(this.vouchersActiveId);
      }
      first = false;
    }
    if (isSetProductId()) {
      if (!first) sb.append(", ");
      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
    }
    if (isSetProductCount()) {
      if (!first) sb.append(", ");
      sb.append("productCount:");
      sb.append(this.productCount);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("awardCount:");
    sb.append(this.awardCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perBankIntegral:");
    sb.append(this.perBankIntegral);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalBankIntegral:");
    sb.append(this.totalBankIntegral);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perUnionIntegral:");
    sb.append(this.perUnionIntegral);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalUnionIntegral:");
    sb.append(this.totalUnionIntegral);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTotalDay:");
    sb.append(this.isTotalDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalDay:");
    sb.append(this.totalDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAwardCre:");
    sb.append(this.isAwardCre);
    first = false;
    if (isSetCreAwardType()) {
      if (!first) sb.append(", ");
      sb.append("creAwardType:");
      sb.append(this.creAwardType);
      first = false;
    }
    if (isSetCreVouchersActiveId()) {
      if (!first) sb.append(", ");
      sb.append("creVouchersActiveId:");
      if (this.creVouchersActiveId == null) {
        sb.append("null");
      } else {
        sb.append(this.creVouchersActiveId);
      }
      first = false;
    }
    if (isSetCreProductId()) {
      if (!first) sb.append(", ");
      sb.append("creProductId:");
      if (this.creProductId == null) {
        sb.append("null");
      } else {
        sb.append(this.creProductId);
      }
      first = false;
    }
    if (isSetIsLimitCreCount()) {
      if (!first) sb.append(", ");
      sb.append("isLimitCreCount:");
      sb.append(this.isLimitCreCount);
      first = false;
    }
    if (isSetCreAwardCount()) {
      if (!first) sb.append(", ");
      sb.append("creAwardCount:");
      sb.append(this.creAwardCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegisteredDetailRuleVoStandardSchemeFactory implements SchemeFactory {
    public RegisteredDetailRuleVoStandardScheme getScheme() {
      return new RegisteredDetailRuleVoStandardScheme();
    }
  }

  private static class RegisteredDetailRuleVoStandardScheme extends StandardScheme<RegisteredDetailRuleVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RegisteredDetailRuleVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeId = iprot.readString();
              struct.setActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRIGGER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.triggerType = iprot.readBool();
              struct.setTriggerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AWARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.awardType = iprot.readString();
              struct.setAwardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LIMIT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.limitMoney = iprot.readI64();
              struct.setLimitMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CUT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cutMoney = iprot.readI64();
              struct.setCutMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalMoney = iprot.readI64();
              struct.setTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VOUCHERS_ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vouchersActiveId = iprot.readString();
              struct.setVouchersActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PRODUCT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productCount = iprot.readI32();
              struct.setProductCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AWARD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.awardCount = iprot.readI32();
              struct.setAwardCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PER_BANK_INTEGRAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.perBankIntegral = iprot.readI32();
              struct.setPerBankIntegralIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TOTAL_BANK_INTEGRAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalBankIntegral = iprot.readI32();
              struct.setTotalBankIntegralIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PER_UNION_INTEGRAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.perUnionIntegral = iprot.readI32();
              struct.setPerUnionIntegralIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TOTAL_UNION_INTEGRAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalUnionIntegral = iprot.readI32();
              struct.setTotalUnionIntegralIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_TOTAL_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTotalDay = iprot.readBool();
              struct.setIsTotalDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TOTAL_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalDay = iprot.readI32();
              struct.setTotalDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalCount = iprot.readI32();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // IS_AWARD_CRE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAwardCre = iprot.readBool();
              struct.setIsAwardCreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CRE_AWARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.creAwardType = iprot.readBool();
              struct.setCreAwardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CRE_VOUCHERS_ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creVouchersActiveId = iprot.readString();
              struct.setCreVouchersActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CRE_PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creProductId = iprot.readString();
              struct.setCreProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // IS_LIMIT_CRE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLimitCreCount = iprot.readBool();
              struct.setIsLimitCreCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CRE_AWARD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creAwardCount = iprot.readI32();
              struct.setCreAwardCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RegisteredDetailRuleVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.activeId != null) {
        oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
        oprot.writeString(struct.activeId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TRIGGER_TYPE_FIELD_DESC);
      oprot.writeBool(struct.triggerType);
      oprot.writeFieldEnd();
      if (struct.awardType != null) {
        oprot.writeFieldBegin(AWARD_TYPE_FIELD_DESC);
        oprot.writeString(struct.awardType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLimitMoney()) {
        oprot.writeFieldBegin(LIMIT_MONEY_FIELD_DESC);
        oprot.writeI64(struct.limitMoney);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCutMoney()) {
        oprot.writeFieldBegin(CUT_MONEY_FIELD_DESC);
        oprot.writeI64(struct.cutMoney);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalMoney()) {
        oprot.writeFieldBegin(TOTAL_MONEY_FIELD_DESC);
        oprot.writeI64(struct.totalMoney);
        oprot.writeFieldEnd();
      }
      if (struct.vouchersActiveId != null) {
        if (struct.isSetVouchersActiveId()) {
          oprot.writeFieldBegin(VOUCHERS_ACTIVE_ID_FIELD_DESC);
          oprot.writeString(struct.vouchersActiveId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.productId != null) {
        if (struct.isSetProductId()) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetProductCount()) {
        oprot.writeFieldBegin(PRODUCT_COUNT_FIELD_DESC);
        oprot.writeI32(struct.productCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AWARD_COUNT_FIELD_DESC);
      oprot.writeI32(struct.awardCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PER_BANK_INTEGRAL_FIELD_DESC);
      oprot.writeI32(struct.perBankIntegral);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_BANK_INTEGRAL_FIELD_DESC);
      oprot.writeI32(struct.totalBankIntegral);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PER_UNION_INTEGRAL_FIELD_DESC);
      oprot.writeI32(struct.perUnionIntegral);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_UNION_INTEGRAL_FIELD_DESC);
      oprot.writeI32(struct.totalUnionIntegral);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_TOTAL_DAY_FIELD_DESC);
      oprot.writeBool(struct.isTotalDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_DAY_FIELD_DESC);
      oprot.writeI32(struct.totalDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.totalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_AWARD_CRE_FIELD_DESC);
      oprot.writeBool(struct.isAwardCre);
      oprot.writeFieldEnd();
      if (struct.isSetCreAwardType()) {
        oprot.writeFieldBegin(CRE_AWARD_TYPE_FIELD_DESC);
        oprot.writeBool(struct.creAwardType);
        oprot.writeFieldEnd();
      }
      if (struct.creVouchersActiveId != null) {
        if (struct.isSetCreVouchersActiveId()) {
          oprot.writeFieldBegin(CRE_VOUCHERS_ACTIVE_ID_FIELD_DESC);
          oprot.writeString(struct.creVouchersActiveId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.creProductId != null) {
        if (struct.isSetCreProductId()) {
          oprot.writeFieldBegin(CRE_PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.creProductId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsLimitCreCount()) {
        oprot.writeFieldBegin(IS_LIMIT_CRE_COUNT_FIELD_DESC);
        oprot.writeBool(struct.isLimitCreCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreAwardCount()) {
        oprot.writeFieldBegin(CRE_AWARD_COUNT_FIELD_DESC);
        oprot.writeI32(struct.creAwardCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RegisteredDetailRuleVoTupleSchemeFactory implements SchemeFactory {
    public RegisteredDetailRuleVoTupleScheme getScheme() {
      return new RegisteredDetailRuleVoTupleScheme();
    }
  }

  private static class RegisteredDetailRuleVoTupleScheme extends TupleScheme<RegisteredDetailRuleVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RegisteredDetailRuleVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetActiveId()) {
        optionals.set(2);
      }
      if (struct.isSetTriggerType()) {
        optionals.set(3);
      }
      if (struct.isSetAwardType()) {
        optionals.set(4);
      }
      if (struct.isSetLimitMoney()) {
        optionals.set(5);
      }
      if (struct.isSetCutMoney()) {
        optionals.set(6);
      }
      if (struct.isSetTotalMoney()) {
        optionals.set(7);
      }
      if (struct.isSetVouchersActiveId()) {
        optionals.set(8);
      }
      if (struct.isSetProductId()) {
        optionals.set(9);
      }
      if (struct.isSetProductCount()) {
        optionals.set(10);
      }
      if (struct.isSetAwardCount()) {
        optionals.set(11);
      }
      if (struct.isSetPerBankIntegral()) {
        optionals.set(12);
      }
      if (struct.isSetTotalBankIntegral()) {
        optionals.set(13);
      }
      if (struct.isSetPerUnionIntegral()) {
        optionals.set(14);
      }
      if (struct.isSetTotalUnionIntegral()) {
        optionals.set(15);
      }
      if (struct.isSetIsTotalDay()) {
        optionals.set(16);
      }
      if (struct.isSetTotalDay()) {
        optionals.set(17);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(18);
      }
      if (struct.isSetIsAwardCre()) {
        optionals.set(19);
      }
      if (struct.isSetCreAwardType()) {
        optionals.set(20);
      }
      if (struct.isSetCreVouchersActiveId()) {
        optionals.set(21);
      }
      if (struct.isSetCreProductId()) {
        optionals.set(22);
      }
      if (struct.isSetIsLimitCreCount()) {
        optionals.set(23);
      }
      if (struct.isSetCreAwardCount()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetActiveId()) {
        oprot.writeString(struct.activeId);
      }
      if (struct.isSetTriggerType()) {
        oprot.writeBool(struct.triggerType);
      }
      if (struct.isSetAwardType()) {
        oprot.writeString(struct.awardType);
      }
      if (struct.isSetLimitMoney()) {
        oprot.writeI64(struct.limitMoney);
      }
      if (struct.isSetCutMoney()) {
        oprot.writeI64(struct.cutMoney);
      }
      if (struct.isSetTotalMoney()) {
        oprot.writeI64(struct.totalMoney);
      }
      if (struct.isSetVouchersActiveId()) {
        oprot.writeString(struct.vouchersActiveId);
      }
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetProductCount()) {
        oprot.writeI32(struct.productCount);
      }
      if (struct.isSetAwardCount()) {
        oprot.writeI32(struct.awardCount);
      }
      if (struct.isSetPerBankIntegral()) {
        oprot.writeI32(struct.perBankIntegral);
      }
      if (struct.isSetTotalBankIntegral()) {
        oprot.writeI32(struct.totalBankIntegral);
      }
      if (struct.isSetPerUnionIntegral()) {
        oprot.writeI32(struct.perUnionIntegral);
      }
      if (struct.isSetTotalUnionIntegral()) {
        oprot.writeI32(struct.totalUnionIntegral);
      }
      if (struct.isSetIsTotalDay()) {
        oprot.writeBool(struct.isTotalDay);
      }
      if (struct.isSetTotalDay()) {
        oprot.writeI32(struct.totalDay);
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI32(struct.totalCount);
      }
      if (struct.isSetIsAwardCre()) {
        oprot.writeBool(struct.isAwardCre);
      }
      if (struct.isSetCreAwardType()) {
        oprot.writeBool(struct.creAwardType);
      }
      if (struct.isSetCreVouchersActiveId()) {
        oprot.writeString(struct.creVouchersActiveId);
      }
      if (struct.isSetCreProductId()) {
        oprot.writeString(struct.creProductId);
      }
      if (struct.isSetIsLimitCreCount()) {
        oprot.writeBool(struct.isLimitCreCount);
      }
      if (struct.isSetCreAwardCount()) {
        oprot.writeI32(struct.creAwardCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RegisteredDetailRuleVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.activeId = iprot.readString();
        struct.setActiveIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.triggerType = iprot.readBool();
        struct.setTriggerTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.awardType = iprot.readString();
        struct.setAwardTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.limitMoney = iprot.readI64();
        struct.setLimitMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cutMoney = iprot.readI64();
        struct.setCutMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.totalMoney = iprot.readI64();
        struct.setTotalMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.vouchersActiveId = iprot.readString();
        struct.setVouchersActiveIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.productCount = iprot.readI32();
        struct.setProductCountIsSet(true);
      }
      if (incoming.get(11)) {
        struct.awardCount = iprot.readI32();
        struct.setAwardCountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.perBankIntegral = iprot.readI32();
        struct.setPerBankIntegralIsSet(true);
      }
      if (incoming.get(13)) {
        struct.totalBankIntegral = iprot.readI32();
        struct.setTotalBankIntegralIsSet(true);
      }
      if (incoming.get(14)) {
        struct.perUnionIntegral = iprot.readI32();
        struct.setPerUnionIntegralIsSet(true);
      }
      if (incoming.get(15)) {
        struct.totalUnionIntegral = iprot.readI32();
        struct.setTotalUnionIntegralIsSet(true);
      }
      if (incoming.get(16)) {
        struct.isTotalDay = iprot.readBool();
        struct.setIsTotalDayIsSet(true);
      }
      if (incoming.get(17)) {
        struct.totalDay = iprot.readI32();
        struct.setTotalDayIsSet(true);
      }
      if (incoming.get(18)) {
        struct.totalCount = iprot.readI32();
        struct.setTotalCountIsSet(true);
      }
      if (incoming.get(19)) {
        struct.isAwardCre = iprot.readBool();
        struct.setIsAwardCreIsSet(true);
      }
      if (incoming.get(20)) {
        struct.creAwardType = iprot.readBool();
        struct.setCreAwardTypeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.creVouchersActiveId = iprot.readString();
        struct.setCreVouchersActiveIdIsSet(true);
      }
      if (incoming.get(22)) {
        struct.creProductId = iprot.readString();
        struct.setCreProductIdIsSet(true);
      }
      if (incoming.get(23)) {
        struct.isLimitCreCount = iprot.readBool();
        struct.setIsLimitCreCountIsSet(true);
      }
      if (incoming.get(24)) {
        struct.creAwardCount = iprot.readI32();
        struct.setCreAwardCountIsSet(true);
      }
    }
  }

}

