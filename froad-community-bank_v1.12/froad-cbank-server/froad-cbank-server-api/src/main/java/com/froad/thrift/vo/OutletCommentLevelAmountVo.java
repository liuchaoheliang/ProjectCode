/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 门店评论级别统计
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class OutletCommentLevelAmountVo implements org.apache.thrift.TBase<OutletCommentLevelAmountVo, OutletCommentLevelAmountVo._Fields>, java.io.Serializable, Cloneable, Comparable<OutletCommentLevelAmountVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutletCommentLevelAmountVo");

  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LEVEL_AMOUNT_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField("levelAmountOne", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LEVEL_AMOUNT_TWO_FIELD_DESC = new org.apache.thrift.protocol.TField("levelAmountTwo", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LEVEL_AMOUNT_THREE_FIELD_DESC = new org.apache.thrift.protocol.TField("levelAmountThree", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField LEVEL_AMOUNT_FOUR_FIELD_DESC = new org.apache.thrift.protocol.TField("levelAmountFour", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LEVEL_AMOUNT_FIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("levelAmountFive", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OutletCommentLevelAmountVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OutletCommentLevelAmountVoTupleSchemeFactory());
  }

  /**
   * 门店id
   */
  public String outletId; // required
  /**
   * 门店名称
   */
  public String outletName; // required
  /**
   * 星级 1 的数量
   */
  public int levelAmountOne; // required
  /**
   * 星级 2 的数量
   */
  public int levelAmountTwo; // required
  /**
   * 星级 3 的数量
   */
  public int levelAmountThree; // required
  /**
   * 星级 4 的数量
   */
  public int levelAmountFour; // required
  /**
   * 星级 5 的数量
   */
  public int levelAmountFive; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 门店id
     */
    OUTLET_ID((short)1, "outletId"),
    /**
     * 门店名称
     */
    OUTLET_NAME((short)2, "outletName"),
    /**
     * 星级 1 的数量
     */
    LEVEL_AMOUNT_ONE((short)3, "levelAmountOne"),
    /**
     * 星级 2 的数量
     */
    LEVEL_AMOUNT_TWO((short)4, "levelAmountTwo"),
    /**
     * 星级 3 的数量
     */
    LEVEL_AMOUNT_THREE((short)5, "levelAmountThree"),
    /**
     * 星级 4 的数量
     */
    LEVEL_AMOUNT_FOUR((short)6, "levelAmountFour"),
    /**
     * 星级 5 的数量
     */
    LEVEL_AMOUNT_FIVE((short)7, "levelAmountFive");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OUTLET_ID
          return OUTLET_ID;
        case 2: // OUTLET_NAME
          return OUTLET_NAME;
        case 3: // LEVEL_AMOUNT_ONE
          return LEVEL_AMOUNT_ONE;
        case 4: // LEVEL_AMOUNT_TWO
          return LEVEL_AMOUNT_TWO;
        case 5: // LEVEL_AMOUNT_THREE
          return LEVEL_AMOUNT_THREE;
        case 6: // LEVEL_AMOUNT_FOUR
          return LEVEL_AMOUNT_FOUR;
        case 7: // LEVEL_AMOUNT_FIVE
          return LEVEL_AMOUNT_FIVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEVELAMOUNTONE_ISSET_ID = 0;
  private static final int __LEVELAMOUNTTWO_ISSET_ID = 1;
  private static final int __LEVELAMOUNTTHREE_ISSET_ID = 2;
  private static final int __LEVELAMOUNTFOUR_ISSET_ID = 3;
  private static final int __LEVELAMOUNTFIVE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEVEL_AMOUNT_ONE, new org.apache.thrift.meta_data.FieldMetaData("levelAmountOne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEVEL_AMOUNT_TWO, new org.apache.thrift.meta_data.FieldMetaData("levelAmountTwo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEVEL_AMOUNT_THREE, new org.apache.thrift.meta_data.FieldMetaData("levelAmountThree", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEVEL_AMOUNT_FOUR, new org.apache.thrift.meta_data.FieldMetaData("levelAmountFour", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEVEL_AMOUNT_FIVE, new org.apache.thrift.meta_data.FieldMetaData("levelAmountFive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OutletCommentLevelAmountVo.class, metaDataMap);
  }

  public OutletCommentLevelAmountVo() {
  }

  public OutletCommentLevelAmountVo(
    String outletId,
    String outletName,
    int levelAmountOne,
    int levelAmountTwo,
    int levelAmountThree,
    int levelAmountFour,
    int levelAmountFive)
  {
    this();
    this.outletId = outletId;
    this.outletName = outletName;
    this.levelAmountOne = levelAmountOne;
    setLevelAmountOneIsSet(true);
    this.levelAmountTwo = levelAmountTwo;
    setLevelAmountTwoIsSet(true);
    this.levelAmountThree = levelAmountThree;
    setLevelAmountThreeIsSet(true);
    this.levelAmountFour = levelAmountFour;
    setLevelAmountFourIsSet(true);
    this.levelAmountFive = levelAmountFive;
    setLevelAmountFiveIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OutletCommentLevelAmountVo(OutletCommentLevelAmountVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOutletId()) {
      this.outletId = other.outletId;
    }
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
    this.levelAmountOne = other.levelAmountOne;
    this.levelAmountTwo = other.levelAmountTwo;
    this.levelAmountThree = other.levelAmountThree;
    this.levelAmountFour = other.levelAmountFour;
    this.levelAmountFive = other.levelAmountFive;
  }

  public OutletCommentLevelAmountVo deepCopy() {
    return new OutletCommentLevelAmountVo(this);
  }

  @Override
  public void clear() {
    this.outletId = null;
    this.outletName = null;
    setLevelAmountOneIsSet(false);
    this.levelAmountOne = 0;
    setLevelAmountTwoIsSet(false);
    this.levelAmountTwo = 0;
    setLevelAmountThreeIsSet(false);
    this.levelAmountThree = 0;
    setLevelAmountFourIsSet(false);
    this.levelAmountFour = 0;
    setLevelAmountFiveIsSet(false);
    this.levelAmountFive = 0;
  }

  /**
   * 门店id
   */
  public String getOutletId() {
    return this.outletId;
  }

  /**
   * 门店id
   */
  public OutletCommentLevelAmountVo setOutletId(String outletId) {
    this.outletId = outletId;
    return this;
  }

  public void unsetOutletId() {
    this.outletId = null;
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return this.outletId != null;
  }

  public void setOutletIdIsSet(boolean value) {
    if (!value) {
      this.outletId = null;
    }
  }

  /**
   * 门店名称
   */
  public String getOutletName() {
    return this.outletName;
  }

  /**
   * 门店名称
   */
  public OutletCommentLevelAmountVo setOutletName(String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  /**
   * 星级 1 的数量
   */
  public int getLevelAmountOne() {
    return this.levelAmountOne;
  }

  /**
   * 星级 1 的数量
   */
  public OutletCommentLevelAmountVo setLevelAmountOne(int levelAmountOne) {
    this.levelAmountOne = levelAmountOne;
    setLevelAmountOneIsSet(true);
    return this;
  }

  public void unsetLevelAmountOne() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVELAMOUNTONE_ISSET_ID);
  }

  /** Returns true if field levelAmountOne is set (has been assigned a value) and false otherwise */
  public boolean isSetLevelAmountOne() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVELAMOUNTONE_ISSET_ID);
  }

  public void setLevelAmountOneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVELAMOUNTONE_ISSET_ID, value);
  }

  /**
   * 星级 2 的数量
   */
  public int getLevelAmountTwo() {
    return this.levelAmountTwo;
  }

  /**
   * 星级 2 的数量
   */
  public OutletCommentLevelAmountVo setLevelAmountTwo(int levelAmountTwo) {
    this.levelAmountTwo = levelAmountTwo;
    setLevelAmountTwoIsSet(true);
    return this;
  }

  public void unsetLevelAmountTwo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVELAMOUNTTWO_ISSET_ID);
  }

  /** Returns true if field levelAmountTwo is set (has been assigned a value) and false otherwise */
  public boolean isSetLevelAmountTwo() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVELAMOUNTTWO_ISSET_ID);
  }

  public void setLevelAmountTwoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVELAMOUNTTWO_ISSET_ID, value);
  }

  /**
   * 星级 3 的数量
   */
  public int getLevelAmountThree() {
    return this.levelAmountThree;
  }

  /**
   * 星级 3 的数量
   */
  public OutletCommentLevelAmountVo setLevelAmountThree(int levelAmountThree) {
    this.levelAmountThree = levelAmountThree;
    setLevelAmountThreeIsSet(true);
    return this;
  }

  public void unsetLevelAmountThree() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVELAMOUNTTHREE_ISSET_ID);
  }

  /** Returns true if field levelAmountThree is set (has been assigned a value) and false otherwise */
  public boolean isSetLevelAmountThree() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVELAMOUNTTHREE_ISSET_ID);
  }

  public void setLevelAmountThreeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVELAMOUNTTHREE_ISSET_ID, value);
  }

  /**
   * 星级 4 的数量
   */
  public int getLevelAmountFour() {
    return this.levelAmountFour;
  }

  /**
   * 星级 4 的数量
   */
  public OutletCommentLevelAmountVo setLevelAmountFour(int levelAmountFour) {
    this.levelAmountFour = levelAmountFour;
    setLevelAmountFourIsSet(true);
    return this;
  }

  public void unsetLevelAmountFour() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVELAMOUNTFOUR_ISSET_ID);
  }

  /** Returns true if field levelAmountFour is set (has been assigned a value) and false otherwise */
  public boolean isSetLevelAmountFour() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVELAMOUNTFOUR_ISSET_ID);
  }

  public void setLevelAmountFourIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVELAMOUNTFOUR_ISSET_ID, value);
  }

  /**
   * 星级 5 的数量
   */
  public int getLevelAmountFive() {
    return this.levelAmountFive;
  }

  /**
   * 星级 5 的数量
   */
  public OutletCommentLevelAmountVo setLevelAmountFive(int levelAmountFive) {
    this.levelAmountFive = levelAmountFive;
    setLevelAmountFiveIsSet(true);
    return this;
  }

  public void unsetLevelAmountFive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVELAMOUNTFIVE_ISSET_ID);
  }

  /** Returns true if field levelAmountFive is set (has been assigned a value) and false otherwise */
  public boolean isSetLevelAmountFive() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVELAMOUNTFIVE_ISSET_ID);
  }

  public void setLevelAmountFiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVELAMOUNTFIVE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((String)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((String)value);
      }
      break;

    case LEVEL_AMOUNT_ONE:
      if (value == null) {
        unsetLevelAmountOne();
      } else {
        setLevelAmountOne((Integer)value);
      }
      break;

    case LEVEL_AMOUNT_TWO:
      if (value == null) {
        unsetLevelAmountTwo();
      } else {
        setLevelAmountTwo((Integer)value);
      }
      break;

    case LEVEL_AMOUNT_THREE:
      if (value == null) {
        unsetLevelAmountThree();
      } else {
        setLevelAmountThree((Integer)value);
      }
      break;

    case LEVEL_AMOUNT_FOUR:
      if (value == null) {
        unsetLevelAmountFour();
      } else {
        setLevelAmountFour((Integer)value);
      }
      break;

    case LEVEL_AMOUNT_FIVE:
      if (value == null) {
        unsetLevelAmountFive();
      } else {
        setLevelAmountFive((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OUTLET_ID:
      return getOutletId();

    case OUTLET_NAME:
      return getOutletName();

    case LEVEL_AMOUNT_ONE:
      return Integer.valueOf(getLevelAmountOne());

    case LEVEL_AMOUNT_TWO:
      return Integer.valueOf(getLevelAmountTwo());

    case LEVEL_AMOUNT_THREE:
      return Integer.valueOf(getLevelAmountThree());

    case LEVEL_AMOUNT_FOUR:
      return Integer.valueOf(getLevelAmountFour());

    case LEVEL_AMOUNT_FIVE:
      return Integer.valueOf(getLevelAmountFive());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OUTLET_ID:
      return isSetOutletId();
    case OUTLET_NAME:
      return isSetOutletName();
    case LEVEL_AMOUNT_ONE:
      return isSetLevelAmountOne();
    case LEVEL_AMOUNT_TWO:
      return isSetLevelAmountTwo();
    case LEVEL_AMOUNT_THREE:
      return isSetLevelAmountThree();
    case LEVEL_AMOUNT_FOUR:
      return isSetLevelAmountFour();
    case LEVEL_AMOUNT_FIVE:
      return isSetLevelAmountFive();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OutletCommentLevelAmountVo)
      return this.equals((OutletCommentLevelAmountVo)that);
    return false;
  }

  public boolean equals(OutletCommentLevelAmountVo that) {
    if (that == null)
      return false;

    boolean this_present_outletId = true && this.isSetOutletId();
    boolean that_present_outletId = true && that.isSetOutletId();
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (!this.outletId.equals(that.outletId))
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    boolean this_present_levelAmountOne = true;
    boolean that_present_levelAmountOne = true;
    if (this_present_levelAmountOne || that_present_levelAmountOne) {
      if (!(this_present_levelAmountOne && that_present_levelAmountOne))
        return false;
      if (this.levelAmountOne != that.levelAmountOne)
        return false;
    }

    boolean this_present_levelAmountTwo = true;
    boolean that_present_levelAmountTwo = true;
    if (this_present_levelAmountTwo || that_present_levelAmountTwo) {
      if (!(this_present_levelAmountTwo && that_present_levelAmountTwo))
        return false;
      if (this.levelAmountTwo != that.levelAmountTwo)
        return false;
    }

    boolean this_present_levelAmountThree = true;
    boolean that_present_levelAmountThree = true;
    if (this_present_levelAmountThree || that_present_levelAmountThree) {
      if (!(this_present_levelAmountThree && that_present_levelAmountThree))
        return false;
      if (this.levelAmountThree != that.levelAmountThree)
        return false;
    }

    boolean this_present_levelAmountFour = true;
    boolean that_present_levelAmountFour = true;
    if (this_present_levelAmountFour || that_present_levelAmountFour) {
      if (!(this_present_levelAmountFour && that_present_levelAmountFour))
        return false;
      if (this.levelAmountFour != that.levelAmountFour)
        return false;
    }

    boolean this_present_levelAmountFive = true;
    boolean that_present_levelAmountFive = true;
    if (this_present_levelAmountFive || that_present_levelAmountFive) {
      if (!(this_present_levelAmountFive && that_present_levelAmountFive))
        return false;
      if (this.levelAmountFive != that.levelAmountFive)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_outletId = true && (isSetOutletId());
    list.add(present_outletId);
    if (present_outletId)
      list.add(outletId);

    boolean present_outletName = true && (isSetOutletName());
    list.add(present_outletName);
    if (present_outletName)
      list.add(outletName);

    boolean present_levelAmountOne = true;
    list.add(present_levelAmountOne);
    if (present_levelAmountOne)
      list.add(levelAmountOne);

    boolean present_levelAmountTwo = true;
    list.add(present_levelAmountTwo);
    if (present_levelAmountTwo)
      list.add(levelAmountTwo);

    boolean present_levelAmountThree = true;
    list.add(present_levelAmountThree);
    if (present_levelAmountThree)
      list.add(levelAmountThree);

    boolean present_levelAmountFour = true;
    list.add(present_levelAmountFour);
    if (present_levelAmountFour)
      list.add(levelAmountFour);

    boolean present_levelAmountFive = true;
    list.add(present_levelAmountFive);
    if (present_levelAmountFive)
      list.add(levelAmountFive);

    return list.hashCode();
  }

  @Override
  public int compareTo(OutletCommentLevelAmountVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevelAmountOne()).compareTo(other.isSetLevelAmountOne());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevelAmountOne()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levelAmountOne, other.levelAmountOne);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevelAmountTwo()).compareTo(other.isSetLevelAmountTwo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevelAmountTwo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levelAmountTwo, other.levelAmountTwo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevelAmountThree()).compareTo(other.isSetLevelAmountThree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevelAmountThree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levelAmountThree, other.levelAmountThree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevelAmountFour()).compareTo(other.isSetLevelAmountFour());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevelAmountFour()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levelAmountFour, other.levelAmountFour);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevelAmountFive()).compareTo(other.isSetLevelAmountFive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevelAmountFive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.levelAmountFive, other.levelAmountFive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OutletCommentLevelAmountVo(");
    boolean first = true;

    sb.append("outletId:");
    if (this.outletId == null) {
      sb.append("null");
    } else {
      sb.append(this.outletId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletName:");
    if (this.outletName == null) {
      sb.append("null");
    } else {
      sb.append(this.outletName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("levelAmountOne:");
    sb.append(this.levelAmountOne);
    first = false;
    if (!first) sb.append(", ");
    sb.append("levelAmountTwo:");
    sb.append(this.levelAmountTwo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("levelAmountThree:");
    sb.append(this.levelAmountThree);
    first = false;
    if (!first) sb.append(", ");
    sb.append("levelAmountFour:");
    sb.append(this.levelAmountFour);
    first = false;
    if (!first) sb.append(", ");
    sb.append("levelAmountFive:");
    sb.append(this.levelAmountFive);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OutletCommentLevelAmountVoStandardSchemeFactory implements SchemeFactory {
    public OutletCommentLevelAmountVoStandardScheme getScheme() {
      return new OutletCommentLevelAmountVoStandardScheme();
    }
  }

  private static class OutletCommentLevelAmountVoStandardScheme extends StandardScheme<OutletCommentLevelAmountVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OutletCommentLevelAmountVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletId = iprot.readString();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEVEL_AMOUNT_ONE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.levelAmountOne = iprot.readI32();
              struct.setLevelAmountOneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEVEL_AMOUNT_TWO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.levelAmountTwo = iprot.readI32();
              struct.setLevelAmountTwoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEVEL_AMOUNT_THREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.levelAmountThree = iprot.readI32();
              struct.setLevelAmountThreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LEVEL_AMOUNT_FOUR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.levelAmountFour = iprot.readI32();
              struct.setLevelAmountFourIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LEVEL_AMOUNT_FIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.levelAmountFive = iprot.readI32();
              struct.setLevelAmountFiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OutletCommentLevelAmountVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.outletId != null) {
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeString(struct.outletId);
        oprot.writeFieldEnd();
      }
      if (struct.outletName != null) {
        oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
        oprot.writeString(struct.outletName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEVEL_AMOUNT_ONE_FIELD_DESC);
      oprot.writeI32(struct.levelAmountOne);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_AMOUNT_TWO_FIELD_DESC);
      oprot.writeI32(struct.levelAmountTwo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_AMOUNT_THREE_FIELD_DESC);
      oprot.writeI32(struct.levelAmountThree);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_AMOUNT_FOUR_FIELD_DESC);
      oprot.writeI32(struct.levelAmountFour);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_AMOUNT_FIVE_FIELD_DESC);
      oprot.writeI32(struct.levelAmountFive);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OutletCommentLevelAmountVoTupleSchemeFactory implements SchemeFactory {
    public OutletCommentLevelAmountVoTupleScheme getScheme() {
      return new OutletCommentLevelAmountVoTupleScheme();
    }
  }

  private static class OutletCommentLevelAmountVoTupleScheme extends TupleScheme<OutletCommentLevelAmountVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OutletCommentLevelAmountVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOutletId()) {
        optionals.set(0);
      }
      if (struct.isSetOutletName()) {
        optionals.set(1);
      }
      if (struct.isSetLevelAmountOne()) {
        optionals.set(2);
      }
      if (struct.isSetLevelAmountTwo()) {
        optionals.set(3);
      }
      if (struct.isSetLevelAmountThree()) {
        optionals.set(4);
      }
      if (struct.isSetLevelAmountFour()) {
        optionals.set(5);
      }
      if (struct.isSetLevelAmountFive()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetOutletId()) {
        oprot.writeString(struct.outletId);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
      if (struct.isSetLevelAmountOne()) {
        oprot.writeI32(struct.levelAmountOne);
      }
      if (struct.isSetLevelAmountTwo()) {
        oprot.writeI32(struct.levelAmountTwo);
      }
      if (struct.isSetLevelAmountThree()) {
        oprot.writeI32(struct.levelAmountThree);
      }
      if (struct.isSetLevelAmountFour()) {
        oprot.writeI32(struct.levelAmountFour);
      }
      if (struct.isSetLevelAmountFive()) {
        oprot.writeI32(struct.levelAmountFive);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OutletCommentLevelAmountVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.outletId = iprot.readString();
        struct.setOutletIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.levelAmountOne = iprot.readI32();
        struct.setLevelAmountOneIsSet(true);
      }
      if (incoming.get(3)) {
        struct.levelAmountTwo = iprot.readI32();
        struct.setLevelAmountTwoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.levelAmountThree = iprot.readI32();
        struct.setLevelAmountThreeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.levelAmountFour = iprot.readI32();
        struct.setLevelAmountFourIsSet(true);
      }
      if (incoming.get(6)) {
        struct.levelAmountFive = iprot.readI32();
        struct.setLevelAmountFiveIsSet(true);
      }
    }
  }

}

