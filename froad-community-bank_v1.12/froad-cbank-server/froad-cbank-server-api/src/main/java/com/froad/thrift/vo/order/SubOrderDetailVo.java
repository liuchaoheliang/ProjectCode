/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 子订单详情
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class SubOrderDetailVo implements org.apache.thrift.TBase<SubOrderDetailVo, SubOrderDetailVo._Fields>, java.io.Serializable, Cloneable, Comparable<SubOrderDetailVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SubOrderDetailVo");

  private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SUB_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("subTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PRODUCT_DETAIL_VO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("productDetailVoList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField IS_ENABLE_CONFIRM_RECEIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isEnableConfirmReceive", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField IS_ENABLE_REFUND_FIELD_DESC = new org.apache.thrift.protocol.TField("isEnableRefund", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IS_ENABLE_SEE_TICKET_FIELD_DESC = new org.apache.thrift.protocol.TField("isEnableSeeTicket", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField SHIPPING_DETAIL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("shippingDetailVo", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField REFUND_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundState", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DELIVERY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryState", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SubOrderDetailVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SubOrderDetailVoTupleSchemeFactory());
  }

  /**
   * 子订单ID
   */
  public String subOrderId; // required
  /**
   * 子订单类型
   */
  public String type; // required
  /**
   * 商户ID|机构号
   */
  public String merchantId; // required
  /**
   * 商户名称|机构名称
   */
  public String merchantName; // required
  /**
   * 子订单汇总金额
   */
  public double subTotalMoney; // required
  /**
   * 商品信息
   */
  public List<ProductDetailVo> productDetailVoList; // required
  /**
   * 是否可确认收货
   */
  public boolean isEnableConfirmReceive; // required
  /**
   * 是否可退款
   */
  public boolean isEnableRefund; // required
  /**
   * 是否可查看券码
   */
  public boolean isEnableSeeTicket; // required
  /**
   * 物流详细信息
   */
  public ShippingDetailVo shippingDetailVo; // required
  /**
   * 子订单退款状态
   */
  public String refundState; // required
  /**
   * 精品商城物流配送状态。0:未发货；1已发货；2.已收货*
   */
  public String deliveryState; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 子订单ID
     */
    SUB_ORDER_ID((short)1, "subOrderId"),
    /**
     * 子订单类型
     */
    TYPE((short)2, "type"),
    /**
     * 商户ID|机构号
     */
    MERCHANT_ID((short)3, "merchantId"),
    /**
     * 商户名称|机构名称
     */
    MERCHANT_NAME((short)4, "merchantName"),
    /**
     * 子订单汇总金额
     */
    SUB_TOTAL_MONEY((short)5, "subTotalMoney"),
    /**
     * 商品信息
     */
    PRODUCT_DETAIL_VO_LIST((short)6, "productDetailVoList"),
    /**
     * 是否可确认收货
     */
    IS_ENABLE_CONFIRM_RECEIVE((short)7, "isEnableConfirmReceive"),
    /**
     * 是否可退款
     */
    IS_ENABLE_REFUND((short)8, "isEnableRefund"),
    /**
     * 是否可查看券码
     */
    IS_ENABLE_SEE_TICKET((short)9, "isEnableSeeTicket"),
    /**
     * 物流详细信息
     */
    SHIPPING_DETAIL_VO((short)10, "shippingDetailVo"),
    /**
     * 子订单退款状态
     */
    REFUND_STATE((short)11, "refundState"),
    /**
     * 精品商城物流配送状态。0:未发货；1已发货；2.已收货*
     */
    DELIVERY_STATE((short)12, "deliveryState");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ORDER_ID
          return SUB_ORDER_ID;
        case 2: // TYPE
          return TYPE;
        case 3: // MERCHANT_ID
          return MERCHANT_ID;
        case 4: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 5: // SUB_TOTAL_MONEY
          return SUB_TOTAL_MONEY;
        case 6: // PRODUCT_DETAIL_VO_LIST
          return PRODUCT_DETAIL_VO_LIST;
        case 7: // IS_ENABLE_CONFIRM_RECEIVE
          return IS_ENABLE_CONFIRM_RECEIVE;
        case 8: // IS_ENABLE_REFUND
          return IS_ENABLE_REFUND;
        case 9: // IS_ENABLE_SEE_TICKET
          return IS_ENABLE_SEE_TICKET;
        case 10: // SHIPPING_DETAIL_VO
          return SHIPPING_DETAIL_VO;
        case 11: // REFUND_STATE
          return REFUND_STATE;
        case 12: // DELIVERY_STATE
          return DELIVERY_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBTOTALMONEY_ISSET_ID = 0;
  private static final int __ISENABLECONFIRMRECEIVE_ISSET_ID = 1;
  private static final int __ISENABLEREFUND_ISSET_ID = 2;
  private static final int __ISENABLESEETICKET_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("subTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_DETAIL_VO_LIST, new org.apache.thrift.meta_data.FieldMetaData("productDetailVoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductDetailVo.class))));
    tmpMap.put(_Fields.IS_ENABLE_CONFIRM_RECEIVE, new org.apache.thrift.meta_data.FieldMetaData("isEnableConfirmReceive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ENABLE_REFUND, new org.apache.thrift.meta_data.FieldMetaData("isEnableRefund", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ENABLE_SEE_TICKET, new org.apache.thrift.meta_data.FieldMetaData("isEnableSeeTicket", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SHIPPING_DETAIL_VO, new org.apache.thrift.meta_data.FieldMetaData("shippingDetailVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ShippingDetailVo.class)));
    tmpMap.put(_Fields.REFUND_STATE, new org.apache.thrift.meta_data.FieldMetaData("refundState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_STATE, new org.apache.thrift.meta_data.FieldMetaData("deliveryState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SubOrderDetailVo.class, metaDataMap);
  }

  public SubOrderDetailVo() {
  }

  public SubOrderDetailVo(
    String subOrderId,
    String type,
    String merchantId,
    String merchantName,
    double subTotalMoney,
    List<ProductDetailVo> productDetailVoList,
    boolean isEnableConfirmReceive,
    boolean isEnableRefund,
    boolean isEnableSeeTicket,
    ShippingDetailVo shippingDetailVo,
    String refundState,
    String deliveryState)
  {
    this();
    this.subOrderId = subOrderId;
    this.type = type;
    this.merchantId = merchantId;
    this.merchantName = merchantName;
    this.subTotalMoney = subTotalMoney;
    setSubTotalMoneyIsSet(true);
    this.productDetailVoList = productDetailVoList;
    this.isEnableConfirmReceive = isEnableConfirmReceive;
    setIsEnableConfirmReceiveIsSet(true);
    this.isEnableRefund = isEnableRefund;
    setIsEnableRefundIsSet(true);
    this.isEnableSeeTicket = isEnableSeeTicket;
    setIsEnableSeeTicketIsSet(true);
    this.shippingDetailVo = shippingDetailVo;
    this.refundState = refundState;
    this.deliveryState = deliveryState;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SubOrderDetailVo(SubOrderDetailVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSubOrderId()) {
      this.subOrderId = other.subOrderId;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    this.subTotalMoney = other.subTotalMoney;
    if (other.isSetProductDetailVoList()) {
      List<ProductDetailVo> __this__productDetailVoList = new ArrayList<ProductDetailVo>(other.productDetailVoList.size());
      for (ProductDetailVo other_element : other.productDetailVoList) {
        __this__productDetailVoList.add(new ProductDetailVo(other_element));
      }
      this.productDetailVoList = __this__productDetailVoList;
    }
    this.isEnableConfirmReceive = other.isEnableConfirmReceive;
    this.isEnableRefund = other.isEnableRefund;
    this.isEnableSeeTicket = other.isEnableSeeTicket;
    if (other.isSetShippingDetailVo()) {
      this.shippingDetailVo = new ShippingDetailVo(other.shippingDetailVo);
    }
    if (other.isSetRefundState()) {
      this.refundState = other.refundState;
    }
    if (other.isSetDeliveryState()) {
      this.deliveryState = other.deliveryState;
    }
  }

  public SubOrderDetailVo deepCopy() {
    return new SubOrderDetailVo(this);
  }

  @Override
  public void clear() {
    this.subOrderId = null;
    this.type = null;
    this.merchantId = null;
    this.merchantName = null;
    setSubTotalMoneyIsSet(false);
    this.subTotalMoney = 0.0;
    this.productDetailVoList = null;
    setIsEnableConfirmReceiveIsSet(false);
    this.isEnableConfirmReceive = false;
    setIsEnableRefundIsSet(false);
    this.isEnableRefund = false;
    setIsEnableSeeTicketIsSet(false);
    this.isEnableSeeTicket = false;
    this.shippingDetailVo = null;
    this.refundState = null;
    this.deliveryState = null;
  }

  /**
   * 子订单ID
   */
  public String getSubOrderId() {
    return this.subOrderId;
  }

  /**
   * 子订单ID
   */
  public SubOrderDetailVo setSubOrderId(String subOrderId) {
    this.subOrderId = subOrderId;
    return this;
  }

  public void unsetSubOrderId() {
    this.subOrderId = null;
  }

  /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubOrderId() {
    return this.subOrderId != null;
  }

  public void setSubOrderIdIsSet(boolean value) {
    if (!value) {
      this.subOrderId = null;
    }
  }

  /**
   * 子订单类型
   */
  public String getType() {
    return this.type;
  }

  /**
   * 子订单类型
   */
  public SubOrderDetailVo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 商户ID|机构号
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户ID|机构号
   */
  public SubOrderDetailVo setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 商户名称|机构名称
   */
  public String getMerchantName() {
    return this.merchantName;
  }

  /**
   * 商户名称|机构名称
   */
  public SubOrderDetailVo setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  /**
   * 子订单汇总金额
   */
  public double getSubTotalMoney() {
    return this.subTotalMoney;
  }

  /**
   * 子订单汇总金额
   */
  public SubOrderDetailVo setSubTotalMoney(double subTotalMoney) {
    this.subTotalMoney = subTotalMoney;
    setSubTotalMoneyIsSet(true);
    return this;
  }

  public void unsetSubTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field subTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetSubTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID);
  }

  public void setSubTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID, value);
  }

  public int getProductDetailVoListSize() {
    return (this.productDetailVoList == null) ? 0 : this.productDetailVoList.size();
  }

  public java.util.Iterator<ProductDetailVo> getProductDetailVoListIterator() {
    return (this.productDetailVoList == null) ? null : this.productDetailVoList.iterator();
  }

  public void addToProductDetailVoList(ProductDetailVo elem) {
    if (this.productDetailVoList == null) {
      this.productDetailVoList = new ArrayList<ProductDetailVo>();
    }
    this.productDetailVoList.add(elem);
  }

  /**
   * 商品信息
   */
  public List<ProductDetailVo> getProductDetailVoList() {
    return this.productDetailVoList;
  }

  /**
   * 商品信息
   */
  public SubOrderDetailVo setProductDetailVoList(List<ProductDetailVo> productDetailVoList) {
    this.productDetailVoList = productDetailVoList;
    return this;
  }

  public void unsetProductDetailVoList() {
    this.productDetailVoList = null;
  }

  /** Returns true if field productDetailVoList is set (has been assigned a value) and false otherwise */
  public boolean isSetProductDetailVoList() {
    return this.productDetailVoList != null;
  }

  public void setProductDetailVoListIsSet(boolean value) {
    if (!value) {
      this.productDetailVoList = null;
    }
  }

  /**
   * 是否可确认收货
   */
  public boolean isIsEnableConfirmReceive() {
    return this.isEnableConfirmReceive;
  }

  /**
   * 是否可确认收货
   */
  public SubOrderDetailVo setIsEnableConfirmReceive(boolean isEnableConfirmReceive) {
    this.isEnableConfirmReceive = isEnableConfirmReceive;
    setIsEnableConfirmReceiveIsSet(true);
    return this;
  }

  public void unsetIsEnableConfirmReceive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISENABLECONFIRMRECEIVE_ISSET_ID);
  }

  /** Returns true if field isEnableConfirmReceive is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEnableConfirmReceive() {
    return EncodingUtils.testBit(__isset_bitfield, __ISENABLECONFIRMRECEIVE_ISSET_ID);
  }

  public void setIsEnableConfirmReceiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISENABLECONFIRMRECEIVE_ISSET_ID, value);
  }

  /**
   * 是否可退款
   */
  public boolean isIsEnableRefund() {
    return this.isEnableRefund;
  }

  /**
   * 是否可退款
   */
  public SubOrderDetailVo setIsEnableRefund(boolean isEnableRefund) {
    this.isEnableRefund = isEnableRefund;
    setIsEnableRefundIsSet(true);
    return this;
  }

  public void unsetIsEnableRefund() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISENABLEREFUND_ISSET_ID);
  }

  /** Returns true if field isEnableRefund is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEnableRefund() {
    return EncodingUtils.testBit(__isset_bitfield, __ISENABLEREFUND_ISSET_ID);
  }

  public void setIsEnableRefundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISENABLEREFUND_ISSET_ID, value);
  }

  /**
   * 是否可查看券码
   */
  public boolean isIsEnableSeeTicket() {
    return this.isEnableSeeTicket;
  }

  /**
   * 是否可查看券码
   */
  public SubOrderDetailVo setIsEnableSeeTicket(boolean isEnableSeeTicket) {
    this.isEnableSeeTicket = isEnableSeeTicket;
    setIsEnableSeeTicketIsSet(true);
    return this;
  }

  public void unsetIsEnableSeeTicket() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISENABLESEETICKET_ISSET_ID);
  }

  /** Returns true if field isEnableSeeTicket is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEnableSeeTicket() {
    return EncodingUtils.testBit(__isset_bitfield, __ISENABLESEETICKET_ISSET_ID);
  }

  public void setIsEnableSeeTicketIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISENABLESEETICKET_ISSET_ID, value);
  }

  /**
   * 物流详细信息
   */
  public ShippingDetailVo getShippingDetailVo() {
    return this.shippingDetailVo;
  }

  /**
   * 物流详细信息
   */
  public SubOrderDetailVo setShippingDetailVo(ShippingDetailVo shippingDetailVo) {
    this.shippingDetailVo = shippingDetailVo;
    return this;
  }

  public void unsetShippingDetailVo() {
    this.shippingDetailVo = null;
  }

  /** Returns true if field shippingDetailVo is set (has been assigned a value) and false otherwise */
  public boolean isSetShippingDetailVo() {
    return this.shippingDetailVo != null;
  }

  public void setShippingDetailVoIsSet(boolean value) {
    if (!value) {
      this.shippingDetailVo = null;
    }
  }

  /**
   * 子订单退款状态
   */
  public String getRefundState() {
    return this.refundState;
  }

  /**
   * 子订单退款状态
   */
  public SubOrderDetailVo setRefundState(String refundState) {
    this.refundState = refundState;
    return this;
  }

  public void unsetRefundState() {
    this.refundState = null;
  }

  /** Returns true if field refundState is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundState() {
    return this.refundState != null;
  }

  public void setRefundStateIsSet(boolean value) {
    if (!value) {
      this.refundState = null;
    }
  }

  /**
   * 精品商城物流配送状态。0:未发货；1已发货；2.已收货*
   */
  public String getDeliveryState() {
    return this.deliveryState;
  }

  /**
   * 精品商城物流配送状态。0:未发货；1已发货；2.已收货*
   */
  public SubOrderDetailVo setDeliveryState(String deliveryState) {
    this.deliveryState = deliveryState;
    return this;
  }

  public void unsetDeliveryState() {
    this.deliveryState = null;
  }

  /** Returns true if field deliveryState is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryState() {
    return this.deliveryState != null;
  }

  public void setDeliveryStateIsSet(boolean value) {
    if (!value) {
      this.deliveryState = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ORDER_ID:
      if (value == null) {
        unsetSubOrderId();
      } else {
        setSubOrderId((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case SUB_TOTAL_MONEY:
      if (value == null) {
        unsetSubTotalMoney();
      } else {
        setSubTotalMoney((Double)value);
      }
      break;

    case PRODUCT_DETAIL_VO_LIST:
      if (value == null) {
        unsetProductDetailVoList();
      } else {
        setProductDetailVoList((List<ProductDetailVo>)value);
      }
      break;

    case IS_ENABLE_CONFIRM_RECEIVE:
      if (value == null) {
        unsetIsEnableConfirmReceive();
      } else {
        setIsEnableConfirmReceive((Boolean)value);
      }
      break;

    case IS_ENABLE_REFUND:
      if (value == null) {
        unsetIsEnableRefund();
      } else {
        setIsEnableRefund((Boolean)value);
      }
      break;

    case IS_ENABLE_SEE_TICKET:
      if (value == null) {
        unsetIsEnableSeeTicket();
      } else {
        setIsEnableSeeTicket((Boolean)value);
      }
      break;

    case SHIPPING_DETAIL_VO:
      if (value == null) {
        unsetShippingDetailVo();
      } else {
        setShippingDetailVo((ShippingDetailVo)value);
      }
      break;

    case REFUND_STATE:
      if (value == null) {
        unsetRefundState();
      } else {
        setRefundState((String)value);
      }
      break;

    case DELIVERY_STATE:
      if (value == null) {
        unsetDeliveryState();
      } else {
        setDeliveryState((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ORDER_ID:
      return getSubOrderId();

    case TYPE:
      return getType();

    case MERCHANT_ID:
      return getMerchantId();

    case MERCHANT_NAME:
      return getMerchantName();

    case SUB_TOTAL_MONEY:
      return Double.valueOf(getSubTotalMoney());

    case PRODUCT_DETAIL_VO_LIST:
      return getProductDetailVoList();

    case IS_ENABLE_CONFIRM_RECEIVE:
      return Boolean.valueOf(isIsEnableConfirmReceive());

    case IS_ENABLE_REFUND:
      return Boolean.valueOf(isIsEnableRefund());

    case IS_ENABLE_SEE_TICKET:
      return Boolean.valueOf(isIsEnableSeeTicket());

    case SHIPPING_DETAIL_VO:
      return getShippingDetailVo();

    case REFUND_STATE:
      return getRefundState();

    case DELIVERY_STATE:
      return getDeliveryState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ORDER_ID:
      return isSetSubOrderId();
    case TYPE:
      return isSetType();
    case MERCHANT_ID:
      return isSetMerchantId();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case SUB_TOTAL_MONEY:
      return isSetSubTotalMoney();
    case PRODUCT_DETAIL_VO_LIST:
      return isSetProductDetailVoList();
    case IS_ENABLE_CONFIRM_RECEIVE:
      return isSetIsEnableConfirmReceive();
    case IS_ENABLE_REFUND:
      return isSetIsEnableRefund();
    case IS_ENABLE_SEE_TICKET:
      return isSetIsEnableSeeTicket();
    case SHIPPING_DETAIL_VO:
      return isSetShippingDetailVo();
    case REFUND_STATE:
      return isSetRefundState();
    case DELIVERY_STATE:
      return isSetDeliveryState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SubOrderDetailVo)
      return this.equals((SubOrderDetailVo)that);
    return false;
  }

  public boolean equals(SubOrderDetailVo that) {
    if (that == null)
      return false;

    boolean this_present_subOrderId = true && this.isSetSubOrderId();
    boolean that_present_subOrderId = true && that.isSetSubOrderId();
    if (this_present_subOrderId || that_present_subOrderId) {
      if (!(this_present_subOrderId && that_present_subOrderId))
        return false;
      if (!this.subOrderId.equals(that.subOrderId))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_subTotalMoney = true;
    boolean that_present_subTotalMoney = true;
    if (this_present_subTotalMoney || that_present_subTotalMoney) {
      if (!(this_present_subTotalMoney && that_present_subTotalMoney))
        return false;
      if (this.subTotalMoney != that.subTotalMoney)
        return false;
    }

    boolean this_present_productDetailVoList = true && this.isSetProductDetailVoList();
    boolean that_present_productDetailVoList = true && that.isSetProductDetailVoList();
    if (this_present_productDetailVoList || that_present_productDetailVoList) {
      if (!(this_present_productDetailVoList && that_present_productDetailVoList))
        return false;
      if (!this.productDetailVoList.equals(that.productDetailVoList))
        return false;
    }

    boolean this_present_isEnableConfirmReceive = true;
    boolean that_present_isEnableConfirmReceive = true;
    if (this_present_isEnableConfirmReceive || that_present_isEnableConfirmReceive) {
      if (!(this_present_isEnableConfirmReceive && that_present_isEnableConfirmReceive))
        return false;
      if (this.isEnableConfirmReceive != that.isEnableConfirmReceive)
        return false;
    }

    boolean this_present_isEnableRefund = true;
    boolean that_present_isEnableRefund = true;
    if (this_present_isEnableRefund || that_present_isEnableRefund) {
      if (!(this_present_isEnableRefund && that_present_isEnableRefund))
        return false;
      if (this.isEnableRefund != that.isEnableRefund)
        return false;
    }

    boolean this_present_isEnableSeeTicket = true;
    boolean that_present_isEnableSeeTicket = true;
    if (this_present_isEnableSeeTicket || that_present_isEnableSeeTicket) {
      if (!(this_present_isEnableSeeTicket && that_present_isEnableSeeTicket))
        return false;
      if (this.isEnableSeeTicket != that.isEnableSeeTicket)
        return false;
    }

    boolean this_present_shippingDetailVo = true && this.isSetShippingDetailVo();
    boolean that_present_shippingDetailVo = true && that.isSetShippingDetailVo();
    if (this_present_shippingDetailVo || that_present_shippingDetailVo) {
      if (!(this_present_shippingDetailVo && that_present_shippingDetailVo))
        return false;
      if (!this.shippingDetailVo.equals(that.shippingDetailVo))
        return false;
    }

    boolean this_present_refundState = true && this.isSetRefundState();
    boolean that_present_refundState = true && that.isSetRefundState();
    if (this_present_refundState || that_present_refundState) {
      if (!(this_present_refundState && that_present_refundState))
        return false;
      if (!this.refundState.equals(that.refundState))
        return false;
    }

    boolean this_present_deliveryState = true && this.isSetDeliveryState();
    boolean that_present_deliveryState = true && that.isSetDeliveryState();
    if (this_present_deliveryState || that_present_deliveryState) {
      if (!(this_present_deliveryState && that_present_deliveryState))
        return false;
      if (!this.deliveryState.equals(that.deliveryState))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_subOrderId = true && (isSetSubOrderId());
    list.add(present_subOrderId);
    if (present_subOrderId)
      list.add(subOrderId);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_subTotalMoney = true;
    list.add(present_subTotalMoney);
    if (present_subTotalMoney)
      list.add(subTotalMoney);

    boolean present_productDetailVoList = true && (isSetProductDetailVoList());
    list.add(present_productDetailVoList);
    if (present_productDetailVoList)
      list.add(productDetailVoList);

    boolean present_isEnableConfirmReceive = true;
    list.add(present_isEnableConfirmReceive);
    if (present_isEnableConfirmReceive)
      list.add(isEnableConfirmReceive);

    boolean present_isEnableRefund = true;
    list.add(present_isEnableRefund);
    if (present_isEnableRefund)
      list.add(isEnableRefund);

    boolean present_isEnableSeeTicket = true;
    list.add(present_isEnableSeeTicket);
    if (present_isEnableSeeTicket)
      list.add(isEnableSeeTicket);

    boolean present_shippingDetailVo = true && (isSetShippingDetailVo());
    list.add(present_shippingDetailVo);
    if (present_shippingDetailVo)
      list.add(shippingDetailVo);

    boolean present_refundState = true && (isSetRefundState());
    list.add(present_refundState);
    if (present_refundState)
      list.add(refundState);

    boolean present_deliveryState = true && (isSetDeliveryState());
    list.add(present_deliveryState);
    if (present_deliveryState)
      list.add(deliveryState);

    return list.hashCode();
  }

  @Override
  public int compareTo(SubOrderDetailVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubTotalMoney()).compareTo(other.isSetSubTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subTotalMoney, other.subTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductDetailVoList()).compareTo(other.isSetProductDetailVoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductDetailVoList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productDetailVoList, other.productDetailVoList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEnableConfirmReceive()).compareTo(other.isSetIsEnableConfirmReceive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnableConfirmReceive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEnableConfirmReceive, other.isEnableConfirmReceive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEnableRefund()).compareTo(other.isSetIsEnableRefund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnableRefund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEnableRefund, other.isEnableRefund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEnableSeeTicket()).compareTo(other.isSetIsEnableSeeTicket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnableSeeTicket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEnableSeeTicket, other.isEnableSeeTicket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShippingDetailVo()).compareTo(other.isSetShippingDetailVo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShippingDetailVo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shippingDetailVo, other.shippingDetailVo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundState()).compareTo(other.isSetRefundState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundState, other.refundState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryState()).compareTo(other.isSetDeliveryState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryState, other.deliveryState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SubOrderDetailVo(");
    boolean first = true;

    sb.append("subOrderId:");
    if (this.subOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.subOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantName:");
    if (this.merchantName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subTotalMoney:");
    sb.append(this.subTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productDetailVoList:");
    if (this.productDetailVoList == null) {
      sb.append("null");
    } else {
      sb.append(this.productDetailVoList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEnableConfirmReceive:");
    sb.append(this.isEnableConfirmReceive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEnableRefund:");
    sb.append(this.isEnableRefund);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEnableSeeTicket:");
    sb.append(this.isEnableSeeTicket);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shippingDetailVo:");
    if (this.shippingDetailVo == null) {
      sb.append("null");
    } else {
      sb.append(this.shippingDetailVo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundState:");
    if (this.refundState == null) {
      sb.append("null");
    } else {
      sb.append(this.refundState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryState:");
    if (this.deliveryState == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryState);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (shippingDetailVo != null) {
      shippingDetailVo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SubOrderDetailVoStandardSchemeFactory implements SchemeFactory {
    public SubOrderDetailVoStandardScheme getScheme() {
      return new SubOrderDetailVoStandardScheme();
    }
  }

  private static class SubOrderDetailVoStandardScheme extends StandardScheme<SubOrderDetailVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SubOrderDetailVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subOrderId = iprot.readString();
              struct.setSubOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUB_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.subTotalMoney = iprot.readDouble();
              struct.setSubTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRODUCT_DETAIL_VO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.productDetailVoList = new ArrayList<ProductDetailVo>(_list16.size);
                ProductDetailVo _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new ProductDetailVo();
                  _elem17.read(iprot);
                  struct.productDetailVoList.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setProductDetailVoListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_ENABLE_CONFIRM_RECEIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEnableConfirmReceive = iprot.readBool();
              struct.setIsEnableConfirmReceiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_ENABLE_REFUND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEnableRefund = iprot.readBool();
              struct.setIsEnableRefundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_ENABLE_SEE_TICKET
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEnableSeeTicket = iprot.readBool();
              struct.setIsEnableSeeTicketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SHIPPING_DETAIL_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.shippingDetailVo = new ShippingDetailVo();
              struct.shippingDetailVo.read(iprot);
              struct.setShippingDetailVoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REFUND_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundState = iprot.readString();
              struct.setRefundStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DELIVERY_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryState = iprot.readString();
              struct.setDeliveryStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SubOrderDetailVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subOrderId != null) {
        oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.subOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantName != null) {
        oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUB_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.subTotalMoney);
      oprot.writeFieldEnd();
      if (struct.productDetailVoList != null) {
        oprot.writeFieldBegin(PRODUCT_DETAIL_VO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productDetailVoList.size()));
          for (ProductDetailVo _iter19 : struct.productDetailVoList)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_ENABLE_CONFIRM_RECEIVE_FIELD_DESC);
      oprot.writeBool(struct.isEnableConfirmReceive);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ENABLE_REFUND_FIELD_DESC);
      oprot.writeBool(struct.isEnableRefund);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ENABLE_SEE_TICKET_FIELD_DESC);
      oprot.writeBool(struct.isEnableSeeTicket);
      oprot.writeFieldEnd();
      if (struct.shippingDetailVo != null) {
        oprot.writeFieldBegin(SHIPPING_DETAIL_VO_FIELD_DESC);
        struct.shippingDetailVo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.refundState != null) {
        oprot.writeFieldBegin(REFUND_STATE_FIELD_DESC);
        oprot.writeString(struct.refundState);
        oprot.writeFieldEnd();
      }
      if (struct.deliveryState != null) {
        oprot.writeFieldBegin(DELIVERY_STATE_FIELD_DESC);
        oprot.writeString(struct.deliveryState);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SubOrderDetailVoTupleSchemeFactory implements SchemeFactory {
    public SubOrderDetailVoTupleScheme getScheme() {
      return new SubOrderDetailVoTupleScheme();
    }
  }

  private static class SubOrderDetailVoTupleScheme extends TupleScheme<SubOrderDetailVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SubOrderDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(2);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(3);
      }
      if (struct.isSetSubTotalMoney()) {
        optionals.set(4);
      }
      if (struct.isSetProductDetailVoList()) {
        optionals.set(5);
      }
      if (struct.isSetIsEnableConfirmReceive()) {
        optionals.set(6);
      }
      if (struct.isSetIsEnableRefund()) {
        optionals.set(7);
      }
      if (struct.isSetIsEnableSeeTicket()) {
        optionals.set(8);
      }
      if (struct.isSetShippingDetailVo()) {
        optionals.set(9);
      }
      if (struct.isSetRefundState()) {
        optionals.set(10);
      }
      if (struct.isSetDeliveryState()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetSubOrderId()) {
        oprot.writeString(struct.subOrderId);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetSubTotalMoney()) {
        oprot.writeDouble(struct.subTotalMoney);
      }
      if (struct.isSetProductDetailVoList()) {
        {
          oprot.writeI32(struct.productDetailVoList.size());
          for (ProductDetailVo _iter20 : struct.productDetailVoList)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetIsEnableConfirmReceive()) {
        oprot.writeBool(struct.isEnableConfirmReceive);
      }
      if (struct.isSetIsEnableRefund()) {
        oprot.writeBool(struct.isEnableRefund);
      }
      if (struct.isSetIsEnableSeeTicket()) {
        oprot.writeBool(struct.isEnableSeeTicket);
      }
      if (struct.isSetShippingDetailVo()) {
        struct.shippingDetailVo.write(oprot);
      }
      if (struct.isSetRefundState()) {
        oprot.writeString(struct.refundState);
      }
      if (struct.isSetDeliveryState()) {
        oprot.writeString(struct.deliveryState);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SubOrderDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.subOrderId = iprot.readString();
        struct.setSubOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.subTotalMoney = iprot.readDouble();
        struct.setSubTotalMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.productDetailVoList = new ArrayList<ProductDetailVo>(_list21.size);
          ProductDetailVo _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new ProductDetailVo();
            _elem22.read(iprot);
            struct.productDetailVoList.add(_elem22);
          }
        }
        struct.setProductDetailVoListIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isEnableConfirmReceive = iprot.readBool();
        struct.setIsEnableConfirmReceiveIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isEnableRefund = iprot.readBool();
        struct.setIsEnableRefundIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isEnableSeeTicket = iprot.readBool();
        struct.setIsEnableSeeTicketIsSet(true);
      }
      if (incoming.get(9)) {
        struct.shippingDetailVo = new ShippingDetailVo();
        struct.shippingDetailVo.read(iprot);
        struct.setShippingDetailVoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.refundState = iprot.readString();
        struct.setRefundStateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.deliveryState = iprot.readString();
        struct.setDeliveryStateIsSet(true);
      }
    }
  }

}

