/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class MerchantResourceService {

  /**
   * MerchantResourceService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 MerchantResource
     * @param merchantResource
     * @return MerchantResourceAddVoRes
     * 
     * @param originVo
     * @param merchantResourceVo
     */
    public com.froad.thrift.vo.MerchantResourceAddVoRes addMerchantResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) throws org.apache.thrift.TException;

    /**
     * 删除 MerchantResource
     * @param merchantResource
     * @return ResultVo
     * 
     * @param originVo
     * @param merchantResourceVo
     */
    public com.froad.thrift.vo.ResultVo deleteMerchantResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) throws org.apache.thrift.TException;

    /**
     * 修改 MerchantResource
     * @param merchantResource
     * @return ResultVo
     * 
     * @param originVo
     * @param merchantResourceVo
     */
    public com.froad.thrift.vo.ResultVo updateMerchantResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) throws org.apache.thrift.TException;

    /**
     * 移动 MerchantResource
     * @param originVo
     * @param srcResourceId
     * @param destResourceId
     * @param action  0-移动到某某之前   1-移动到某某之后
     * @return ResultVo
     * 
     * @param originVo
     * @param srcResourceId
     * @param destResourceId
     * @param action
     */
    public com.froad.thrift.vo.ResultVo moveMerchantResourceTo(com.froad.thrift.vo.OriginVo originVo, long srcResourceId, long destResourceId, int action) throws org.apache.thrift.TException;

    /**
     * 查询 MerchantResource
     * @param merchantResource
     * @return List<MerchantResourceVo>
     * 
     * @param merchantResourceVo
     */
    public List<com.froad.thrift.vo.MerchantResourceVo> getMerchantResource(com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 MerchantResource
     * @param merchantResource
     * @return List<MerchantResourceVo>
     * 
     * @param page
     * @param merchantResourceVo
     */
    public com.froad.thrift.vo.MerchantResourcePageVoRes getMerchantResourceByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addMerchantResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteMerchantResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMerchantResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void moveMerchantResourceTo(com.froad.thrift.vo.OriginVo originVo, long srcResourceId, long destResourceId, int action, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantResource(com.froad.thrift.vo.MerchantResourceVo merchantResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantResourceByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.MerchantResourceAddVoRes addMerchantResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) throws org.apache.thrift.TException
    {
      send_addMerchantResource(originVo, merchantResourceVo);
      return recv_addMerchantResource();
    }

    public void send_addMerchantResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) throws org.apache.thrift.TException
    {
      addMerchantResource_args args = new addMerchantResource_args();
      args.setOriginVo(originVo);
      args.setMerchantResourceVo(merchantResourceVo);
      sendBase("addMerchantResource", args);
    }

    public com.froad.thrift.vo.MerchantResourceAddVoRes recv_addMerchantResource() throws org.apache.thrift.TException
    {
      addMerchantResource_result result = new addMerchantResource_result();
      receiveBase(result, "addMerchantResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMerchantResource failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteMerchantResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) throws org.apache.thrift.TException
    {
      send_deleteMerchantResource(originVo, merchantResourceVo);
      return recv_deleteMerchantResource();
    }

    public void send_deleteMerchantResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) throws org.apache.thrift.TException
    {
      deleteMerchantResource_args args = new deleteMerchantResource_args();
      args.setOriginVo(originVo);
      args.setMerchantResourceVo(merchantResourceVo);
      sendBase("deleteMerchantResource", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteMerchantResource() throws org.apache.thrift.TException
    {
      deleteMerchantResource_result result = new deleteMerchantResource_result();
      receiveBase(result, "deleteMerchantResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteMerchantResource failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateMerchantResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) throws org.apache.thrift.TException
    {
      send_updateMerchantResource(originVo, merchantResourceVo);
      return recv_updateMerchantResource();
    }

    public void send_updateMerchantResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) throws org.apache.thrift.TException
    {
      updateMerchantResource_args args = new updateMerchantResource_args();
      args.setOriginVo(originVo);
      args.setMerchantResourceVo(merchantResourceVo);
      sendBase("updateMerchantResource", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateMerchantResource() throws org.apache.thrift.TException
    {
      updateMerchantResource_result result = new updateMerchantResource_result();
      receiveBase(result, "updateMerchantResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMerchantResource failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo moveMerchantResourceTo(com.froad.thrift.vo.OriginVo originVo, long srcResourceId, long destResourceId, int action) throws org.apache.thrift.TException
    {
      send_moveMerchantResourceTo(originVo, srcResourceId, destResourceId, action);
      return recv_moveMerchantResourceTo();
    }

    public void send_moveMerchantResourceTo(com.froad.thrift.vo.OriginVo originVo, long srcResourceId, long destResourceId, int action) throws org.apache.thrift.TException
    {
      moveMerchantResourceTo_args args = new moveMerchantResourceTo_args();
      args.setOriginVo(originVo);
      args.setSrcResourceId(srcResourceId);
      args.setDestResourceId(destResourceId);
      args.setAction(action);
      sendBase("moveMerchantResourceTo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_moveMerchantResourceTo() throws org.apache.thrift.TException
    {
      moveMerchantResourceTo_result result = new moveMerchantResourceTo_result();
      receiveBase(result, "moveMerchantResourceTo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "moveMerchantResourceTo failed: unknown result");
    }

    public List<com.froad.thrift.vo.MerchantResourceVo> getMerchantResource(com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) throws org.apache.thrift.TException
    {
      send_getMerchantResource(merchantResourceVo);
      return recv_getMerchantResource();
    }

    public void send_getMerchantResource(com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) throws org.apache.thrift.TException
    {
      getMerchantResource_args args = new getMerchantResource_args();
      args.setMerchantResourceVo(merchantResourceVo);
      sendBase("getMerchantResource", args);
    }

    public List<com.froad.thrift.vo.MerchantResourceVo> recv_getMerchantResource() throws org.apache.thrift.TException
    {
      getMerchantResource_result result = new getMerchantResource_result();
      receiveBase(result, "getMerchantResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantResource failed: unknown result");
    }

    public com.froad.thrift.vo.MerchantResourcePageVoRes getMerchantResourceByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) throws org.apache.thrift.TException
    {
      send_getMerchantResourceByPage(page, merchantResourceVo);
      return recv_getMerchantResourceByPage();
    }

    public void send_getMerchantResourceByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) throws org.apache.thrift.TException
    {
      getMerchantResourceByPage_args args = new getMerchantResourceByPage_args();
      args.setPage(page);
      args.setMerchantResourceVo(merchantResourceVo);
      sendBase("getMerchantResourceByPage", args);
    }

    public com.froad.thrift.vo.MerchantResourcePageVoRes recv_getMerchantResourceByPage() throws org.apache.thrift.TException
    {
      getMerchantResourceByPage_result result = new getMerchantResourceByPage_result();
      receiveBase(result, "getMerchantResourceByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantResourceByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addMerchantResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMerchantResource_call method_call = new addMerchantResource_call(originVo, merchantResourceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMerchantResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.MerchantResourceVo merchantResourceVo;
      public addMerchantResource_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantResourceVo = merchantResourceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMerchantResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMerchantResource_args args = new addMerchantResource_args();
        args.setOriginVo(originVo);
        args.setMerchantResourceVo(merchantResourceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantResourceAddVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addMerchantResource();
      }
    }

    public void deleteMerchantResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteMerchantResource_call method_call = new deleteMerchantResource_call(originVo, merchantResourceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteMerchantResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.MerchantResourceVo merchantResourceVo;
      public deleteMerchantResource_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantResourceVo = merchantResourceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteMerchantResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteMerchantResource_args args = new deleteMerchantResource_args();
        args.setOriginVo(originVo);
        args.setMerchantResourceVo(merchantResourceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteMerchantResource();
      }
    }

    public void updateMerchantResource(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMerchantResource_call method_call = new updateMerchantResource_call(originVo, merchantResourceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMerchantResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.MerchantResourceVo merchantResourceVo;
      public updateMerchantResource_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantResourceVo = merchantResourceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMerchantResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMerchantResource_args args = new updateMerchantResource_args();
        args.setOriginVo(originVo);
        args.setMerchantResourceVo(merchantResourceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMerchantResource();
      }
    }

    public void moveMerchantResourceTo(com.froad.thrift.vo.OriginVo originVo, long srcResourceId, long destResourceId, int action, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      moveMerchantResourceTo_call method_call = new moveMerchantResourceTo_call(originVo, srcResourceId, destResourceId, action, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class moveMerchantResourceTo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private long srcResourceId;
      private long destResourceId;
      private int action;
      public moveMerchantResourceTo_call(com.froad.thrift.vo.OriginVo originVo, long srcResourceId, long destResourceId, int action, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.srcResourceId = srcResourceId;
        this.destResourceId = destResourceId;
        this.action = action;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("moveMerchantResourceTo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        moveMerchantResourceTo_args args = new moveMerchantResourceTo_args();
        args.setOriginVo(originVo);
        args.setSrcResourceId(srcResourceId);
        args.setDestResourceId(destResourceId);
        args.setAction(action);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_moveMerchantResourceTo();
      }
    }

    public void getMerchantResource(com.froad.thrift.vo.MerchantResourceVo merchantResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantResource_call method_call = new getMerchantResource_call(merchantResourceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.MerchantResourceVo merchantResourceVo;
      public getMerchantResource_call(com.froad.thrift.vo.MerchantResourceVo merchantResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantResourceVo = merchantResourceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantResource_args args = new getMerchantResource_args();
        args.setMerchantResourceVo(merchantResourceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.MerchantResourceVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantResource();
      }
    }

    public void getMerchantResourceByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantResourceByPage_call method_call = new getMerchantResourceByPage_call(page, merchantResourceVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantResourceByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.MerchantResourceVo merchantResourceVo;
      public getMerchantResourceByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantResourceVo merchantResourceVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.merchantResourceVo = merchantResourceVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantResourceByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantResourceByPage_args args = new getMerchantResourceByPage_args();
        args.setPage(page);
        args.setMerchantResourceVo(merchantResourceVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantResourcePageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantResourceByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addMerchantResource", new addMerchantResource());
      processMap.put("deleteMerchantResource", new deleteMerchantResource());
      processMap.put("updateMerchantResource", new updateMerchantResource());
      processMap.put("moveMerchantResourceTo", new moveMerchantResourceTo());
      processMap.put("getMerchantResource", new getMerchantResource());
      processMap.put("getMerchantResourceByPage", new getMerchantResourceByPage());
      return processMap;
    }

    public static class addMerchantResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMerchantResource_args> {
      public addMerchantResource() {
        super("addMerchantResource");
      }

      public addMerchantResource_args getEmptyArgsInstance() {
        return new addMerchantResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addMerchantResource_result getResult(I iface, addMerchantResource_args args) throws org.apache.thrift.TException {
        addMerchantResource_result result = new addMerchantResource_result();
        result.success = iface.addMerchantResource(args.originVo, args.merchantResourceVo);
        return result;
      }
    }

    public static class deleteMerchantResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteMerchantResource_args> {
      public deleteMerchantResource() {
        super("deleteMerchantResource");
      }

      public deleteMerchantResource_args getEmptyArgsInstance() {
        return new deleteMerchantResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteMerchantResource_result getResult(I iface, deleteMerchantResource_args args) throws org.apache.thrift.TException {
        deleteMerchantResource_result result = new deleteMerchantResource_result();
        result.success = iface.deleteMerchantResource(args.originVo, args.merchantResourceVo);
        return result;
      }
    }

    public static class updateMerchantResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMerchantResource_args> {
      public updateMerchantResource() {
        super("updateMerchantResource");
      }

      public updateMerchantResource_args getEmptyArgsInstance() {
        return new updateMerchantResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMerchantResource_result getResult(I iface, updateMerchantResource_args args) throws org.apache.thrift.TException {
        updateMerchantResource_result result = new updateMerchantResource_result();
        result.success = iface.updateMerchantResource(args.originVo, args.merchantResourceVo);
        return result;
      }
    }

    public static class moveMerchantResourceTo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, moveMerchantResourceTo_args> {
      public moveMerchantResourceTo() {
        super("moveMerchantResourceTo");
      }

      public moveMerchantResourceTo_args getEmptyArgsInstance() {
        return new moveMerchantResourceTo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public moveMerchantResourceTo_result getResult(I iface, moveMerchantResourceTo_args args) throws org.apache.thrift.TException {
        moveMerchantResourceTo_result result = new moveMerchantResourceTo_result();
        result.success = iface.moveMerchantResourceTo(args.originVo, args.srcResourceId, args.destResourceId, args.action);
        return result;
      }
    }

    public static class getMerchantResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantResource_args> {
      public getMerchantResource() {
        super("getMerchantResource");
      }

      public getMerchantResource_args getEmptyArgsInstance() {
        return new getMerchantResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantResource_result getResult(I iface, getMerchantResource_args args) throws org.apache.thrift.TException {
        getMerchantResource_result result = new getMerchantResource_result();
        result.success = iface.getMerchantResource(args.merchantResourceVo);
        return result;
      }
    }

    public static class getMerchantResourceByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantResourceByPage_args> {
      public getMerchantResourceByPage() {
        super("getMerchantResourceByPage");
      }

      public getMerchantResourceByPage_args getEmptyArgsInstance() {
        return new getMerchantResourceByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantResourceByPage_result getResult(I iface, getMerchantResourceByPage_args args) throws org.apache.thrift.TException {
        getMerchantResourceByPage_result result = new getMerchantResourceByPage_result();
        result.success = iface.getMerchantResourceByPage(args.page, args.merchantResourceVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addMerchantResource", new addMerchantResource());
      processMap.put("deleteMerchantResource", new deleteMerchantResource());
      processMap.put("updateMerchantResource", new updateMerchantResource());
      processMap.put("moveMerchantResourceTo", new moveMerchantResourceTo());
      processMap.put("getMerchantResource", new getMerchantResource());
      processMap.put("getMerchantResourceByPage", new getMerchantResourceByPage());
      return processMap;
    }

    public static class addMerchantResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMerchantResource_args, com.froad.thrift.vo.MerchantResourceAddVoRes> {
      public addMerchantResource() {
        super("addMerchantResource");
      }

      public addMerchantResource_args getEmptyArgsInstance() {
        return new addMerchantResource_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantResourceAddVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantResourceAddVoRes>() { 
          public void onComplete(com.froad.thrift.vo.MerchantResourceAddVoRes o) {
            addMerchantResource_result result = new addMerchantResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addMerchantResource_result result = new addMerchantResource_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addMerchantResource_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantResourceAddVoRes> resultHandler) throws TException {
        iface.addMerchantResource(args.originVo, args.merchantResourceVo,resultHandler);
      }
    }

    public static class deleteMerchantResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteMerchantResource_args, com.froad.thrift.vo.ResultVo> {
      public deleteMerchantResource() {
        super("deleteMerchantResource");
      }

      public deleteMerchantResource_args getEmptyArgsInstance() {
        return new deleteMerchantResource_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteMerchantResource_result result = new deleteMerchantResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteMerchantResource_result result = new deleteMerchantResource_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteMerchantResource_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteMerchantResource(args.originVo, args.merchantResourceVo,resultHandler);
      }
    }

    public static class updateMerchantResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMerchantResource_args, com.froad.thrift.vo.ResultVo> {
      public updateMerchantResource() {
        super("updateMerchantResource");
      }

      public updateMerchantResource_args getEmptyArgsInstance() {
        return new updateMerchantResource_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateMerchantResource_result result = new updateMerchantResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMerchantResource_result result = new updateMerchantResource_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMerchantResource_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateMerchantResource(args.originVo, args.merchantResourceVo,resultHandler);
      }
    }

    public static class moveMerchantResourceTo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, moveMerchantResourceTo_args, com.froad.thrift.vo.ResultVo> {
      public moveMerchantResourceTo() {
        super("moveMerchantResourceTo");
      }

      public moveMerchantResourceTo_args getEmptyArgsInstance() {
        return new moveMerchantResourceTo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            moveMerchantResourceTo_result result = new moveMerchantResourceTo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            moveMerchantResourceTo_result result = new moveMerchantResourceTo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, moveMerchantResourceTo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.moveMerchantResourceTo(args.originVo, args.srcResourceId, args.destResourceId, args.action,resultHandler);
      }
    }

    public static class getMerchantResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantResource_args, List<com.froad.thrift.vo.MerchantResourceVo>> {
      public getMerchantResource() {
        super("getMerchantResource");
      }

      public getMerchantResource_args getEmptyArgsInstance() {
        return new getMerchantResource_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.MerchantResourceVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.MerchantResourceVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.MerchantResourceVo> o) {
            getMerchantResource_result result = new getMerchantResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantResource_result result = new getMerchantResource_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantResource_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.MerchantResourceVo>> resultHandler) throws TException {
        iface.getMerchantResource(args.merchantResourceVo,resultHandler);
      }
    }

    public static class getMerchantResourceByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantResourceByPage_args, com.froad.thrift.vo.MerchantResourcePageVoRes> {
      public getMerchantResourceByPage() {
        super("getMerchantResourceByPage");
      }

      public getMerchantResourceByPage_args getEmptyArgsInstance() {
        return new getMerchantResourceByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantResourcePageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantResourcePageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.MerchantResourcePageVoRes o) {
            getMerchantResourceByPage_result result = new getMerchantResourceByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantResourceByPage_result result = new getMerchantResourceByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantResourceByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantResourcePageVoRes> resultHandler) throws TException {
        iface.getMerchantResourceByPage(args.page, args.merchantResourceVo,resultHandler);
      }
    }

  }

  public static class addMerchantResource_args implements org.apache.thrift.TBase<addMerchantResource_args, addMerchantResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantResource_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_RESOURCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantResourceVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantResource_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.MerchantResourceVo merchantResourceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_RESOURCE_VO((short)2, "merchantResourceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_RESOURCE_VO
            return MERCHANT_RESOURCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_RESOURCE_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantResourceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantResourceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantResource_args.class, metaDataMap);
    }

    public addMerchantResource_args() {
    }

    public addMerchantResource_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.MerchantResourceVo merchantResourceVo)
    {
      this();
      this.originVo = originVo;
      this.merchantResourceVo = merchantResourceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantResource_args(addMerchantResource_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantResourceVo()) {
        this.merchantResourceVo = new com.froad.thrift.vo.MerchantResourceVo(other.merchantResourceVo);
      }
    }

    public addMerchantResource_args deepCopy() {
      return new addMerchantResource_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantResourceVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addMerchantResource_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.MerchantResourceVo getMerchantResourceVo() {
      return this.merchantResourceVo;
    }

    public addMerchantResource_args setMerchantResourceVo(com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) {
      this.merchantResourceVo = merchantResourceVo;
      return this;
    }

    public void unsetMerchantResourceVo() {
      this.merchantResourceVo = null;
    }

    /** Returns true if field merchantResourceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantResourceVo() {
      return this.merchantResourceVo != null;
    }

    public void setMerchantResourceVoIsSet(boolean value) {
      if (!value) {
        this.merchantResourceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_RESOURCE_VO:
        if (value == null) {
          unsetMerchantResourceVo();
        } else {
          setMerchantResourceVo((com.froad.thrift.vo.MerchantResourceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_RESOURCE_VO:
        return getMerchantResourceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_RESOURCE_VO:
        return isSetMerchantResourceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantResource_args)
        return this.equals((addMerchantResource_args)that);
      return false;
    }

    public boolean equals(addMerchantResource_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantResourceVo = true && this.isSetMerchantResourceVo();
      boolean that_present_merchantResourceVo = true && that.isSetMerchantResourceVo();
      if (this_present_merchantResourceVo || that_present_merchantResourceVo) {
        if (!(this_present_merchantResourceVo && that_present_merchantResourceVo))
          return false;
        if (!this.merchantResourceVo.equals(that.merchantResourceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantResourceVo = true && (isSetMerchantResourceVo());
      list.add(present_merchantResourceVo);
      if (present_merchantResourceVo)
        list.add(merchantResourceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantResourceVo()).compareTo(other.isSetMerchantResourceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantResourceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantResourceVo, other.merchantResourceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantResource_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantResourceVo:");
      if (this.merchantResourceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantResourceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (merchantResourceVo != null) {
        merchantResourceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantResource_argsStandardSchemeFactory implements SchemeFactory {
      public addMerchantResource_argsStandardScheme getScheme() {
        return new addMerchantResource_argsStandardScheme();
      }
    }

    private static class addMerchantResource_argsStandardScheme extends StandardScheme<addMerchantResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_RESOURCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantResourceVo = new com.froad.thrift.vo.MerchantResourceVo();
                struct.merchantResourceVo.read(iprot);
                struct.setMerchantResourceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantResourceVo != null) {
          oprot.writeFieldBegin(MERCHANT_RESOURCE_VO_FIELD_DESC);
          struct.merchantResourceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantResource_argsTupleSchemeFactory implements SchemeFactory {
      public addMerchantResource_argsTupleScheme getScheme() {
        return new addMerchantResource_argsTupleScheme();
      }
    }

    private static class addMerchantResource_argsTupleScheme extends TupleScheme<addMerchantResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantResourceVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantResourceVo()) {
          struct.merchantResourceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantResourceVo = new com.froad.thrift.vo.MerchantResourceVo();
          struct.merchantResourceVo.read(iprot);
          struct.setMerchantResourceVoIsSet(true);
        }
      }
    }

  }

  public static class addMerchantResource_result implements org.apache.thrift.TBase<addMerchantResource_result, addMerchantResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantResource_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantResourceAddVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantResourceAddVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantResource_result.class, metaDataMap);
    }

    public addMerchantResource_result() {
    }

    public addMerchantResource_result(
      com.froad.thrift.vo.MerchantResourceAddVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantResource_result(addMerchantResource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantResourceAddVoRes(other.success);
      }
    }

    public addMerchantResource_result deepCopy() {
      return new addMerchantResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantResourceAddVoRes getSuccess() {
      return this.success;
    }

    public addMerchantResource_result setSuccess(com.froad.thrift.vo.MerchantResourceAddVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantResourceAddVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantResource_result)
        return this.equals((addMerchantResource_result)that);
      return false;
    }

    public boolean equals(addMerchantResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantResource_resultStandardSchemeFactory implements SchemeFactory {
      public addMerchantResource_resultStandardScheme getScheme() {
        return new addMerchantResource_resultStandardScheme();
      }
    }

    private static class addMerchantResource_resultStandardScheme extends StandardScheme<addMerchantResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantResourceAddVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantResource_resultTupleSchemeFactory implements SchemeFactory {
      public addMerchantResource_resultTupleScheme getScheme() {
        return new addMerchantResource_resultTupleScheme();
      }
    }

    private static class addMerchantResource_resultTupleScheme extends TupleScheme<addMerchantResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantResourceAddVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteMerchantResource_args implements org.apache.thrift.TBase<deleteMerchantResource_args, deleteMerchantResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMerchantResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMerchantResource_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_RESOURCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantResourceVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteMerchantResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteMerchantResource_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.MerchantResourceVo merchantResourceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_RESOURCE_VO((short)2, "merchantResourceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_RESOURCE_VO
            return MERCHANT_RESOURCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_RESOURCE_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantResourceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantResourceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMerchantResource_args.class, metaDataMap);
    }

    public deleteMerchantResource_args() {
    }

    public deleteMerchantResource_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.MerchantResourceVo merchantResourceVo)
    {
      this();
      this.originVo = originVo;
      this.merchantResourceVo = merchantResourceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMerchantResource_args(deleteMerchantResource_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantResourceVo()) {
        this.merchantResourceVo = new com.froad.thrift.vo.MerchantResourceVo(other.merchantResourceVo);
      }
    }

    public deleteMerchantResource_args deepCopy() {
      return new deleteMerchantResource_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantResourceVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteMerchantResource_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.MerchantResourceVo getMerchantResourceVo() {
      return this.merchantResourceVo;
    }

    public deleteMerchantResource_args setMerchantResourceVo(com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) {
      this.merchantResourceVo = merchantResourceVo;
      return this;
    }

    public void unsetMerchantResourceVo() {
      this.merchantResourceVo = null;
    }

    /** Returns true if field merchantResourceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantResourceVo() {
      return this.merchantResourceVo != null;
    }

    public void setMerchantResourceVoIsSet(boolean value) {
      if (!value) {
        this.merchantResourceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_RESOURCE_VO:
        if (value == null) {
          unsetMerchantResourceVo();
        } else {
          setMerchantResourceVo((com.froad.thrift.vo.MerchantResourceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_RESOURCE_VO:
        return getMerchantResourceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_RESOURCE_VO:
        return isSetMerchantResourceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMerchantResource_args)
        return this.equals((deleteMerchantResource_args)that);
      return false;
    }

    public boolean equals(deleteMerchantResource_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantResourceVo = true && this.isSetMerchantResourceVo();
      boolean that_present_merchantResourceVo = true && that.isSetMerchantResourceVo();
      if (this_present_merchantResourceVo || that_present_merchantResourceVo) {
        if (!(this_present_merchantResourceVo && that_present_merchantResourceVo))
          return false;
        if (!this.merchantResourceVo.equals(that.merchantResourceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantResourceVo = true && (isSetMerchantResourceVo());
      list.add(present_merchantResourceVo);
      if (present_merchantResourceVo)
        list.add(merchantResourceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteMerchantResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantResourceVo()).compareTo(other.isSetMerchantResourceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantResourceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantResourceVo, other.merchantResourceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteMerchantResource_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantResourceVo:");
      if (this.merchantResourceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantResourceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (merchantResourceVo != null) {
        merchantResourceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMerchantResource_argsStandardSchemeFactory implements SchemeFactory {
      public deleteMerchantResource_argsStandardScheme getScheme() {
        return new deleteMerchantResource_argsStandardScheme();
      }
    }

    private static class deleteMerchantResource_argsStandardScheme extends StandardScheme<deleteMerchantResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteMerchantResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_RESOURCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantResourceVo = new com.froad.thrift.vo.MerchantResourceVo();
                struct.merchantResourceVo.read(iprot);
                struct.setMerchantResourceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteMerchantResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantResourceVo != null) {
          oprot.writeFieldBegin(MERCHANT_RESOURCE_VO_FIELD_DESC);
          struct.merchantResourceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMerchantResource_argsTupleSchemeFactory implements SchemeFactory {
      public deleteMerchantResource_argsTupleScheme getScheme() {
        return new deleteMerchantResource_argsTupleScheme();
      }
    }

    private static class deleteMerchantResource_argsTupleScheme extends TupleScheme<deleteMerchantResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteMerchantResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantResourceVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantResourceVo()) {
          struct.merchantResourceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteMerchantResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantResourceVo = new com.froad.thrift.vo.MerchantResourceVo();
          struct.merchantResourceVo.read(iprot);
          struct.setMerchantResourceVoIsSet(true);
        }
      }
    }

  }

  public static class deleteMerchantResource_result implements org.apache.thrift.TBase<deleteMerchantResource_result, deleteMerchantResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMerchantResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMerchantResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteMerchantResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteMerchantResource_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMerchantResource_result.class, metaDataMap);
    }

    public deleteMerchantResource_result() {
    }

    public deleteMerchantResource_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMerchantResource_result(deleteMerchantResource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteMerchantResource_result deepCopy() {
      return new deleteMerchantResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteMerchantResource_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMerchantResource_result)
        return this.equals((deleteMerchantResource_result)that);
      return false;
    }

    public boolean equals(deleteMerchantResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteMerchantResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteMerchantResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMerchantResource_resultStandardSchemeFactory implements SchemeFactory {
      public deleteMerchantResource_resultStandardScheme getScheme() {
        return new deleteMerchantResource_resultStandardScheme();
      }
    }

    private static class deleteMerchantResource_resultStandardScheme extends StandardScheme<deleteMerchantResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteMerchantResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteMerchantResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMerchantResource_resultTupleSchemeFactory implements SchemeFactory {
      public deleteMerchantResource_resultTupleScheme getScheme() {
        return new deleteMerchantResource_resultTupleScheme();
      }
    }

    private static class deleteMerchantResource_resultTupleScheme extends TupleScheme<deleteMerchantResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteMerchantResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteMerchantResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateMerchantResource_args implements org.apache.thrift.TBase<updateMerchantResource_args, updateMerchantResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMerchantResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMerchantResource_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_RESOURCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantResourceVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMerchantResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMerchantResource_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.MerchantResourceVo merchantResourceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_RESOURCE_VO((short)2, "merchantResourceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_RESOURCE_VO
            return MERCHANT_RESOURCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_RESOURCE_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantResourceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantResourceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMerchantResource_args.class, metaDataMap);
    }

    public updateMerchantResource_args() {
    }

    public updateMerchantResource_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.MerchantResourceVo merchantResourceVo)
    {
      this();
      this.originVo = originVo;
      this.merchantResourceVo = merchantResourceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMerchantResource_args(updateMerchantResource_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantResourceVo()) {
        this.merchantResourceVo = new com.froad.thrift.vo.MerchantResourceVo(other.merchantResourceVo);
      }
    }

    public updateMerchantResource_args deepCopy() {
      return new updateMerchantResource_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantResourceVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateMerchantResource_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.MerchantResourceVo getMerchantResourceVo() {
      return this.merchantResourceVo;
    }

    public updateMerchantResource_args setMerchantResourceVo(com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) {
      this.merchantResourceVo = merchantResourceVo;
      return this;
    }

    public void unsetMerchantResourceVo() {
      this.merchantResourceVo = null;
    }

    /** Returns true if field merchantResourceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantResourceVo() {
      return this.merchantResourceVo != null;
    }

    public void setMerchantResourceVoIsSet(boolean value) {
      if (!value) {
        this.merchantResourceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_RESOURCE_VO:
        if (value == null) {
          unsetMerchantResourceVo();
        } else {
          setMerchantResourceVo((com.froad.thrift.vo.MerchantResourceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_RESOURCE_VO:
        return getMerchantResourceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_RESOURCE_VO:
        return isSetMerchantResourceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMerchantResource_args)
        return this.equals((updateMerchantResource_args)that);
      return false;
    }

    public boolean equals(updateMerchantResource_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantResourceVo = true && this.isSetMerchantResourceVo();
      boolean that_present_merchantResourceVo = true && that.isSetMerchantResourceVo();
      if (this_present_merchantResourceVo || that_present_merchantResourceVo) {
        if (!(this_present_merchantResourceVo && that_present_merchantResourceVo))
          return false;
        if (!this.merchantResourceVo.equals(that.merchantResourceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantResourceVo = true && (isSetMerchantResourceVo());
      list.add(present_merchantResourceVo);
      if (present_merchantResourceVo)
        list.add(merchantResourceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMerchantResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantResourceVo()).compareTo(other.isSetMerchantResourceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantResourceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantResourceVo, other.merchantResourceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMerchantResource_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantResourceVo:");
      if (this.merchantResourceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantResourceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (merchantResourceVo != null) {
        merchantResourceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMerchantResource_argsStandardSchemeFactory implements SchemeFactory {
      public updateMerchantResource_argsStandardScheme getScheme() {
        return new updateMerchantResource_argsStandardScheme();
      }
    }

    private static class updateMerchantResource_argsStandardScheme extends StandardScheme<updateMerchantResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMerchantResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_RESOURCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantResourceVo = new com.froad.thrift.vo.MerchantResourceVo();
                struct.merchantResourceVo.read(iprot);
                struct.setMerchantResourceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMerchantResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantResourceVo != null) {
          oprot.writeFieldBegin(MERCHANT_RESOURCE_VO_FIELD_DESC);
          struct.merchantResourceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMerchantResource_argsTupleSchemeFactory implements SchemeFactory {
      public updateMerchantResource_argsTupleScheme getScheme() {
        return new updateMerchantResource_argsTupleScheme();
      }
    }

    private static class updateMerchantResource_argsTupleScheme extends TupleScheme<updateMerchantResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMerchantResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantResourceVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantResourceVo()) {
          struct.merchantResourceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMerchantResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantResourceVo = new com.froad.thrift.vo.MerchantResourceVo();
          struct.merchantResourceVo.read(iprot);
          struct.setMerchantResourceVoIsSet(true);
        }
      }
    }

  }

  public static class updateMerchantResource_result implements org.apache.thrift.TBase<updateMerchantResource_result, updateMerchantResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMerchantResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMerchantResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMerchantResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMerchantResource_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMerchantResource_result.class, metaDataMap);
    }

    public updateMerchantResource_result() {
    }

    public updateMerchantResource_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMerchantResource_result(updateMerchantResource_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateMerchantResource_result deepCopy() {
      return new updateMerchantResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateMerchantResource_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMerchantResource_result)
        return this.equals((updateMerchantResource_result)that);
      return false;
    }

    public boolean equals(updateMerchantResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMerchantResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMerchantResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMerchantResource_resultStandardSchemeFactory implements SchemeFactory {
      public updateMerchantResource_resultStandardScheme getScheme() {
        return new updateMerchantResource_resultStandardScheme();
      }
    }

    private static class updateMerchantResource_resultStandardScheme extends StandardScheme<updateMerchantResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMerchantResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMerchantResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMerchantResource_resultTupleSchemeFactory implements SchemeFactory {
      public updateMerchantResource_resultTupleScheme getScheme() {
        return new updateMerchantResource_resultTupleScheme();
      }
    }

    private static class updateMerchantResource_resultTupleScheme extends TupleScheme<updateMerchantResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMerchantResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMerchantResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class moveMerchantResourceTo_args implements org.apache.thrift.TBase<moveMerchantResourceTo_args, moveMerchantResourceTo_args._Fields>, java.io.Serializable, Cloneable, Comparable<moveMerchantResourceTo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveMerchantResourceTo_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SRC_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("srcResourceId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField DEST_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("destResourceId", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveMerchantResourceTo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new moveMerchantResourceTo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public long srcResourceId; // required
    public long destResourceId; // required
    public int action; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      SRC_RESOURCE_ID((short)2, "srcResourceId"),
      DEST_RESOURCE_ID((short)3, "destResourceId"),
      ACTION((short)4, "action");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // SRC_RESOURCE_ID
            return SRC_RESOURCE_ID;
          case 3: // DEST_RESOURCE_ID
            return DEST_RESOURCE_ID;
          case 4: // ACTION
            return ACTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SRCRESOURCEID_ISSET_ID = 0;
    private static final int __DESTRESOURCEID_ISSET_ID = 1;
    private static final int __ACTION_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.SRC_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("srcResourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DEST_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("destResourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveMerchantResourceTo_args.class, metaDataMap);
    }

    public moveMerchantResourceTo_args() {
    }

    public moveMerchantResourceTo_args(
      com.froad.thrift.vo.OriginVo originVo,
      long srcResourceId,
      long destResourceId,
      int action)
    {
      this();
      this.originVo = originVo;
      this.srcResourceId = srcResourceId;
      setSrcResourceIdIsSet(true);
      this.destResourceId = destResourceId;
      setDestResourceIdIsSet(true);
      this.action = action;
      setActionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveMerchantResourceTo_args(moveMerchantResourceTo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      this.srcResourceId = other.srcResourceId;
      this.destResourceId = other.destResourceId;
      this.action = other.action;
    }

    public moveMerchantResourceTo_args deepCopy() {
      return new moveMerchantResourceTo_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      setSrcResourceIdIsSet(false);
      this.srcResourceId = 0;
      setDestResourceIdIsSet(false);
      this.destResourceId = 0;
      setActionIsSet(false);
      this.action = 0;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public moveMerchantResourceTo_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public long getSrcResourceId() {
      return this.srcResourceId;
    }

    public moveMerchantResourceTo_args setSrcResourceId(long srcResourceId) {
      this.srcResourceId = srcResourceId;
      setSrcResourceIdIsSet(true);
      return this;
    }

    public void unsetSrcResourceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SRCRESOURCEID_ISSET_ID);
    }

    /** Returns true if field srcResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcResourceId() {
      return EncodingUtils.testBit(__isset_bitfield, __SRCRESOURCEID_ISSET_ID);
    }

    public void setSrcResourceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SRCRESOURCEID_ISSET_ID, value);
    }

    public long getDestResourceId() {
      return this.destResourceId;
    }

    public moveMerchantResourceTo_args setDestResourceId(long destResourceId) {
      this.destResourceId = destResourceId;
      setDestResourceIdIsSet(true);
      return this;
    }

    public void unsetDestResourceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DESTRESOURCEID_ISSET_ID);
    }

    /** Returns true if field destResourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDestResourceId() {
      return EncodingUtils.testBit(__isset_bitfield, __DESTRESOURCEID_ISSET_ID);
    }

    public void setDestResourceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DESTRESOURCEID_ISSET_ID, value);
    }

    public int getAction() {
      return this.action;
    }

    public moveMerchantResourceTo_args setAction(int action) {
      this.action = action;
      setActionIsSet(true);
      return this;
    }

    public void unsetAction() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTION_ISSET_ID);
    }

    /** Returns true if field action is set (has been assigned a value) and false otherwise */
    public boolean isSetAction() {
      return EncodingUtils.testBit(__isset_bitfield, __ACTION_ISSET_ID);
    }

    public void setActionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case SRC_RESOURCE_ID:
        if (value == null) {
          unsetSrcResourceId();
        } else {
          setSrcResourceId((Long)value);
        }
        break;

      case DEST_RESOURCE_ID:
        if (value == null) {
          unsetDestResourceId();
        } else {
          setDestResourceId((Long)value);
        }
        break;

      case ACTION:
        if (value == null) {
          unsetAction();
        } else {
          setAction((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case SRC_RESOURCE_ID:
        return Long.valueOf(getSrcResourceId());

      case DEST_RESOURCE_ID:
        return Long.valueOf(getDestResourceId());

      case ACTION:
        return Integer.valueOf(getAction());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case SRC_RESOURCE_ID:
        return isSetSrcResourceId();
      case DEST_RESOURCE_ID:
        return isSetDestResourceId();
      case ACTION:
        return isSetAction();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveMerchantResourceTo_args)
        return this.equals((moveMerchantResourceTo_args)that);
      return false;
    }

    public boolean equals(moveMerchantResourceTo_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_srcResourceId = true;
      boolean that_present_srcResourceId = true;
      if (this_present_srcResourceId || that_present_srcResourceId) {
        if (!(this_present_srcResourceId && that_present_srcResourceId))
          return false;
        if (this.srcResourceId != that.srcResourceId)
          return false;
      }

      boolean this_present_destResourceId = true;
      boolean that_present_destResourceId = true;
      if (this_present_destResourceId || that_present_destResourceId) {
        if (!(this_present_destResourceId && that_present_destResourceId))
          return false;
        if (this.destResourceId != that.destResourceId)
          return false;
      }

      boolean this_present_action = true;
      boolean that_present_action = true;
      if (this_present_action || that_present_action) {
        if (!(this_present_action && that_present_action))
          return false;
        if (this.action != that.action)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_srcResourceId = true;
      list.add(present_srcResourceId);
      if (present_srcResourceId)
        list.add(srcResourceId);

      boolean present_destResourceId = true;
      list.add(present_destResourceId);
      if (present_destResourceId)
        list.add(destResourceId);

      boolean present_action = true;
      list.add(present_action);
      if (present_action)
        list.add(action);

      return list.hashCode();
    }

    @Override
    public int compareTo(moveMerchantResourceTo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcResourceId()).compareTo(other.isSetSrcResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcResourceId, other.srcResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDestResourceId()).compareTo(other.isSetDestResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDestResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destResourceId, other.destResourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveMerchantResourceTo_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcResourceId:");
      sb.append(this.srcResourceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("destResourceId:");
      sb.append(this.destResourceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("action:");
      sb.append(this.action);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveMerchantResourceTo_argsStandardSchemeFactory implements SchemeFactory {
      public moveMerchantResourceTo_argsStandardScheme getScheme() {
        return new moveMerchantResourceTo_argsStandardScheme();
      }
    }

    private static class moveMerchantResourceTo_argsStandardScheme extends StandardScheme<moveMerchantResourceTo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveMerchantResourceTo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRC_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.srcResourceId = iprot.readI64();
                struct.setSrcResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DEST_RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.destResourceId = iprot.readI64();
                struct.setDestResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.action = iprot.readI32();
                struct.setActionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveMerchantResourceTo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SRC_RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.srcResourceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DEST_RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.destResourceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        oprot.writeI32(struct.action);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class moveMerchantResourceTo_argsTupleSchemeFactory implements SchemeFactory {
      public moveMerchantResourceTo_argsTupleScheme getScheme() {
        return new moveMerchantResourceTo_argsTupleScheme();
      }
    }

    private static class moveMerchantResourceTo_argsTupleScheme extends TupleScheme<moveMerchantResourceTo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, moveMerchantResourceTo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetSrcResourceId()) {
          optionals.set(1);
        }
        if (struct.isSetDestResourceId()) {
          optionals.set(2);
        }
        if (struct.isSetAction()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetSrcResourceId()) {
          oprot.writeI64(struct.srcResourceId);
        }
        if (struct.isSetDestResourceId()) {
          oprot.writeI64(struct.destResourceId);
        }
        if (struct.isSetAction()) {
          oprot.writeI32(struct.action);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, moveMerchantResourceTo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.srcResourceId = iprot.readI64();
          struct.setSrcResourceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.destResourceId = iprot.readI64();
          struct.setDestResourceIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.action = iprot.readI32();
          struct.setActionIsSet(true);
        }
      }
    }

  }

  public static class moveMerchantResourceTo_result implements org.apache.thrift.TBase<moveMerchantResourceTo_result, moveMerchantResourceTo_result._Fields>, java.io.Serializable, Cloneable, Comparable<moveMerchantResourceTo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveMerchantResourceTo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveMerchantResourceTo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new moveMerchantResourceTo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveMerchantResourceTo_result.class, metaDataMap);
    }

    public moveMerchantResourceTo_result() {
    }

    public moveMerchantResourceTo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveMerchantResourceTo_result(moveMerchantResourceTo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public moveMerchantResourceTo_result deepCopy() {
      return new moveMerchantResourceTo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public moveMerchantResourceTo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveMerchantResourceTo_result)
        return this.equals((moveMerchantResourceTo_result)that);
      return false;
    }

    public boolean equals(moveMerchantResourceTo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(moveMerchantResourceTo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveMerchantResourceTo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveMerchantResourceTo_resultStandardSchemeFactory implements SchemeFactory {
      public moveMerchantResourceTo_resultStandardScheme getScheme() {
        return new moveMerchantResourceTo_resultStandardScheme();
      }
    }

    private static class moveMerchantResourceTo_resultStandardScheme extends StandardScheme<moveMerchantResourceTo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveMerchantResourceTo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveMerchantResourceTo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class moveMerchantResourceTo_resultTupleSchemeFactory implements SchemeFactory {
      public moveMerchantResourceTo_resultTupleScheme getScheme() {
        return new moveMerchantResourceTo_resultTupleScheme();
      }
    }

    private static class moveMerchantResourceTo_resultTupleScheme extends TupleScheme<moveMerchantResourceTo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, moveMerchantResourceTo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, moveMerchantResourceTo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantResource_args implements org.apache.thrift.TBase<getMerchantResource_args, getMerchantResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantResource_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_RESOURCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantResourceVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantResource_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantResourceVo merchantResourceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_RESOURCE_VO((short)1, "merchantResourceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_RESOURCE_VO
            return MERCHANT_RESOURCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_RESOURCE_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantResourceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantResourceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantResource_args.class, metaDataMap);
    }

    public getMerchantResource_args() {
    }

    public getMerchantResource_args(
      com.froad.thrift.vo.MerchantResourceVo merchantResourceVo)
    {
      this();
      this.merchantResourceVo = merchantResourceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantResource_args(getMerchantResource_args other) {
      if (other.isSetMerchantResourceVo()) {
        this.merchantResourceVo = new com.froad.thrift.vo.MerchantResourceVo(other.merchantResourceVo);
      }
    }

    public getMerchantResource_args deepCopy() {
      return new getMerchantResource_args(this);
    }

    @Override
    public void clear() {
      this.merchantResourceVo = null;
    }

    public com.froad.thrift.vo.MerchantResourceVo getMerchantResourceVo() {
      return this.merchantResourceVo;
    }

    public getMerchantResource_args setMerchantResourceVo(com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) {
      this.merchantResourceVo = merchantResourceVo;
      return this;
    }

    public void unsetMerchantResourceVo() {
      this.merchantResourceVo = null;
    }

    /** Returns true if field merchantResourceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantResourceVo() {
      return this.merchantResourceVo != null;
    }

    public void setMerchantResourceVoIsSet(boolean value) {
      if (!value) {
        this.merchantResourceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_RESOURCE_VO:
        if (value == null) {
          unsetMerchantResourceVo();
        } else {
          setMerchantResourceVo((com.froad.thrift.vo.MerchantResourceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_RESOURCE_VO:
        return getMerchantResourceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_RESOURCE_VO:
        return isSetMerchantResourceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantResource_args)
        return this.equals((getMerchantResource_args)that);
      return false;
    }

    public boolean equals(getMerchantResource_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantResourceVo = true && this.isSetMerchantResourceVo();
      boolean that_present_merchantResourceVo = true && that.isSetMerchantResourceVo();
      if (this_present_merchantResourceVo || that_present_merchantResourceVo) {
        if (!(this_present_merchantResourceVo && that_present_merchantResourceVo))
          return false;
        if (!this.merchantResourceVo.equals(that.merchantResourceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantResourceVo = true && (isSetMerchantResourceVo());
      list.add(present_merchantResourceVo);
      if (present_merchantResourceVo)
        list.add(merchantResourceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantResourceVo()).compareTo(other.isSetMerchantResourceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantResourceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantResourceVo, other.merchantResourceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantResource_args(");
      boolean first = true;

      sb.append("merchantResourceVo:");
      if (this.merchantResourceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantResourceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (merchantResourceVo != null) {
        merchantResourceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantResource_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantResource_argsStandardScheme getScheme() {
        return new getMerchantResource_argsStandardScheme();
      }
    }

    private static class getMerchantResource_argsStandardScheme extends StandardScheme<getMerchantResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_RESOURCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantResourceVo = new com.froad.thrift.vo.MerchantResourceVo();
                struct.merchantResourceVo.read(iprot);
                struct.setMerchantResourceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantResourceVo != null) {
          oprot.writeFieldBegin(MERCHANT_RESOURCE_VO_FIELD_DESC);
          struct.merchantResourceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantResource_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantResource_argsTupleScheme getScheme() {
        return new getMerchantResource_argsTupleScheme();
      }
    }

    private static class getMerchantResource_argsTupleScheme extends TupleScheme<getMerchantResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantResourceVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantResourceVo()) {
          struct.merchantResourceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantResourceVo = new com.froad.thrift.vo.MerchantResourceVo();
          struct.merchantResourceVo.read(iprot);
          struct.setMerchantResourceVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantResource_result implements org.apache.thrift.TBase<getMerchantResource_result, getMerchantResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantResource_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.MerchantResourceVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantResourceVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantResource_result.class, metaDataMap);
    }

    public getMerchantResource_result() {
    }

    public getMerchantResource_result(
      List<com.froad.thrift.vo.MerchantResourceVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantResource_result(getMerchantResource_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.MerchantResourceVo> __this__success = new ArrayList<com.froad.thrift.vo.MerchantResourceVo>(other.success.size());
        for (com.froad.thrift.vo.MerchantResourceVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.MerchantResourceVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMerchantResource_result deepCopy() {
      return new getMerchantResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.MerchantResourceVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.MerchantResourceVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.MerchantResourceVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.MerchantResourceVo> getSuccess() {
      return this.success;
    }

    public getMerchantResource_result setSuccess(List<com.froad.thrift.vo.MerchantResourceVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.MerchantResourceVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantResource_result)
        return this.equals((getMerchantResource_result)that);
      return false;
    }

    public boolean equals(getMerchantResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantResource_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantResource_resultStandardScheme getScheme() {
        return new getMerchantResource_resultStandardScheme();
      }
    }

    private static class getMerchantResource_resultStandardScheme extends StandardScheme<getMerchantResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.MerchantResourceVo>(_list0.size);
                  com.froad.thrift.vo.MerchantResourceVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.MerchantResourceVo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.MerchantResourceVo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantResource_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantResource_resultTupleScheme getScheme() {
        return new getMerchantResource_resultTupleScheme();
      }
    }

    private static class getMerchantResource_resultTupleScheme extends TupleScheme<getMerchantResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.MerchantResourceVo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.MerchantResourceVo>(_list5.size);
            com.froad.thrift.vo.MerchantResourceVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.MerchantResourceVo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantResourceByPage_args implements org.apache.thrift.TBase<getMerchantResourceByPage_args, getMerchantResourceByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantResourceByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantResourceByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_RESOURCE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantResourceVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantResourceByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantResourceByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.MerchantResourceVo merchantResourceVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      MERCHANT_RESOURCE_VO((short)2, "merchantResourceVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // MERCHANT_RESOURCE_VO
            return MERCHANT_RESOURCE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.MERCHANT_RESOURCE_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantResourceVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantResourceVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantResourceByPage_args.class, metaDataMap);
    }

    public getMerchantResourceByPage_args() {
    }

    public getMerchantResourceByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.MerchantResourceVo merchantResourceVo)
    {
      this();
      this.page = page;
      this.merchantResourceVo = merchantResourceVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantResourceByPage_args(getMerchantResourceByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetMerchantResourceVo()) {
        this.merchantResourceVo = new com.froad.thrift.vo.MerchantResourceVo(other.merchantResourceVo);
      }
    }

    public getMerchantResourceByPage_args deepCopy() {
      return new getMerchantResourceByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.merchantResourceVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getMerchantResourceByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.MerchantResourceVo getMerchantResourceVo() {
      return this.merchantResourceVo;
    }

    public getMerchantResourceByPage_args setMerchantResourceVo(com.froad.thrift.vo.MerchantResourceVo merchantResourceVo) {
      this.merchantResourceVo = merchantResourceVo;
      return this;
    }

    public void unsetMerchantResourceVo() {
      this.merchantResourceVo = null;
    }

    /** Returns true if field merchantResourceVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantResourceVo() {
      return this.merchantResourceVo != null;
    }

    public void setMerchantResourceVoIsSet(boolean value) {
      if (!value) {
        this.merchantResourceVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case MERCHANT_RESOURCE_VO:
        if (value == null) {
          unsetMerchantResourceVo();
        } else {
          setMerchantResourceVo((com.froad.thrift.vo.MerchantResourceVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case MERCHANT_RESOURCE_VO:
        return getMerchantResourceVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case MERCHANT_RESOURCE_VO:
        return isSetMerchantResourceVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantResourceByPage_args)
        return this.equals((getMerchantResourceByPage_args)that);
      return false;
    }

    public boolean equals(getMerchantResourceByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_merchantResourceVo = true && this.isSetMerchantResourceVo();
      boolean that_present_merchantResourceVo = true && that.isSetMerchantResourceVo();
      if (this_present_merchantResourceVo || that_present_merchantResourceVo) {
        if (!(this_present_merchantResourceVo && that_present_merchantResourceVo))
          return false;
        if (!this.merchantResourceVo.equals(that.merchantResourceVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_merchantResourceVo = true && (isSetMerchantResourceVo());
      list.add(present_merchantResourceVo);
      if (present_merchantResourceVo)
        list.add(merchantResourceVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantResourceByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantResourceVo()).compareTo(other.isSetMerchantResourceVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantResourceVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantResourceVo, other.merchantResourceVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantResourceByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantResourceVo:");
      if (this.merchantResourceVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantResourceVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (merchantResourceVo != null) {
        merchantResourceVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantResourceByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantResourceByPage_argsStandardScheme getScheme() {
        return new getMerchantResourceByPage_argsStandardScheme();
      }
    }

    private static class getMerchantResourceByPage_argsStandardScheme extends StandardScheme<getMerchantResourceByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantResourceByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_RESOURCE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantResourceVo = new com.froad.thrift.vo.MerchantResourceVo();
                struct.merchantResourceVo.read(iprot);
                struct.setMerchantResourceVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantResourceByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantResourceVo != null) {
          oprot.writeFieldBegin(MERCHANT_RESOURCE_VO_FIELD_DESC);
          struct.merchantResourceVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantResourceByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantResourceByPage_argsTupleScheme getScheme() {
        return new getMerchantResourceByPage_argsTupleScheme();
      }
    }

    private static class getMerchantResourceByPage_argsTupleScheme extends TupleScheme<getMerchantResourceByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantResourceByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantResourceVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetMerchantResourceVo()) {
          struct.merchantResourceVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantResourceByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantResourceVo = new com.froad.thrift.vo.MerchantResourceVo();
          struct.merchantResourceVo.read(iprot);
          struct.setMerchantResourceVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantResourceByPage_result implements org.apache.thrift.TBase<getMerchantResourceByPage_result, getMerchantResourceByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantResourceByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantResourceByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantResourceByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantResourceByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantResourcePageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantResourcePageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantResourceByPage_result.class, metaDataMap);
    }

    public getMerchantResourceByPage_result() {
    }

    public getMerchantResourceByPage_result(
      com.froad.thrift.vo.MerchantResourcePageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantResourceByPage_result(getMerchantResourceByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantResourcePageVoRes(other.success);
      }
    }

    public getMerchantResourceByPage_result deepCopy() {
      return new getMerchantResourceByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantResourcePageVoRes getSuccess() {
      return this.success;
    }

    public getMerchantResourceByPage_result setSuccess(com.froad.thrift.vo.MerchantResourcePageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantResourcePageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantResourceByPage_result)
        return this.equals((getMerchantResourceByPage_result)that);
      return false;
    }

    public boolean equals(getMerchantResourceByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantResourceByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantResourceByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantResourceByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantResourceByPage_resultStandardScheme getScheme() {
        return new getMerchantResourceByPage_resultStandardScheme();
      }
    }

    private static class getMerchantResourceByPage_resultStandardScheme extends StandardScheme<getMerchantResourceByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantResourceByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantResourcePageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantResourceByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantResourceByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantResourceByPage_resultTupleScheme getScheme() {
        return new getMerchantResourceByPage_resultTupleScheme();
      }
    }

    private static class getMerchantResourceByPage_resultTupleScheme extends TupleScheme<getMerchantResourceByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantResourceByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantResourceByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantResourcePageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
