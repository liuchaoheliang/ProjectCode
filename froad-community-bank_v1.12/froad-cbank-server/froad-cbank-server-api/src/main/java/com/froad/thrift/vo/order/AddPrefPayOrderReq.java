/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 21.创建惠付订单请求
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class AddPrefPayOrderReq implements org.apache.thrift.TBase<AddPrefPayOrderReq, AddPrefPayOrderReq._Fields>, java.io.Serializable, Cloneable, Comparable<AddPrefPayOrderReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddPrefPayOrderReq");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MEMBER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("memberName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("createSource", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RED_PACKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("redPacketId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CASH_COUPON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cashCouponId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BANK_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankPoint", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField FFT_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("fftPoint", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField POINT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("pointMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField POINT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("pointRate", org.apache.thrift.protocol.TType.I64, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AddPrefPayOrderReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AddPrefPayOrderReqTupleSchemeFactory());
  }

  /**
   * 客户端ID
   */
  public String clientId; // required
  /**
   * 会员号
   */
  public long memberCode; // required
  /**
   * 会员名称
   */
  public String memberName; // required
  /**
   * 订单来源
   */
  public String createSource; // required
  /**
   * 商品ID
   */
  public String productId; // required
  /**
   * 备注
   */
  public String remark; // required
  /**
   * 用户注册手机号
   */
  public String phone; // required
  /**
   * 红包ID
   */
  public String redPacketId; // required
  /**
   * 现金券ID
   */
  public String cashCouponId; // required
  /**
   * 银行积分
   */
  public int bankPoint; // optional
  /**
   * 方付通积分
   */
  public double fftPoint; // optional
  /**
   * 积分对应的现金
   */
  public double pointMoney; // optional
  /**
   * 积分比例
   */
  public long pointRate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 客户端ID
     */
    CLIENT_ID((short)1, "clientId"),
    /**
     * 会员号
     */
    MEMBER_CODE((short)2, "memberCode"),
    /**
     * 会员名称
     */
    MEMBER_NAME((short)3, "memberName"),
    /**
     * 订单来源
     */
    CREATE_SOURCE((short)4, "createSource"),
    /**
     * 商品ID
     */
    PRODUCT_ID((short)5, "productId"),
    /**
     * 备注
     */
    REMARK((short)6, "remark"),
    /**
     * 用户注册手机号
     */
    PHONE((short)7, "phone"),
    /**
     * 红包ID
     */
    RED_PACKET_ID((short)8, "redPacketId"),
    /**
     * 现金券ID
     */
    CASH_COUPON_ID((short)9, "cashCouponId"),
    /**
     * 银行积分
     */
    BANK_POINT((short)10, "bankPoint"),
    /**
     * 方付通积分
     */
    FFT_POINT((short)11, "fftPoint"),
    /**
     * 积分对应的现金
     */
    POINT_MONEY((short)12, "pointMoney"),
    /**
     * 积分比例
     */
    POINT_RATE((short)13, "pointRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // MEMBER_CODE
          return MEMBER_CODE;
        case 3: // MEMBER_NAME
          return MEMBER_NAME;
        case 4: // CREATE_SOURCE
          return CREATE_SOURCE;
        case 5: // PRODUCT_ID
          return PRODUCT_ID;
        case 6: // REMARK
          return REMARK;
        case 7: // PHONE
          return PHONE;
        case 8: // RED_PACKET_ID
          return RED_PACKET_ID;
        case 9: // CASH_COUPON_ID
          return CASH_COUPON_ID;
        case 10: // BANK_POINT
          return BANK_POINT;
        case 11: // FFT_POINT
          return FFT_POINT;
        case 12: // POINT_MONEY
          return POINT_MONEY;
        case 13: // POINT_RATE
          return POINT_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMBERCODE_ISSET_ID = 0;
  private static final int __BANKPOINT_ISSET_ID = 1;
  private static final int __FFTPOINT_ISSET_ID = 2;
  private static final int __POINTMONEY_ISSET_ID = 3;
  private static final int __POINTRATE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BANK_POINT,_Fields.FFT_POINT,_Fields.POINT_MONEY,_Fields.POINT_RATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEMBER_NAME, new org.apache.thrift.meta_data.FieldMetaData("memberName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("createSource", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RED_PACKET_ID, new org.apache.thrift.meta_data.FieldMetaData("redPacketId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CASH_COUPON_ID, new org.apache.thrift.meta_data.FieldMetaData("cashCouponId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_POINT, new org.apache.thrift.meta_data.FieldMetaData("bankPoint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FFT_POINT, new org.apache.thrift.meta_data.FieldMetaData("fftPoint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("pointMoney", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT_RATE, new org.apache.thrift.meta_data.FieldMetaData("pointRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddPrefPayOrderReq.class, metaDataMap);
  }

  public AddPrefPayOrderReq() {
  }

  public AddPrefPayOrderReq(
    String clientId,
    long memberCode,
    String memberName,
    String createSource,
    String productId,
    String remark,
    String phone,
    String redPacketId,
    String cashCouponId)
  {
    this();
    this.clientId = clientId;
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    this.memberName = memberName;
    this.createSource = createSource;
    this.productId = productId;
    this.remark = remark;
    this.phone = phone;
    this.redPacketId = redPacketId;
    this.cashCouponId = cashCouponId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AddPrefPayOrderReq(AddPrefPayOrderReq other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    this.memberCode = other.memberCode;
    if (other.isSetMemberName()) {
      this.memberName = other.memberName;
    }
    if (other.isSetCreateSource()) {
      this.createSource = other.createSource;
    }
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetRedPacketId()) {
      this.redPacketId = other.redPacketId;
    }
    if (other.isSetCashCouponId()) {
      this.cashCouponId = other.cashCouponId;
    }
    this.bankPoint = other.bankPoint;
    this.fftPoint = other.fftPoint;
    this.pointMoney = other.pointMoney;
    this.pointRate = other.pointRate;
  }

  public AddPrefPayOrderReq deepCopy() {
    return new AddPrefPayOrderReq(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    setMemberCodeIsSet(false);
    this.memberCode = 0;
    this.memberName = null;
    this.createSource = null;
    this.productId = null;
    this.remark = null;
    this.phone = null;
    this.redPacketId = null;
    this.cashCouponId = null;
    setBankPointIsSet(false);
    this.bankPoint = 0;
    setFftPointIsSet(false);
    this.fftPoint = 0.0;
    setPointMoneyIsSet(false);
    this.pointMoney = 0.0;
    setPointRateIsSet(false);
    this.pointRate = 0;
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public AddPrefPayOrderReq setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 会员号
   */
  public long getMemberCode() {
    return this.memberCode;
  }

  /**
   * 会员号
   */
  public AddPrefPayOrderReq setMemberCode(long memberCode) {
    this.memberCode = memberCode;
    setMemberCodeIsSet(true);
    return this;
  }

  public void unsetMemberCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCode() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
  }

  public void setMemberCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
  }

  /**
   * 会员名称
   */
  public String getMemberName() {
    return this.memberName;
  }

  /**
   * 会员名称
   */
  public AddPrefPayOrderReq setMemberName(String memberName) {
    this.memberName = memberName;
    return this;
  }

  public void unsetMemberName() {
    this.memberName = null;
  }

  /** Returns true if field memberName is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberName() {
    return this.memberName != null;
  }

  public void setMemberNameIsSet(boolean value) {
    if (!value) {
      this.memberName = null;
    }
  }

  /**
   * 订单来源
   */
  public String getCreateSource() {
    return this.createSource;
  }

  /**
   * 订单来源
   */
  public AddPrefPayOrderReq setCreateSource(String createSource) {
    this.createSource = createSource;
    return this;
  }

  public void unsetCreateSource() {
    this.createSource = null;
  }

  /** Returns true if field createSource is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateSource() {
    return this.createSource != null;
  }

  public void setCreateSourceIsSet(boolean value) {
    if (!value) {
      this.createSource = null;
    }
  }

  /**
   * 商品ID
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品ID
   */
  public AddPrefPayOrderReq setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 备注
   */
  public String getRemark() {
    return this.remark;
  }

  /**
   * 备注
   */
  public AddPrefPayOrderReq setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  /**
   * 用户注册手机号
   */
  public String getPhone() {
    return this.phone;
  }

  /**
   * 用户注册手机号
   */
  public AddPrefPayOrderReq setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  /**
   * 红包ID
   */
  public String getRedPacketId() {
    return this.redPacketId;
  }

  /**
   * 红包ID
   */
  public AddPrefPayOrderReq setRedPacketId(String redPacketId) {
    this.redPacketId = redPacketId;
    return this;
  }

  public void unsetRedPacketId() {
    this.redPacketId = null;
  }

  /** Returns true if field redPacketId is set (has been assigned a value) and false otherwise */
  public boolean isSetRedPacketId() {
    return this.redPacketId != null;
  }

  public void setRedPacketIdIsSet(boolean value) {
    if (!value) {
      this.redPacketId = null;
    }
  }

  /**
   * 现金券ID
   */
  public String getCashCouponId() {
    return this.cashCouponId;
  }

  /**
   * 现金券ID
   */
  public AddPrefPayOrderReq setCashCouponId(String cashCouponId) {
    this.cashCouponId = cashCouponId;
    return this;
  }

  public void unsetCashCouponId() {
    this.cashCouponId = null;
  }

  /** Returns true if field cashCouponId is set (has been assigned a value) and false otherwise */
  public boolean isSetCashCouponId() {
    return this.cashCouponId != null;
  }

  public void setCashCouponIdIsSet(boolean value) {
    if (!value) {
      this.cashCouponId = null;
    }
  }

  /**
   * 银行积分
   */
  public int getBankPoint() {
    return this.bankPoint;
  }

  /**
   * 银行积分
   */
  public AddPrefPayOrderReq setBankPoint(int bankPoint) {
    this.bankPoint = bankPoint;
    setBankPointIsSet(true);
    return this;
  }

  public void unsetBankPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKPOINT_ISSET_ID);
  }

  /** Returns true if field bankPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetBankPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKPOINT_ISSET_ID);
  }

  public void setBankPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKPOINT_ISSET_ID, value);
  }

  /**
   * 方付通积分
   */
  public double getFftPoint() {
    return this.fftPoint;
  }

  /**
   * 方付通积分
   */
  public AddPrefPayOrderReq setFftPoint(double fftPoint) {
    this.fftPoint = fftPoint;
    setFftPointIsSet(true);
    return this;
  }

  public void unsetFftPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FFTPOINT_ISSET_ID);
  }

  /** Returns true if field fftPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetFftPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __FFTPOINT_ISSET_ID);
  }

  public void setFftPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FFTPOINT_ISSET_ID, value);
  }

  /**
   * 积分对应的现金
   */
  public double getPointMoney() {
    return this.pointMoney;
  }

  /**
   * 积分对应的现金
   */
  public AddPrefPayOrderReq setPointMoney(double pointMoney) {
    this.pointMoney = pointMoney;
    setPointMoneyIsSet(true);
    return this;
  }

  public void unsetPointMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTMONEY_ISSET_ID);
  }

  /** Returns true if field pointMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPointMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTMONEY_ISSET_ID);
  }

  public void setPointMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTMONEY_ISSET_ID, value);
  }

  /**
   * 积分比例
   */
  public long getPointRate() {
    return this.pointRate;
  }

  /**
   * 积分比例
   */
  public AddPrefPayOrderReq setPointRate(long pointRate) {
    this.pointRate = pointRate;
    setPointRateIsSet(true);
    return this;
  }

  public void unsetPointRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTRATE_ISSET_ID);
  }

  /** Returns true if field pointRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPointRate() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTRATE_ISSET_ID);
  }

  public void setPointRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTRATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case MEMBER_CODE:
      if (value == null) {
        unsetMemberCode();
      } else {
        setMemberCode((Long)value);
      }
      break;

    case MEMBER_NAME:
      if (value == null) {
        unsetMemberName();
      } else {
        setMemberName((String)value);
      }
      break;

    case CREATE_SOURCE:
      if (value == null) {
        unsetCreateSource();
      } else {
        setCreateSource((String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case RED_PACKET_ID:
      if (value == null) {
        unsetRedPacketId();
      } else {
        setRedPacketId((String)value);
      }
      break;

    case CASH_COUPON_ID:
      if (value == null) {
        unsetCashCouponId();
      } else {
        setCashCouponId((String)value);
      }
      break;

    case BANK_POINT:
      if (value == null) {
        unsetBankPoint();
      } else {
        setBankPoint((Integer)value);
      }
      break;

    case FFT_POINT:
      if (value == null) {
        unsetFftPoint();
      } else {
        setFftPoint((Double)value);
      }
      break;

    case POINT_MONEY:
      if (value == null) {
        unsetPointMoney();
      } else {
        setPointMoney((Double)value);
      }
      break;

    case POINT_RATE:
      if (value == null) {
        unsetPointRate();
      } else {
        setPointRate((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case MEMBER_CODE:
      return Long.valueOf(getMemberCode());

    case MEMBER_NAME:
      return getMemberName();

    case CREATE_SOURCE:
      return getCreateSource();

    case PRODUCT_ID:
      return getProductId();

    case REMARK:
      return getRemark();

    case PHONE:
      return getPhone();

    case RED_PACKET_ID:
      return getRedPacketId();

    case CASH_COUPON_ID:
      return getCashCouponId();

    case BANK_POINT:
      return Integer.valueOf(getBankPoint());

    case FFT_POINT:
      return Double.valueOf(getFftPoint());

    case POINT_MONEY:
      return Double.valueOf(getPointMoney());

    case POINT_RATE:
      return Long.valueOf(getPointRate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case MEMBER_CODE:
      return isSetMemberCode();
    case MEMBER_NAME:
      return isSetMemberName();
    case CREATE_SOURCE:
      return isSetCreateSource();
    case PRODUCT_ID:
      return isSetProductId();
    case REMARK:
      return isSetRemark();
    case PHONE:
      return isSetPhone();
    case RED_PACKET_ID:
      return isSetRedPacketId();
    case CASH_COUPON_ID:
      return isSetCashCouponId();
    case BANK_POINT:
      return isSetBankPoint();
    case FFT_POINT:
      return isSetFftPoint();
    case POINT_MONEY:
      return isSetPointMoney();
    case POINT_RATE:
      return isSetPointRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AddPrefPayOrderReq)
      return this.equals((AddPrefPayOrderReq)that);
    return false;
  }

  public boolean equals(AddPrefPayOrderReq that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_memberCode = true;
    boolean that_present_memberCode = true;
    if (this_present_memberCode || that_present_memberCode) {
      if (!(this_present_memberCode && that_present_memberCode))
        return false;
      if (this.memberCode != that.memberCode)
        return false;
    }

    boolean this_present_memberName = true && this.isSetMemberName();
    boolean that_present_memberName = true && that.isSetMemberName();
    if (this_present_memberName || that_present_memberName) {
      if (!(this_present_memberName && that_present_memberName))
        return false;
      if (!this.memberName.equals(that.memberName))
        return false;
    }

    boolean this_present_createSource = true && this.isSetCreateSource();
    boolean that_present_createSource = true && that.isSetCreateSource();
    if (this_present_createSource || that_present_createSource) {
      if (!(this_present_createSource && that_present_createSource))
        return false;
      if (!this.createSource.equals(that.createSource))
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_redPacketId = true && this.isSetRedPacketId();
    boolean that_present_redPacketId = true && that.isSetRedPacketId();
    if (this_present_redPacketId || that_present_redPacketId) {
      if (!(this_present_redPacketId && that_present_redPacketId))
        return false;
      if (!this.redPacketId.equals(that.redPacketId))
        return false;
    }

    boolean this_present_cashCouponId = true && this.isSetCashCouponId();
    boolean that_present_cashCouponId = true && that.isSetCashCouponId();
    if (this_present_cashCouponId || that_present_cashCouponId) {
      if (!(this_present_cashCouponId && that_present_cashCouponId))
        return false;
      if (!this.cashCouponId.equals(that.cashCouponId))
        return false;
    }

    boolean this_present_bankPoint = true && this.isSetBankPoint();
    boolean that_present_bankPoint = true && that.isSetBankPoint();
    if (this_present_bankPoint || that_present_bankPoint) {
      if (!(this_present_bankPoint && that_present_bankPoint))
        return false;
      if (this.bankPoint != that.bankPoint)
        return false;
    }

    boolean this_present_fftPoint = true && this.isSetFftPoint();
    boolean that_present_fftPoint = true && that.isSetFftPoint();
    if (this_present_fftPoint || that_present_fftPoint) {
      if (!(this_present_fftPoint && that_present_fftPoint))
        return false;
      if (this.fftPoint != that.fftPoint)
        return false;
    }

    boolean this_present_pointMoney = true && this.isSetPointMoney();
    boolean that_present_pointMoney = true && that.isSetPointMoney();
    if (this_present_pointMoney || that_present_pointMoney) {
      if (!(this_present_pointMoney && that_present_pointMoney))
        return false;
      if (this.pointMoney != that.pointMoney)
        return false;
    }

    boolean this_present_pointRate = true && this.isSetPointRate();
    boolean that_present_pointRate = true && that.isSetPointRate();
    if (this_present_pointRate || that_present_pointRate) {
      if (!(this_present_pointRate && that_present_pointRate))
        return false;
      if (this.pointRate != that.pointRate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_memberCode = true;
    list.add(present_memberCode);
    if (present_memberCode)
      list.add(memberCode);

    boolean present_memberName = true && (isSetMemberName());
    list.add(present_memberName);
    if (present_memberName)
      list.add(memberName);

    boolean present_createSource = true && (isSetCreateSource());
    list.add(present_createSource);
    if (present_createSource)
      list.add(createSource);

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_redPacketId = true && (isSetRedPacketId());
    list.add(present_redPacketId);
    if (present_redPacketId)
      list.add(redPacketId);

    boolean present_cashCouponId = true && (isSetCashCouponId());
    list.add(present_cashCouponId);
    if (present_cashCouponId)
      list.add(cashCouponId);

    boolean present_bankPoint = true && (isSetBankPoint());
    list.add(present_bankPoint);
    if (present_bankPoint)
      list.add(bankPoint);

    boolean present_fftPoint = true && (isSetFftPoint());
    list.add(present_fftPoint);
    if (present_fftPoint)
      list.add(fftPoint);

    boolean present_pointMoney = true && (isSetPointMoney());
    list.add(present_pointMoney);
    if (present_pointMoney)
      list.add(pointMoney);

    boolean present_pointRate = true && (isSetPointRate());
    list.add(present_pointRate);
    if (present_pointRate)
      list.add(pointRate);

    return list.hashCode();
  }

  @Override
  public int compareTo(AddPrefPayOrderReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberName()).compareTo(other.isSetMemberName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberName, other.memberName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateSource()).compareTo(other.isSetCreateSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createSource, other.createSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRedPacketId()).compareTo(other.isSetRedPacketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedPacketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redPacketId, other.redPacketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashCouponId()).compareTo(other.isSetCashCouponId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashCouponId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashCouponId, other.cashCouponId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankPoint()).compareTo(other.isSetBankPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankPoint, other.bankPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFftPoint()).compareTo(other.isSetFftPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFftPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fftPoint, other.fftPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointMoney()).compareTo(other.isSetPointMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointMoney, other.pointMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointRate()).compareTo(other.isSetPointRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointRate, other.pointRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AddPrefPayOrderReq(");
    boolean first = true;

    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberCode:");
    sb.append(this.memberCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberName:");
    if (this.memberName == null) {
      sb.append("null");
    } else {
      sb.append(this.memberName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createSource:");
    if (this.createSource == null) {
      sb.append("null");
    } else {
      sb.append(this.createSource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("redPacketId:");
    if (this.redPacketId == null) {
      sb.append("null");
    } else {
      sb.append(this.redPacketId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashCouponId:");
    if (this.cashCouponId == null) {
      sb.append("null");
    } else {
      sb.append(this.cashCouponId);
    }
    first = false;
    if (isSetBankPoint()) {
      if (!first) sb.append(", ");
      sb.append("bankPoint:");
      sb.append(this.bankPoint);
      first = false;
    }
    if (isSetFftPoint()) {
      if (!first) sb.append(", ");
      sb.append("fftPoint:");
      sb.append(this.fftPoint);
      first = false;
    }
    if (isSetPointMoney()) {
      if (!first) sb.append(", ");
      sb.append("pointMoney:");
      sb.append(this.pointMoney);
      first = false;
    }
    if (isSetPointRate()) {
      if (!first) sb.append(", ");
      sb.append("pointRate:");
      sb.append(this.pointRate);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (clientId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'memberCode' because it's a primitive and you chose the non-beans generator.
    if (memberName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'memberName' was not present! Struct: " + toString());
    }
    if (createSource == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'createSource' was not present! Struct: " + toString());
    }
    if (productId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'productId' was not present! Struct: " + toString());
    }
    if (phone == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'phone' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AddPrefPayOrderReqStandardSchemeFactory implements SchemeFactory {
    public AddPrefPayOrderReqStandardScheme getScheme() {
      return new AddPrefPayOrderReqStandardScheme();
    }
  }

  private static class AddPrefPayOrderReqStandardScheme extends StandardScheme<AddPrefPayOrderReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AddPrefPayOrderReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEMBER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memberCode = iprot.readI64();
              struct.setMemberCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMBER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberName = iprot.readString();
              struct.setMemberNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createSource = iprot.readString();
              struct.setCreateSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RED_PACKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.redPacketId = iprot.readString();
              struct.setRedPacketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CASH_COUPON_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cashCouponId = iprot.readString();
              struct.setCashCouponIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BANK_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankPoint = iprot.readI32();
              struct.setBankPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FFT_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fftPoint = iprot.readDouble();
              struct.setFftPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // POINT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pointMoney = iprot.readDouble();
              struct.setPointMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // POINT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pointRate = iprot.readI64();
              struct.setPointRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMemberCode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'memberCode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AddPrefPayOrderReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
      oprot.writeI64(struct.memberCode);
      oprot.writeFieldEnd();
      if (struct.memberName != null) {
        oprot.writeFieldBegin(MEMBER_NAME_FIELD_DESC);
        oprot.writeString(struct.memberName);
        oprot.writeFieldEnd();
      }
      if (struct.createSource != null) {
        oprot.writeFieldBegin(CREATE_SOURCE_FIELD_DESC);
        oprot.writeString(struct.createSource);
        oprot.writeFieldEnd();
      }
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.redPacketId != null) {
        oprot.writeFieldBegin(RED_PACKET_ID_FIELD_DESC);
        oprot.writeString(struct.redPacketId);
        oprot.writeFieldEnd();
      }
      if (struct.cashCouponId != null) {
        oprot.writeFieldBegin(CASH_COUPON_ID_FIELD_DESC);
        oprot.writeString(struct.cashCouponId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBankPoint()) {
        oprot.writeFieldBegin(BANK_POINT_FIELD_DESC);
        oprot.writeI32(struct.bankPoint);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFftPoint()) {
        oprot.writeFieldBegin(FFT_POINT_FIELD_DESC);
        oprot.writeDouble(struct.fftPoint);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPointMoney()) {
        oprot.writeFieldBegin(POINT_MONEY_FIELD_DESC);
        oprot.writeDouble(struct.pointMoney);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPointRate()) {
        oprot.writeFieldBegin(POINT_RATE_FIELD_DESC);
        oprot.writeI64(struct.pointRate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AddPrefPayOrderReqTupleSchemeFactory implements SchemeFactory {
    public AddPrefPayOrderReqTupleScheme getScheme() {
      return new AddPrefPayOrderReqTupleScheme();
    }
  }

  private static class AddPrefPayOrderReqTupleScheme extends TupleScheme<AddPrefPayOrderReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AddPrefPayOrderReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.clientId);
      oprot.writeI64(struct.memberCode);
      oprot.writeString(struct.memberName);
      oprot.writeString(struct.createSource);
      oprot.writeString(struct.productId);
      oprot.writeString(struct.phone);
      BitSet optionals = new BitSet();
      if (struct.isSetRemark()) {
        optionals.set(0);
      }
      if (struct.isSetRedPacketId()) {
        optionals.set(1);
      }
      if (struct.isSetCashCouponId()) {
        optionals.set(2);
      }
      if (struct.isSetBankPoint()) {
        optionals.set(3);
      }
      if (struct.isSetFftPoint()) {
        optionals.set(4);
      }
      if (struct.isSetPointMoney()) {
        optionals.set(5);
      }
      if (struct.isSetPointRate()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetRedPacketId()) {
        oprot.writeString(struct.redPacketId);
      }
      if (struct.isSetCashCouponId()) {
        oprot.writeString(struct.cashCouponId);
      }
      if (struct.isSetBankPoint()) {
        oprot.writeI32(struct.bankPoint);
      }
      if (struct.isSetFftPoint()) {
        oprot.writeDouble(struct.fftPoint);
      }
      if (struct.isSetPointMoney()) {
        oprot.writeDouble(struct.pointMoney);
      }
      if (struct.isSetPointRate()) {
        oprot.writeI64(struct.pointRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AddPrefPayOrderReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.clientId = iprot.readString();
      struct.setClientIdIsSet(true);
      struct.memberCode = iprot.readI64();
      struct.setMemberCodeIsSet(true);
      struct.memberName = iprot.readString();
      struct.setMemberNameIsSet(true);
      struct.createSource = iprot.readString();
      struct.setCreateSourceIsSet(true);
      struct.productId = iprot.readString();
      struct.setProductIdIsSet(true);
      struct.phone = iprot.readString();
      struct.setPhoneIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(1)) {
        struct.redPacketId = iprot.readString();
        struct.setRedPacketIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cashCouponId = iprot.readString();
        struct.setCashCouponIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bankPoint = iprot.readI32();
        struct.setBankPointIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fftPoint = iprot.readDouble();
        struct.setFftPointIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pointMoney = iprot.readDouble();
        struct.setPointMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pointRate = iprot.readI64();
        struct.setPointRateIsSet(true);
      }
    }
  }

}

