/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 商户业务销售详情
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class MerchantSaleDetailVo implements org.apache.thrift.TBase<MerchantSaleDetailVo, MerchantSaleDetailVo._Fields>, java.io.Serializable, Cloneable, Comparable<MerchantSaleDetailVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MerchantSaleDetailVo");

  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MERCHANT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GROUP_ORDER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("groupOrderCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField FACE_ORDER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("faceOrderCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PRESELL_ORDER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("presellOrderCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SPECIAL_ORDER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("specialOrderCount", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ORDER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderCount", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ORDER_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField REFUND_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MerchantSaleDetailVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MerchantSaleDetailVoTupleSchemeFactory());
  }

  /**
   * 商户号 *
   */
  public String merchantId; // optional
  /**
   * 商户名称 *
   */
  public String merchantName; // optional
  /**
   * 商户类型 *
   */
  public String merchantType; // optional
  /**
   * 机构号 *
   */
  public String orgCode; // optional
  /**
   * 银行名称 *
   */
  public String orgName; // optional
  /**
   * 团购订单数 *
   */
  public int groupOrderCount; // optional
  /**
   * 面对面订单数 *
   */
  public int faceOrderCount; // optional
  /**
   * 精品预售订单数 *
   */
  public int presellOrderCount; // optional
  /**
   * 名优特惠订单数 *
   */
  public int specialOrderCount; // optional
  /**
   * 订单数 *
   */
  public int orderCount; // optional
  /**
   * 订单总金额 *
   */
  public double orderAmount; // optional
  /**
   * 退款总金额 *
   */
  public double refundAmount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 商户号 *
     */
    MERCHANT_ID((short)1, "merchantId"),
    /**
     * 商户名称 *
     */
    MERCHANT_NAME((short)2, "merchantName"),
    /**
     * 商户类型 *
     */
    MERCHANT_TYPE((short)3, "merchantType"),
    /**
     * 机构号 *
     */
    ORG_CODE((short)4, "orgCode"),
    /**
     * 银行名称 *
     */
    ORG_NAME((short)5, "orgName"),
    /**
     * 团购订单数 *
     */
    GROUP_ORDER_COUNT((short)6, "groupOrderCount"),
    /**
     * 面对面订单数 *
     */
    FACE_ORDER_COUNT((short)7, "faceOrderCount"),
    /**
     * 精品预售订单数 *
     */
    PRESELL_ORDER_COUNT((short)8, "presellOrderCount"),
    /**
     * 名优特惠订单数 *
     */
    SPECIAL_ORDER_COUNT((short)9, "specialOrderCount"),
    /**
     * 订单数 *
     */
    ORDER_COUNT((short)10, "orderCount"),
    /**
     * 订单总金额 *
     */
    ORDER_AMOUNT((short)11, "orderAmount"),
    /**
     * 退款总金额 *
     */
    REFUND_AMOUNT((short)12, "refundAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MERCHANT_ID
          return MERCHANT_ID;
        case 2: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 3: // MERCHANT_TYPE
          return MERCHANT_TYPE;
        case 4: // ORG_CODE
          return ORG_CODE;
        case 5: // ORG_NAME
          return ORG_NAME;
        case 6: // GROUP_ORDER_COUNT
          return GROUP_ORDER_COUNT;
        case 7: // FACE_ORDER_COUNT
          return FACE_ORDER_COUNT;
        case 8: // PRESELL_ORDER_COUNT
          return PRESELL_ORDER_COUNT;
        case 9: // SPECIAL_ORDER_COUNT
          return SPECIAL_ORDER_COUNT;
        case 10: // ORDER_COUNT
          return ORDER_COUNT;
        case 11: // ORDER_AMOUNT
          return ORDER_AMOUNT;
        case 12: // REFUND_AMOUNT
          return REFUND_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GROUPORDERCOUNT_ISSET_ID = 0;
  private static final int __FACEORDERCOUNT_ISSET_ID = 1;
  private static final int __PRESELLORDERCOUNT_ISSET_ID = 2;
  private static final int __SPECIALORDERCOUNT_ISSET_ID = 3;
  private static final int __ORDERCOUNT_ISSET_ID = 4;
  private static final int __ORDERAMOUNT_ISSET_ID = 5;
  private static final int __REFUNDAMOUNT_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MERCHANT_ID,_Fields.MERCHANT_NAME,_Fields.MERCHANT_TYPE,_Fields.ORG_CODE,_Fields.ORG_NAME,_Fields.GROUP_ORDER_COUNT,_Fields.FACE_ORDER_COUNT,_Fields.PRESELL_ORDER_COUNT,_Fields.SPECIAL_ORDER_COUNT,_Fields.ORDER_COUNT,_Fields.ORDER_AMOUNT,_Fields.REFUND_AMOUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("merchantType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_ORDER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("groupOrderCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FACE_ORDER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("faceOrderCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRESELL_ORDER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("presellOrderCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPECIAL_ORDER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("specialOrderCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("orderCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("orderAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("refundAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MerchantSaleDetailVo.class, metaDataMap);
  }

  public MerchantSaleDetailVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MerchantSaleDetailVo(MerchantSaleDetailVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    if (other.isSetMerchantType()) {
      this.merchantType = other.merchantType;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    this.groupOrderCount = other.groupOrderCount;
    this.faceOrderCount = other.faceOrderCount;
    this.presellOrderCount = other.presellOrderCount;
    this.specialOrderCount = other.specialOrderCount;
    this.orderCount = other.orderCount;
    this.orderAmount = other.orderAmount;
    this.refundAmount = other.refundAmount;
  }

  public MerchantSaleDetailVo deepCopy() {
    return new MerchantSaleDetailVo(this);
  }

  @Override
  public void clear() {
    this.merchantId = null;
    this.merchantName = null;
    this.merchantType = null;
    this.orgCode = null;
    this.orgName = null;
    setGroupOrderCountIsSet(false);
    this.groupOrderCount = 0;
    setFaceOrderCountIsSet(false);
    this.faceOrderCount = 0;
    setPresellOrderCountIsSet(false);
    this.presellOrderCount = 0;
    setSpecialOrderCountIsSet(false);
    this.specialOrderCount = 0;
    setOrderCountIsSet(false);
    this.orderCount = 0;
    setOrderAmountIsSet(false);
    this.orderAmount = 0.0;
    setRefundAmountIsSet(false);
    this.refundAmount = 0.0;
  }

  /**
   * 商户号 *
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户号 *
   */
  public MerchantSaleDetailVo setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 商户名称 *
   */
  public String getMerchantName() {
    return this.merchantName;
  }

  /**
   * 商户名称 *
   */
  public MerchantSaleDetailVo setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  /**
   * 商户类型 *
   */
  public String getMerchantType() {
    return this.merchantType;
  }

  /**
   * 商户类型 *
   */
  public MerchantSaleDetailVo setMerchantType(String merchantType) {
    this.merchantType = merchantType;
    return this;
  }

  public void unsetMerchantType() {
    this.merchantType = null;
  }

  /** Returns true if field merchantType is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantType() {
    return this.merchantType != null;
  }

  public void setMerchantTypeIsSet(boolean value) {
    if (!value) {
      this.merchantType = null;
    }
  }

  /**
   * 机构号 *
   */
  public String getOrgCode() {
    return this.orgCode;
  }

  /**
   * 机构号 *
   */
  public MerchantSaleDetailVo setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  /**
   * 银行名称 *
   */
  public String getOrgName() {
    return this.orgName;
  }

  /**
   * 银行名称 *
   */
  public MerchantSaleDetailVo setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  /**
   * 团购订单数 *
   */
  public int getGroupOrderCount() {
    return this.groupOrderCount;
  }

  /**
   * 团购订单数 *
   */
  public MerchantSaleDetailVo setGroupOrderCount(int groupOrderCount) {
    this.groupOrderCount = groupOrderCount;
    setGroupOrderCountIsSet(true);
    return this;
  }

  public void unsetGroupOrderCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPORDERCOUNT_ISSET_ID);
  }

  /** Returns true if field groupOrderCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupOrderCount() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPORDERCOUNT_ISSET_ID);
  }

  public void setGroupOrderCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPORDERCOUNT_ISSET_ID, value);
  }

  /**
   * 面对面订单数 *
   */
  public int getFaceOrderCount() {
    return this.faceOrderCount;
  }

  /**
   * 面对面订单数 *
   */
  public MerchantSaleDetailVo setFaceOrderCount(int faceOrderCount) {
    this.faceOrderCount = faceOrderCount;
    setFaceOrderCountIsSet(true);
    return this;
  }

  public void unsetFaceOrderCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACEORDERCOUNT_ISSET_ID);
  }

  /** Returns true if field faceOrderCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceOrderCount() {
    return EncodingUtils.testBit(__isset_bitfield, __FACEORDERCOUNT_ISSET_ID);
  }

  public void setFaceOrderCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACEORDERCOUNT_ISSET_ID, value);
  }

  /**
   * 精品预售订单数 *
   */
  public int getPresellOrderCount() {
    return this.presellOrderCount;
  }

  /**
   * 精品预售订单数 *
   */
  public MerchantSaleDetailVo setPresellOrderCount(int presellOrderCount) {
    this.presellOrderCount = presellOrderCount;
    setPresellOrderCountIsSet(true);
    return this;
  }

  public void unsetPresellOrderCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRESELLORDERCOUNT_ISSET_ID);
  }

  /** Returns true if field presellOrderCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPresellOrderCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PRESELLORDERCOUNT_ISSET_ID);
  }

  public void setPresellOrderCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRESELLORDERCOUNT_ISSET_ID, value);
  }

  /**
   * 名优特惠订单数 *
   */
  public int getSpecialOrderCount() {
    return this.specialOrderCount;
  }

  /**
   * 名优特惠订单数 *
   */
  public MerchantSaleDetailVo setSpecialOrderCount(int specialOrderCount) {
    this.specialOrderCount = specialOrderCount;
    setSpecialOrderCountIsSet(true);
    return this;
  }

  public void unsetSpecialOrderCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECIALORDERCOUNT_ISSET_ID);
  }

  /** Returns true if field specialOrderCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialOrderCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECIALORDERCOUNT_ISSET_ID);
  }

  public void setSpecialOrderCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECIALORDERCOUNT_ISSET_ID, value);
  }

  /**
   * 订单数 *
   */
  public int getOrderCount() {
    return this.orderCount;
  }

  /**
   * 订单数 *
   */
  public MerchantSaleDetailVo setOrderCount(int orderCount) {
    this.orderCount = orderCount;
    setOrderCountIsSet(true);
    return this;
  }

  public void unsetOrderCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERCOUNT_ISSET_ID);
  }

  /** Returns true if field orderCount is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERCOUNT_ISSET_ID);
  }

  public void setOrderCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERCOUNT_ISSET_ID, value);
  }

  /**
   * 订单总金额 *
   */
  public double getOrderAmount() {
    return this.orderAmount;
  }

  /**
   * 订单总金额 *
   */
  public MerchantSaleDetailVo setOrderAmount(double orderAmount) {
    this.orderAmount = orderAmount;
    setOrderAmountIsSet(true);
    return this;
  }

  public void unsetOrderAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERAMOUNT_ISSET_ID);
  }

  /** Returns true if field orderAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERAMOUNT_ISSET_ID);
  }

  public void setOrderAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERAMOUNT_ISSET_ID, value);
  }

  /**
   * 退款总金额 *
   */
  public double getRefundAmount() {
    return this.refundAmount;
  }

  /**
   * 退款总金额 *
   */
  public MerchantSaleDetailVo setRefundAmount(double refundAmount) {
    this.refundAmount = refundAmount;
    setRefundAmountIsSet(true);
    return this;
  }

  public void unsetRefundAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDAMOUNT_ISSET_ID);
  }

  /** Returns true if field refundAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDAMOUNT_ISSET_ID);
  }

  public void setRefundAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case MERCHANT_TYPE:
      if (value == null) {
        unsetMerchantType();
      } else {
        setMerchantType((String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case GROUP_ORDER_COUNT:
      if (value == null) {
        unsetGroupOrderCount();
      } else {
        setGroupOrderCount((Integer)value);
      }
      break;

    case FACE_ORDER_COUNT:
      if (value == null) {
        unsetFaceOrderCount();
      } else {
        setFaceOrderCount((Integer)value);
      }
      break;

    case PRESELL_ORDER_COUNT:
      if (value == null) {
        unsetPresellOrderCount();
      } else {
        setPresellOrderCount((Integer)value);
      }
      break;

    case SPECIAL_ORDER_COUNT:
      if (value == null) {
        unsetSpecialOrderCount();
      } else {
        setSpecialOrderCount((Integer)value);
      }
      break;

    case ORDER_COUNT:
      if (value == null) {
        unsetOrderCount();
      } else {
        setOrderCount((Integer)value);
      }
      break;

    case ORDER_AMOUNT:
      if (value == null) {
        unsetOrderAmount();
      } else {
        setOrderAmount((Double)value);
      }
      break;

    case REFUND_AMOUNT:
      if (value == null) {
        unsetRefundAmount();
      } else {
        setRefundAmount((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MERCHANT_ID:
      return getMerchantId();

    case MERCHANT_NAME:
      return getMerchantName();

    case MERCHANT_TYPE:
      return getMerchantType();

    case ORG_CODE:
      return getOrgCode();

    case ORG_NAME:
      return getOrgName();

    case GROUP_ORDER_COUNT:
      return Integer.valueOf(getGroupOrderCount());

    case FACE_ORDER_COUNT:
      return Integer.valueOf(getFaceOrderCount());

    case PRESELL_ORDER_COUNT:
      return Integer.valueOf(getPresellOrderCount());

    case SPECIAL_ORDER_COUNT:
      return Integer.valueOf(getSpecialOrderCount());

    case ORDER_COUNT:
      return Integer.valueOf(getOrderCount());

    case ORDER_AMOUNT:
      return Double.valueOf(getOrderAmount());

    case REFUND_AMOUNT:
      return Double.valueOf(getRefundAmount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MERCHANT_ID:
      return isSetMerchantId();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case MERCHANT_TYPE:
      return isSetMerchantType();
    case ORG_CODE:
      return isSetOrgCode();
    case ORG_NAME:
      return isSetOrgName();
    case GROUP_ORDER_COUNT:
      return isSetGroupOrderCount();
    case FACE_ORDER_COUNT:
      return isSetFaceOrderCount();
    case PRESELL_ORDER_COUNT:
      return isSetPresellOrderCount();
    case SPECIAL_ORDER_COUNT:
      return isSetSpecialOrderCount();
    case ORDER_COUNT:
      return isSetOrderCount();
    case ORDER_AMOUNT:
      return isSetOrderAmount();
    case REFUND_AMOUNT:
      return isSetRefundAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MerchantSaleDetailVo)
      return this.equals((MerchantSaleDetailVo)that);
    return false;
  }

  public boolean equals(MerchantSaleDetailVo that) {
    if (that == null)
      return false;

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_merchantType = true && this.isSetMerchantType();
    boolean that_present_merchantType = true && that.isSetMerchantType();
    if (this_present_merchantType || that_present_merchantType) {
      if (!(this_present_merchantType && that_present_merchantType))
        return false;
      if (!this.merchantType.equals(that.merchantType))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_groupOrderCount = true && this.isSetGroupOrderCount();
    boolean that_present_groupOrderCount = true && that.isSetGroupOrderCount();
    if (this_present_groupOrderCount || that_present_groupOrderCount) {
      if (!(this_present_groupOrderCount && that_present_groupOrderCount))
        return false;
      if (this.groupOrderCount != that.groupOrderCount)
        return false;
    }

    boolean this_present_faceOrderCount = true && this.isSetFaceOrderCount();
    boolean that_present_faceOrderCount = true && that.isSetFaceOrderCount();
    if (this_present_faceOrderCount || that_present_faceOrderCount) {
      if (!(this_present_faceOrderCount && that_present_faceOrderCount))
        return false;
      if (this.faceOrderCount != that.faceOrderCount)
        return false;
    }

    boolean this_present_presellOrderCount = true && this.isSetPresellOrderCount();
    boolean that_present_presellOrderCount = true && that.isSetPresellOrderCount();
    if (this_present_presellOrderCount || that_present_presellOrderCount) {
      if (!(this_present_presellOrderCount && that_present_presellOrderCount))
        return false;
      if (this.presellOrderCount != that.presellOrderCount)
        return false;
    }

    boolean this_present_specialOrderCount = true && this.isSetSpecialOrderCount();
    boolean that_present_specialOrderCount = true && that.isSetSpecialOrderCount();
    if (this_present_specialOrderCount || that_present_specialOrderCount) {
      if (!(this_present_specialOrderCount && that_present_specialOrderCount))
        return false;
      if (this.specialOrderCount != that.specialOrderCount)
        return false;
    }

    boolean this_present_orderCount = true && this.isSetOrderCount();
    boolean that_present_orderCount = true && that.isSetOrderCount();
    if (this_present_orderCount || that_present_orderCount) {
      if (!(this_present_orderCount && that_present_orderCount))
        return false;
      if (this.orderCount != that.orderCount)
        return false;
    }

    boolean this_present_orderAmount = true && this.isSetOrderAmount();
    boolean that_present_orderAmount = true && that.isSetOrderAmount();
    if (this_present_orderAmount || that_present_orderAmount) {
      if (!(this_present_orderAmount && that_present_orderAmount))
        return false;
      if (this.orderAmount != that.orderAmount)
        return false;
    }

    boolean this_present_refundAmount = true && this.isSetRefundAmount();
    boolean that_present_refundAmount = true && that.isSetRefundAmount();
    if (this_present_refundAmount || that_present_refundAmount) {
      if (!(this_present_refundAmount && that_present_refundAmount))
        return false;
      if (this.refundAmount != that.refundAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_merchantType = true && (isSetMerchantType());
    list.add(present_merchantType);
    if (present_merchantType)
      list.add(merchantType);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_groupOrderCount = true && (isSetGroupOrderCount());
    list.add(present_groupOrderCount);
    if (present_groupOrderCount)
      list.add(groupOrderCount);

    boolean present_faceOrderCount = true && (isSetFaceOrderCount());
    list.add(present_faceOrderCount);
    if (present_faceOrderCount)
      list.add(faceOrderCount);

    boolean present_presellOrderCount = true && (isSetPresellOrderCount());
    list.add(present_presellOrderCount);
    if (present_presellOrderCount)
      list.add(presellOrderCount);

    boolean present_specialOrderCount = true && (isSetSpecialOrderCount());
    list.add(present_specialOrderCount);
    if (present_specialOrderCount)
      list.add(specialOrderCount);

    boolean present_orderCount = true && (isSetOrderCount());
    list.add(present_orderCount);
    if (present_orderCount)
      list.add(orderCount);

    boolean present_orderAmount = true && (isSetOrderAmount());
    list.add(present_orderAmount);
    if (present_orderAmount)
      list.add(orderAmount);

    boolean present_refundAmount = true && (isSetRefundAmount());
    list.add(present_refundAmount);
    if (present_refundAmount)
      list.add(refundAmount);

    return list.hashCode();
  }

  @Override
  public int compareTo(MerchantSaleDetailVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantType()).compareTo(other.isSetMerchantType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantType, other.merchantType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupOrderCount()).compareTo(other.isSetGroupOrderCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupOrderCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupOrderCount, other.groupOrderCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaceOrderCount()).compareTo(other.isSetFaceOrderCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceOrderCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceOrderCount, other.faceOrderCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPresellOrderCount()).compareTo(other.isSetPresellOrderCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPresellOrderCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.presellOrderCount, other.presellOrderCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialOrderCount()).compareTo(other.isSetSpecialOrderCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialOrderCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialOrderCount, other.specialOrderCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderCount()).compareTo(other.isSetOrderCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderCount, other.orderCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderAmount()).compareTo(other.isSetOrderAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderAmount, other.orderAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundAmount()).compareTo(other.isSetRefundAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundAmount, other.refundAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MerchantSaleDetailVo(");
    boolean first = true;

    if (isSetMerchantId()) {
      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
    }
    if (isSetMerchantName()) {
      if (!first) sb.append(", ");
      sb.append("merchantName:");
      if (this.merchantName == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantName);
      }
      first = false;
    }
    if (isSetMerchantType()) {
      if (!first) sb.append(", ");
      sb.append("merchantType:");
      if (this.merchantType == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantType);
      }
      first = false;
    }
    if (isSetOrgCode()) {
      if (!first) sb.append(", ");
      sb.append("orgCode:");
      if (this.orgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCode);
      }
      first = false;
    }
    if (isSetOrgName()) {
      if (!first) sb.append(", ");
      sb.append("orgName:");
      if (this.orgName == null) {
        sb.append("null");
      } else {
        sb.append(this.orgName);
      }
      first = false;
    }
    if (isSetGroupOrderCount()) {
      if (!first) sb.append(", ");
      sb.append("groupOrderCount:");
      sb.append(this.groupOrderCount);
      first = false;
    }
    if (isSetFaceOrderCount()) {
      if (!first) sb.append(", ");
      sb.append("faceOrderCount:");
      sb.append(this.faceOrderCount);
      first = false;
    }
    if (isSetPresellOrderCount()) {
      if (!first) sb.append(", ");
      sb.append("presellOrderCount:");
      sb.append(this.presellOrderCount);
      first = false;
    }
    if (isSetSpecialOrderCount()) {
      if (!first) sb.append(", ");
      sb.append("specialOrderCount:");
      sb.append(this.specialOrderCount);
      first = false;
    }
    if (isSetOrderCount()) {
      if (!first) sb.append(", ");
      sb.append("orderCount:");
      sb.append(this.orderCount);
      first = false;
    }
    if (isSetOrderAmount()) {
      if (!first) sb.append(", ");
      sb.append("orderAmount:");
      sb.append(this.orderAmount);
      first = false;
    }
    if (isSetRefundAmount()) {
      if (!first) sb.append(", ");
      sb.append("refundAmount:");
      sb.append(this.refundAmount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MerchantSaleDetailVoStandardSchemeFactory implements SchemeFactory {
    public MerchantSaleDetailVoStandardScheme getScheme() {
      return new MerchantSaleDetailVoStandardScheme();
    }
  }

  private static class MerchantSaleDetailVoStandardScheme extends StandardScheme<MerchantSaleDetailVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MerchantSaleDetailVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MERCHANT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantType = iprot.readString();
              struct.setMerchantTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GROUP_ORDER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupOrderCount = iprot.readI32();
              struct.setGroupOrderCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FACE_ORDER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.faceOrderCount = iprot.readI32();
              struct.setFaceOrderCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRESELL_ORDER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.presellOrderCount = iprot.readI32();
              struct.setPresellOrderCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SPECIAL_ORDER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specialOrderCount = iprot.readI32();
              struct.setSpecialOrderCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORDER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderCount = iprot.readI32();
              struct.setOrderCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ORDER_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.orderAmount = iprot.readDouble();
              struct.setOrderAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REFUND_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundAmount = iprot.readDouble();
              struct.setRefundAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MerchantSaleDetailVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.merchantId != null) {
        if (struct.isSetMerchantId()) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.merchantName != null) {
        if (struct.isSetMerchantName()) {
          oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
          oprot.writeString(struct.merchantName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.merchantType != null) {
        if (struct.isSetMerchantType()) {
          oprot.writeFieldBegin(MERCHANT_TYPE_FIELD_DESC);
          oprot.writeString(struct.merchantType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orgCode != null) {
        if (struct.isSetOrgCode()) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.orgCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orgName != null) {
        if (struct.isSetOrgName()) {
          oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
          oprot.writeString(struct.orgName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGroupOrderCount()) {
        oprot.writeFieldBegin(GROUP_ORDER_COUNT_FIELD_DESC);
        oprot.writeI32(struct.groupOrderCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFaceOrderCount()) {
        oprot.writeFieldBegin(FACE_ORDER_COUNT_FIELD_DESC);
        oprot.writeI32(struct.faceOrderCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPresellOrderCount()) {
        oprot.writeFieldBegin(PRESELL_ORDER_COUNT_FIELD_DESC);
        oprot.writeI32(struct.presellOrderCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpecialOrderCount()) {
        oprot.writeFieldBegin(SPECIAL_ORDER_COUNT_FIELD_DESC);
        oprot.writeI32(struct.specialOrderCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderCount()) {
        oprot.writeFieldBegin(ORDER_COUNT_FIELD_DESC);
        oprot.writeI32(struct.orderCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderAmount()) {
        oprot.writeFieldBegin(ORDER_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.orderAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRefundAmount()) {
        oprot.writeFieldBegin(REFUND_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.refundAmount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MerchantSaleDetailVoTupleSchemeFactory implements SchemeFactory {
    public MerchantSaleDetailVoTupleScheme getScheme() {
      return new MerchantSaleDetailVoTupleScheme();
    }
  }

  private static class MerchantSaleDetailVoTupleScheme extends TupleScheme<MerchantSaleDetailVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MerchantSaleDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMerchantId()) {
        optionals.set(0);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(1);
      }
      if (struct.isSetMerchantType()) {
        optionals.set(2);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(3);
      }
      if (struct.isSetOrgName()) {
        optionals.set(4);
      }
      if (struct.isSetGroupOrderCount()) {
        optionals.set(5);
      }
      if (struct.isSetFaceOrderCount()) {
        optionals.set(6);
      }
      if (struct.isSetPresellOrderCount()) {
        optionals.set(7);
      }
      if (struct.isSetSpecialOrderCount()) {
        optionals.set(8);
      }
      if (struct.isSetOrderCount()) {
        optionals.set(9);
      }
      if (struct.isSetOrderAmount()) {
        optionals.set(10);
      }
      if (struct.isSetRefundAmount()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetMerchantType()) {
        oprot.writeString(struct.merchantType);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetGroupOrderCount()) {
        oprot.writeI32(struct.groupOrderCount);
      }
      if (struct.isSetFaceOrderCount()) {
        oprot.writeI32(struct.faceOrderCount);
      }
      if (struct.isSetPresellOrderCount()) {
        oprot.writeI32(struct.presellOrderCount);
      }
      if (struct.isSetSpecialOrderCount()) {
        oprot.writeI32(struct.specialOrderCount);
      }
      if (struct.isSetOrderCount()) {
        oprot.writeI32(struct.orderCount);
      }
      if (struct.isSetOrderAmount()) {
        oprot.writeDouble(struct.orderAmount);
      }
      if (struct.isSetRefundAmount()) {
        oprot.writeDouble(struct.refundAmount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MerchantSaleDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.merchantType = iprot.readString();
        struct.setMerchantTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.groupOrderCount = iprot.readI32();
        struct.setGroupOrderCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.faceOrderCount = iprot.readI32();
        struct.setFaceOrderCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.presellOrderCount = iprot.readI32();
        struct.setPresellOrderCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.specialOrderCount = iprot.readI32();
        struct.setSpecialOrderCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.orderCount = iprot.readI32();
        struct.setOrderCountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.orderAmount = iprot.readDouble();
        struct.setOrderAmountIsSet(true);
      }
      if (incoming.get(11)) {
        struct.refundAmount = iprot.readDouble();
        struct.setRefundAmountIsSet(true);
      }
    }
  }

}

