/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 银行管理平台-订单管理_查询订单详细_返回参数
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class GetOrderDetailByBankManageVoRes implements org.apache.thrift.TBase<GetOrderDetailByBankManageVoRes, GetOrderDetailByBankManageVoRes._Fields>, java.io.Serializable, Cloneable, Comparable<GetOrderDetailByBankManageVoRes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetOrderDetailByBankManageVoRes");

  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField POINT_DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pointDiscount", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField SUB_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("subTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PRODUCT_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("productInfos", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField RESULT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("resultVo", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField DELIVERY_CORP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryCorpName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TRACKING_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("trackingNo", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SHIPPING_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("shippingTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField REFUND_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundState", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField PAYMENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentTime", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField TICKET_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTime", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField CLOSE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("closeType", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField DELIVER_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("deliverInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField ORG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("orgNames", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField CLOSE_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("closeReason", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SETTLE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("settleState", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField TAKE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("takeTime", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField TAKE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("takeCode", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField DELIVERY_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryOption", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField REFUND_APPLY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("refundApplyTime", org.apache.thrift.protocol.TType.I64, (short)26);
  private static final org.apache.thrift.protocol.TField REFUND_SUCCESS_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("refundSuccessTime", org.apache.thrift.protocol.TType.I64, (short)27);
  private static final org.apache.thrift.protocol.TField CONFIRM_RECEIVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmReceiveTime", org.apache.thrift.protocol.TType.I64, (short)28);
  private static final org.apache.thrift.protocol.TField SETTLE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("settleTime", org.apache.thrift.protocol.TType.I64, (short)29);
  private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expireTime", org.apache.thrift.protocol.TType.I64, (short)30);
  private static final org.apache.thrift.protocol.TField MERCHANT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantUserId", org.apache.thrift.protocol.TType.I64, (short)31);
  private static final org.apache.thrift.protocol.TField REAL_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("realTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)32);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField SUB_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subOrderId", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField TAKE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("takeNumber", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField MERCHANT_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantUserName", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField SUB_TOTAL_MONEY_ZITI_FIELD_DESC = new org.apache.thrift.protocol.TField("subTotalMoneyZiti", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField SUB_TOTAL_MONEY_PEISONG_FIELD_DESC = new org.apache.thrift.protocol.TField("subTotalMoneyPeisong", org.apache.thrift.protocol.TType.DOUBLE, (short)38);
  private static final org.apache.thrift.protocol.TField DELIVERY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)39);
  private static final org.apache.thrift.protocol.TField TOTAL_CUT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCutMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)40);
  private static final org.apache.thrift.protocol.TField TOTAL_CASH_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCash", org.apache.thrift.protocol.TType.DOUBLE, (short)41);
  private static final org.apache.thrift.protocol.TField POINT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("pointMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)42);
  private static final org.apache.thrift.protocol.TField CONSUME_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("consumeMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)43);
  private static final org.apache.thrift.protocol.TField DISCOUNT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("discountMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)44);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField DELIVERY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryState", org.apache.thrift.protocol.TType.STRING, (short)46);
  private static final org.apache.thrift.protocol.TField MEMBER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("memberName", org.apache.thrift.protocol.TType.STRING, (short)47);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetOrderDetailByBankManageVoResStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetOrderDetailByBankManageVoResTupleSchemeFactory());
  }

  public long createTime; // required
  public String orderStatus; // required
  public double pointDiscount; // required
  public double subTotalMoney; // required
  public String businessType; // required
  public String outletId; // required
  public String outletName; // required
  public List<ProductInfoVo> productInfos; // required
  public com.froad.thrift.vo.ResultVo resultVo; // required
  public String deliveryCorpName; // required
  public String trackingNo; // required
  public long shippingTime; // required
  /**
   * 增加退款状态，2015-05-06 新增 TODO 待补充类型
   */
  public String refundState; // required
  /**
   * 商户ID
   */
  public String merchantId; // required
  /**
   * 商户名
   */
  public String merchantName; // required
  /**
   * 支付时间（付款时间）
   */
  public long paymentTime; // required
  /**
   * 验码时间（团购验码时间）
   */
  public long ticketTime; // required
  /**
   * 订单关闭类型：1:用户关闭，2:系统关闭，3:退款关闭
   */
  public String closeType; // required
  /**
   * 收货人信息|提货人信息|消费人信息
   */
  public DeliverInfoVo deliverInfoVo; // required
  /**
   * 所属机构
   */
  public String orgNames; // required
  /**
   * 订单关闭原因
   */
  public String closeReason; // required
  /**
   * 结算状态:已结算、未结算 新增
   */
  public String settleState; // required
  /**
   * 提货时间
   */
  public long takeTime; // required
  /**
   * 提货码
   */
  public String takeCode; // required
  /**
   * 配送方式 自提、配送
   */
  public String deliveryOption; // required
  /**
   * 退款申请时间
   */
  public long refundApplyTime; // required
  /**
   * 退款成功时间
   */
  public long refundSuccessTime; // required
  /**
   * 确认收货时间
   */
  public long confirmReceiveTime; // required
  /**
   * 结算时间
   */
  public long settleTime; // required
  /**
   * 验码有效期截止时间
   */
  public long expireTime; // required
  /**
   * 商户用户ID
   */
  public long merchantUserId; // required
  /**
   * 实付款
   */
  public double realTotalMoney; // required
  /**
   * 订单号
   */
  public String orderId; // required
  /**
   * 子订单号
   */
  public String subOrderId; // required
  /**
   * 已消费数量、已提货数量
   */
  public int takeNumber; // required
  /**
   * 操作员
   */
  public String merchantUserName; // required
  /**
   * 订单商品金额-预售详情自提商品总价
   */
  public double subTotalMoneyZiti; // required
  /**
   * 订单商品金额-预售列表配送商品总价
   */
  public double subTotalMoneyPeisong; // required
  /**
   * 运费-新增
   */
  public double deliveryMoney; // required
  /**
   * 子订单总优惠金额
   */
  public double totalCutMoney; // required
  /**
   * 总实付金额
   */
  public double totalCash; // required
  /**
   * 积分抵扣金额
   */
  public double pointMoney; // required
  /**
   * 消费总金额
   */
  public double consumeMoney; // required
  /**
   * 门店折扣金额
   */
  public double discountMoney; // required
  /**
   * 手机号
   */
  public String phone; // required
  /**
   * 发货状态
   */
  public String deliveryState; // required
  /**
   * 会员名
   */
  public String memberName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CREATE_TIME((short)1, "createTime"),
    ORDER_STATUS((short)2, "orderStatus"),
    POINT_DISCOUNT((short)3, "pointDiscount"),
    SUB_TOTAL_MONEY((short)4, "subTotalMoney"),
    BUSINESS_TYPE((short)5, "businessType"),
    OUTLET_ID((short)6, "outletId"),
    OUTLET_NAME((short)7, "outletName"),
    PRODUCT_INFOS((short)8, "productInfos"),
    RESULT_VO((short)9, "resultVo"),
    DELIVERY_CORP_NAME((short)10, "deliveryCorpName"),
    TRACKING_NO((short)11, "trackingNo"),
    SHIPPING_TIME((short)12, "shippingTime"),
    /**
     * 增加退款状态，2015-05-06 新增 TODO 待补充类型
     */
    REFUND_STATE((short)13, "refundState"),
    /**
     * 商户ID
     */
    MERCHANT_ID((short)14, "merchantId"),
    /**
     * 商户名
     */
    MERCHANT_NAME((short)15, "merchantName"),
    /**
     * 支付时间（付款时间）
     */
    PAYMENT_TIME((short)16, "paymentTime"),
    /**
     * 验码时间（团购验码时间）
     */
    TICKET_TIME((short)17, "ticketTime"),
    /**
     * 订单关闭类型：1:用户关闭，2:系统关闭，3:退款关闭
     */
    CLOSE_TYPE((short)18, "closeType"),
    /**
     * 收货人信息|提货人信息|消费人信息
     */
    DELIVER_INFO_VO((short)19, "deliverInfoVo"),
    /**
     * 所属机构
     */
    ORG_NAMES((short)20, "orgNames"),
    /**
     * 订单关闭原因
     */
    CLOSE_REASON((short)21, "closeReason"),
    /**
     * 结算状态:已结算、未结算 新增
     */
    SETTLE_STATE((short)22, "settleState"),
    /**
     * 提货时间
     */
    TAKE_TIME((short)23, "takeTime"),
    /**
     * 提货码
     */
    TAKE_CODE((short)24, "takeCode"),
    /**
     * 配送方式 自提、配送
     */
    DELIVERY_OPTION((short)25, "deliveryOption"),
    /**
     * 退款申请时间
     */
    REFUND_APPLY_TIME((short)26, "refundApplyTime"),
    /**
     * 退款成功时间
     */
    REFUND_SUCCESS_TIME((short)27, "refundSuccessTime"),
    /**
     * 确认收货时间
     */
    CONFIRM_RECEIVE_TIME((short)28, "confirmReceiveTime"),
    /**
     * 结算时间
     */
    SETTLE_TIME((short)29, "settleTime"),
    /**
     * 验码有效期截止时间
     */
    EXPIRE_TIME((short)30, "expireTime"),
    /**
     * 商户用户ID
     */
    MERCHANT_USER_ID((short)31, "merchantUserId"),
    /**
     * 实付款
     */
    REAL_TOTAL_MONEY((short)32, "realTotalMoney"),
    /**
     * 订单号
     */
    ORDER_ID((short)33, "orderId"),
    /**
     * 子订单号
     */
    SUB_ORDER_ID((short)34, "subOrderId"),
    /**
     * 已消费数量、已提货数量
     */
    TAKE_NUMBER((short)35, "takeNumber"),
    /**
     * 操作员
     */
    MERCHANT_USER_NAME((short)36, "merchantUserName"),
    /**
     * 订单商品金额-预售详情自提商品总价
     */
    SUB_TOTAL_MONEY_ZITI((short)37, "subTotalMoneyZiti"),
    /**
     * 订单商品金额-预售列表配送商品总价
     */
    SUB_TOTAL_MONEY_PEISONG((short)38, "subTotalMoneyPeisong"),
    /**
     * 运费-新增
     */
    DELIVERY_MONEY((short)39, "deliveryMoney"),
    /**
     * 子订单总优惠金额
     */
    TOTAL_CUT_MONEY((short)40, "totalCutMoney"),
    /**
     * 总实付金额
     */
    TOTAL_CASH((short)41, "totalCash"),
    /**
     * 积分抵扣金额
     */
    POINT_MONEY((short)42, "pointMoney"),
    /**
     * 消费总金额
     */
    CONSUME_MONEY((short)43, "consumeMoney"),
    /**
     * 门店折扣金额
     */
    DISCOUNT_MONEY((short)44, "discountMoney"),
    /**
     * 手机号
     */
    PHONE((short)45, "phone"),
    /**
     * 发货状态
     */
    DELIVERY_STATE((short)46, "deliveryState"),
    /**
     * 会员名
     */
    MEMBER_NAME((short)47, "memberName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CREATE_TIME
          return CREATE_TIME;
        case 2: // ORDER_STATUS
          return ORDER_STATUS;
        case 3: // POINT_DISCOUNT
          return POINT_DISCOUNT;
        case 4: // SUB_TOTAL_MONEY
          return SUB_TOTAL_MONEY;
        case 5: // BUSINESS_TYPE
          return BUSINESS_TYPE;
        case 6: // OUTLET_ID
          return OUTLET_ID;
        case 7: // OUTLET_NAME
          return OUTLET_NAME;
        case 8: // PRODUCT_INFOS
          return PRODUCT_INFOS;
        case 9: // RESULT_VO
          return RESULT_VO;
        case 10: // DELIVERY_CORP_NAME
          return DELIVERY_CORP_NAME;
        case 11: // TRACKING_NO
          return TRACKING_NO;
        case 12: // SHIPPING_TIME
          return SHIPPING_TIME;
        case 13: // REFUND_STATE
          return REFUND_STATE;
        case 14: // MERCHANT_ID
          return MERCHANT_ID;
        case 15: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 16: // PAYMENT_TIME
          return PAYMENT_TIME;
        case 17: // TICKET_TIME
          return TICKET_TIME;
        case 18: // CLOSE_TYPE
          return CLOSE_TYPE;
        case 19: // DELIVER_INFO_VO
          return DELIVER_INFO_VO;
        case 20: // ORG_NAMES
          return ORG_NAMES;
        case 21: // CLOSE_REASON
          return CLOSE_REASON;
        case 22: // SETTLE_STATE
          return SETTLE_STATE;
        case 23: // TAKE_TIME
          return TAKE_TIME;
        case 24: // TAKE_CODE
          return TAKE_CODE;
        case 25: // DELIVERY_OPTION
          return DELIVERY_OPTION;
        case 26: // REFUND_APPLY_TIME
          return REFUND_APPLY_TIME;
        case 27: // REFUND_SUCCESS_TIME
          return REFUND_SUCCESS_TIME;
        case 28: // CONFIRM_RECEIVE_TIME
          return CONFIRM_RECEIVE_TIME;
        case 29: // SETTLE_TIME
          return SETTLE_TIME;
        case 30: // EXPIRE_TIME
          return EXPIRE_TIME;
        case 31: // MERCHANT_USER_ID
          return MERCHANT_USER_ID;
        case 32: // REAL_TOTAL_MONEY
          return REAL_TOTAL_MONEY;
        case 33: // ORDER_ID
          return ORDER_ID;
        case 34: // SUB_ORDER_ID
          return SUB_ORDER_ID;
        case 35: // TAKE_NUMBER
          return TAKE_NUMBER;
        case 36: // MERCHANT_USER_NAME
          return MERCHANT_USER_NAME;
        case 37: // SUB_TOTAL_MONEY_ZITI
          return SUB_TOTAL_MONEY_ZITI;
        case 38: // SUB_TOTAL_MONEY_PEISONG
          return SUB_TOTAL_MONEY_PEISONG;
        case 39: // DELIVERY_MONEY
          return DELIVERY_MONEY;
        case 40: // TOTAL_CUT_MONEY
          return TOTAL_CUT_MONEY;
        case 41: // TOTAL_CASH
          return TOTAL_CASH;
        case 42: // POINT_MONEY
          return POINT_MONEY;
        case 43: // CONSUME_MONEY
          return CONSUME_MONEY;
        case 44: // DISCOUNT_MONEY
          return DISCOUNT_MONEY;
        case 45: // PHONE
          return PHONE;
        case 46: // DELIVERY_STATE
          return DELIVERY_STATE;
        case 47: // MEMBER_NAME
          return MEMBER_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATETIME_ISSET_ID = 0;
  private static final int __POINTDISCOUNT_ISSET_ID = 1;
  private static final int __SUBTOTALMONEY_ISSET_ID = 2;
  private static final int __SHIPPINGTIME_ISSET_ID = 3;
  private static final int __PAYMENTTIME_ISSET_ID = 4;
  private static final int __TICKETTIME_ISSET_ID = 5;
  private static final int __TAKETIME_ISSET_ID = 6;
  private static final int __REFUNDAPPLYTIME_ISSET_ID = 7;
  private static final int __REFUNDSUCCESSTIME_ISSET_ID = 8;
  private static final int __CONFIRMRECEIVETIME_ISSET_ID = 9;
  private static final int __SETTLETIME_ISSET_ID = 10;
  private static final int __EXPIRETIME_ISSET_ID = 11;
  private static final int __MERCHANTUSERID_ISSET_ID = 12;
  private static final int __REALTOTALMONEY_ISSET_ID = 13;
  private static final int __TAKENUMBER_ISSET_ID = 14;
  private static final int __SUBTOTALMONEYZITI_ISSET_ID = 15;
  private static final int __SUBTOTALMONEYPEISONG_ISSET_ID = 16;
  private static final int __DELIVERYMONEY_ISSET_ID = 17;
  private static final int __TOTALCUTMONEY_ISSET_ID = 18;
  private static final int __TOTALCASH_ISSET_ID = 19;
  private static final int __POINTMONEY_ISSET_ID = 20;
  private static final int __CONSUMEMONEY_ISSET_ID = 21;
  private static final int __DISCOUNTMONEY_ISSET_ID = 22;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POINT_DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("pointDiscount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUB_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("subTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUSINESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("businessType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_INFOS, new org.apache.thrift.meta_data.FieldMetaData("productInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductInfoVo.class))));
    tmpMap.put(_Fields.RESULT_VO, new org.apache.thrift.meta_data.FieldMetaData("resultVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
    tmpMap.put(_Fields.DELIVERY_CORP_NAME, new org.apache.thrift.meta_data.FieldMetaData("deliveryCorpName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACKING_NO, new org.apache.thrift.meta_data.FieldMetaData("trackingNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHIPPING_TIME, new org.apache.thrift.meta_data.FieldMetaData("shippingTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REFUND_STATE, new org.apache.thrift.meta_data.FieldMetaData("refundState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("paymentTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TICKET_TIME, new org.apache.thrift.meta_data.FieldMetaData("ticketTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLOSE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("closeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVER_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("deliverInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeliverInfoVo.class)));
    tmpMap.put(_Fields.ORG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("orgNames", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLOSE_REASON, new org.apache.thrift.meta_data.FieldMetaData("closeReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLE_STATE, new org.apache.thrift.meta_data.FieldMetaData("settleState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAKE_TIME, new org.apache.thrift.meta_data.FieldMetaData("takeTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TAKE_CODE, new org.apache.thrift.meta_data.FieldMetaData("takeCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_OPTION, new org.apache.thrift.meta_data.FieldMetaData("deliveryOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_APPLY_TIME, new org.apache.thrift.meta_data.FieldMetaData("refundApplyTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REFUND_SUCCESS_TIME, new org.apache.thrift.meta_data.FieldMetaData("refundSuccessTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONFIRM_RECEIVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("confirmReceiveTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SETTLE_TIME, new org.apache.thrift.meta_data.FieldMetaData("settleTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MERCHANT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REAL_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("realTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("subOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAKE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("takeNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MERCHANT_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_TOTAL_MONEY_ZITI, new org.apache.thrift.meta_data.FieldMetaData("subTotalMoneyZiti", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUB_TOTAL_MONEY_PEISONG, new org.apache.thrift.meta_data.FieldMetaData("subTotalMoneyPeisong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DELIVERY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("deliveryMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_CUT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("totalCutMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_CASH, new org.apache.thrift.meta_data.FieldMetaData("totalCash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("pointMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONSUME_MONEY, new org.apache.thrift.meta_data.FieldMetaData("consumeMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISCOUNT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("discountMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_STATE, new org.apache.thrift.meta_data.FieldMetaData("deliveryState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_NAME, new org.apache.thrift.meta_data.FieldMetaData("memberName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetOrderDetailByBankManageVoRes.class, metaDataMap);
  }

  public GetOrderDetailByBankManageVoRes() {
  }

  public GetOrderDetailByBankManageVoRes(
    long createTime,
    String orderStatus,
    double pointDiscount,
    double subTotalMoney,
    String businessType,
    String outletId,
    String outletName,
    List<ProductInfoVo> productInfos,
    com.froad.thrift.vo.ResultVo resultVo,
    String deliveryCorpName,
    String trackingNo,
    long shippingTime,
    String refundState,
    String merchantId,
    String merchantName,
    long paymentTime,
    long ticketTime,
    String closeType,
    DeliverInfoVo deliverInfoVo,
    String orgNames,
    String closeReason,
    String settleState,
    long takeTime,
    String takeCode,
    String deliveryOption,
    long refundApplyTime,
    long refundSuccessTime,
    long confirmReceiveTime,
    long settleTime,
    long expireTime,
    long merchantUserId,
    double realTotalMoney,
    String orderId,
    String subOrderId,
    int takeNumber,
    String merchantUserName,
    double subTotalMoneyZiti,
    double subTotalMoneyPeisong,
    double deliveryMoney,
    double totalCutMoney,
    double totalCash,
    double pointMoney,
    double consumeMoney,
    double discountMoney,
    String phone,
    String deliveryState,
    String memberName)
  {
    this();
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.orderStatus = orderStatus;
    this.pointDiscount = pointDiscount;
    setPointDiscountIsSet(true);
    this.subTotalMoney = subTotalMoney;
    setSubTotalMoneyIsSet(true);
    this.businessType = businessType;
    this.outletId = outletId;
    this.outletName = outletName;
    this.productInfos = productInfos;
    this.resultVo = resultVo;
    this.deliveryCorpName = deliveryCorpName;
    this.trackingNo = trackingNo;
    this.shippingTime = shippingTime;
    setShippingTimeIsSet(true);
    this.refundState = refundState;
    this.merchantId = merchantId;
    this.merchantName = merchantName;
    this.paymentTime = paymentTime;
    setPaymentTimeIsSet(true);
    this.ticketTime = ticketTime;
    setTicketTimeIsSet(true);
    this.closeType = closeType;
    this.deliverInfoVo = deliverInfoVo;
    this.orgNames = orgNames;
    this.closeReason = closeReason;
    this.settleState = settleState;
    this.takeTime = takeTime;
    setTakeTimeIsSet(true);
    this.takeCode = takeCode;
    this.deliveryOption = deliveryOption;
    this.refundApplyTime = refundApplyTime;
    setRefundApplyTimeIsSet(true);
    this.refundSuccessTime = refundSuccessTime;
    setRefundSuccessTimeIsSet(true);
    this.confirmReceiveTime = confirmReceiveTime;
    setConfirmReceiveTimeIsSet(true);
    this.settleTime = settleTime;
    setSettleTimeIsSet(true);
    this.expireTime = expireTime;
    setExpireTimeIsSet(true);
    this.merchantUserId = merchantUserId;
    setMerchantUserIdIsSet(true);
    this.realTotalMoney = realTotalMoney;
    setRealTotalMoneyIsSet(true);
    this.orderId = orderId;
    this.subOrderId = subOrderId;
    this.takeNumber = takeNumber;
    setTakeNumberIsSet(true);
    this.merchantUserName = merchantUserName;
    this.subTotalMoneyZiti = subTotalMoneyZiti;
    setSubTotalMoneyZitiIsSet(true);
    this.subTotalMoneyPeisong = subTotalMoneyPeisong;
    setSubTotalMoneyPeisongIsSet(true);
    this.deliveryMoney = deliveryMoney;
    setDeliveryMoneyIsSet(true);
    this.totalCutMoney = totalCutMoney;
    setTotalCutMoneyIsSet(true);
    this.totalCash = totalCash;
    setTotalCashIsSet(true);
    this.pointMoney = pointMoney;
    setPointMoneyIsSet(true);
    this.consumeMoney = consumeMoney;
    setConsumeMoneyIsSet(true);
    this.discountMoney = discountMoney;
    setDiscountMoneyIsSet(true);
    this.phone = phone;
    this.deliveryState = deliveryState;
    this.memberName = memberName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetOrderDetailByBankManageVoRes(GetOrderDetailByBankManageVoRes other) {
    __isset_bitfield = other.__isset_bitfield;
    this.createTime = other.createTime;
    if (other.isSetOrderStatus()) {
      this.orderStatus = other.orderStatus;
    }
    this.pointDiscount = other.pointDiscount;
    this.subTotalMoney = other.subTotalMoney;
    if (other.isSetBusinessType()) {
      this.businessType = other.businessType;
    }
    if (other.isSetOutletId()) {
      this.outletId = other.outletId;
    }
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
    if (other.isSetProductInfos()) {
      List<ProductInfoVo> __this__productInfos = new ArrayList<ProductInfoVo>(other.productInfos.size());
      for (ProductInfoVo other_element : other.productInfos) {
        __this__productInfos.add(new ProductInfoVo(other_element));
      }
      this.productInfos = __this__productInfos;
    }
    if (other.isSetResultVo()) {
      this.resultVo = new com.froad.thrift.vo.ResultVo(other.resultVo);
    }
    if (other.isSetDeliveryCorpName()) {
      this.deliveryCorpName = other.deliveryCorpName;
    }
    if (other.isSetTrackingNo()) {
      this.trackingNo = other.trackingNo;
    }
    this.shippingTime = other.shippingTime;
    if (other.isSetRefundState()) {
      this.refundState = other.refundState;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    this.paymentTime = other.paymentTime;
    this.ticketTime = other.ticketTime;
    if (other.isSetCloseType()) {
      this.closeType = other.closeType;
    }
    if (other.isSetDeliverInfoVo()) {
      this.deliverInfoVo = new DeliverInfoVo(other.deliverInfoVo);
    }
    if (other.isSetOrgNames()) {
      this.orgNames = other.orgNames;
    }
    if (other.isSetCloseReason()) {
      this.closeReason = other.closeReason;
    }
    if (other.isSetSettleState()) {
      this.settleState = other.settleState;
    }
    this.takeTime = other.takeTime;
    if (other.isSetTakeCode()) {
      this.takeCode = other.takeCode;
    }
    if (other.isSetDeliveryOption()) {
      this.deliveryOption = other.deliveryOption;
    }
    this.refundApplyTime = other.refundApplyTime;
    this.refundSuccessTime = other.refundSuccessTime;
    this.confirmReceiveTime = other.confirmReceiveTime;
    this.settleTime = other.settleTime;
    this.expireTime = other.expireTime;
    this.merchantUserId = other.merchantUserId;
    this.realTotalMoney = other.realTotalMoney;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetSubOrderId()) {
      this.subOrderId = other.subOrderId;
    }
    this.takeNumber = other.takeNumber;
    if (other.isSetMerchantUserName()) {
      this.merchantUserName = other.merchantUserName;
    }
    this.subTotalMoneyZiti = other.subTotalMoneyZiti;
    this.subTotalMoneyPeisong = other.subTotalMoneyPeisong;
    this.deliveryMoney = other.deliveryMoney;
    this.totalCutMoney = other.totalCutMoney;
    this.totalCash = other.totalCash;
    this.pointMoney = other.pointMoney;
    this.consumeMoney = other.consumeMoney;
    this.discountMoney = other.discountMoney;
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetDeliveryState()) {
      this.deliveryState = other.deliveryState;
    }
    if (other.isSetMemberName()) {
      this.memberName = other.memberName;
    }
  }

  public GetOrderDetailByBankManageVoRes deepCopy() {
    return new GetOrderDetailByBankManageVoRes(this);
  }

  @Override
  public void clear() {
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.orderStatus = null;
    setPointDiscountIsSet(false);
    this.pointDiscount = 0.0;
    setSubTotalMoneyIsSet(false);
    this.subTotalMoney = 0.0;
    this.businessType = null;
    this.outletId = null;
    this.outletName = null;
    this.productInfos = null;
    this.resultVo = null;
    this.deliveryCorpName = null;
    this.trackingNo = null;
    setShippingTimeIsSet(false);
    this.shippingTime = 0;
    this.refundState = null;
    this.merchantId = null;
    this.merchantName = null;
    setPaymentTimeIsSet(false);
    this.paymentTime = 0;
    setTicketTimeIsSet(false);
    this.ticketTime = 0;
    this.closeType = null;
    this.deliverInfoVo = null;
    this.orgNames = null;
    this.closeReason = null;
    this.settleState = null;
    setTakeTimeIsSet(false);
    this.takeTime = 0;
    this.takeCode = null;
    this.deliveryOption = null;
    setRefundApplyTimeIsSet(false);
    this.refundApplyTime = 0;
    setRefundSuccessTimeIsSet(false);
    this.refundSuccessTime = 0;
    setConfirmReceiveTimeIsSet(false);
    this.confirmReceiveTime = 0;
    setSettleTimeIsSet(false);
    this.settleTime = 0;
    setExpireTimeIsSet(false);
    this.expireTime = 0;
    setMerchantUserIdIsSet(false);
    this.merchantUserId = 0;
    setRealTotalMoneyIsSet(false);
    this.realTotalMoney = 0.0;
    this.orderId = null;
    this.subOrderId = null;
    setTakeNumberIsSet(false);
    this.takeNumber = 0;
    this.merchantUserName = null;
    setSubTotalMoneyZitiIsSet(false);
    this.subTotalMoneyZiti = 0.0;
    setSubTotalMoneyPeisongIsSet(false);
    this.subTotalMoneyPeisong = 0.0;
    setDeliveryMoneyIsSet(false);
    this.deliveryMoney = 0.0;
    setTotalCutMoneyIsSet(false);
    this.totalCutMoney = 0.0;
    setTotalCashIsSet(false);
    this.totalCash = 0.0;
    setPointMoneyIsSet(false);
    this.pointMoney = 0.0;
    setConsumeMoneyIsSet(false);
    this.consumeMoney = 0.0;
    setDiscountMoneyIsSet(false);
    this.discountMoney = 0.0;
    this.phone = null;
    this.deliveryState = null;
    this.memberName = null;
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public GetOrderDetailByBankManageVoRes setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public String getOrderStatus() {
    return this.orderStatus;
  }

  public GetOrderDetailByBankManageVoRes setOrderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

  public void unsetOrderStatus() {
    this.orderStatus = null;
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return this.orderStatus != null;
  }

  public void setOrderStatusIsSet(boolean value) {
    if (!value) {
      this.orderStatus = null;
    }
  }

  public double getPointDiscount() {
    return this.pointDiscount;
  }

  public GetOrderDetailByBankManageVoRes setPointDiscount(double pointDiscount) {
    this.pointDiscount = pointDiscount;
    setPointDiscountIsSet(true);
    return this;
  }

  public void unsetPointDiscount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTDISCOUNT_ISSET_ID);
  }

  /** Returns true if field pointDiscount is set (has been assigned a value) and false otherwise */
  public boolean isSetPointDiscount() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTDISCOUNT_ISSET_ID);
  }

  public void setPointDiscountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTDISCOUNT_ISSET_ID, value);
  }

  public double getSubTotalMoney() {
    return this.subTotalMoney;
  }

  public GetOrderDetailByBankManageVoRes setSubTotalMoney(double subTotalMoney) {
    this.subTotalMoney = subTotalMoney;
    setSubTotalMoneyIsSet(true);
    return this;
  }

  public void unsetSubTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field subTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetSubTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID);
  }

  public void setSubTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBTOTALMONEY_ISSET_ID, value);
  }

  public String getBusinessType() {
    return this.businessType;
  }

  public GetOrderDetailByBankManageVoRes setBusinessType(String businessType) {
    this.businessType = businessType;
    return this;
  }

  public void unsetBusinessType() {
    this.businessType = null;
  }

  /** Returns true if field businessType is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessType() {
    return this.businessType != null;
  }

  public void setBusinessTypeIsSet(boolean value) {
    if (!value) {
      this.businessType = null;
    }
  }

  public String getOutletId() {
    return this.outletId;
  }

  public GetOrderDetailByBankManageVoRes setOutletId(String outletId) {
    this.outletId = outletId;
    return this;
  }

  public void unsetOutletId() {
    this.outletId = null;
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return this.outletId != null;
  }

  public void setOutletIdIsSet(boolean value) {
    if (!value) {
      this.outletId = null;
    }
  }

  public String getOutletName() {
    return this.outletName;
  }

  public GetOrderDetailByBankManageVoRes setOutletName(String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  public int getProductInfosSize() {
    return (this.productInfos == null) ? 0 : this.productInfos.size();
  }

  public java.util.Iterator<ProductInfoVo> getProductInfosIterator() {
    return (this.productInfos == null) ? null : this.productInfos.iterator();
  }

  public void addToProductInfos(ProductInfoVo elem) {
    if (this.productInfos == null) {
      this.productInfos = new ArrayList<ProductInfoVo>();
    }
    this.productInfos.add(elem);
  }

  public List<ProductInfoVo> getProductInfos() {
    return this.productInfos;
  }

  public GetOrderDetailByBankManageVoRes setProductInfos(List<ProductInfoVo> productInfos) {
    this.productInfos = productInfos;
    return this;
  }

  public void unsetProductInfos() {
    this.productInfos = null;
  }

  /** Returns true if field productInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetProductInfos() {
    return this.productInfos != null;
  }

  public void setProductInfosIsSet(boolean value) {
    if (!value) {
      this.productInfos = null;
    }
  }

  public com.froad.thrift.vo.ResultVo getResultVo() {
    return this.resultVo;
  }

  public GetOrderDetailByBankManageVoRes setResultVo(com.froad.thrift.vo.ResultVo resultVo) {
    this.resultVo = resultVo;
    return this;
  }

  public void unsetResultVo() {
    this.resultVo = null;
  }

  /** Returns true if field resultVo is set (has been assigned a value) and false otherwise */
  public boolean isSetResultVo() {
    return this.resultVo != null;
  }

  public void setResultVoIsSet(boolean value) {
    if (!value) {
      this.resultVo = null;
    }
  }

  public String getDeliveryCorpName() {
    return this.deliveryCorpName;
  }

  public GetOrderDetailByBankManageVoRes setDeliveryCorpName(String deliveryCorpName) {
    this.deliveryCorpName = deliveryCorpName;
    return this;
  }

  public void unsetDeliveryCorpName() {
    this.deliveryCorpName = null;
  }

  /** Returns true if field deliveryCorpName is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryCorpName() {
    return this.deliveryCorpName != null;
  }

  public void setDeliveryCorpNameIsSet(boolean value) {
    if (!value) {
      this.deliveryCorpName = null;
    }
  }

  public String getTrackingNo() {
    return this.trackingNo;
  }

  public GetOrderDetailByBankManageVoRes setTrackingNo(String trackingNo) {
    this.trackingNo = trackingNo;
    return this;
  }

  public void unsetTrackingNo() {
    this.trackingNo = null;
  }

  /** Returns true if field trackingNo is set (has been assigned a value) and false otherwise */
  public boolean isSetTrackingNo() {
    return this.trackingNo != null;
  }

  public void setTrackingNoIsSet(boolean value) {
    if (!value) {
      this.trackingNo = null;
    }
  }

  public long getShippingTime() {
    return this.shippingTime;
  }

  public GetOrderDetailByBankManageVoRes setShippingTime(long shippingTime) {
    this.shippingTime = shippingTime;
    setShippingTimeIsSet(true);
    return this;
  }

  public void unsetShippingTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHIPPINGTIME_ISSET_ID);
  }

  /** Returns true if field shippingTime is set (has been assigned a value) and false otherwise */
  public boolean isSetShippingTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SHIPPINGTIME_ISSET_ID);
  }

  public void setShippingTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHIPPINGTIME_ISSET_ID, value);
  }

  /**
   * 增加退款状态，2015-05-06 新增 TODO 待补充类型
   */
  public String getRefundState() {
    return this.refundState;
  }

  /**
   * 增加退款状态，2015-05-06 新增 TODO 待补充类型
   */
  public GetOrderDetailByBankManageVoRes setRefundState(String refundState) {
    this.refundState = refundState;
    return this;
  }

  public void unsetRefundState() {
    this.refundState = null;
  }

  /** Returns true if field refundState is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundState() {
    return this.refundState != null;
  }

  public void setRefundStateIsSet(boolean value) {
    if (!value) {
      this.refundState = null;
    }
  }

  /**
   * 商户ID
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户ID
   */
  public GetOrderDetailByBankManageVoRes setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 商户名
   */
  public String getMerchantName() {
    return this.merchantName;
  }

  /**
   * 商户名
   */
  public GetOrderDetailByBankManageVoRes setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  /**
   * 支付时间（付款时间）
   */
  public long getPaymentTime() {
    return this.paymentTime;
  }

  /**
   * 支付时间（付款时间）
   */
  public GetOrderDetailByBankManageVoRes setPaymentTime(long paymentTime) {
    this.paymentTime = paymentTime;
    setPaymentTimeIsSet(true);
    return this;
  }

  public void unsetPaymentTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID);
  }

  /** Returns true if field paymentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID);
  }

  public void setPaymentTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID, value);
  }

  /**
   * 验码时间（团购验码时间）
   */
  public long getTicketTime() {
    return this.ticketTime;
  }

  /**
   * 验码时间（团购验码时间）
   */
  public GetOrderDetailByBankManageVoRes setTicketTime(long ticketTime) {
    this.ticketTime = ticketTime;
    setTicketTimeIsSet(true);
    return this;
  }

  public void unsetTicketTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TICKETTIME_ISSET_ID);
  }

  /** Returns true if field ticketTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TICKETTIME_ISSET_ID);
  }

  public void setTicketTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TICKETTIME_ISSET_ID, value);
  }

  /**
   * 订单关闭类型：1:用户关闭，2:系统关闭，3:退款关闭
   */
  public String getCloseType() {
    return this.closeType;
  }

  /**
   * 订单关闭类型：1:用户关闭，2:系统关闭，3:退款关闭
   */
  public GetOrderDetailByBankManageVoRes setCloseType(String closeType) {
    this.closeType = closeType;
    return this;
  }

  public void unsetCloseType() {
    this.closeType = null;
  }

  /** Returns true if field closeType is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseType() {
    return this.closeType != null;
  }

  public void setCloseTypeIsSet(boolean value) {
    if (!value) {
      this.closeType = null;
    }
  }

  /**
   * 收货人信息|提货人信息|消费人信息
   */
  public DeliverInfoVo getDeliverInfoVo() {
    return this.deliverInfoVo;
  }

  /**
   * 收货人信息|提货人信息|消费人信息
   */
  public GetOrderDetailByBankManageVoRes setDeliverInfoVo(DeliverInfoVo deliverInfoVo) {
    this.deliverInfoVo = deliverInfoVo;
    return this;
  }

  public void unsetDeliverInfoVo() {
    this.deliverInfoVo = null;
  }

  /** Returns true if field deliverInfoVo is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliverInfoVo() {
    return this.deliverInfoVo != null;
  }

  public void setDeliverInfoVoIsSet(boolean value) {
    if (!value) {
      this.deliverInfoVo = null;
    }
  }

  /**
   * 所属机构
   */
  public String getOrgNames() {
    return this.orgNames;
  }

  /**
   * 所属机构
   */
  public GetOrderDetailByBankManageVoRes setOrgNames(String orgNames) {
    this.orgNames = orgNames;
    return this;
  }

  public void unsetOrgNames() {
    this.orgNames = null;
  }

  /** Returns true if field orgNames is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgNames() {
    return this.orgNames != null;
  }

  public void setOrgNamesIsSet(boolean value) {
    if (!value) {
      this.orgNames = null;
    }
  }

  /**
   * 订单关闭原因
   */
  public String getCloseReason() {
    return this.closeReason;
  }

  /**
   * 订单关闭原因
   */
  public GetOrderDetailByBankManageVoRes setCloseReason(String closeReason) {
    this.closeReason = closeReason;
    return this;
  }

  public void unsetCloseReason() {
    this.closeReason = null;
  }

  /** Returns true if field closeReason is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseReason() {
    return this.closeReason != null;
  }

  public void setCloseReasonIsSet(boolean value) {
    if (!value) {
      this.closeReason = null;
    }
  }

  /**
   * 结算状态:已结算、未结算 新增
   */
  public String getSettleState() {
    return this.settleState;
  }

  /**
   * 结算状态:已结算、未结算 新增
   */
  public GetOrderDetailByBankManageVoRes setSettleState(String settleState) {
    this.settleState = settleState;
    return this;
  }

  public void unsetSettleState() {
    this.settleState = null;
  }

  /** Returns true if field settleState is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleState() {
    return this.settleState != null;
  }

  public void setSettleStateIsSet(boolean value) {
    if (!value) {
      this.settleState = null;
    }
  }

  /**
   * 提货时间
   */
  public long getTakeTime() {
    return this.takeTime;
  }

  /**
   * 提货时间
   */
  public GetOrderDetailByBankManageVoRes setTakeTime(long takeTime) {
    this.takeTime = takeTime;
    setTakeTimeIsSet(true);
    return this;
  }

  public void unsetTakeTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAKETIME_ISSET_ID);
  }

  /** Returns true if field takeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTakeTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TAKETIME_ISSET_ID);
  }

  public void setTakeTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAKETIME_ISSET_ID, value);
  }

  /**
   * 提货码
   */
  public String getTakeCode() {
    return this.takeCode;
  }

  /**
   * 提货码
   */
  public GetOrderDetailByBankManageVoRes setTakeCode(String takeCode) {
    this.takeCode = takeCode;
    return this;
  }

  public void unsetTakeCode() {
    this.takeCode = null;
  }

  /** Returns true if field takeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetTakeCode() {
    return this.takeCode != null;
  }

  public void setTakeCodeIsSet(boolean value) {
    if (!value) {
      this.takeCode = null;
    }
  }

  /**
   * 配送方式 自提、配送
   */
  public String getDeliveryOption() {
    return this.deliveryOption;
  }

  /**
   * 配送方式 自提、配送
   */
  public GetOrderDetailByBankManageVoRes setDeliveryOption(String deliveryOption) {
    this.deliveryOption = deliveryOption;
    return this;
  }

  public void unsetDeliveryOption() {
    this.deliveryOption = null;
  }

  /** Returns true if field deliveryOption is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryOption() {
    return this.deliveryOption != null;
  }

  public void setDeliveryOptionIsSet(boolean value) {
    if (!value) {
      this.deliveryOption = null;
    }
  }

  /**
   * 退款申请时间
   */
  public long getRefundApplyTime() {
    return this.refundApplyTime;
  }

  /**
   * 退款申请时间
   */
  public GetOrderDetailByBankManageVoRes setRefundApplyTime(long refundApplyTime) {
    this.refundApplyTime = refundApplyTime;
    setRefundApplyTimeIsSet(true);
    return this;
  }

  public void unsetRefundApplyTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDAPPLYTIME_ISSET_ID);
  }

  /** Returns true if field refundApplyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundApplyTime() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDAPPLYTIME_ISSET_ID);
  }

  public void setRefundApplyTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDAPPLYTIME_ISSET_ID, value);
  }

  /**
   * 退款成功时间
   */
  public long getRefundSuccessTime() {
    return this.refundSuccessTime;
  }

  /**
   * 退款成功时间
   */
  public GetOrderDetailByBankManageVoRes setRefundSuccessTime(long refundSuccessTime) {
    this.refundSuccessTime = refundSuccessTime;
    setRefundSuccessTimeIsSet(true);
    return this;
  }

  public void unsetRefundSuccessTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDSUCCESSTIME_ISSET_ID);
  }

  /** Returns true if field refundSuccessTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundSuccessTime() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDSUCCESSTIME_ISSET_ID);
  }

  public void setRefundSuccessTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDSUCCESSTIME_ISSET_ID, value);
  }

  /**
   * 确认收货时间
   */
  public long getConfirmReceiveTime() {
    return this.confirmReceiveTime;
  }

  /**
   * 确认收货时间
   */
  public GetOrderDetailByBankManageVoRes setConfirmReceiveTime(long confirmReceiveTime) {
    this.confirmReceiveTime = confirmReceiveTime;
    setConfirmReceiveTimeIsSet(true);
    return this;
  }

  public void unsetConfirmReceiveTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIRMRECEIVETIME_ISSET_ID);
  }

  /** Returns true if field confirmReceiveTime is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmReceiveTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIRMRECEIVETIME_ISSET_ID);
  }

  public void setConfirmReceiveTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIRMRECEIVETIME_ISSET_ID, value);
  }

  /**
   * 结算时间
   */
  public long getSettleTime() {
    return this.settleTime;
  }

  /**
   * 结算时间
   */
  public GetOrderDetailByBankManageVoRes setSettleTime(long settleTime) {
    this.settleTime = settleTime;
    setSettleTimeIsSet(true);
    return this;
  }

  public void unsetSettleTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLETIME_ISSET_ID);
  }

  /** Returns true if field settleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSettleTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLETIME_ISSET_ID);
  }

  public void setSettleTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLETIME_ISSET_ID, value);
  }

  /**
   * 验码有效期截止时间
   */
  public long getExpireTime() {
    return this.expireTime;
  }

  /**
   * 验码有效期截止时间
   */
  public GetOrderDetailByBankManageVoRes setExpireTime(long expireTime) {
    this.expireTime = expireTime;
    setExpireTimeIsSet(true);
    return this;
  }

  public void unsetExpireTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRETIME_ISSET_ID);
  }

  /** Returns true if field expireTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRETIME_ISSET_ID);
  }

  public void setExpireTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRETIME_ISSET_ID, value);
  }

  /**
   * 商户用户ID
   */
  public long getMerchantUserId() {
    return this.merchantUserId;
  }

  /**
   * 商户用户ID
   */
  public GetOrderDetailByBankManageVoRes setMerchantUserId(long merchantUserId) {
    this.merchantUserId = merchantUserId;
    setMerchantUserIdIsSet(true);
    return this;
  }

  public void unsetMerchantUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MERCHANTUSERID_ISSET_ID);
  }

  /** Returns true if field merchantUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __MERCHANTUSERID_ISSET_ID);
  }

  public void setMerchantUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MERCHANTUSERID_ISSET_ID, value);
  }

  /**
   * 实付款
   */
  public double getRealTotalMoney() {
    return this.realTotalMoney;
  }

  /**
   * 实付款
   */
  public GetOrderDetailByBankManageVoRes setRealTotalMoney(double realTotalMoney) {
    this.realTotalMoney = realTotalMoney;
    setRealTotalMoneyIsSet(true);
    return this;
  }

  public void unsetRealTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field realTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRealTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REALTOTALMONEY_ISSET_ID);
  }

  public void setRealTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALTOTALMONEY_ISSET_ID, value);
  }

  /**
   * 订单号
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单号
   */
  public GetOrderDetailByBankManageVoRes setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 子订单号
   */
  public String getSubOrderId() {
    return this.subOrderId;
  }

  /**
   * 子订单号
   */
  public GetOrderDetailByBankManageVoRes setSubOrderId(String subOrderId) {
    this.subOrderId = subOrderId;
    return this;
  }

  public void unsetSubOrderId() {
    this.subOrderId = null;
  }

  /** Returns true if field subOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubOrderId() {
    return this.subOrderId != null;
  }

  public void setSubOrderIdIsSet(boolean value) {
    if (!value) {
      this.subOrderId = null;
    }
  }

  /**
   * 已消费数量、已提货数量
   */
  public int getTakeNumber() {
    return this.takeNumber;
  }

  /**
   * 已消费数量、已提货数量
   */
  public GetOrderDetailByBankManageVoRes setTakeNumber(int takeNumber) {
    this.takeNumber = takeNumber;
    setTakeNumberIsSet(true);
    return this;
  }

  public void unsetTakeNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAKENUMBER_ISSET_ID);
  }

  /** Returns true if field takeNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTakeNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __TAKENUMBER_ISSET_ID);
  }

  public void setTakeNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAKENUMBER_ISSET_ID, value);
  }

  /**
   * 操作员
   */
  public String getMerchantUserName() {
    return this.merchantUserName;
  }

  /**
   * 操作员
   */
  public GetOrderDetailByBankManageVoRes setMerchantUserName(String merchantUserName) {
    this.merchantUserName = merchantUserName;
    return this;
  }

  public void unsetMerchantUserName() {
    this.merchantUserName = null;
  }

  /** Returns true if field merchantUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantUserName() {
    return this.merchantUserName != null;
  }

  public void setMerchantUserNameIsSet(boolean value) {
    if (!value) {
      this.merchantUserName = null;
    }
  }

  /**
   * 订单商品金额-预售详情自提商品总价
   */
  public double getSubTotalMoneyZiti() {
    return this.subTotalMoneyZiti;
  }

  /**
   * 订单商品金额-预售详情自提商品总价
   */
  public GetOrderDetailByBankManageVoRes setSubTotalMoneyZiti(double subTotalMoneyZiti) {
    this.subTotalMoneyZiti = subTotalMoneyZiti;
    setSubTotalMoneyZitiIsSet(true);
    return this;
  }

  public void unsetSubTotalMoneyZiti() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBTOTALMONEYZITI_ISSET_ID);
  }

  /** Returns true if field subTotalMoneyZiti is set (has been assigned a value) and false otherwise */
  public boolean isSetSubTotalMoneyZiti() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBTOTALMONEYZITI_ISSET_ID);
  }

  public void setSubTotalMoneyZitiIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBTOTALMONEYZITI_ISSET_ID, value);
  }

  /**
   * 订单商品金额-预售列表配送商品总价
   */
  public double getSubTotalMoneyPeisong() {
    return this.subTotalMoneyPeisong;
  }

  /**
   * 订单商品金额-预售列表配送商品总价
   */
  public GetOrderDetailByBankManageVoRes setSubTotalMoneyPeisong(double subTotalMoneyPeisong) {
    this.subTotalMoneyPeisong = subTotalMoneyPeisong;
    setSubTotalMoneyPeisongIsSet(true);
    return this;
  }

  public void unsetSubTotalMoneyPeisong() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBTOTALMONEYPEISONG_ISSET_ID);
  }

  /** Returns true if field subTotalMoneyPeisong is set (has been assigned a value) and false otherwise */
  public boolean isSetSubTotalMoneyPeisong() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBTOTALMONEYPEISONG_ISSET_ID);
  }

  public void setSubTotalMoneyPeisongIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBTOTALMONEYPEISONG_ISSET_ID, value);
  }

  /**
   * 运费-新增
   */
  public double getDeliveryMoney() {
    return this.deliveryMoney;
  }

  /**
   * 运费-新增
   */
  public GetOrderDetailByBankManageVoRes setDeliveryMoney(double deliveryMoney) {
    this.deliveryMoney = deliveryMoney;
    setDeliveryMoneyIsSet(true);
    return this;
  }

  public void unsetDeliveryMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID);
  }

  /** Returns true if field deliveryMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID);
  }

  public void setDeliveryMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYMONEY_ISSET_ID, value);
  }

  /**
   * 子订单总优惠金额
   */
  public double getTotalCutMoney() {
    return this.totalCutMoney;
  }

  /**
   * 子订单总优惠金额
   */
  public GetOrderDetailByBankManageVoRes setTotalCutMoney(double totalCutMoney) {
    this.totalCutMoney = totalCutMoney;
    setTotalCutMoneyIsSet(true);
    return this;
  }

  public void unsetTotalCutMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCUTMONEY_ISSET_ID);
  }

  /** Returns true if field totalCutMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCutMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCUTMONEY_ISSET_ID);
  }

  public void setTotalCutMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCUTMONEY_ISSET_ID, value);
  }

  /**
   * 总实付金额
   */
  public double getTotalCash() {
    return this.totalCash;
  }

  /**
   * 总实付金额
   */
  public GetOrderDetailByBankManageVoRes setTotalCash(double totalCash) {
    this.totalCash = totalCash;
    setTotalCashIsSet(true);
    return this;
  }

  public void unsetTotalCash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCASH_ISSET_ID);
  }

  /** Returns true if field totalCash is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCash() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCASH_ISSET_ID);
  }

  public void setTotalCashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCASH_ISSET_ID, value);
  }

  /**
   * 积分抵扣金额
   */
  public double getPointMoney() {
    return this.pointMoney;
  }

  /**
   * 积分抵扣金额
   */
  public GetOrderDetailByBankManageVoRes setPointMoney(double pointMoney) {
    this.pointMoney = pointMoney;
    setPointMoneyIsSet(true);
    return this;
  }

  public void unsetPointMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTMONEY_ISSET_ID);
  }

  /** Returns true if field pointMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPointMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTMONEY_ISSET_ID);
  }

  public void setPointMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTMONEY_ISSET_ID, value);
  }

  /**
   * 消费总金额
   */
  public double getConsumeMoney() {
    return this.consumeMoney;
  }

  /**
   * 消费总金额
   */
  public GetOrderDetailByBankManageVoRes setConsumeMoney(double consumeMoney) {
    this.consumeMoney = consumeMoney;
    setConsumeMoneyIsSet(true);
    return this;
  }

  public void unsetConsumeMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONSUMEMONEY_ISSET_ID);
  }

  /** Returns true if field consumeMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumeMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CONSUMEMONEY_ISSET_ID);
  }

  public void setConsumeMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONSUMEMONEY_ISSET_ID, value);
  }

  /**
   * 门店折扣金额
   */
  public double getDiscountMoney() {
    return this.discountMoney;
  }

  /**
   * 门店折扣金额
   */
  public GetOrderDetailByBankManageVoRes setDiscountMoney(double discountMoney) {
    this.discountMoney = discountMoney;
    setDiscountMoneyIsSet(true);
    return this;
  }

  public void unsetDiscountMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCOUNTMONEY_ISSET_ID);
  }

  /** Returns true if field discountMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscountMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCOUNTMONEY_ISSET_ID);
  }

  public void setDiscountMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCOUNTMONEY_ISSET_ID, value);
  }

  /**
   * 手机号
   */
  public String getPhone() {
    return this.phone;
  }

  /**
   * 手机号
   */
  public GetOrderDetailByBankManageVoRes setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  /**
   * 发货状态
   */
  public String getDeliveryState() {
    return this.deliveryState;
  }

  /**
   * 发货状态
   */
  public GetOrderDetailByBankManageVoRes setDeliveryState(String deliveryState) {
    this.deliveryState = deliveryState;
    return this;
  }

  public void unsetDeliveryState() {
    this.deliveryState = null;
  }

  /** Returns true if field deliveryState is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryState() {
    return this.deliveryState != null;
  }

  public void setDeliveryStateIsSet(boolean value) {
    if (!value) {
      this.deliveryState = null;
    }
  }

  /**
   * 会员名
   */
  public String getMemberName() {
    return this.memberName;
  }

  /**
   * 会员名
   */
  public GetOrderDetailByBankManageVoRes setMemberName(String memberName) {
    this.memberName = memberName;
    return this;
  }

  public void unsetMemberName() {
    this.memberName = null;
  }

  /** Returns true if field memberName is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberName() {
    return this.memberName != null;
  }

  public void setMemberNameIsSet(boolean value) {
    if (!value) {
      this.memberName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((String)value);
      }
      break;

    case POINT_DISCOUNT:
      if (value == null) {
        unsetPointDiscount();
      } else {
        setPointDiscount((Double)value);
      }
      break;

    case SUB_TOTAL_MONEY:
      if (value == null) {
        unsetSubTotalMoney();
      } else {
        setSubTotalMoney((Double)value);
      }
      break;

    case BUSINESS_TYPE:
      if (value == null) {
        unsetBusinessType();
      } else {
        setBusinessType((String)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((String)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((String)value);
      }
      break;

    case PRODUCT_INFOS:
      if (value == null) {
        unsetProductInfos();
      } else {
        setProductInfos((List<ProductInfoVo>)value);
      }
      break;

    case RESULT_VO:
      if (value == null) {
        unsetResultVo();
      } else {
        setResultVo((com.froad.thrift.vo.ResultVo)value);
      }
      break;

    case DELIVERY_CORP_NAME:
      if (value == null) {
        unsetDeliveryCorpName();
      } else {
        setDeliveryCorpName((String)value);
      }
      break;

    case TRACKING_NO:
      if (value == null) {
        unsetTrackingNo();
      } else {
        setTrackingNo((String)value);
      }
      break;

    case SHIPPING_TIME:
      if (value == null) {
        unsetShippingTime();
      } else {
        setShippingTime((Long)value);
      }
      break;

    case REFUND_STATE:
      if (value == null) {
        unsetRefundState();
      } else {
        setRefundState((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case PAYMENT_TIME:
      if (value == null) {
        unsetPaymentTime();
      } else {
        setPaymentTime((Long)value);
      }
      break;

    case TICKET_TIME:
      if (value == null) {
        unsetTicketTime();
      } else {
        setTicketTime((Long)value);
      }
      break;

    case CLOSE_TYPE:
      if (value == null) {
        unsetCloseType();
      } else {
        setCloseType((String)value);
      }
      break;

    case DELIVER_INFO_VO:
      if (value == null) {
        unsetDeliverInfoVo();
      } else {
        setDeliverInfoVo((DeliverInfoVo)value);
      }
      break;

    case ORG_NAMES:
      if (value == null) {
        unsetOrgNames();
      } else {
        setOrgNames((String)value);
      }
      break;

    case CLOSE_REASON:
      if (value == null) {
        unsetCloseReason();
      } else {
        setCloseReason((String)value);
      }
      break;

    case SETTLE_STATE:
      if (value == null) {
        unsetSettleState();
      } else {
        setSettleState((String)value);
      }
      break;

    case TAKE_TIME:
      if (value == null) {
        unsetTakeTime();
      } else {
        setTakeTime((Long)value);
      }
      break;

    case TAKE_CODE:
      if (value == null) {
        unsetTakeCode();
      } else {
        setTakeCode((String)value);
      }
      break;

    case DELIVERY_OPTION:
      if (value == null) {
        unsetDeliveryOption();
      } else {
        setDeliveryOption((String)value);
      }
      break;

    case REFUND_APPLY_TIME:
      if (value == null) {
        unsetRefundApplyTime();
      } else {
        setRefundApplyTime((Long)value);
      }
      break;

    case REFUND_SUCCESS_TIME:
      if (value == null) {
        unsetRefundSuccessTime();
      } else {
        setRefundSuccessTime((Long)value);
      }
      break;

    case CONFIRM_RECEIVE_TIME:
      if (value == null) {
        unsetConfirmReceiveTime();
      } else {
        setConfirmReceiveTime((Long)value);
      }
      break;

    case SETTLE_TIME:
      if (value == null) {
        unsetSettleTime();
      } else {
        setSettleTime((Long)value);
      }
      break;

    case EXPIRE_TIME:
      if (value == null) {
        unsetExpireTime();
      } else {
        setExpireTime((Long)value);
      }
      break;

    case MERCHANT_USER_ID:
      if (value == null) {
        unsetMerchantUserId();
      } else {
        setMerchantUserId((Long)value);
      }
      break;

    case REAL_TOTAL_MONEY:
      if (value == null) {
        unsetRealTotalMoney();
      } else {
        setRealTotalMoney((Double)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case SUB_ORDER_ID:
      if (value == null) {
        unsetSubOrderId();
      } else {
        setSubOrderId((String)value);
      }
      break;

    case TAKE_NUMBER:
      if (value == null) {
        unsetTakeNumber();
      } else {
        setTakeNumber((Integer)value);
      }
      break;

    case MERCHANT_USER_NAME:
      if (value == null) {
        unsetMerchantUserName();
      } else {
        setMerchantUserName((String)value);
      }
      break;

    case SUB_TOTAL_MONEY_ZITI:
      if (value == null) {
        unsetSubTotalMoneyZiti();
      } else {
        setSubTotalMoneyZiti((Double)value);
      }
      break;

    case SUB_TOTAL_MONEY_PEISONG:
      if (value == null) {
        unsetSubTotalMoneyPeisong();
      } else {
        setSubTotalMoneyPeisong((Double)value);
      }
      break;

    case DELIVERY_MONEY:
      if (value == null) {
        unsetDeliveryMoney();
      } else {
        setDeliveryMoney((Double)value);
      }
      break;

    case TOTAL_CUT_MONEY:
      if (value == null) {
        unsetTotalCutMoney();
      } else {
        setTotalCutMoney((Double)value);
      }
      break;

    case TOTAL_CASH:
      if (value == null) {
        unsetTotalCash();
      } else {
        setTotalCash((Double)value);
      }
      break;

    case POINT_MONEY:
      if (value == null) {
        unsetPointMoney();
      } else {
        setPointMoney((Double)value);
      }
      break;

    case CONSUME_MONEY:
      if (value == null) {
        unsetConsumeMoney();
      } else {
        setConsumeMoney((Double)value);
      }
      break;

    case DISCOUNT_MONEY:
      if (value == null) {
        unsetDiscountMoney();
      } else {
        setDiscountMoney((Double)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case DELIVERY_STATE:
      if (value == null) {
        unsetDeliveryState();
      } else {
        setDeliveryState((String)value);
      }
      break;

    case MEMBER_NAME:
      if (value == null) {
        unsetMemberName();
      } else {
        setMemberName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case ORDER_STATUS:
      return getOrderStatus();

    case POINT_DISCOUNT:
      return Double.valueOf(getPointDiscount());

    case SUB_TOTAL_MONEY:
      return Double.valueOf(getSubTotalMoney());

    case BUSINESS_TYPE:
      return getBusinessType();

    case OUTLET_ID:
      return getOutletId();

    case OUTLET_NAME:
      return getOutletName();

    case PRODUCT_INFOS:
      return getProductInfos();

    case RESULT_VO:
      return getResultVo();

    case DELIVERY_CORP_NAME:
      return getDeliveryCorpName();

    case TRACKING_NO:
      return getTrackingNo();

    case SHIPPING_TIME:
      return Long.valueOf(getShippingTime());

    case REFUND_STATE:
      return getRefundState();

    case MERCHANT_ID:
      return getMerchantId();

    case MERCHANT_NAME:
      return getMerchantName();

    case PAYMENT_TIME:
      return Long.valueOf(getPaymentTime());

    case TICKET_TIME:
      return Long.valueOf(getTicketTime());

    case CLOSE_TYPE:
      return getCloseType();

    case DELIVER_INFO_VO:
      return getDeliverInfoVo();

    case ORG_NAMES:
      return getOrgNames();

    case CLOSE_REASON:
      return getCloseReason();

    case SETTLE_STATE:
      return getSettleState();

    case TAKE_TIME:
      return Long.valueOf(getTakeTime());

    case TAKE_CODE:
      return getTakeCode();

    case DELIVERY_OPTION:
      return getDeliveryOption();

    case REFUND_APPLY_TIME:
      return Long.valueOf(getRefundApplyTime());

    case REFUND_SUCCESS_TIME:
      return Long.valueOf(getRefundSuccessTime());

    case CONFIRM_RECEIVE_TIME:
      return Long.valueOf(getConfirmReceiveTime());

    case SETTLE_TIME:
      return Long.valueOf(getSettleTime());

    case EXPIRE_TIME:
      return Long.valueOf(getExpireTime());

    case MERCHANT_USER_ID:
      return Long.valueOf(getMerchantUserId());

    case REAL_TOTAL_MONEY:
      return Double.valueOf(getRealTotalMoney());

    case ORDER_ID:
      return getOrderId();

    case SUB_ORDER_ID:
      return getSubOrderId();

    case TAKE_NUMBER:
      return Integer.valueOf(getTakeNumber());

    case MERCHANT_USER_NAME:
      return getMerchantUserName();

    case SUB_TOTAL_MONEY_ZITI:
      return Double.valueOf(getSubTotalMoneyZiti());

    case SUB_TOTAL_MONEY_PEISONG:
      return Double.valueOf(getSubTotalMoneyPeisong());

    case DELIVERY_MONEY:
      return Double.valueOf(getDeliveryMoney());

    case TOTAL_CUT_MONEY:
      return Double.valueOf(getTotalCutMoney());

    case TOTAL_CASH:
      return Double.valueOf(getTotalCash());

    case POINT_MONEY:
      return Double.valueOf(getPointMoney());

    case CONSUME_MONEY:
      return Double.valueOf(getConsumeMoney());

    case DISCOUNT_MONEY:
      return Double.valueOf(getDiscountMoney());

    case PHONE:
      return getPhone();

    case DELIVERY_STATE:
      return getDeliveryState();

    case MEMBER_NAME:
      return getMemberName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CREATE_TIME:
      return isSetCreateTime();
    case ORDER_STATUS:
      return isSetOrderStatus();
    case POINT_DISCOUNT:
      return isSetPointDiscount();
    case SUB_TOTAL_MONEY:
      return isSetSubTotalMoney();
    case BUSINESS_TYPE:
      return isSetBusinessType();
    case OUTLET_ID:
      return isSetOutletId();
    case OUTLET_NAME:
      return isSetOutletName();
    case PRODUCT_INFOS:
      return isSetProductInfos();
    case RESULT_VO:
      return isSetResultVo();
    case DELIVERY_CORP_NAME:
      return isSetDeliveryCorpName();
    case TRACKING_NO:
      return isSetTrackingNo();
    case SHIPPING_TIME:
      return isSetShippingTime();
    case REFUND_STATE:
      return isSetRefundState();
    case MERCHANT_ID:
      return isSetMerchantId();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case PAYMENT_TIME:
      return isSetPaymentTime();
    case TICKET_TIME:
      return isSetTicketTime();
    case CLOSE_TYPE:
      return isSetCloseType();
    case DELIVER_INFO_VO:
      return isSetDeliverInfoVo();
    case ORG_NAMES:
      return isSetOrgNames();
    case CLOSE_REASON:
      return isSetCloseReason();
    case SETTLE_STATE:
      return isSetSettleState();
    case TAKE_TIME:
      return isSetTakeTime();
    case TAKE_CODE:
      return isSetTakeCode();
    case DELIVERY_OPTION:
      return isSetDeliveryOption();
    case REFUND_APPLY_TIME:
      return isSetRefundApplyTime();
    case REFUND_SUCCESS_TIME:
      return isSetRefundSuccessTime();
    case CONFIRM_RECEIVE_TIME:
      return isSetConfirmReceiveTime();
    case SETTLE_TIME:
      return isSetSettleTime();
    case EXPIRE_TIME:
      return isSetExpireTime();
    case MERCHANT_USER_ID:
      return isSetMerchantUserId();
    case REAL_TOTAL_MONEY:
      return isSetRealTotalMoney();
    case ORDER_ID:
      return isSetOrderId();
    case SUB_ORDER_ID:
      return isSetSubOrderId();
    case TAKE_NUMBER:
      return isSetTakeNumber();
    case MERCHANT_USER_NAME:
      return isSetMerchantUserName();
    case SUB_TOTAL_MONEY_ZITI:
      return isSetSubTotalMoneyZiti();
    case SUB_TOTAL_MONEY_PEISONG:
      return isSetSubTotalMoneyPeisong();
    case DELIVERY_MONEY:
      return isSetDeliveryMoney();
    case TOTAL_CUT_MONEY:
      return isSetTotalCutMoney();
    case TOTAL_CASH:
      return isSetTotalCash();
    case POINT_MONEY:
      return isSetPointMoney();
    case CONSUME_MONEY:
      return isSetConsumeMoney();
    case DISCOUNT_MONEY:
      return isSetDiscountMoney();
    case PHONE:
      return isSetPhone();
    case DELIVERY_STATE:
      return isSetDeliveryState();
    case MEMBER_NAME:
      return isSetMemberName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetOrderDetailByBankManageVoRes)
      return this.equals((GetOrderDetailByBankManageVoRes)that);
    return false;
  }

  public boolean equals(GetOrderDetailByBankManageVoRes that) {
    if (that == null)
      return false;

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_orderStatus = true && this.isSetOrderStatus();
    boolean that_present_orderStatus = true && that.isSetOrderStatus();
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (!this.orderStatus.equals(that.orderStatus))
        return false;
    }

    boolean this_present_pointDiscount = true;
    boolean that_present_pointDiscount = true;
    if (this_present_pointDiscount || that_present_pointDiscount) {
      if (!(this_present_pointDiscount && that_present_pointDiscount))
        return false;
      if (this.pointDiscount != that.pointDiscount)
        return false;
    }

    boolean this_present_subTotalMoney = true;
    boolean that_present_subTotalMoney = true;
    if (this_present_subTotalMoney || that_present_subTotalMoney) {
      if (!(this_present_subTotalMoney && that_present_subTotalMoney))
        return false;
      if (this.subTotalMoney != that.subTotalMoney)
        return false;
    }

    boolean this_present_businessType = true && this.isSetBusinessType();
    boolean that_present_businessType = true && that.isSetBusinessType();
    if (this_present_businessType || that_present_businessType) {
      if (!(this_present_businessType && that_present_businessType))
        return false;
      if (!this.businessType.equals(that.businessType))
        return false;
    }

    boolean this_present_outletId = true && this.isSetOutletId();
    boolean that_present_outletId = true && that.isSetOutletId();
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (!this.outletId.equals(that.outletId))
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    boolean this_present_productInfos = true && this.isSetProductInfos();
    boolean that_present_productInfos = true && that.isSetProductInfos();
    if (this_present_productInfos || that_present_productInfos) {
      if (!(this_present_productInfos && that_present_productInfos))
        return false;
      if (!this.productInfos.equals(that.productInfos))
        return false;
    }

    boolean this_present_resultVo = true && this.isSetResultVo();
    boolean that_present_resultVo = true && that.isSetResultVo();
    if (this_present_resultVo || that_present_resultVo) {
      if (!(this_present_resultVo && that_present_resultVo))
        return false;
      if (!this.resultVo.equals(that.resultVo))
        return false;
    }

    boolean this_present_deliveryCorpName = true && this.isSetDeliveryCorpName();
    boolean that_present_deliveryCorpName = true && that.isSetDeliveryCorpName();
    if (this_present_deliveryCorpName || that_present_deliveryCorpName) {
      if (!(this_present_deliveryCorpName && that_present_deliveryCorpName))
        return false;
      if (!this.deliveryCorpName.equals(that.deliveryCorpName))
        return false;
    }

    boolean this_present_trackingNo = true && this.isSetTrackingNo();
    boolean that_present_trackingNo = true && that.isSetTrackingNo();
    if (this_present_trackingNo || that_present_trackingNo) {
      if (!(this_present_trackingNo && that_present_trackingNo))
        return false;
      if (!this.trackingNo.equals(that.trackingNo))
        return false;
    }

    boolean this_present_shippingTime = true;
    boolean that_present_shippingTime = true;
    if (this_present_shippingTime || that_present_shippingTime) {
      if (!(this_present_shippingTime && that_present_shippingTime))
        return false;
      if (this.shippingTime != that.shippingTime)
        return false;
    }

    boolean this_present_refundState = true && this.isSetRefundState();
    boolean that_present_refundState = true && that.isSetRefundState();
    if (this_present_refundState || that_present_refundState) {
      if (!(this_present_refundState && that_present_refundState))
        return false;
      if (!this.refundState.equals(that.refundState))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_paymentTime = true;
    boolean that_present_paymentTime = true;
    if (this_present_paymentTime || that_present_paymentTime) {
      if (!(this_present_paymentTime && that_present_paymentTime))
        return false;
      if (this.paymentTime != that.paymentTime)
        return false;
    }

    boolean this_present_ticketTime = true;
    boolean that_present_ticketTime = true;
    if (this_present_ticketTime || that_present_ticketTime) {
      if (!(this_present_ticketTime && that_present_ticketTime))
        return false;
      if (this.ticketTime != that.ticketTime)
        return false;
    }

    boolean this_present_closeType = true && this.isSetCloseType();
    boolean that_present_closeType = true && that.isSetCloseType();
    if (this_present_closeType || that_present_closeType) {
      if (!(this_present_closeType && that_present_closeType))
        return false;
      if (!this.closeType.equals(that.closeType))
        return false;
    }

    boolean this_present_deliverInfoVo = true && this.isSetDeliverInfoVo();
    boolean that_present_deliverInfoVo = true && that.isSetDeliverInfoVo();
    if (this_present_deliverInfoVo || that_present_deliverInfoVo) {
      if (!(this_present_deliverInfoVo && that_present_deliverInfoVo))
        return false;
      if (!this.deliverInfoVo.equals(that.deliverInfoVo))
        return false;
    }

    boolean this_present_orgNames = true && this.isSetOrgNames();
    boolean that_present_orgNames = true && that.isSetOrgNames();
    if (this_present_orgNames || that_present_orgNames) {
      if (!(this_present_orgNames && that_present_orgNames))
        return false;
      if (!this.orgNames.equals(that.orgNames))
        return false;
    }

    boolean this_present_closeReason = true && this.isSetCloseReason();
    boolean that_present_closeReason = true && that.isSetCloseReason();
    if (this_present_closeReason || that_present_closeReason) {
      if (!(this_present_closeReason && that_present_closeReason))
        return false;
      if (!this.closeReason.equals(that.closeReason))
        return false;
    }

    boolean this_present_settleState = true && this.isSetSettleState();
    boolean that_present_settleState = true && that.isSetSettleState();
    if (this_present_settleState || that_present_settleState) {
      if (!(this_present_settleState && that_present_settleState))
        return false;
      if (!this.settleState.equals(that.settleState))
        return false;
    }

    boolean this_present_takeTime = true;
    boolean that_present_takeTime = true;
    if (this_present_takeTime || that_present_takeTime) {
      if (!(this_present_takeTime && that_present_takeTime))
        return false;
      if (this.takeTime != that.takeTime)
        return false;
    }

    boolean this_present_takeCode = true && this.isSetTakeCode();
    boolean that_present_takeCode = true && that.isSetTakeCode();
    if (this_present_takeCode || that_present_takeCode) {
      if (!(this_present_takeCode && that_present_takeCode))
        return false;
      if (!this.takeCode.equals(that.takeCode))
        return false;
    }

    boolean this_present_deliveryOption = true && this.isSetDeliveryOption();
    boolean that_present_deliveryOption = true && that.isSetDeliveryOption();
    if (this_present_deliveryOption || that_present_deliveryOption) {
      if (!(this_present_deliveryOption && that_present_deliveryOption))
        return false;
      if (!this.deliveryOption.equals(that.deliveryOption))
        return false;
    }

    boolean this_present_refundApplyTime = true;
    boolean that_present_refundApplyTime = true;
    if (this_present_refundApplyTime || that_present_refundApplyTime) {
      if (!(this_present_refundApplyTime && that_present_refundApplyTime))
        return false;
      if (this.refundApplyTime != that.refundApplyTime)
        return false;
    }

    boolean this_present_refundSuccessTime = true;
    boolean that_present_refundSuccessTime = true;
    if (this_present_refundSuccessTime || that_present_refundSuccessTime) {
      if (!(this_present_refundSuccessTime && that_present_refundSuccessTime))
        return false;
      if (this.refundSuccessTime != that.refundSuccessTime)
        return false;
    }

    boolean this_present_confirmReceiveTime = true;
    boolean that_present_confirmReceiveTime = true;
    if (this_present_confirmReceiveTime || that_present_confirmReceiveTime) {
      if (!(this_present_confirmReceiveTime && that_present_confirmReceiveTime))
        return false;
      if (this.confirmReceiveTime != that.confirmReceiveTime)
        return false;
    }

    boolean this_present_settleTime = true;
    boolean that_present_settleTime = true;
    if (this_present_settleTime || that_present_settleTime) {
      if (!(this_present_settleTime && that_present_settleTime))
        return false;
      if (this.settleTime != that.settleTime)
        return false;
    }

    boolean this_present_expireTime = true;
    boolean that_present_expireTime = true;
    if (this_present_expireTime || that_present_expireTime) {
      if (!(this_present_expireTime && that_present_expireTime))
        return false;
      if (this.expireTime != that.expireTime)
        return false;
    }

    boolean this_present_merchantUserId = true;
    boolean that_present_merchantUserId = true;
    if (this_present_merchantUserId || that_present_merchantUserId) {
      if (!(this_present_merchantUserId && that_present_merchantUserId))
        return false;
      if (this.merchantUserId != that.merchantUserId)
        return false;
    }

    boolean this_present_realTotalMoney = true;
    boolean that_present_realTotalMoney = true;
    if (this_present_realTotalMoney || that_present_realTotalMoney) {
      if (!(this_present_realTotalMoney && that_present_realTotalMoney))
        return false;
      if (this.realTotalMoney != that.realTotalMoney)
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_subOrderId = true && this.isSetSubOrderId();
    boolean that_present_subOrderId = true && that.isSetSubOrderId();
    if (this_present_subOrderId || that_present_subOrderId) {
      if (!(this_present_subOrderId && that_present_subOrderId))
        return false;
      if (!this.subOrderId.equals(that.subOrderId))
        return false;
    }

    boolean this_present_takeNumber = true;
    boolean that_present_takeNumber = true;
    if (this_present_takeNumber || that_present_takeNumber) {
      if (!(this_present_takeNumber && that_present_takeNumber))
        return false;
      if (this.takeNumber != that.takeNumber)
        return false;
    }

    boolean this_present_merchantUserName = true && this.isSetMerchantUserName();
    boolean that_present_merchantUserName = true && that.isSetMerchantUserName();
    if (this_present_merchantUserName || that_present_merchantUserName) {
      if (!(this_present_merchantUserName && that_present_merchantUserName))
        return false;
      if (!this.merchantUserName.equals(that.merchantUserName))
        return false;
    }

    boolean this_present_subTotalMoneyZiti = true;
    boolean that_present_subTotalMoneyZiti = true;
    if (this_present_subTotalMoneyZiti || that_present_subTotalMoneyZiti) {
      if (!(this_present_subTotalMoneyZiti && that_present_subTotalMoneyZiti))
        return false;
      if (this.subTotalMoneyZiti != that.subTotalMoneyZiti)
        return false;
    }

    boolean this_present_subTotalMoneyPeisong = true;
    boolean that_present_subTotalMoneyPeisong = true;
    if (this_present_subTotalMoneyPeisong || that_present_subTotalMoneyPeisong) {
      if (!(this_present_subTotalMoneyPeisong && that_present_subTotalMoneyPeisong))
        return false;
      if (this.subTotalMoneyPeisong != that.subTotalMoneyPeisong)
        return false;
    }

    boolean this_present_deliveryMoney = true;
    boolean that_present_deliveryMoney = true;
    if (this_present_deliveryMoney || that_present_deliveryMoney) {
      if (!(this_present_deliveryMoney && that_present_deliveryMoney))
        return false;
      if (this.deliveryMoney != that.deliveryMoney)
        return false;
    }

    boolean this_present_totalCutMoney = true;
    boolean that_present_totalCutMoney = true;
    if (this_present_totalCutMoney || that_present_totalCutMoney) {
      if (!(this_present_totalCutMoney && that_present_totalCutMoney))
        return false;
      if (this.totalCutMoney != that.totalCutMoney)
        return false;
    }

    boolean this_present_totalCash = true;
    boolean that_present_totalCash = true;
    if (this_present_totalCash || that_present_totalCash) {
      if (!(this_present_totalCash && that_present_totalCash))
        return false;
      if (this.totalCash != that.totalCash)
        return false;
    }

    boolean this_present_pointMoney = true;
    boolean that_present_pointMoney = true;
    if (this_present_pointMoney || that_present_pointMoney) {
      if (!(this_present_pointMoney && that_present_pointMoney))
        return false;
      if (this.pointMoney != that.pointMoney)
        return false;
    }

    boolean this_present_consumeMoney = true;
    boolean that_present_consumeMoney = true;
    if (this_present_consumeMoney || that_present_consumeMoney) {
      if (!(this_present_consumeMoney && that_present_consumeMoney))
        return false;
      if (this.consumeMoney != that.consumeMoney)
        return false;
    }

    boolean this_present_discountMoney = true;
    boolean that_present_discountMoney = true;
    if (this_present_discountMoney || that_present_discountMoney) {
      if (!(this_present_discountMoney && that_present_discountMoney))
        return false;
      if (this.discountMoney != that.discountMoney)
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_deliveryState = true && this.isSetDeliveryState();
    boolean that_present_deliveryState = true && that.isSetDeliveryState();
    if (this_present_deliveryState || that_present_deliveryState) {
      if (!(this_present_deliveryState && that_present_deliveryState))
        return false;
      if (!this.deliveryState.equals(that.deliveryState))
        return false;
    }

    boolean this_present_memberName = true && this.isSetMemberName();
    boolean that_present_memberName = true && that.isSetMemberName();
    if (this_present_memberName || that_present_memberName) {
      if (!(this_present_memberName && that_present_memberName))
        return false;
      if (!this.memberName.equals(that.memberName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_orderStatus = true && (isSetOrderStatus());
    list.add(present_orderStatus);
    if (present_orderStatus)
      list.add(orderStatus);

    boolean present_pointDiscount = true;
    list.add(present_pointDiscount);
    if (present_pointDiscount)
      list.add(pointDiscount);

    boolean present_subTotalMoney = true;
    list.add(present_subTotalMoney);
    if (present_subTotalMoney)
      list.add(subTotalMoney);

    boolean present_businessType = true && (isSetBusinessType());
    list.add(present_businessType);
    if (present_businessType)
      list.add(businessType);

    boolean present_outletId = true && (isSetOutletId());
    list.add(present_outletId);
    if (present_outletId)
      list.add(outletId);

    boolean present_outletName = true && (isSetOutletName());
    list.add(present_outletName);
    if (present_outletName)
      list.add(outletName);

    boolean present_productInfos = true && (isSetProductInfos());
    list.add(present_productInfos);
    if (present_productInfos)
      list.add(productInfos);

    boolean present_resultVo = true && (isSetResultVo());
    list.add(present_resultVo);
    if (present_resultVo)
      list.add(resultVo);

    boolean present_deliveryCorpName = true && (isSetDeliveryCorpName());
    list.add(present_deliveryCorpName);
    if (present_deliveryCorpName)
      list.add(deliveryCorpName);

    boolean present_trackingNo = true && (isSetTrackingNo());
    list.add(present_trackingNo);
    if (present_trackingNo)
      list.add(trackingNo);

    boolean present_shippingTime = true;
    list.add(present_shippingTime);
    if (present_shippingTime)
      list.add(shippingTime);

    boolean present_refundState = true && (isSetRefundState());
    list.add(present_refundState);
    if (present_refundState)
      list.add(refundState);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_paymentTime = true;
    list.add(present_paymentTime);
    if (present_paymentTime)
      list.add(paymentTime);

    boolean present_ticketTime = true;
    list.add(present_ticketTime);
    if (present_ticketTime)
      list.add(ticketTime);

    boolean present_closeType = true && (isSetCloseType());
    list.add(present_closeType);
    if (present_closeType)
      list.add(closeType);

    boolean present_deliverInfoVo = true && (isSetDeliverInfoVo());
    list.add(present_deliverInfoVo);
    if (present_deliverInfoVo)
      list.add(deliverInfoVo);

    boolean present_orgNames = true && (isSetOrgNames());
    list.add(present_orgNames);
    if (present_orgNames)
      list.add(orgNames);

    boolean present_closeReason = true && (isSetCloseReason());
    list.add(present_closeReason);
    if (present_closeReason)
      list.add(closeReason);

    boolean present_settleState = true && (isSetSettleState());
    list.add(present_settleState);
    if (present_settleState)
      list.add(settleState);

    boolean present_takeTime = true;
    list.add(present_takeTime);
    if (present_takeTime)
      list.add(takeTime);

    boolean present_takeCode = true && (isSetTakeCode());
    list.add(present_takeCode);
    if (present_takeCode)
      list.add(takeCode);

    boolean present_deliveryOption = true && (isSetDeliveryOption());
    list.add(present_deliveryOption);
    if (present_deliveryOption)
      list.add(deliveryOption);

    boolean present_refundApplyTime = true;
    list.add(present_refundApplyTime);
    if (present_refundApplyTime)
      list.add(refundApplyTime);

    boolean present_refundSuccessTime = true;
    list.add(present_refundSuccessTime);
    if (present_refundSuccessTime)
      list.add(refundSuccessTime);

    boolean present_confirmReceiveTime = true;
    list.add(present_confirmReceiveTime);
    if (present_confirmReceiveTime)
      list.add(confirmReceiveTime);

    boolean present_settleTime = true;
    list.add(present_settleTime);
    if (present_settleTime)
      list.add(settleTime);

    boolean present_expireTime = true;
    list.add(present_expireTime);
    if (present_expireTime)
      list.add(expireTime);

    boolean present_merchantUserId = true;
    list.add(present_merchantUserId);
    if (present_merchantUserId)
      list.add(merchantUserId);

    boolean present_realTotalMoney = true;
    list.add(present_realTotalMoney);
    if (present_realTotalMoney)
      list.add(realTotalMoney);

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_subOrderId = true && (isSetSubOrderId());
    list.add(present_subOrderId);
    if (present_subOrderId)
      list.add(subOrderId);

    boolean present_takeNumber = true;
    list.add(present_takeNumber);
    if (present_takeNumber)
      list.add(takeNumber);

    boolean present_merchantUserName = true && (isSetMerchantUserName());
    list.add(present_merchantUserName);
    if (present_merchantUserName)
      list.add(merchantUserName);

    boolean present_subTotalMoneyZiti = true;
    list.add(present_subTotalMoneyZiti);
    if (present_subTotalMoneyZiti)
      list.add(subTotalMoneyZiti);

    boolean present_subTotalMoneyPeisong = true;
    list.add(present_subTotalMoneyPeisong);
    if (present_subTotalMoneyPeisong)
      list.add(subTotalMoneyPeisong);

    boolean present_deliveryMoney = true;
    list.add(present_deliveryMoney);
    if (present_deliveryMoney)
      list.add(deliveryMoney);

    boolean present_totalCutMoney = true;
    list.add(present_totalCutMoney);
    if (present_totalCutMoney)
      list.add(totalCutMoney);

    boolean present_totalCash = true;
    list.add(present_totalCash);
    if (present_totalCash)
      list.add(totalCash);

    boolean present_pointMoney = true;
    list.add(present_pointMoney);
    if (present_pointMoney)
      list.add(pointMoney);

    boolean present_consumeMoney = true;
    list.add(present_consumeMoney);
    if (present_consumeMoney)
      list.add(consumeMoney);

    boolean present_discountMoney = true;
    list.add(present_discountMoney);
    if (present_discountMoney)
      list.add(discountMoney);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_deliveryState = true && (isSetDeliveryState());
    list.add(present_deliveryState);
    if (present_deliveryState)
      list.add(deliveryState);

    boolean present_memberName = true && (isSetMemberName());
    list.add(present_memberName);
    if (present_memberName)
      list.add(memberName);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetOrderDetailByBankManageVoRes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointDiscount()).compareTo(other.isSetPointDiscount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointDiscount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointDiscount, other.pointDiscount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubTotalMoney()).compareTo(other.isSetSubTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subTotalMoney, other.subTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessType()).compareTo(other.isSetBusinessType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessType, other.businessType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductInfos()).compareTo(other.isSetProductInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productInfos, other.productInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultVo()).compareTo(other.isSetResultVo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultVo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultVo, other.resultVo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryCorpName()).compareTo(other.isSetDeliveryCorpName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryCorpName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryCorpName, other.deliveryCorpName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrackingNo()).compareTo(other.isSetTrackingNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrackingNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trackingNo, other.trackingNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShippingTime()).compareTo(other.isSetShippingTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShippingTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shippingTime, other.shippingTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundState()).compareTo(other.isSetRefundState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundState, other.refundState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentTime()).compareTo(other.isSetPaymentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentTime, other.paymentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketTime()).compareTo(other.isSetTicketTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTime, other.ticketTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseType()).compareTo(other.isSetCloseType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeType, other.closeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliverInfoVo()).compareTo(other.isSetDeliverInfoVo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliverInfoVo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliverInfoVo, other.deliverInfoVo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgNames()).compareTo(other.isSetOrgNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgNames, other.orgNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseReason()).compareTo(other.isSetCloseReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeReason, other.closeReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleState()).compareTo(other.isSetSettleState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleState, other.settleState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTakeTime()).compareTo(other.isSetTakeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTakeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.takeTime, other.takeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTakeCode()).compareTo(other.isSetTakeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTakeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.takeCode, other.takeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryOption()).compareTo(other.isSetDeliveryOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryOption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryOption, other.deliveryOption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundApplyTime()).compareTo(other.isSetRefundApplyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundApplyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundApplyTime, other.refundApplyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundSuccessTime()).compareTo(other.isSetRefundSuccessTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundSuccessTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundSuccessTime, other.refundSuccessTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmReceiveTime()).compareTo(other.isSetConfirmReceiveTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmReceiveTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmReceiveTime, other.confirmReceiveTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettleTime()).compareTo(other.isSetSettleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settleTime, other.settleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireTime()).compareTo(other.isSetExpireTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, other.expireTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantUserId()).compareTo(other.isSetMerchantUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantUserId, other.merchantUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealTotalMoney()).compareTo(other.isSetRealTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realTotalMoney, other.realTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubOrderId()).compareTo(other.isSetSubOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subOrderId, other.subOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTakeNumber()).compareTo(other.isSetTakeNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTakeNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.takeNumber, other.takeNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantUserName()).compareTo(other.isSetMerchantUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantUserName, other.merchantUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubTotalMoneyZiti()).compareTo(other.isSetSubTotalMoneyZiti());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubTotalMoneyZiti()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subTotalMoneyZiti, other.subTotalMoneyZiti);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubTotalMoneyPeisong()).compareTo(other.isSetSubTotalMoneyPeisong());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubTotalMoneyPeisong()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subTotalMoneyPeisong, other.subTotalMoneyPeisong);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryMoney()).compareTo(other.isSetDeliveryMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryMoney, other.deliveryMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCutMoney()).compareTo(other.isSetTotalCutMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCutMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCutMoney, other.totalCutMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCash()).compareTo(other.isSetTotalCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCash, other.totalCash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointMoney()).compareTo(other.isSetPointMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointMoney, other.pointMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumeMoney()).compareTo(other.isSetConsumeMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumeMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumeMoney, other.consumeMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscountMoney()).compareTo(other.isSetDiscountMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscountMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discountMoney, other.discountMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryState()).compareTo(other.isSetDeliveryState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryState, other.deliveryState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberName()).compareTo(other.isSetMemberName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberName, other.memberName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetOrderDetailByBankManageVoRes(");
    boolean first = true;

    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderStatus:");
    if (this.orderStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.orderStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pointDiscount:");
    sb.append(this.pointDiscount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subTotalMoney:");
    sb.append(this.subTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessType:");
    if (this.businessType == null) {
      sb.append("null");
    } else {
      sb.append(this.businessType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletId:");
    if (this.outletId == null) {
      sb.append("null");
    } else {
      sb.append(this.outletId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletName:");
    if (this.outletName == null) {
      sb.append("null");
    } else {
      sb.append(this.outletName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productInfos:");
    if (this.productInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.productInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultVo:");
    if (this.resultVo == null) {
      sb.append("null");
    } else {
      sb.append(this.resultVo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryCorpName:");
    if (this.deliveryCorpName == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryCorpName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trackingNo:");
    if (this.trackingNo == null) {
      sb.append("null");
    } else {
      sb.append(this.trackingNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shippingTime:");
    sb.append(this.shippingTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundState:");
    if (this.refundState == null) {
      sb.append("null");
    } else {
      sb.append(this.refundState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantName:");
    if (this.merchantName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentTime:");
    sb.append(this.paymentTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketTime:");
    sb.append(this.ticketTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("closeType:");
    if (this.closeType == null) {
      sb.append("null");
    } else {
      sb.append(this.closeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliverInfoVo:");
    if (this.deliverInfoVo == null) {
      sb.append("null");
    } else {
      sb.append(this.deliverInfoVo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgNames:");
    if (this.orgNames == null) {
      sb.append("null");
    } else {
      sb.append(this.orgNames);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("closeReason:");
    if (this.closeReason == null) {
      sb.append("null");
    } else {
      sb.append(this.closeReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleState:");
    if (this.settleState == null) {
      sb.append("null");
    } else {
      sb.append(this.settleState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("takeTime:");
    sb.append(this.takeTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("takeCode:");
    if (this.takeCode == null) {
      sb.append("null");
    } else {
      sb.append(this.takeCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryOption:");
    if (this.deliveryOption == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryOption);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundApplyTime:");
    sb.append(this.refundApplyTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundSuccessTime:");
    sb.append(this.refundSuccessTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmReceiveTime:");
    sb.append(this.confirmReceiveTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("settleTime:");
    sb.append(this.settleTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireTime:");
    sb.append(this.expireTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantUserId:");
    sb.append(this.merchantUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realTotalMoney:");
    sb.append(this.realTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subOrderId:");
    if (this.subOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.subOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("takeNumber:");
    sb.append(this.takeNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantUserName:");
    if (this.merchantUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subTotalMoneyZiti:");
    sb.append(this.subTotalMoneyZiti);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subTotalMoneyPeisong:");
    sb.append(this.subTotalMoneyPeisong);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryMoney:");
    sb.append(this.deliveryMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCutMoney:");
    sb.append(this.totalCutMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCash:");
    sb.append(this.totalCash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pointMoney:");
    sb.append(this.pointMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("consumeMoney:");
    sb.append(this.consumeMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("discountMoney:");
    sb.append(this.discountMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deliveryState:");
    if (this.deliveryState == null) {
      sb.append("null");
    } else {
      sb.append(this.deliveryState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberName:");
    if (this.memberName == null) {
      sb.append("null");
    } else {
      sb.append(this.memberName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (resultVo != null) {
      resultVo.validate();
    }
    if (deliverInfoVo != null) {
      deliverInfoVo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetOrderDetailByBankManageVoResStandardSchemeFactory implements SchemeFactory {
    public GetOrderDetailByBankManageVoResStandardScheme getScheme() {
      return new GetOrderDetailByBankManageVoResStandardScheme();
    }
  }

  private static class GetOrderDetailByBankManageVoResStandardScheme extends StandardScheme<GetOrderDetailByBankManageVoRes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetOrderDetailByBankManageVoRes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderStatus = iprot.readString();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POINT_DISCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pointDiscount = iprot.readDouble();
              struct.setPointDiscountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUB_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.subTotalMoney = iprot.readDouble();
              struct.setSubTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUSINESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessType = iprot.readString();
              struct.setBusinessTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletId = iprot.readString();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRODUCT_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                struct.productInfos = new ArrayList<ProductInfoVo>(_list96.size);
                ProductInfoVo _elem97;
                for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                {
                  _elem97 = new ProductInfoVo();
                  _elem97.read(iprot);
                  struct.productInfos.add(_elem97);
                }
                iprot.readListEnd();
              }
              struct.setProductInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RESULT_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resultVo = new com.froad.thrift.vo.ResultVo();
              struct.resultVo.read(iprot);
              struct.setResultVoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DELIVERY_CORP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryCorpName = iprot.readString();
              struct.setDeliveryCorpNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TRACKING_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trackingNo = iprot.readString();
              struct.setTrackingNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SHIPPING_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.shippingTime = iprot.readI64();
              struct.setShippingTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REFUND_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundState = iprot.readString();
              struct.setRefundStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PAYMENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.paymentTime = iprot.readI64();
              struct.setPaymentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TICKET_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ticketTime = iprot.readI64();
              struct.setTicketTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CLOSE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.closeType = iprot.readString();
              struct.setCloseTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // DELIVER_INFO_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deliverInfoVo = new DeliverInfoVo();
              struct.deliverInfoVo.read(iprot);
              struct.setDeliverInfoVoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ORG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgNames = iprot.readString();
              struct.setOrgNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CLOSE_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.closeReason = iprot.readString();
              struct.setCloseReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SETTLE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.settleState = iprot.readString();
              struct.setSettleStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TAKE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.takeTime = iprot.readI64();
              struct.setTakeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TAKE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.takeCode = iprot.readString();
              struct.setTakeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // DELIVERY_OPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryOption = iprot.readString();
              struct.setDeliveryOptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // REFUND_APPLY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.refundApplyTime = iprot.readI64();
              struct.setRefundApplyTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // REFUND_SUCCESS_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.refundSuccessTime = iprot.readI64();
              struct.setRefundSuccessTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // CONFIRM_RECEIVE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.confirmReceiveTime = iprot.readI64();
              struct.setConfirmReceiveTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // SETTLE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.settleTime = iprot.readI64();
              struct.setSettleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // EXPIRE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expireTime = iprot.readI64();
              struct.setExpireTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // MERCHANT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.merchantUserId = iprot.readI64();
              struct.setMerchantUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // REAL_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realTotalMoney = iprot.readDouble();
              struct.setRealTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // SUB_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subOrderId = iprot.readString();
              struct.setSubOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // TAKE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.takeNumber = iprot.readI32();
              struct.setTakeNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // MERCHANT_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantUserName = iprot.readString();
              struct.setMerchantUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // SUB_TOTAL_MONEY_ZITI
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.subTotalMoneyZiti = iprot.readDouble();
              struct.setSubTotalMoneyZitiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // SUB_TOTAL_MONEY_PEISONG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.subTotalMoneyPeisong = iprot.readDouble();
              struct.setSubTotalMoneyPeisongIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // DELIVERY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deliveryMoney = iprot.readDouble();
              struct.setDeliveryMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // TOTAL_CUT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalCutMoney = iprot.readDouble();
              struct.setTotalCutMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // TOTAL_CASH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalCash = iprot.readDouble();
              struct.setTotalCashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // POINT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pointMoney = iprot.readDouble();
              struct.setPointMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // CONSUME_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.consumeMoney = iprot.readDouble();
              struct.setConsumeMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // DISCOUNT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.discountMoney = iprot.readDouble();
              struct.setDiscountMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // DELIVERY_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deliveryState = iprot.readString();
              struct.setDeliveryStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // MEMBER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberName = iprot.readString();
              struct.setMemberNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetOrderDetailByBankManageVoRes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      if (struct.orderStatus != null) {
        oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
        oprot.writeString(struct.orderStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POINT_DISCOUNT_FIELD_DESC);
      oprot.writeDouble(struct.pointDiscount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUB_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.subTotalMoney);
      oprot.writeFieldEnd();
      if (struct.businessType != null) {
        oprot.writeFieldBegin(BUSINESS_TYPE_FIELD_DESC);
        oprot.writeString(struct.businessType);
        oprot.writeFieldEnd();
      }
      if (struct.outletId != null) {
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeString(struct.outletId);
        oprot.writeFieldEnd();
      }
      if (struct.outletName != null) {
        oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
        oprot.writeString(struct.outletName);
        oprot.writeFieldEnd();
      }
      if (struct.productInfos != null) {
        oprot.writeFieldBegin(PRODUCT_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productInfos.size()));
          for (ProductInfoVo _iter99 : struct.productInfos)
          {
            _iter99.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.resultVo != null) {
        oprot.writeFieldBegin(RESULT_VO_FIELD_DESC);
        struct.resultVo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.deliveryCorpName != null) {
        oprot.writeFieldBegin(DELIVERY_CORP_NAME_FIELD_DESC);
        oprot.writeString(struct.deliveryCorpName);
        oprot.writeFieldEnd();
      }
      if (struct.trackingNo != null) {
        oprot.writeFieldBegin(TRACKING_NO_FIELD_DESC);
        oprot.writeString(struct.trackingNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHIPPING_TIME_FIELD_DESC);
      oprot.writeI64(struct.shippingTime);
      oprot.writeFieldEnd();
      if (struct.refundState != null) {
        oprot.writeFieldBegin(REFUND_STATE_FIELD_DESC);
        oprot.writeString(struct.refundState);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantName != null) {
        oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAYMENT_TIME_FIELD_DESC);
      oprot.writeI64(struct.paymentTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TICKET_TIME_FIELD_DESC);
      oprot.writeI64(struct.ticketTime);
      oprot.writeFieldEnd();
      if (struct.closeType != null) {
        oprot.writeFieldBegin(CLOSE_TYPE_FIELD_DESC);
        oprot.writeString(struct.closeType);
        oprot.writeFieldEnd();
      }
      if (struct.deliverInfoVo != null) {
        oprot.writeFieldBegin(DELIVER_INFO_VO_FIELD_DESC);
        struct.deliverInfoVo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.orgNames != null) {
        oprot.writeFieldBegin(ORG_NAMES_FIELD_DESC);
        oprot.writeString(struct.orgNames);
        oprot.writeFieldEnd();
      }
      if (struct.closeReason != null) {
        oprot.writeFieldBegin(CLOSE_REASON_FIELD_DESC);
        oprot.writeString(struct.closeReason);
        oprot.writeFieldEnd();
      }
      if (struct.settleState != null) {
        oprot.writeFieldBegin(SETTLE_STATE_FIELD_DESC);
        oprot.writeString(struct.settleState);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TAKE_TIME_FIELD_DESC);
      oprot.writeI64(struct.takeTime);
      oprot.writeFieldEnd();
      if (struct.takeCode != null) {
        oprot.writeFieldBegin(TAKE_CODE_FIELD_DESC);
        oprot.writeString(struct.takeCode);
        oprot.writeFieldEnd();
      }
      if (struct.deliveryOption != null) {
        oprot.writeFieldBegin(DELIVERY_OPTION_FIELD_DESC);
        oprot.writeString(struct.deliveryOption);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFUND_APPLY_TIME_FIELD_DESC);
      oprot.writeI64(struct.refundApplyTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_SUCCESS_TIME_FIELD_DESC);
      oprot.writeI64(struct.refundSuccessTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIRM_RECEIVE_TIME_FIELD_DESC);
      oprot.writeI64(struct.confirmReceiveTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SETTLE_TIME_FIELD_DESC);
      oprot.writeI64(struct.settleTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
      oprot.writeI64(struct.expireTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MERCHANT_USER_ID_FIELD_DESC);
      oprot.writeI64(struct.merchantUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REAL_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.realTotalMoney);
      oprot.writeFieldEnd();
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.subOrderId != null) {
        oprot.writeFieldBegin(SUB_ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.subOrderId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TAKE_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.takeNumber);
      oprot.writeFieldEnd();
      if (struct.merchantUserName != null) {
        oprot.writeFieldBegin(MERCHANT_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUB_TOTAL_MONEY_ZITI_FIELD_DESC);
      oprot.writeDouble(struct.subTotalMoneyZiti);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUB_TOTAL_MONEY_PEISONG_FIELD_DESC);
      oprot.writeDouble(struct.subTotalMoneyPeisong);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELIVERY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.deliveryMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_CUT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.totalCutMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_CASH_FIELD_DESC);
      oprot.writeDouble(struct.totalCash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.pointMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONSUME_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.consumeMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISCOUNT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.discountMoney);
      oprot.writeFieldEnd();
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.deliveryState != null) {
        oprot.writeFieldBegin(DELIVERY_STATE_FIELD_DESC);
        oprot.writeString(struct.deliveryState);
        oprot.writeFieldEnd();
      }
      if (struct.memberName != null) {
        oprot.writeFieldBegin(MEMBER_NAME_FIELD_DESC);
        oprot.writeString(struct.memberName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetOrderDetailByBankManageVoResTupleSchemeFactory implements SchemeFactory {
    public GetOrderDetailByBankManageVoResTupleScheme getScheme() {
      return new GetOrderDetailByBankManageVoResTupleScheme();
    }
  }

  private static class GetOrderDetailByBankManageVoResTupleScheme extends TupleScheme<GetOrderDetailByBankManageVoRes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetOrderDetailByBankManageVoRes struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCreateTime()) {
        optionals.set(0);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(1);
      }
      if (struct.isSetPointDiscount()) {
        optionals.set(2);
      }
      if (struct.isSetSubTotalMoney()) {
        optionals.set(3);
      }
      if (struct.isSetBusinessType()) {
        optionals.set(4);
      }
      if (struct.isSetOutletId()) {
        optionals.set(5);
      }
      if (struct.isSetOutletName()) {
        optionals.set(6);
      }
      if (struct.isSetProductInfos()) {
        optionals.set(7);
      }
      if (struct.isSetResultVo()) {
        optionals.set(8);
      }
      if (struct.isSetDeliveryCorpName()) {
        optionals.set(9);
      }
      if (struct.isSetTrackingNo()) {
        optionals.set(10);
      }
      if (struct.isSetShippingTime()) {
        optionals.set(11);
      }
      if (struct.isSetRefundState()) {
        optionals.set(12);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(13);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(14);
      }
      if (struct.isSetPaymentTime()) {
        optionals.set(15);
      }
      if (struct.isSetTicketTime()) {
        optionals.set(16);
      }
      if (struct.isSetCloseType()) {
        optionals.set(17);
      }
      if (struct.isSetDeliverInfoVo()) {
        optionals.set(18);
      }
      if (struct.isSetOrgNames()) {
        optionals.set(19);
      }
      if (struct.isSetCloseReason()) {
        optionals.set(20);
      }
      if (struct.isSetSettleState()) {
        optionals.set(21);
      }
      if (struct.isSetTakeTime()) {
        optionals.set(22);
      }
      if (struct.isSetTakeCode()) {
        optionals.set(23);
      }
      if (struct.isSetDeliveryOption()) {
        optionals.set(24);
      }
      if (struct.isSetRefundApplyTime()) {
        optionals.set(25);
      }
      if (struct.isSetRefundSuccessTime()) {
        optionals.set(26);
      }
      if (struct.isSetConfirmReceiveTime()) {
        optionals.set(27);
      }
      if (struct.isSetSettleTime()) {
        optionals.set(28);
      }
      if (struct.isSetExpireTime()) {
        optionals.set(29);
      }
      if (struct.isSetMerchantUserId()) {
        optionals.set(30);
      }
      if (struct.isSetRealTotalMoney()) {
        optionals.set(31);
      }
      if (struct.isSetOrderId()) {
        optionals.set(32);
      }
      if (struct.isSetSubOrderId()) {
        optionals.set(33);
      }
      if (struct.isSetTakeNumber()) {
        optionals.set(34);
      }
      if (struct.isSetMerchantUserName()) {
        optionals.set(35);
      }
      if (struct.isSetSubTotalMoneyZiti()) {
        optionals.set(36);
      }
      if (struct.isSetSubTotalMoneyPeisong()) {
        optionals.set(37);
      }
      if (struct.isSetDeliveryMoney()) {
        optionals.set(38);
      }
      if (struct.isSetTotalCutMoney()) {
        optionals.set(39);
      }
      if (struct.isSetTotalCash()) {
        optionals.set(40);
      }
      if (struct.isSetPointMoney()) {
        optionals.set(41);
      }
      if (struct.isSetConsumeMoney()) {
        optionals.set(42);
      }
      if (struct.isSetDiscountMoney()) {
        optionals.set(43);
      }
      if (struct.isSetPhone()) {
        optionals.set(44);
      }
      if (struct.isSetDeliveryState()) {
        optionals.set(45);
      }
      if (struct.isSetMemberName()) {
        optionals.set(46);
      }
      oprot.writeBitSet(optionals, 47);
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeString(struct.orderStatus);
      }
      if (struct.isSetPointDiscount()) {
        oprot.writeDouble(struct.pointDiscount);
      }
      if (struct.isSetSubTotalMoney()) {
        oprot.writeDouble(struct.subTotalMoney);
      }
      if (struct.isSetBusinessType()) {
        oprot.writeString(struct.businessType);
      }
      if (struct.isSetOutletId()) {
        oprot.writeString(struct.outletId);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
      if (struct.isSetProductInfos()) {
        {
          oprot.writeI32(struct.productInfos.size());
          for (ProductInfoVo _iter100 : struct.productInfos)
          {
            _iter100.write(oprot);
          }
        }
      }
      if (struct.isSetResultVo()) {
        struct.resultVo.write(oprot);
      }
      if (struct.isSetDeliveryCorpName()) {
        oprot.writeString(struct.deliveryCorpName);
      }
      if (struct.isSetTrackingNo()) {
        oprot.writeString(struct.trackingNo);
      }
      if (struct.isSetShippingTime()) {
        oprot.writeI64(struct.shippingTime);
      }
      if (struct.isSetRefundState()) {
        oprot.writeString(struct.refundState);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetPaymentTime()) {
        oprot.writeI64(struct.paymentTime);
      }
      if (struct.isSetTicketTime()) {
        oprot.writeI64(struct.ticketTime);
      }
      if (struct.isSetCloseType()) {
        oprot.writeString(struct.closeType);
      }
      if (struct.isSetDeliverInfoVo()) {
        struct.deliverInfoVo.write(oprot);
      }
      if (struct.isSetOrgNames()) {
        oprot.writeString(struct.orgNames);
      }
      if (struct.isSetCloseReason()) {
        oprot.writeString(struct.closeReason);
      }
      if (struct.isSetSettleState()) {
        oprot.writeString(struct.settleState);
      }
      if (struct.isSetTakeTime()) {
        oprot.writeI64(struct.takeTime);
      }
      if (struct.isSetTakeCode()) {
        oprot.writeString(struct.takeCode);
      }
      if (struct.isSetDeliveryOption()) {
        oprot.writeString(struct.deliveryOption);
      }
      if (struct.isSetRefundApplyTime()) {
        oprot.writeI64(struct.refundApplyTime);
      }
      if (struct.isSetRefundSuccessTime()) {
        oprot.writeI64(struct.refundSuccessTime);
      }
      if (struct.isSetConfirmReceiveTime()) {
        oprot.writeI64(struct.confirmReceiveTime);
      }
      if (struct.isSetSettleTime()) {
        oprot.writeI64(struct.settleTime);
      }
      if (struct.isSetExpireTime()) {
        oprot.writeI64(struct.expireTime);
      }
      if (struct.isSetMerchantUserId()) {
        oprot.writeI64(struct.merchantUserId);
      }
      if (struct.isSetRealTotalMoney()) {
        oprot.writeDouble(struct.realTotalMoney);
      }
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetSubOrderId()) {
        oprot.writeString(struct.subOrderId);
      }
      if (struct.isSetTakeNumber()) {
        oprot.writeI32(struct.takeNumber);
      }
      if (struct.isSetMerchantUserName()) {
        oprot.writeString(struct.merchantUserName);
      }
      if (struct.isSetSubTotalMoneyZiti()) {
        oprot.writeDouble(struct.subTotalMoneyZiti);
      }
      if (struct.isSetSubTotalMoneyPeisong()) {
        oprot.writeDouble(struct.subTotalMoneyPeisong);
      }
      if (struct.isSetDeliveryMoney()) {
        oprot.writeDouble(struct.deliveryMoney);
      }
      if (struct.isSetTotalCutMoney()) {
        oprot.writeDouble(struct.totalCutMoney);
      }
      if (struct.isSetTotalCash()) {
        oprot.writeDouble(struct.totalCash);
      }
      if (struct.isSetPointMoney()) {
        oprot.writeDouble(struct.pointMoney);
      }
      if (struct.isSetConsumeMoney()) {
        oprot.writeDouble(struct.consumeMoney);
      }
      if (struct.isSetDiscountMoney()) {
        oprot.writeDouble(struct.discountMoney);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetDeliveryState()) {
        oprot.writeString(struct.deliveryState);
      }
      if (struct.isSetMemberName()) {
        oprot.writeString(struct.memberName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetOrderDetailByBankManageVoRes struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(47);
      if (incoming.get(0)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderStatus = iprot.readString();
        struct.setOrderStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pointDiscount = iprot.readDouble();
        struct.setPointDiscountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.subTotalMoney = iprot.readDouble();
        struct.setSubTotalMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.businessType = iprot.readString();
        struct.setBusinessTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.outletId = iprot.readString();
        struct.setOutletIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.productInfos = new ArrayList<ProductInfoVo>(_list101.size);
          ProductInfoVo _elem102;
          for (int _i103 = 0; _i103 < _list101.size; ++_i103)
          {
            _elem102 = new ProductInfoVo();
            _elem102.read(iprot);
            struct.productInfos.add(_elem102);
          }
        }
        struct.setProductInfosIsSet(true);
      }
      if (incoming.get(8)) {
        struct.resultVo = new com.froad.thrift.vo.ResultVo();
        struct.resultVo.read(iprot);
        struct.setResultVoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.deliveryCorpName = iprot.readString();
        struct.setDeliveryCorpNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.trackingNo = iprot.readString();
        struct.setTrackingNoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.shippingTime = iprot.readI64();
        struct.setShippingTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.refundState = iprot.readString();
        struct.setRefundStateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.paymentTime = iprot.readI64();
        struct.setPaymentTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.ticketTime = iprot.readI64();
        struct.setTicketTimeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.closeType = iprot.readString();
        struct.setCloseTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.deliverInfoVo = new DeliverInfoVo();
        struct.deliverInfoVo.read(iprot);
        struct.setDeliverInfoVoIsSet(true);
      }
      if (incoming.get(19)) {
        struct.orgNames = iprot.readString();
        struct.setOrgNamesIsSet(true);
      }
      if (incoming.get(20)) {
        struct.closeReason = iprot.readString();
        struct.setCloseReasonIsSet(true);
      }
      if (incoming.get(21)) {
        struct.settleState = iprot.readString();
        struct.setSettleStateIsSet(true);
      }
      if (incoming.get(22)) {
        struct.takeTime = iprot.readI64();
        struct.setTakeTimeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.takeCode = iprot.readString();
        struct.setTakeCodeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.deliveryOption = iprot.readString();
        struct.setDeliveryOptionIsSet(true);
      }
      if (incoming.get(25)) {
        struct.refundApplyTime = iprot.readI64();
        struct.setRefundApplyTimeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.refundSuccessTime = iprot.readI64();
        struct.setRefundSuccessTimeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.confirmReceiveTime = iprot.readI64();
        struct.setConfirmReceiveTimeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.settleTime = iprot.readI64();
        struct.setSettleTimeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.expireTime = iprot.readI64();
        struct.setExpireTimeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.merchantUserId = iprot.readI64();
        struct.setMerchantUserIdIsSet(true);
      }
      if (incoming.get(31)) {
        struct.realTotalMoney = iprot.readDouble();
        struct.setRealTotalMoneyIsSet(true);
      }
      if (incoming.get(32)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(33)) {
        struct.subOrderId = iprot.readString();
        struct.setSubOrderIdIsSet(true);
      }
      if (incoming.get(34)) {
        struct.takeNumber = iprot.readI32();
        struct.setTakeNumberIsSet(true);
      }
      if (incoming.get(35)) {
        struct.merchantUserName = iprot.readString();
        struct.setMerchantUserNameIsSet(true);
      }
      if (incoming.get(36)) {
        struct.subTotalMoneyZiti = iprot.readDouble();
        struct.setSubTotalMoneyZitiIsSet(true);
      }
      if (incoming.get(37)) {
        struct.subTotalMoneyPeisong = iprot.readDouble();
        struct.setSubTotalMoneyPeisongIsSet(true);
      }
      if (incoming.get(38)) {
        struct.deliveryMoney = iprot.readDouble();
        struct.setDeliveryMoneyIsSet(true);
      }
      if (incoming.get(39)) {
        struct.totalCutMoney = iprot.readDouble();
        struct.setTotalCutMoneyIsSet(true);
      }
      if (incoming.get(40)) {
        struct.totalCash = iprot.readDouble();
        struct.setTotalCashIsSet(true);
      }
      if (incoming.get(41)) {
        struct.pointMoney = iprot.readDouble();
        struct.setPointMoneyIsSet(true);
      }
      if (incoming.get(42)) {
        struct.consumeMoney = iprot.readDouble();
        struct.setConsumeMoneyIsSet(true);
      }
      if (incoming.get(43)) {
        struct.discountMoney = iprot.readDouble();
        struct.setDiscountMoneyIsSet(true);
      }
      if (incoming.get(44)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(45)) {
        struct.deliveryState = iprot.readString();
        struct.setDeliveryStateIsSet(true);
      }
      if (incoming.get(46)) {
        struct.memberName = iprot.readString();
        struct.setMemberNameIsSet(true);
      }
    }
  }

}

