/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ArtificialPersonService {

  /**
   * 法人行社管理员服务接口
   * ArtificialPersonService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 批量生成法人行社管理员接口(一个法人行社orgCode只能生成一个管理员用户)
     * @param clientId 客户端id
     * @param orgCodes 法人行社orgCode集合
     * @param defaultPassword 初始密码
     * @param prefix 登录名前缀
     * @return 批量生成失败的orgCode及名称(orgCode:orgName;)  生成成功返回OK  审核异常返回ERROR
     * 
     * @param originVo
     * @param clientId
     * @param orgCodes
     * @param defaultPassword
     * @param prefix
     */
    public com.froad.thrift.vo.ResultVo addArtificialPerson(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes, String defaultPassword, String prefix) throws org.apache.thrift.TException;

    /**
     * 批量删除法人行社管理员账号
     * @param clientId 客户端id
     * @param orgCodes 法人行社orgCode集合
     * @return Boolean    是否成功
     * 
     * @param originVo
     * @param clientId
     * @param orgCodes
     */
    public com.froad.thrift.vo.ResultVo deleteArtificialPerson(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes) throws org.apache.thrift.TException;

    /**
     * 批量重置法人行社管理员密码
     * @param clientId 客户端id
     * @param orgCodes 法人行社orgCode集合
     * @param defaultPassword 初始密码
     * @return Boolean    是否成功
     * 
     * @param originVo
     * @param clientId
     * @param orgCodes
     * @param defaultPassword
     */
    public com.froad.thrift.vo.ResultVo updateArtificialPerson(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes, String defaultPassword) throws org.apache.thrift.TException;

    /**
     * 法人行社列表接口
     * @param clientId 客户端id
     * @param orgCode 机构编号
     * @return List<OrgVo> 法人行社org对象
     * 
     * @param clientId
     * @param orgCode
     */
    public List<com.froad.thrift.vo.OrgVo> getArtificialPerson(String clientId, String orgCode) throws org.apache.thrift.TException;

    /**
     * 已生成管理员的法人行社列表接口
     * @param clientId 客户端id
     * @param orgCode 机构编号
     * @return List<OrgVo> 已生成的法人行社org对象
     * 
     * @param clientId
     * @param orgCode
     */
    public List<com.froad.thrift.vo.OrgVo> getArtificialPersonByAdd(String clientId, String orgCode) throws org.apache.thrift.TException;

    /**
     * 未生成管理员的法人行社列表接口
     * @param clientId 客户端id
     * @param orgCode 机构编号
     * @return List<OrgVo> 未生成的法人行社org对象
     * 
     * @param clientId
     * @param orgCode
     */
    public List<com.froad.thrift.vo.OrgVo> getArtificialPersonByNotAdd(String clientId, String orgCode) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addArtificialPerson(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes, String defaultPassword, String prefix, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteArtificialPerson(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateArtificialPerson(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes, String defaultPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getArtificialPerson(String clientId, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getArtificialPersonByAdd(String clientId, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getArtificialPersonByNotAdd(String clientId, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.ResultVo addArtificialPerson(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes, String defaultPassword, String prefix) throws org.apache.thrift.TException
    {
      send_addArtificialPerson(originVo, clientId, orgCodes, defaultPassword, prefix);
      return recv_addArtificialPerson();
    }

    public void send_addArtificialPerson(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes, String defaultPassword, String prefix) throws org.apache.thrift.TException
    {
      addArtificialPerson_args args = new addArtificialPerson_args();
      args.setOriginVo(originVo);
      args.setClientId(clientId);
      args.setOrgCodes(orgCodes);
      args.setDefaultPassword(defaultPassword);
      args.setPrefix(prefix);
      sendBase("addArtificialPerson", args);
    }

    public com.froad.thrift.vo.ResultVo recv_addArtificialPerson() throws org.apache.thrift.TException
    {
      addArtificialPerson_result result = new addArtificialPerson_result();
      receiveBase(result, "addArtificialPerson");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addArtificialPerson failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteArtificialPerson(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes) throws org.apache.thrift.TException
    {
      send_deleteArtificialPerson(originVo, clientId, orgCodes);
      return recv_deleteArtificialPerson();
    }

    public void send_deleteArtificialPerson(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes) throws org.apache.thrift.TException
    {
      deleteArtificialPerson_args args = new deleteArtificialPerson_args();
      args.setOriginVo(originVo);
      args.setClientId(clientId);
      args.setOrgCodes(orgCodes);
      sendBase("deleteArtificialPerson", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteArtificialPerson() throws org.apache.thrift.TException
    {
      deleteArtificialPerson_result result = new deleteArtificialPerson_result();
      receiveBase(result, "deleteArtificialPerson");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteArtificialPerson failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateArtificialPerson(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes, String defaultPassword) throws org.apache.thrift.TException
    {
      send_updateArtificialPerson(originVo, clientId, orgCodes, defaultPassword);
      return recv_updateArtificialPerson();
    }

    public void send_updateArtificialPerson(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes, String defaultPassword) throws org.apache.thrift.TException
    {
      updateArtificialPerson_args args = new updateArtificialPerson_args();
      args.setOriginVo(originVo);
      args.setClientId(clientId);
      args.setOrgCodes(orgCodes);
      args.setDefaultPassword(defaultPassword);
      sendBase("updateArtificialPerson", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateArtificialPerson() throws org.apache.thrift.TException
    {
      updateArtificialPerson_result result = new updateArtificialPerson_result();
      receiveBase(result, "updateArtificialPerson");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateArtificialPerson failed: unknown result");
    }

    public List<com.froad.thrift.vo.OrgVo> getArtificialPerson(String clientId, String orgCode) throws org.apache.thrift.TException
    {
      send_getArtificialPerson(clientId, orgCode);
      return recv_getArtificialPerson();
    }

    public void send_getArtificialPerson(String clientId, String orgCode) throws org.apache.thrift.TException
    {
      getArtificialPerson_args args = new getArtificialPerson_args();
      args.setClientId(clientId);
      args.setOrgCode(orgCode);
      sendBase("getArtificialPerson", args);
    }

    public List<com.froad.thrift.vo.OrgVo> recv_getArtificialPerson() throws org.apache.thrift.TException
    {
      getArtificialPerson_result result = new getArtificialPerson_result();
      receiveBase(result, "getArtificialPerson");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getArtificialPerson failed: unknown result");
    }

    public List<com.froad.thrift.vo.OrgVo> getArtificialPersonByAdd(String clientId, String orgCode) throws org.apache.thrift.TException
    {
      send_getArtificialPersonByAdd(clientId, orgCode);
      return recv_getArtificialPersonByAdd();
    }

    public void send_getArtificialPersonByAdd(String clientId, String orgCode) throws org.apache.thrift.TException
    {
      getArtificialPersonByAdd_args args = new getArtificialPersonByAdd_args();
      args.setClientId(clientId);
      args.setOrgCode(orgCode);
      sendBase("getArtificialPersonByAdd", args);
    }

    public List<com.froad.thrift.vo.OrgVo> recv_getArtificialPersonByAdd() throws org.apache.thrift.TException
    {
      getArtificialPersonByAdd_result result = new getArtificialPersonByAdd_result();
      receiveBase(result, "getArtificialPersonByAdd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getArtificialPersonByAdd failed: unknown result");
    }

    public List<com.froad.thrift.vo.OrgVo> getArtificialPersonByNotAdd(String clientId, String orgCode) throws org.apache.thrift.TException
    {
      send_getArtificialPersonByNotAdd(clientId, orgCode);
      return recv_getArtificialPersonByNotAdd();
    }

    public void send_getArtificialPersonByNotAdd(String clientId, String orgCode) throws org.apache.thrift.TException
    {
      getArtificialPersonByNotAdd_args args = new getArtificialPersonByNotAdd_args();
      args.setClientId(clientId);
      args.setOrgCode(orgCode);
      sendBase("getArtificialPersonByNotAdd", args);
    }

    public List<com.froad.thrift.vo.OrgVo> recv_getArtificialPersonByNotAdd() throws org.apache.thrift.TException
    {
      getArtificialPersonByNotAdd_result result = new getArtificialPersonByNotAdd_result();
      receiveBase(result, "getArtificialPersonByNotAdd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getArtificialPersonByNotAdd failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addArtificialPerson(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes, String defaultPassword, String prefix, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addArtificialPerson_call method_call = new addArtificialPerson_call(originVo, clientId, orgCodes, defaultPassword, prefix, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addArtificialPerson_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String clientId;
      private List<String> orgCodes;
      private String defaultPassword;
      private String prefix;
      public addArtificialPerson_call(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes, String defaultPassword, String prefix, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.clientId = clientId;
        this.orgCodes = orgCodes;
        this.defaultPassword = defaultPassword;
        this.prefix = prefix;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addArtificialPerson", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addArtificialPerson_args args = new addArtificialPerson_args();
        args.setOriginVo(originVo);
        args.setClientId(clientId);
        args.setOrgCodes(orgCodes);
        args.setDefaultPassword(defaultPassword);
        args.setPrefix(prefix);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addArtificialPerson();
      }
    }

    public void deleteArtificialPerson(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteArtificialPerson_call method_call = new deleteArtificialPerson_call(originVo, clientId, orgCodes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteArtificialPerson_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String clientId;
      private List<String> orgCodes;
      public deleteArtificialPerson_call(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.clientId = clientId;
        this.orgCodes = orgCodes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteArtificialPerson", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteArtificialPerson_args args = new deleteArtificialPerson_args();
        args.setOriginVo(originVo);
        args.setClientId(clientId);
        args.setOrgCodes(orgCodes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteArtificialPerson();
      }
    }

    public void updateArtificialPerson(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes, String defaultPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateArtificialPerson_call method_call = new updateArtificialPerson_call(originVo, clientId, orgCodes, defaultPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateArtificialPerson_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String clientId;
      private List<String> orgCodes;
      private String defaultPassword;
      public updateArtificialPerson_call(com.froad.thrift.vo.OriginVo originVo, String clientId, List<String> orgCodes, String defaultPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.clientId = clientId;
        this.orgCodes = orgCodes;
        this.defaultPassword = defaultPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateArtificialPerson", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateArtificialPerson_args args = new updateArtificialPerson_args();
        args.setOriginVo(originVo);
        args.setClientId(clientId);
        args.setOrgCodes(orgCodes);
        args.setDefaultPassword(defaultPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateArtificialPerson();
      }
    }

    public void getArtificialPerson(String clientId, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getArtificialPerson_call method_call = new getArtificialPerson_call(clientId, orgCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getArtificialPerson_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String orgCode;
      public getArtificialPerson_call(String clientId, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.orgCode = orgCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getArtificialPerson", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getArtificialPerson_args args = new getArtificialPerson_args();
        args.setClientId(clientId);
        args.setOrgCode(orgCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.OrgVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getArtificialPerson();
      }
    }

    public void getArtificialPersonByAdd(String clientId, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getArtificialPersonByAdd_call method_call = new getArtificialPersonByAdd_call(clientId, orgCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getArtificialPersonByAdd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String orgCode;
      public getArtificialPersonByAdd_call(String clientId, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.orgCode = orgCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getArtificialPersonByAdd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getArtificialPersonByAdd_args args = new getArtificialPersonByAdd_args();
        args.setClientId(clientId);
        args.setOrgCode(orgCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.OrgVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getArtificialPersonByAdd();
      }
    }

    public void getArtificialPersonByNotAdd(String clientId, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getArtificialPersonByNotAdd_call method_call = new getArtificialPersonByNotAdd_call(clientId, orgCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getArtificialPersonByNotAdd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String orgCode;
      public getArtificialPersonByNotAdd_call(String clientId, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.orgCode = orgCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getArtificialPersonByNotAdd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getArtificialPersonByNotAdd_args args = new getArtificialPersonByNotAdd_args();
        args.setClientId(clientId);
        args.setOrgCode(orgCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.OrgVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getArtificialPersonByNotAdd();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addArtificialPerson", new addArtificialPerson());
      processMap.put("deleteArtificialPerson", new deleteArtificialPerson());
      processMap.put("updateArtificialPerson", new updateArtificialPerson());
      processMap.put("getArtificialPerson", new getArtificialPerson());
      processMap.put("getArtificialPersonByAdd", new getArtificialPersonByAdd());
      processMap.put("getArtificialPersonByNotAdd", new getArtificialPersonByNotAdd());
      return processMap;
    }

    public static class addArtificialPerson<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addArtificialPerson_args> {
      public addArtificialPerson() {
        super("addArtificialPerson");
      }

      public addArtificialPerson_args getEmptyArgsInstance() {
        return new addArtificialPerson_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addArtificialPerson_result getResult(I iface, addArtificialPerson_args args) throws org.apache.thrift.TException {
        addArtificialPerson_result result = new addArtificialPerson_result();
        result.success = iface.addArtificialPerson(args.originVo, args.clientId, args.orgCodes, args.defaultPassword, args.prefix);
        return result;
      }
    }

    public static class deleteArtificialPerson<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteArtificialPerson_args> {
      public deleteArtificialPerson() {
        super("deleteArtificialPerson");
      }

      public deleteArtificialPerson_args getEmptyArgsInstance() {
        return new deleteArtificialPerson_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteArtificialPerson_result getResult(I iface, deleteArtificialPerson_args args) throws org.apache.thrift.TException {
        deleteArtificialPerson_result result = new deleteArtificialPerson_result();
        result.success = iface.deleteArtificialPerson(args.originVo, args.clientId, args.orgCodes);
        return result;
      }
    }

    public static class updateArtificialPerson<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateArtificialPerson_args> {
      public updateArtificialPerson() {
        super("updateArtificialPerson");
      }

      public updateArtificialPerson_args getEmptyArgsInstance() {
        return new updateArtificialPerson_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateArtificialPerson_result getResult(I iface, updateArtificialPerson_args args) throws org.apache.thrift.TException {
        updateArtificialPerson_result result = new updateArtificialPerson_result();
        result.success = iface.updateArtificialPerson(args.originVo, args.clientId, args.orgCodes, args.defaultPassword);
        return result;
      }
    }

    public static class getArtificialPerson<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getArtificialPerson_args> {
      public getArtificialPerson() {
        super("getArtificialPerson");
      }

      public getArtificialPerson_args getEmptyArgsInstance() {
        return new getArtificialPerson_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getArtificialPerson_result getResult(I iface, getArtificialPerson_args args) throws org.apache.thrift.TException {
        getArtificialPerson_result result = new getArtificialPerson_result();
        result.success = iface.getArtificialPerson(args.clientId, args.orgCode);
        return result;
      }
    }

    public static class getArtificialPersonByAdd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getArtificialPersonByAdd_args> {
      public getArtificialPersonByAdd() {
        super("getArtificialPersonByAdd");
      }

      public getArtificialPersonByAdd_args getEmptyArgsInstance() {
        return new getArtificialPersonByAdd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getArtificialPersonByAdd_result getResult(I iface, getArtificialPersonByAdd_args args) throws org.apache.thrift.TException {
        getArtificialPersonByAdd_result result = new getArtificialPersonByAdd_result();
        result.success = iface.getArtificialPersonByAdd(args.clientId, args.orgCode);
        return result;
      }
    }

    public static class getArtificialPersonByNotAdd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getArtificialPersonByNotAdd_args> {
      public getArtificialPersonByNotAdd() {
        super("getArtificialPersonByNotAdd");
      }

      public getArtificialPersonByNotAdd_args getEmptyArgsInstance() {
        return new getArtificialPersonByNotAdd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getArtificialPersonByNotAdd_result getResult(I iface, getArtificialPersonByNotAdd_args args) throws org.apache.thrift.TException {
        getArtificialPersonByNotAdd_result result = new getArtificialPersonByNotAdd_result();
        result.success = iface.getArtificialPersonByNotAdd(args.clientId, args.orgCode);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addArtificialPerson", new addArtificialPerson());
      processMap.put("deleteArtificialPerson", new deleteArtificialPerson());
      processMap.put("updateArtificialPerson", new updateArtificialPerson());
      processMap.put("getArtificialPerson", new getArtificialPerson());
      processMap.put("getArtificialPersonByAdd", new getArtificialPersonByAdd());
      processMap.put("getArtificialPersonByNotAdd", new getArtificialPersonByNotAdd());
      return processMap;
    }

    public static class addArtificialPerson<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addArtificialPerson_args, com.froad.thrift.vo.ResultVo> {
      public addArtificialPerson() {
        super("addArtificialPerson");
      }

      public addArtificialPerson_args getEmptyArgsInstance() {
        return new addArtificialPerson_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            addArtificialPerson_result result = new addArtificialPerson_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addArtificialPerson_result result = new addArtificialPerson_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addArtificialPerson_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.addArtificialPerson(args.originVo, args.clientId, args.orgCodes, args.defaultPassword, args.prefix,resultHandler);
      }
    }

    public static class deleteArtificialPerson<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteArtificialPerson_args, com.froad.thrift.vo.ResultVo> {
      public deleteArtificialPerson() {
        super("deleteArtificialPerson");
      }

      public deleteArtificialPerson_args getEmptyArgsInstance() {
        return new deleteArtificialPerson_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteArtificialPerson_result result = new deleteArtificialPerson_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteArtificialPerson_result result = new deleteArtificialPerson_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteArtificialPerson_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteArtificialPerson(args.originVo, args.clientId, args.orgCodes,resultHandler);
      }
    }

    public static class updateArtificialPerson<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateArtificialPerson_args, com.froad.thrift.vo.ResultVo> {
      public updateArtificialPerson() {
        super("updateArtificialPerson");
      }

      public updateArtificialPerson_args getEmptyArgsInstance() {
        return new updateArtificialPerson_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateArtificialPerson_result result = new updateArtificialPerson_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateArtificialPerson_result result = new updateArtificialPerson_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateArtificialPerson_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateArtificialPerson(args.originVo, args.clientId, args.orgCodes, args.defaultPassword,resultHandler);
      }
    }

    public static class getArtificialPerson<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getArtificialPerson_args, List<com.froad.thrift.vo.OrgVo>> {
      public getArtificialPerson() {
        super("getArtificialPerson");
      }

      public getArtificialPerson_args getEmptyArgsInstance() {
        return new getArtificialPerson_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.OrgVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.OrgVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.OrgVo> o) {
            getArtificialPerson_result result = new getArtificialPerson_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getArtificialPerson_result result = new getArtificialPerson_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getArtificialPerson_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.OrgVo>> resultHandler) throws TException {
        iface.getArtificialPerson(args.clientId, args.orgCode,resultHandler);
      }
    }

    public static class getArtificialPersonByAdd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getArtificialPersonByAdd_args, List<com.froad.thrift.vo.OrgVo>> {
      public getArtificialPersonByAdd() {
        super("getArtificialPersonByAdd");
      }

      public getArtificialPersonByAdd_args getEmptyArgsInstance() {
        return new getArtificialPersonByAdd_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.OrgVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.OrgVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.OrgVo> o) {
            getArtificialPersonByAdd_result result = new getArtificialPersonByAdd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getArtificialPersonByAdd_result result = new getArtificialPersonByAdd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getArtificialPersonByAdd_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.OrgVo>> resultHandler) throws TException {
        iface.getArtificialPersonByAdd(args.clientId, args.orgCode,resultHandler);
      }
    }

    public static class getArtificialPersonByNotAdd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getArtificialPersonByNotAdd_args, List<com.froad.thrift.vo.OrgVo>> {
      public getArtificialPersonByNotAdd() {
        super("getArtificialPersonByNotAdd");
      }

      public getArtificialPersonByNotAdd_args getEmptyArgsInstance() {
        return new getArtificialPersonByNotAdd_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.OrgVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.OrgVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.OrgVo> o) {
            getArtificialPersonByNotAdd_result result = new getArtificialPersonByNotAdd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getArtificialPersonByNotAdd_result result = new getArtificialPersonByNotAdd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getArtificialPersonByNotAdd_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.OrgVo>> resultHandler) throws TException {
        iface.getArtificialPersonByNotAdd(args.clientId, args.orgCode,resultHandler);
      }
    }

  }

  public static class addArtificialPerson_args implements org.apache.thrift.TBase<addArtificialPerson_args, addArtificialPerson_args._Fields>, java.io.Serializable, Cloneable, Comparable<addArtificialPerson_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addArtificialPerson_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ORG_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCodes", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField DEFAULT_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultPassword", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("prefix", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addArtificialPerson_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addArtificialPerson_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String clientId; // required
    public List<String> orgCodes; // required
    public String defaultPassword; // required
    public String prefix; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      CLIENT_ID((short)2, "clientId"),
      ORG_CODES((short)3, "orgCodes"),
      DEFAULT_PASSWORD((short)4, "defaultPassword"),
      PREFIX((short)5, "prefix");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // ORG_CODES
            return ORG_CODES;
          case 4: // DEFAULT_PASSWORD
            return DEFAULT_PASSWORD;
          case 5: // PREFIX
            return PREFIX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORG_CODES, new org.apache.thrift.meta_data.FieldMetaData("orgCodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.DEFAULT_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("defaultPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PREFIX, new org.apache.thrift.meta_data.FieldMetaData("prefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addArtificialPerson_args.class, metaDataMap);
    }

    public addArtificialPerson_args() {
    }

    public addArtificialPerson_args(
      com.froad.thrift.vo.OriginVo originVo,
      String clientId,
      List<String> orgCodes,
      String defaultPassword,
      String prefix)
    {
      this();
      this.originVo = originVo;
      this.clientId = clientId;
      this.orgCodes = orgCodes;
      this.defaultPassword = defaultPassword;
      this.prefix = prefix;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addArtificialPerson_args(addArtificialPerson_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetOrgCodes()) {
        List<String> __this__orgCodes = new ArrayList<String>(other.orgCodes);
        this.orgCodes = __this__orgCodes;
      }
      if (other.isSetDefaultPassword()) {
        this.defaultPassword = other.defaultPassword;
      }
      if (other.isSetPrefix()) {
        this.prefix = other.prefix;
      }
    }

    public addArtificialPerson_args deepCopy() {
      return new addArtificialPerson_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.clientId = null;
      this.orgCodes = null;
      this.defaultPassword = null;
      this.prefix = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addArtificialPerson_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public addArtificialPerson_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public int getOrgCodesSize() {
      return (this.orgCodes == null) ? 0 : this.orgCodes.size();
    }

    public java.util.Iterator<String> getOrgCodesIterator() {
      return (this.orgCodes == null) ? null : this.orgCodes.iterator();
    }

    public void addToOrgCodes(String elem) {
      if (this.orgCodes == null) {
        this.orgCodes = new ArrayList<String>();
      }
      this.orgCodes.add(elem);
    }

    public List<String> getOrgCodes() {
      return this.orgCodes;
    }

    public addArtificialPerson_args setOrgCodes(List<String> orgCodes) {
      this.orgCodes = orgCodes;
      return this;
    }

    public void unsetOrgCodes() {
      this.orgCodes = null;
    }

    /** Returns true if field orgCodes is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgCodes() {
      return this.orgCodes != null;
    }

    public void setOrgCodesIsSet(boolean value) {
      if (!value) {
        this.orgCodes = null;
      }
    }

    public String getDefaultPassword() {
      return this.defaultPassword;
    }

    public addArtificialPerson_args setDefaultPassword(String defaultPassword) {
      this.defaultPassword = defaultPassword;
      return this;
    }

    public void unsetDefaultPassword() {
      this.defaultPassword = null;
    }

    /** Returns true if field defaultPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetDefaultPassword() {
      return this.defaultPassword != null;
    }

    public void setDefaultPasswordIsSet(boolean value) {
      if (!value) {
        this.defaultPassword = null;
      }
    }

    public String getPrefix() {
      return this.prefix;
    }

    public addArtificialPerson_args setPrefix(String prefix) {
      this.prefix = prefix;
      return this;
    }

    public void unsetPrefix() {
      this.prefix = null;
    }

    /** Returns true if field prefix is set (has been assigned a value) and false otherwise */
    public boolean isSetPrefix() {
      return this.prefix != null;
    }

    public void setPrefixIsSet(boolean value) {
      if (!value) {
        this.prefix = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ORG_CODES:
        if (value == null) {
          unsetOrgCodes();
        } else {
          setOrgCodes((List<String>)value);
        }
        break;

      case DEFAULT_PASSWORD:
        if (value == null) {
          unsetDefaultPassword();
        } else {
          setDefaultPassword((String)value);
        }
        break;

      case PREFIX:
        if (value == null) {
          unsetPrefix();
        } else {
          setPrefix((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case CLIENT_ID:
        return getClientId();

      case ORG_CODES:
        return getOrgCodes();

      case DEFAULT_PASSWORD:
        return getDefaultPassword();

      case PREFIX:
        return getPrefix();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case CLIENT_ID:
        return isSetClientId();
      case ORG_CODES:
        return isSetOrgCodes();
      case DEFAULT_PASSWORD:
        return isSetDefaultPassword();
      case PREFIX:
        return isSetPrefix();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addArtificialPerson_args)
        return this.equals((addArtificialPerson_args)that);
      return false;
    }

    public boolean equals(addArtificialPerson_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_orgCodes = true && this.isSetOrgCodes();
      boolean that_present_orgCodes = true && that.isSetOrgCodes();
      if (this_present_orgCodes || that_present_orgCodes) {
        if (!(this_present_orgCodes && that_present_orgCodes))
          return false;
        if (!this.orgCodes.equals(that.orgCodes))
          return false;
      }

      boolean this_present_defaultPassword = true && this.isSetDefaultPassword();
      boolean that_present_defaultPassword = true && that.isSetDefaultPassword();
      if (this_present_defaultPassword || that_present_defaultPassword) {
        if (!(this_present_defaultPassword && that_present_defaultPassword))
          return false;
        if (!this.defaultPassword.equals(that.defaultPassword))
          return false;
      }

      boolean this_present_prefix = true && this.isSetPrefix();
      boolean that_present_prefix = true && that.isSetPrefix();
      if (this_present_prefix || that_present_prefix) {
        if (!(this_present_prefix && that_present_prefix))
          return false;
        if (!this.prefix.equals(that.prefix))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_orgCodes = true && (isSetOrgCodes());
      list.add(present_orgCodes);
      if (present_orgCodes)
        list.add(orgCodes);

      boolean present_defaultPassword = true && (isSetDefaultPassword());
      list.add(present_defaultPassword);
      if (present_defaultPassword)
        list.add(defaultPassword);

      boolean present_prefix = true && (isSetPrefix());
      list.add(present_prefix);
      if (present_prefix)
        list.add(prefix);

      return list.hashCode();
    }

    @Override
    public int compareTo(addArtificialPerson_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgCodes()).compareTo(other.isSetOrgCodes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgCodes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCodes, other.orgCodes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDefaultPassword()).compareTo(other.isSetDefaultPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDefaultPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultPassword, other.defaultPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrefix()).compareTo(other.isSetPrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prefix, other.prefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addArtificialPerson_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgCodes:");
      if (this.orgCodes == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCodes);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("defaultPassword:");
      if (this.defaultPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("prefix:");
      if (this.prefix == null) {
        sb.append("null");
      } else {
        sb.append(this.prefix);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addArtificialPerson_argsStandardSchemeFactory implements SchemeFactory {
      public addArtificialPerson_argsStandardScheme getScheme() {
        return new addArtificialPerson_argsStandardScheme();
      }
    }

    private static class addArtificialPerson_argsStandardScheme extends StandardScheme<addArtificialPerson_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addArtificialPerson_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORG_CODES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.orgCodes = new ArrayList<String>(_list16.size);
                  String _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readString();
                    struct.orgCodes.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setOrgCodesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DEFAULT_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.defaultPassword = iprot.readString();
                struct.setDefaultPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.prefix = iprot.readString();
                struct.setPrefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addArtificialPerson_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.orgCodes != null) {
          oprot.writeFieldBegin(ORG_CODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.orgCodes.size()));
            for (String _iter19 : struct.orgCodes)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.defaultPassword != null) {
          oprot.writeFieldBegin(DEFAULT_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.defaultPassword);
          oprot.writeFieldEnd();
        }
        if (struct.prefix != null) {
          oprot.writeFieldBegin(PREFIX_FIELD_DESC);
          oprot.writeString(struct.prefix);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addArtificialPerson_argsTupleSchemeFactory implements SchemeFactory {
      public addArtificialPerson_argsTupleScheme getScheme() {
        return new addArtificialPerson_argsTupleScheme();
      }
    }

    private static class addArtificialPerson_argsTupleScheme extends TupleScheme<addArtificialPerson_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addArtificialPerson_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetOrgCodes()) {
          optionals.set(2);
        }
        if (struct.isSetDefaultPassword()) {
          optionals.set(3);
        }
        if (struct.isSetPrefix()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetOrgCodes()) {
          {
            oprot.writeI32(struct.orgCodes.size());
            for (String _iter20 : struct.orgCodes)
            {
              oprot.writeString(_iter20);
            }
          }
        }
        if (struct.isSetDefaultPassword()) {
          oprot.writeString(struct.defaultPassword);
        }
        if (struct.isSetPrefix()) {
          oprot.writeString(struct.prefix);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addArtificialPerson_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.orgCodes = new ArrayList<String>(_list21.size);
            String _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readString();
              struct.orgCodes.add(_elem22);
            }
          }
          struct.setOrgCodesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.defaultPassword = iprot.readString();
          struct.setDefaultPasswordIsSet(true);
        }
        if (incoming.get(4)) {
          struct.prefix = iprot.readString();
          struct.setPrefixIsSet(true);
        }
      }
    }

  }

  public static class addArtificialPerson_result implements org.apache.thrift.TBase<addArtificialPerson_result, addArtificialPerson_result._Fields>, java.io.Serializable, Cloneable, Comparable<addArtificialPerson_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addArtificialPerson_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addArtificialPerson_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addArtificialPerson_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addArtificialPerson_result.class, metaDataMap);
    }

    public addArtificialPerson_result() {
    }

    public addArtificialPerson_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addArtificialPerson_result(addArtificialPerson_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public addArtificialPerson_result deepCopy() {
      return new addArtificialPerson_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public addArtificialPerson_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addArtificialPerson_result)
        return this.equals((addArtificialPerson_result)that);
      return false;
    }

    public boolean equals(addArtificialPerson_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addArtificialPerson_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addArtificialPerson_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addArtificialPerson_resultStandardSchemeFactory implements SchemeFactory {
      public addArtificialPerson_resultStandardScheme getScheme() {
        return new addArtificialPerson_resultStandardScheme();
      }
    }

    private static class addArtificialPerson_resultStandardScheme extends StandardScheme<addArtificialPerson_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addArtificialPerson_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addArtificialPerson_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addArtificialPerson_resultTupleSchemeFactory implements SchemeFactory {
      public addArtificialPerson_resultTupleScheme getScheme() {
        return new addArtificialPerson_resultTupleScheme();
      }
    }

    private static class addArtificialPerson_resultTupleScheme extends TupleScheme<addArtificialPerson_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addArtificialPerson_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addArtificialPerson_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteArtificialPerson_args implements org.apache.thrift.TBase<deleteArtificialPerson_args, deleteArtificialPerson_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteArtificialPerson_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteArtificialPerson_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ORG_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCodes", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteArtificialPerson_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteArtificialPerson_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String clientId; // required
    public List<String> orgCodes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      CLIENT_ID((short)2, "clientId"),
      ORG_CODES((short)3, "orgCodes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // ORG_CODES
            return ORG_CODES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORG_CODES, new org.apache.thrift.meta_data.FieldMetaData("orgCodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteArtificialPerson_args.class, metaDataMap);
    }

    public deleteArtificialPerson_args() {
    }

    public deleteArtificialPerson_args(
      com.froad.thrift.vo.OriginVo originVo,
      String clientId,
      List<String> orgCodes)
    {
      this();
      this.originVo = originVo;
      this.clientId = clientId;
      this.orgCodes = orgCodes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteArtificialPerson_args(deleteArtificialPerson_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetOrgCodes()) {
        List<String> __this__orgCodes = new ArrayList<String>(other.orgCodes);
        this.orgCodes = __this__orgCodes;
      }
    }

    public deleteArtificialPerson_args deepCopy() {
      return new deleteArtificialPerson_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.clientId = null;
      this.orgCodes = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteArtificialPerson_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public deleteArtificialPerson_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public int getOrgCodesSize() {
      return (this.orgCodes == null) ? 0 : this.orgCodes.size();
    }

    public java.util.Iterator<String> getOrgCodesIterator() {
      return (this.orgCodes == null) ? null : this.orgCodes.iterator();
    }

    public void addToOrgCodes(String elem) {
      if (this.orgCodes == null) {
        this.orgCodes = new ArrayList<String>();
      }
      this.orgCodes.add(elem);
    }

    public List<String> getOrgCodes() {
      return this.orgCodes;
    }

    public deleteArtificialPerson_args setOrgCodes(List<String> orgCodes) {
      this.orgCodes = orgCodes;
      return this;
    }

    public void unsetOrgCodes() {
      this.orgCodes = null;
    }

    /** Returns true if field orgCodes is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgCodes() {
      return this.orgCodes != null;
    }

    public void setOrgCodesIsSet(boolean value) {
      if (!value) {
        this.orgCodes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ORG_CODES:
        if (value == null) {
          unsetOrgCodes();
        } else {
          setOrgCodes((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case CLIENT_ID:
        return getClientId();

      case ORG_CODES:
        return getOrgCodes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case CLIENT_ID:
        return isSetClientId();
      case ORG_CODES:
        return isSetOrgCodes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteArtificialPerson_args)
        return this.equals((deleteArtificialPerson_args)that);
      return false;
    }

    public boolean equals(deleteArtificialPerson_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_orgCodes = true && this.isSetOrgCodes();
      boolean that_present_orgCodes = true && that.isSetOrgCodes();
      if (this_present_orgCodes || that_present_orgCodes) {
        if (!(this_present_orgCodes && that_present_orgCodes))
          return false;
        if (!this.orgCodes.equals(that.orgCodes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_orgCodes = true && (isSetOrgCodes());
      list.add(present_orgCodes);
      if (present_orgCodes)
        list.add(orgCodes);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteArtificialPerson_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgCodes()).compareTo(other.isSetOrgCodes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgCodes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCodes, other.orgCodes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteArtificialPerson_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgCodes:");
      if (this.orgCodes == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCodes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteArtificialPerson_argsStandardSchemeFactory implements SchemeFactory {
      public deleteArtificialPerson_argsStandardScheme getScheme() {
        return new deleteArtificialPerson_argsStandardScheme();
      }
    }

    private static class deleteArtificialPerson_argsStandardScheme extends StandardScheme<deleteArtificialPerson_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteArtificialPerson_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORG_CODES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.orgCodes = new ArrayList<String>(_list24.size);
                  String _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readString();
                    struct.orgCodes.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setOrgCodesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteArtificialPerson_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.orgCodes != null) {
          oprot.writeFieldBegin(ORG_CODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.orgCodes.size()));
            for (String _iter27 : struct.orgCodes)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteArtificialPerson_argsTupleSchemeFactory implements SchemeFactory {
      public deleteArtificialPerson_argsTupleScheme getScheme() {
        return new deleteArtificialPerson_argsTupleScheme();
      }
    }

    private static class deleteArtificialPerson_argsTupleScheme extends TupleScheme<deleteArtificialPerson_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteArtificialPerson_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetOrgCodes()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetOrgCodes()) {
          {
            oprot.writeI32(struct.orgCodes.size());
            for (String _iter28 : struct.orgCodes)
            {
              oprot.writeString(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteArtificialPerson_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.orgCodes = new ArrayList<String>(_list29.size);
            String _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readString();
              struct.orgCodes.add(_elem30);
            }
          }
          struct.setOrgCodesIsSet(true);
        }
      }
    }

  }

  public static class deleteArtificialPerson_result implements org.apache.thrift.TBase<deleteArtificialPerson_result, deleteArtificialPerson_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteArtificialPerson_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteArtificialPerson_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteArtificialPerson_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteArtificialPerson_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteArtificialPerson_result.class, metaDataMap);
    }

    public deleteArtificialPerson_result() {
    }

    public deleteArtificialPerson_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteArtificialPerson_result(deleteArtificialPerson_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteArtificialPerson_result deepCopy() {
      return new deleteArtificialPerson_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteArtificialPerson_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteArtificialPerson_result)
        return this.equals((deleteArtificialPerson_result)that);
      return false;
    }

    public boolean equals(deleteArtificialPerson_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteArtificialPerson_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteArtificialPerson_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteArtificialPerson_resultStandardSchemeFactory implements SchemeFactory {
      public deleteArtificialPerson_resultStandardScheme getScheme() {
        return new deleteArtificialPerson_resultStandardScheme();
      }
    }

    private static class deleteArtificialPerson_resultStandardScheme extends StandardScheme<deleteArtificialPerson_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteArtificialPerson_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteArtificialPerson_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteArtificialPerson_resultTupleSchemeFactory implements SchemeFactory {
      public deleteArtificialPerson_resultTupleScheme getScheme() {
        return new deleteArtificialPerson_resultTupleScheme();
      }
    }

    private static class deleteArtificialPerson_resultTupleScheme extends TupleScheme<deleteArtificialPerson_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteArtificialPerson_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteArtificialPerson_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateArtificialPerson_args implements org.apache.thrift.TBase<updateArtificialPerson_args, updateArtificialPerson_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateArtificialPerson_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateArtificialPerson_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ORG_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCodes", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField DEFAULT_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultPassword", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateArtificialPerson_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateArtificialPerson_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String clientId; // required
    public List<String> orgCodes; // required
    public String defaultPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      CLIENT_ID((short)2, "clientId"),
      ORG_CODES((short)3, "orgCodes"),
      DEFAULT_PASSWORD((short)4, "defaultPassword");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // ORG_CODES
            return ORG_CODES;
          case 4: // DEFAULT_PASSWORD
            return DEFAULT_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORG_CODES, new org.apache.thrift.meta_data.FieldMetaData("orgCodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.DEFAULT_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("defaultPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateArtificialPerson_args.class, metaDataMap);
    }

    public updateArtificialPerson_args() {
    }

    public updateArtificialPerson_args(
      com.froad.thrift.vo.OriginVo originVo,
      String clientId,
      List<String> orgCodes,
      String defaultPassword)
    {
      this();
      this.originVo = originVo;
      this.clientId = clientId;
      this.orgCodes = orgCodes;
      this.defaultPassword = defaultPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateArtificialPerson_args(updateArtificialPerson_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetOrgCodes()) {
        List<String> __this__orgCodes = new ArrayList<String>(other.orgCodes);
        this.orgCodes = __this__orgCodes;
      }
      if (other.isSetDefaultPassword()) {
        this.defaultPassword = other.defaultPassword;
      }
    }

    public updateArtificialPerson_args deepCopy() {
      return new updateArtificialPerson_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.clientId = null;
      this.orgCodes = null;
      this.defaultPassword = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateArtificialPerson_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public updateArtificialPerson_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public int getOrgCodesSize() {
      return (this.orgCodes == null) ? 0 : this.orgCodes.size();
    }

    public java.util.Iterator<String> getOrgCodesIterator() {
      return (this.orgCodes == null) ? null : this.orgCodes.iterator();
    }

    public void addToOrgCodes(String elem) {
      if (this.orgCodes == null) {
        this.orgCodes = new ArrayList<String>();
      }
      this.orgCodes.add(elem);
    }

    public List<String> getOrgCodes() {
      return this.orgCodes;
    }

    public updateArtificialPerson_args setOrgCodes(List<String> orgCodes) {
      this.orgCodes = orgCodes;
      return this;
    }

    public void unsetOrgCodes() {
      this.orgCodes = null;
    }

    /** Returns true if field orgCodes is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgCodes() {
      return this.orgCodes != null;
    }

    public void setOrgCodesIsSet(boolean value) {
      if (!value) {
        this.orgCodes = null;
      }
    }

    public String getDefaultPassword() {
      return this.defaultPassword;
    }

    public updateArtificialPerson_args setDefaultPassword(String defaultPassword) {
      this.defaultPassword = defaultPassword;
      return this;
    }

    public void unsetDefaultPassword() {
      this.defaultPassword = null;
    }

    /** Returns true if field defaultPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetDefaultPassword() {
      return this.defaultPassword != null;
    }

    public void setDefaultPasswordIsSet(boolean value) {
      if (!value) {
        this.defaultPassword = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ORG_CODES:
        if (value == null) {
          unsetOrgCodes();
        } else {
          setOrgCodes((List<String>)value);
        }
        break;

      case DEFAULT_PASSWORD:
        if (value == null) {
          unsetDefaultPassword();
        } else {
          setDefaultPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case CLIENT_ID:
        return getClientId();

      case ORG_CODES:
        return getOrgCodes();

      case DEFAULT_PASSWORD:
        return getDefaultPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case CLIENT_ID:
        return isSetClientId();
      case ORG_CODES:
        return isSetOrgCodes();
      case DEFAULT_PASSWORD:
        return isSetDefaultPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateArtificialPerson_args)
        return this.equals((updateArtificialPerson_args)that);
      return false;
    }

    public boolean equals(updateArtificialPerson_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_orgCodes = true && this.isSetOrgCodes();
      boolean that_present_orgCodes = true && that.isSetOrgCodes();
      if (this_present_orgCodes || that_present_orgCodes) {
        if (!(this_present_orgCodes && that_present_orgCodes))
          return false;
        if (!this.orgCodes.equals(that.orgCodes))
          return false;
      }

      boolean this_present_defaultPassword = true && this.isSetDefaultPassword();
      boolean that_present_defaultPassword = true && that.isSetDefaultPassword();
      if (this_present_defaultPassword || that_present_defaultPassword) {
        if (!(this_present_defaultPassword && that_present_defaultPassword))
          return false;
        if (!this.defaultPassword.equals(that.defaultPassword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_orgCodes = true && (isSetOrgCodes());
      list.add(present_orgCodes);
      if (present_orgCodes)
        list.add(orgCodes);

      boolean present_defaultPassword = true && (isSetDefaultPassword());
      list.add(present_defaultPassword);
      if (present_defaultPassword)
        list.add(defaultPassword);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateArtificialPerson_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgCodes()).compareTo(other.isSetOrgCodes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgCodes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCodes, other.orgCodes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDefaultPassword()).compareTo(other.isSetDefaultPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDefaultPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultPassword, other.defaultPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateArtificialPerson_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgCodes:");
      if (this.orgCodes == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCodes);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("defaultPassword:");
      if (this.defaultPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.defaultPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateArtificialPerson_argsStandardSchemeFactory implements SchemeFactory {
      public updateArtificialPerson_argsStandardScheme getScheme() {
        return new updateArtificialPerson_argsStandardScheme();
      }
    }

    private static class updateArtificialPerson_argsStandardScheme extends StandardScheme<updateArtificialPerson_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateArtificialPerson_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORG_CODES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.orgCodes = new ArrayList<String>(_list32.size);
                  String _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readString();
                    struct.orgCodes.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setOrgCodesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DEFAULT_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.defaultPassword = iprot.readString();
                struct.setDefaultPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateArtificialPerson_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.orgCodes != null) {
          oprot.writeFieldBegin(ORG_CODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.orgCodes.size()));
            for (String _iter35 : struct.orgCodes)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.defaultPassword != null) {
          oprot.writeFieldBegin(DEFAULT_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.defaultPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateArtificialPerson_argsTupleSchemeFactory implements SchemeFactory {
      public updateArtificialPerson_argsTupleScheme getScheme() {
        return new updateArtificialPerson_argsTupleScheme();
      }
    }

    private static class updateArtificialPerson_argsTupleScheme extends TupleScheme<updateArtificialPerson_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateArtificialPerson_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetOrgCodes()) {
          optionals.set(2);
        }
        if (struct.isSetDefaultPassword()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetOrgCodes()) {
          {
            oprot.writeI32(struct.orgCodes.size());
            for (String _iter36 : struct.orgCodes)
            {
              oprot.writeString(_iter36);
            }
          }
        }
        if (struct.isSetDefaultPassword()) {
          oprot.writeString(struct.defaultPassword);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateArtificialPerson_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.orgCodes = new ArrayList<String>(_list37.size);
            String _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readString();
              struct.orgCodes.add(_elem38);
            }
          }
          struct.setOrgCodesIsSet(true);
        }
        if (incoming.get(3)) {
          struct.defaultPassword = iprot.readString();
          struct.setDefaultPasswordIsSet(true);
        }
      }
    }

  }

  public static class updateArtificialPerson_result implements org.apache.thrift.TBase<updateArtificialPerson_result, updateArtificialPerson_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateArtificialPerson_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateArtificialPerson_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateArtificialPerson_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateArtificialPerson_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateArtificialPerson_result.class, metaDataMap);
    }

    public updateArtificialPerson_result() {
    }

    public updateArtificialPerson_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateArtificialPerson_result(updateArtificialPerson_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateArtificialPerson_result deepCopy() {
      return new updateArtificialPerson_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateArtificialPerson_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateArtificialPerson_result)
        return this.equals((updateArtificialPerson_result)that);
      return false;
    }

    public boolean equals(updateArtificialPerson_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateArtificialPerson_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateArtificialPerson_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateArtificialPerson_resultStandardSchemeFactory implements SchemeFactory {
      public updateArtificialPerson_resultStandardScheme getScheme() {
        return new updateArtificialPerson_resultStandardScheme();
      }
    }

    private static class updateArtificialPerson_resultStandardScheme extends StandardScheme<updateArtificialPerson_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateArtificialPerson_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateArtificialPerson_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateArtificialPerson_resultTupleSchemeFactory implements SchemeFactory {
      public updateArtificialPerson_resultTupleScheme getScheme() {
        return new updateArtificialPerson_resultTupleScheme();
      }
    }

    private static class updateArtificialPerson_resultTupleScheme extends TupleScheme<updateArtificialPerson_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateArtificialPerson_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateArtificialPerson_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getArtificialPerson_args implements org.apache.thrift.TBase<getArtificialPerson_args, getArtificialPerson_args._Fields>, java.io.Serializable, Cloneable, Comparable<getArtificialPerson_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArtificialPerson_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getArtificialPerson_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getArtificialPerson_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String orgCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      ORG_CODE((short)2, "orgCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ORG_CODE
            return ORG_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArtificialPerson_args.class, metaDataMap);
    }

    public getArtificialPerson_args() {
    }

    public getArtificialPerson_args(
      String clientId,
      String orgCode)
    {
      this();
      this.clientId = clientId;
      this.orgCode = orgCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArtificialPerson_args(getArtificialPerson_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetOrgCode()) {
        this.orgCode = other.orgCode;
      }
    }

    public getArtificialPerson_args deepCopy() {
      return new getArtificialPerson_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.orgCode = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getArtificialPerson_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getOrgCode() {
      return this.orgCode;
    }

    public getArtificialPerson_args setOrgCode(String orgCode) {
      this.orgCode = orgCode;
      return this;
    }

    public void unsetOrgCode() {
      this.orgCode = null;
    }

    /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgCode() {
      return this.orgCode != null;
    }

    public void setOrgCodeIsSet(boolean value) {
      if (!value) {
        this.orgCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ORG_CODE:
        if (value == null) {
          unsetOrgCode();
        } else {
          setOrgCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case ORG_CODE:
        return getOrgCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case ORG_CODE:
        return isSetOrgCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArtificialPerson_args)
        return this.equals((getArtificialPerson_args)that);
      return false;
    }

    public boolean equals(getArtificialPerson_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_orgCode = true && this.isSetOrgCode();
      boolean that_present_orgCode = true && that.isSetOrgCode();
      if (this_present_orgCode || that_present_orgCode) {
        if (!(this_present_orgCode && that_present_orgCode))
          return false;
        if (!this.orgCode.equals(that.orgCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_orgCode = true && (isSetOrgCode());
      list.add(present_orgCode);
      if (present_orgCode)
        list.add(orgCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getArtificialPerson_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArtificialPerson_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgCode:");
      if (this.orgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArtificialPerson_argsStandardSchemeFactory implements SchemeFactory {
      public getArtificialPerson_argsStandardScheme getScheme() {
        return new getArtificialPerson_argsStandardScheme();
      }
    }

    private static class getArtificialPerson_argsStandardScheme extends StandardScheme<getArtificialPerson_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArtificialPerson_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORG_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orgCode = iprot.readString();
                struct.setOrgCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArtificialPerson_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.orgCode != null) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.orgCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArtificialPerson_argsTupleSchemeFactory implements SchemeFactory {
      public getArtificialPerson_argsTupleScheme getScheme() {
        return new getArtificialPerson_argsTupleScheme();
      }
    }

    private static class getArtificialPerson_argsTupleScheme extends TupleScheme<getArtificialPerson_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArtificialPerson_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetOrgCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetOrgCode()) {
          oprot.writeString(struct.orgCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArtificialPerson_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orgCode = iprot.readString();
          struct.setOrgCodeIsSet(true);
        }
      }
    }

  }

  public static class getArtificialPerson_result implements org.apache.thrift.TBase<getArtificialPerson_result, getArtificialPerson_result._Fields>, java.io.Serializable, Cloneable, Comparable<getArtificialPerson_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArtificialPerson_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getArtificialPerson_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getArtificialPerson_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.OrgVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OrgVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArtificialPerson_result.class, metaDataMap);
    }

    public getArtificialPerson_result() {
    }

    public getArtificialPerson_result(
      List<com.froad.thrift.vo.OrgVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArtificialPerson_result(getArtificialPerson_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.OrgVo> __this__success = new ArrayList<com.froad.thrift.vo.OrgVo>(other.success.size());
        for (com.froad.thrift.vo.OrgVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.OrgVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getArtificialPerson_result deepCopy() {
      return new getArtificialPerson_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.OrgVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.OrgVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.OrgVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.OrgVo> getSuccess() {
      return this.success;
    }

    public getArtificialPerson_result setSuccess(List<com.froad.thrift.vo.OrgVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.OrgVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArtificialPerson_result)
        return this.equals((getArtificialPerson_result)that);
      return false;
    }

    public boolean equals(getArtificialPerson_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getArtificialPerson_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArtificialPerson_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArtificialPerson_resultStandardSchemeFactory implements SchemeFactory {
      public getArtificialPerson_resultStandardScheme getScheme() {
        return new getArtificialPerson_resultStandardScheme();
      }
    }

    private static class getArtificialPerson_resultStandardScheme extends StandardScheme<getArtificialPerson_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArtificialPerson_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.OrgVo>(_list40.size);
                  com.froad.thrift.vo.OrgVo _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new com.froad.thrift.vo.OrgVo();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArtificialPerson_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.OrgVo _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArtificialPerson_resultTupleSchemeFactory implements SchemeFactory {
      public getArtificialPerson_resultTupleScheme getScheme() {
        return new getArtificialPerson_resultTupleScheme();
      }
    }

    private static class getArtificialPerson_resultTupleScheme extends TupleScheme<getArtificialPerson_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArtificialPerson_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.OrgVo _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArtificialPerson_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.OrgVo>(_list45.size);
            com.froad.thrift.vo.OrgVo _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new com.froad.thrift.vo.OrgVo();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getArtificialPersonByAdd_args implements org.apache.thrift.TBase<getArtificialPersonByAdd_args, getArtificialPersonByAdd_args._Fields>, java.io.Serializable, Cloneable, Comparable<getArtificialPersonByAdd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArtificialPersonByAdd_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getArtificialPersonByAdd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getArtificialPersonByAdd_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String orgCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      ORG_CODE((short)2, "orgCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ORG_CODE
            return ORG_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArtificialPersonByAdd_args.class, metaDataMap);
    }

    public getArtificialPersonByAdd_args() {
    }

    public getArtificialPersonByAdd_args(
      String clientId,
      String orgCode)
    {
      this();
      this.clientId = clientId;
      this.orgCode = orgCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArtificialPersonByAdd_args(getArtificialPersonByAdd_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetOrgCode()) {
        this.orgCode = other.orgCode;
      }
    }

    public getArtificialPersonByAdd_args deepCopy() {
      return new getArtificialPersonByAdd_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.orgCode = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getArtificialPersonByAdd_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getOrgCode() {
      return this.orgCode;
    }

    public getArtificialPersonByAdd_args setOrgCode(String orgCode) {
      this.orgCode = orgCode;
      return this;
    }

    public void unsetOrgCode() {
      this.orgCode = null;
    }

    /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgCode() {
      return this.orgCode != null;
    }

    public void setOrgCodeIsSet(boolean value) {
      if (!value) {
        this.orgCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ORG_CODE:
        if (value == null) {
          unsetOrgCode();
        } else {
          setOrgCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case ORG_CODE:
        return getOrgCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case ORG_CODE:
        return isSetOrgCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArtificialPersonByAdd_args)
        return this.equals((getArtificialPersonByAdd_args)that);
      return false;
    }

    public boolean equals(getArtificialPersonByAdd_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_orgCode = true && this.isSetOrgCode();
      boolean that_present_orgCode = true && that.isSetOrgCode();
      if (this_present_orgCode || that_present_orgCode) {
        if (!(this_present_orgCode && that_present_orgCode))
          return false;
        if (!this.orgCode.equals(that.orgCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_orgCode = true && (isSetOrgCode());
      list.add(present_orgCode);
      if (present_orgCode)
        list.add(orgCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getArtificialPersonByAdd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArtificialPersonByAdd_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgCode:");
      if (this.orgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArtificialPersonByAdd_argsStandardSchemeFactory implements SchemeFactory {
      public getArtificialPersonByAdd_argsStandardScheme getScheme() {
        return new getArtificialPersonByAdd_argsStandardScheme();
      }
    }

    private static class getArtificialPersonByAdd_argsStandardScheme extends StandardScheme<getArtificialPersonByAdd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArtificialPersonByAdd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORG_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orgCode = iprot.readString();
                struct.setOrgCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArtificialPersonByAdd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.orgCode != null) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.orgCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArtificialPersonByAdd_argsTupleSchemeFactory implements SchemeFactory {
      public getArtificialPersonByAdd_argsTupleScheme getScheme() {
        return new getArtificialPersonByAdd_argsTupleScheme();
      }
    }

    private static class getArtificialPersonByAdd_argsTupleScheme extends TupleScheme<getArtificialPersonByAdd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArtificialPersonByAdd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetOrgCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetOrgCode()) {
          oprot.writeString(struct.orgCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArtificialPersonByAdd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orgCode = iprot.readString();
          struct.setOrgCodeIsSet(true);
        }
      }
    }

  }

  public static class getArtificialPersonByAdd_result implements org.apache.thrift.TBase<getArtificialPersonByAdd_result, getArtificialPersonByAdd_result._Fields>, java.io.Serializable, Cloneable, Comparable<getArtificialPersonByAdd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArtificialPersonByAdd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getArtificialPersonByAdd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getArtificialPersonByAdd_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.OrgVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OrgVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArtificialPersonByAdd_result.class, metaDataMap);
    }

    public getArtificialPersonByAdd_result() {
    }

    public getArtificialPersonByAdd_result(
      List<com.froad.thrift.vo.OrgVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArtificialPersonByAdd_result(getArtificialPersonByAdd_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.OrgVo> __this__success = new ArrayList<com.froad.thrift.vo.OrgVo>(other.success.size());
        for (com.froad.thrift.vo.OrgVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.OrgVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getArtificialPersonByAdd_result deepCopy() {
      return new getArtificialPersonByAdd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.OrgVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.OrgVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.OrgVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.OrgVo> getSuccess() {
      return this.success;
    }

    public getArtificialPersonByAdd_result setSuccess(List<com.froad.thrift.vo.OrgVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.OrgVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArtificialPersonByAdd_result)
        return this.equals((getArtificialPersonByAdd_result)that);
      return false;
    }

    public boolean equals(getArtificialPersonByAdd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getArtificialPersonByAdd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArtificialPersonByAdd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArtificialPersonByAdd_resultStandardSchemeFactory implements SchemeFactory {
      public getArtificialPersonByAdd_resultStandardScheme getScheme() {
        return new getArtificialPersonByAdd_resultStandardScheme();
      }
    }

    private static class getArtificialPersonByAdd_resultStandardScheme extends StandardScheme<getArtificialPersonByAdd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArtificialPersonByAdd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.OrgVo>(_list48.size);
                  com.froad.thrift.vo.OrgVo _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new com.froad.thrift.vo.OrgVo();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArtificialPersonByAdd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.OrgVo _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArtificialPersonByAdd_resultTupleSchemeFactory implements SchemeFactory {
      public getArtificialPersonByAdd_resultTupleScheme getScheme() {
        return new getArtificialPersonByAdd_resultTupleScheme();
      }
    }

    private static class getArtificialPersonByAdd_resultTupleScheme extends TupleScheme<getArtificialPersonByAdd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArtificialPersonByAdd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.OrgVo _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArtificialPersonByAdd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.OrgVo>(_list53.size);
            com.froad.thrift.vo.OrgVo _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new com.froad.thrift.vo.OrgVo();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getArtificialPersonByNotAdd_args implements org.apache.thrift.TBase<getArtificialPersonByNotAdd_args, getArtificialPersonByNotAdd_args._Fields>, java.io.Serializable, Cloneable, Comparable<getArtificialPersonByNotAdd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArtificialPersonByNotAdd_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getArtificialPersonByNotAdd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getArtificialPersonByNotAdd_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String orgCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      ORG_CODE((short)2, "orgCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ORG_CODE
            return ORG_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArtificialPersonByNotAdd_args.class, metaDataMap);
    }

    public getArtificialPersonByNotAdd_args() {
    }

    public getArtificialPersonByNotAdd_args(
      String clientId,
      String orgCode)
    {
      this();
      this.clientId = clientId;
      this.orgCode = orgCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArtificialPersonByNotAdd_args(getArtificialPersonByNotAdd_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetOrgCode()) {
        this.orgCode = other.orgCode;
      }
    }

    public getArtificialPersonByNotAdd_args deepCopy() {
      return new getArtificialPersonByNotAdd_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.orgCode = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getArtificialPersonByNotAdd_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getOrgCode() {
      return this.orgCode;
    }

    public getArtificialPersonByNotAdd_args setOrgCode(String orgCode) {
      this.orgCode = orgCode;
      return this;
    }

    public void unsetOrgCode() {
      this.orgCode = null;
    }

    /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgCode() {
      return this.orgCode != null;
    }

    public void setOrgCodeIsSet(boolean value) {
      if (!value) {
        this.orgCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ORG_CODE:
        if (value == null) {
          unsetOrgCode();
        } else {
          setOrgCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case ORG_CODE:
        return getOrgCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case ORG_CODE:
        return isSetOrgCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArtificialPersonByNotAdd_args)
        return this.equals((getArtificialPersonByNotAdd_args)that);
      return false;
    }

    public boolean equals(getArtificialPersonByNotAdd_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_orgCode = true && this.isSetOrgCode();
      boolean that_present_orgCode = true && that.isSetOrgCode();
      if (this_present_orgCode || that_present_orgCode) {
        if (!(this_present_orgCode && that_present_orgCode))
          return false;
        if (!this.orgCode.equals(that.orgCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_orgCode = true && (isSetOrgCode());
      list.add(present_orgCode);
      if (present_orgCode)
        list.add(orgCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getArtificialPersonByNotAdd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArtificialPersonByNotAdd_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgCode:");
      if (this.orgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArtificialPersonByNotAdd_argsStandardSchemeFactory implements SchemeFactory {
      public getArtificialPersonByNotAdd_argsStandardScheme getScheme() {
        return new getArtificialPersonByNotAdd_argsStandardScheme();
      }
    }

    private static class getArtificialPersonByNotAdd_argsStandardScheme extends StandardScheme<getArtificialPersonByNotAdd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArtificialPersonByNotAdd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORG_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orgCode = iprot.readString();
                struct.setOrgCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArtificialPersonByNotAdd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.orgCode != null) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.orgCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArtificialPersonByNotAdd_argsTupleSchemeFactory implements SchemeFactory {
      public getArtificialPersonByNotAdd_argsTupleScheme getScheme() {
        return new getArtificialPersonByNotAdd_argsTupleScheme();
      }
    }

    private static class getArtificialPersonByNotAdd_argsTupleScheme extends TupleScheme<getArtificialPersonByNotAdd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArtificialPersonByNotAdd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetOrgCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetOrgCode()) {
          oprot.writeString(struct.orgCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArtificialPersonByNotAdd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orgCode = iprot.readString();
          struct.setOrgCodeIsSet(true);
        }
      }
    }

  }

  public static class getArtificialPersonByNotAdd_result implements org.apache.thrift.TBase<getArtificialPersonByNotAdd_result, getArtificialPersonByNotAdd_result._Fields>, java.io.Serializable, Cloneable, Comparable<getArtificialPersonByNotAdd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getArtificialPersonByNotAdd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getArtificialPersonByNotAdd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getArtificialPersonByNotAdd_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.OrgVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OrgVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getArtificialPersonByNotAdd_result.class, metaDataMap);
    }

    public getArtificialPersonByNotAdd_result() {
    }

    public getArtificialPersonByNotAdd_result(
      List<com.froad.thrift.vo.OrgVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getArtificialPersonByNotAdd_result(getArtificialPersonByNotAdd_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.OrgVo> __this__success = new ArrayList<com.froad.thrift.vo.OrgVo>(other.success.size());
        for (com.froad.thrift.vo.OrgVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.OrgVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getArtificialPersonByNotAdd_result deepCopy() {
      return new getArtificialPersonByNotAdd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.OrgVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.OrgVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.OrgVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.OrgVo> getSuccess() {
      return this.success;
    }

    public getArtificialPersonByNotAdd_result setSuccess(List<com.froad.thrift.vo.OrgVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.OrgVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getArtificialPersonByNotAdd_result)
        return this.equals((getArtificialPersonByNotAdd_result)that);
      return false;
    }

    public boolean equals(getArtificialPersonByNotAdd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getArtificialPersonByNotAdd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getArtificialPersonByNotAdd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getArtificialPersonByNotAdd_resultStandardSchemeFactory implements SchemeFactory {
      public getArtificialPersonByNotAdd_resultStandardScheme getScheme() {
        return new getArtificialPersonByNotAdd_resultStandardScheme();
      }
    }

    private static class getArtificialPersonByNotAdd_resultStandardScheme extends StandardScheme<getArtificialPersonByNotAdd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getArtificialPersonByNotAdd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.OrgVo>(_list56.size);
                  com.froad.thrift.vo.OrgVo _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new com.froad.thrift.vo.OrgVo();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getArtificialPersonByNotAdd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.OrgVo _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getArtificialPersonByNotAdd_resultTupleSchemeFactory implements SchemeFactory {
      public getArtificialPersonByNotAdd_resultTupleScheme getScheme() {
        return new getArtificialPersonByNotAdd_resultTupleScheme();
      }
    }

    private static class getArtificialPersonByNotAdd_resultTupleScheme extends TupleScheme<getArtificialPersonByNotAdd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getArtificialPersonByNotAdd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.OrgVo _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getArtificialPersonByNotAdd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.OrgVo>(_list61.size);
            com.froad.thrift.vo.OrgVo _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new com.froad.thrift.vo.OrgVo();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
