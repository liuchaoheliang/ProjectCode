/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class AuditTaskService {

  /**
   * 审核任务订单服务
   * AuditTaskService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 查询待审核任务订单详情
     * @param thridId 若查商户待审核详情，则传商户id
     * @return AuditTaskVo
     * 
     * @param thridId
     */
    public com.froad.thrift.vo.AuditTaskVo getAuditTaskWait(String thridId) throws org.apache.thrift.TException;

    /**
     * 查询审核流水号详情
     * @param auditId 审核流水号
     * @return AuditTaskVo
     * 
     * @param auditId
     */
    public com.froad.thrift.vo.AuditTaskVo getAuditTaskByAuditId(String auditId) throws org.apache.thrift.TException;

    /**
     * 分页查询 AuditTask
     * @param page 分页对象
     * @param auditTaskFilterVo 过滤对象
     * @param flag 查询权限标志 1-查当前机构 2-查当前机构所有下属机构
     * @return AuditTaskPageVoRes
     * 
     * @param page
     * @param auditTaskFilterVo
     * @param flag
     */
    public com.froad.thrift.vo.AuditTaskPageVoRes getAuditTaskByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.AuditTaskFilterVo auditTaskFilterVo, int flag) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void getAuditTaskWait(String thridId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAuditTaskByAuditId(String auditId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAuditTaskByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.AuditTaskFilterVo auditTaskFilterVo, int flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.AuditTaskVo getAuditTaskWait(String thridId) throws org.apache.thrift.TException
    {
      send_getAuditTaskWait(thridId);
      return recv_getAuditTaskWait();
    }

    public void send_getAuditTaskWait(String thridId) throws org.apache.thrift.TException
    {
      getAuditTaskWait_args args = new getAuditTaskWait_args();
      args.setThridId(thridId);
      sendBase("getAuditTaskWait", args);
    }

    public com.froad.thrift.vo.AuditTaskVo recv_getAuditTaskWait() throws org.apache.thrift.TException
    {
      getAuditTaskWait_result result = new getAuditTaskWait_result();
      receiveBase(result, "getAuditTaskWait");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAuditTaskWait failed: unknown result");
    }

    public com.froad.thrift.vo.AuditTaskVo getAuditTaskByAuditId(String auditId) throws org.apache.thrift.TException
    {
      send_getAuditTaskByAuditId(auditId);
      return recv_getAuditTaskByAuditId();
    }

    public void send_getAuditTaskByAuditId(String auditId) throws org.apache.thrift.TException
    {
      getAuditTaskByAuditId_args args = new getAuditTaskByAuditId_args();
      args.setAuditId(auditId);
      sendBase("getAuditTaskByAuditId", args);
    }

    public com.froad.thrift.vo.AuditTaskVo recv_getAuditTaskByAuditId() throws org.apache.thrift.TException
    {
      getAuditTaskByAuditId_result result = new getAuditTaskByAuditId_result();
      receiveBase(result, "getAuditTaskByAuditId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAuditTaskByAuditId failed: unknown result");
    }

    public com.froad.thrift.vo.AuditTaskPageVoRes getAuditTaskByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.AuditTaskFilterVo auditTaskFilterVo, int flag) throws org.apache.thrift.TException
    {
      send_getAuditTaskByPage(page, auditTaskFilterVo, flag);
      return recv_getAuditTaskByPage();
    }

    public void send_getAuditTaskByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.AuditTaskFilterVo auditTaskFilterVo, int flag) throws org.apache.thrift.TException
    {
      getAuditTaskByPage_args args = new getAuditTaskByPage_args();
      args.setPage(page);
      args.setAuditTaskFilterVo(auditTaskFilterVo);
      args.setFlag(flag);
      sendBase("getAuditTaskByPage", args);
    }

    public com.froad.thrift.vo.AuditTaskPageVoRes recv_getAuditTaskByPage() throws org.apache.thrift.TException
    {
      getAuditTaskByPage_result result = new getAuditTaskByPage_result();
      receiveBase(result, "getAuditTaskByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAuditTaskByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAuditTaskWait(String thridId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAuditTaskWait_call method_call = new getAuditTaskWait_call(thridId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAuditTaskWait_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String thridId;
      public getAuditTaskWait_call(String thridId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.thridId = thridId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAuditTaskWait", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAuditTaskWait_args args = new getAuditTaskWait_args();
        args.setThridId(thridId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AuditTaskVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAuditTaskWait();
      }
    }

    public void getAuditTaskByAuditId(String auditId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAuditTaskByAuditId_call method_call = new getAuditTaskByAuditId_call(auditId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAuditTaskByAuditId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String auditId;
      public getAuditTaskByAuditId_call(String auditId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auditId = auditId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAuditTaskByAuditId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAuditTaskByAuditId_args args = new getAuditTaskByAuditId_args();
        args.setAuditId(auditId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AuditTaskVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAuditTaskByAuditId();
      }
    }

    public void getAuditTaskByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.AuditTaskFilterVo auditTaskFilterVo, int flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAuditTaskByPage_call method_call = new getAuditTaskByPage_call(page, auditTaskFilterVo, flag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAuditTaskByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.AuditTaskFilterVo auditTaskFilterVo;
      private int flag;
      public getAuditTaskByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.AuditTaskFilterVo auditTaskFilterVo, int flag, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.auditTaskFilterVo = auditTaskFilterVo;
        this.flag = flag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAuditTaskByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAuditTaskByPage_args args = new getAuditTaskByPage_args();
        args.setPage(page);
        args.setAuditTaskFilterVo(auditTaskFilterVo);
        args.setFlag(flag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AuditTaskPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAuditTaskByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAuditTaskWait", new getAuditTaskWait());
      processMap.put("getAuditTaskByAuditId", new getAuditTaskByAuditId());
      processMap.put("getAuditTaskByPage", new getAuditTaskByPage());
      return processMap;
    }

    public static class getAuditTaskWait<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAuditTaskWait_args> {
      public getAuditTaskWait() {
        super("getAuditTaskWait");
      }

      public getAuditTaskWait_args getEmptyArgsInstance() {
        return new getAuditTaskWait_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAuditTaskWait_result getResult(I iface, getAuditTaskWait_args args) throws org.apache.thrift.TException {
        getAuditTaskWait_result result = new getAuditTaskWait_result();
        result.success = iface.getAuditTaskWait(args.thridId);
        return result;
      }
    }

    public static class getAuditTaskByAuditId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAuditTaskByAuditId_args> {
      public getAuditTaskByAuditId() {
        super("getAuditTaskByAuditId");
      }

      public getAuditTaskByAuditId_args getEmptyArgsInstance() {
        return new getAuditTaskByAuditId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAuditTaskByAuditId_result getResult(I iface, getAuditTaskByAuditId_args args) throws org.apache.thrift.TException {
        getAuditTaskByAuditId_result result = new getAuditTaskByAuditId_result();
        result.success = iface.getAuditTaskByAuditId(args.auditId);
        return result;
      }
    }

    public static class getAuditTaskByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAuditTaskByPage_args> {
      public getAuditTaskByPage() {
        super("getAuditTaskByPage");
      }

      public getAuditTaskByPage_args getEmptyArgsInstance() {
        return new getAuditTaskByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAuditTaskByPage_result getResult(I iface, getAuditTaskByPage_args args) throws org.apache.thrift.TException {
        getAuditTaskByPage_result result = new getAuditTaskByPage_result();
        result.success = iface.getAuditTaskByPage(args.page, args.auditTaskFilterVo, args.flag);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAuditTaskWait", new getAuditTaskWait());
      processMap.put("getAuditTaskByAuditId", new getAuditTaskByAuditId());
      processMap.put("getAuditTaskByPage", new getAuditTaskByPage());
      return processMap;
    }

    public static class getAuditTaskWait<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAuditTaskWait_args, com.froad.thrift.vo.AuditTaskVo> {
      public getAuditTaskWait() {
        super("getAuditTaskWait");
      }

      public getAuditTaskWait_args getEmptyArgsInstance() {
        return new getAuditTaskWait_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AuditTaskVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AuditTaskVo>() { 
          public void onComplete(com.froad.thrift.vo.AuditTaskVo o) {
            getAuditTaskWait_result result = new getAuditTaskWait_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAuditTaskWait_result result = new getAuditTaskWait_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAuditTaskWait_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AuditTaskVo> resultHandler) throws TException {
        iface.getAuditTaskWait(args.thridId,resultHandler);
      }
    }

    public static class getAuditTaskByAuditId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAuditTaskByAuditId_args, com.froad.thrift.vo.AuditTaskVo> {
      public getAuditTaskByAuditId() {
        super("getAuditTaskByAuditId");
      }

      public getAuditTaskByAuditId_args getEmptyArgsInstance() {
        return new getAuditTaskByAuditId_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AuditTaskVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AuditTaskVo>() { 
          public void onComplete(com.froad.thrift.vo.AuditTaskVo o) {
            getAuditTaskByAuditId_result result = new getAuditTaskByAuditId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAuditTaskByAuditId_result result = new getAuditTaskByAuditId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAuditTaskByAuditId_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AuditTaskVo> resultHandler) throws TException {
        iface.getAuditTaskByAuditId(args.auditId,resultHandler);
      }
    }

    public static class getAuditTaskByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAuditTaskByPage_args, com.froad.thrift.vo.AuditTaskPageVoRes> {
      public getAuditTaskByPage() {
        super("getAuditTaskByPage");
      }

      public getAuditTaskByPage_args getEmptyArgsInstance() {
        return new getAuditTaskByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AuditTaskPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AuditTaskPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.AuditTaskPageVoRes o) {
            getAuditTaskByPage_result result = new getAuditTaskByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAuditTaskByPage_result result = new getAuditTaskByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAuditTaskByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AuditTaskPageVoRes> resultHandler) throws TException {
        iface.getAuditTaskByPage(args.page, args.auditTaskFilterVo, args.flag,resultHandler);
      }
    }

  }

  public static class getAuditTaskWait_args implements org.apache.thrift.TBase<getAuditTaskWait_args, getAuditTaskWait_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAuditTaskWait_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAuditTaskWait_args");

    private static final org.apache.thrift.protocol.TField THRID_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("thridId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAuditTaskWait_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAuditTaskWait_argsTupleSchemeFactory());
    }

    public String thridId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      THRID_ID((short)1, "thridId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // THRID_ID
            return THRID_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.THRID_ID, new org.apache.thrift.meta_data.FieldMetaData("thridId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAuditTaskWait_args.class, metaDataMap);
    }

    public getAuditTaskWait_args() {
    }

    public getAuditTaskWait_args(
      String thridId)
    {
      this();
      this.thridId = thridId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAuditTaskWait_args(getAuditTaskWait_args other) {
      if (other.isSetThridId()) {
        this.thridId = other.thridId;
      }
    }

    public getAuditTaskWait_args deepCopy() {
      return new getAuditTaskWait_args(this);
    }

    @Override
    public void clear() {
      this.thridId = null;
    }

    public String getThridId() {
      return this.thridId;
    }

    public getAuditTaskWait_args setThridId(String thridId) {
      this.thridId = thridId;
      return this;
    }

    public void unsetThridId() {
      this.thridId = null;
    }

    /** Returns true if field thridId is set (has been assigned a value) and false otherwise */
    public boolean isSetThridId() {
      return this.thridId != null;
    }

    public void setThridIdIsSet(boolean value) {
      if (!value) {
        this.thridId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case THRID_ID:
        if (value == null) {
          unsetThridId();
        } else {
          setThridId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case THRID_ID:
        return getThridId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case THRID_ID:
        return isSetThridId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAuditTaskWait_args)
        return this.equals((getAuditTaskWait_args)that);
      return false;
    }

    public boolean equals(getAuditTaskWait_args that) {
      if (that == null)
        return false;

      boolean this_present_thridId = true && this.isSetThridId();
      boolean that_present_thridId = true && that.isSetThridId();
      if (this_present_thridId || that_present_thridId) {
        if (!(this_present_thridId && that_present_thridId))
          return false;
        if (!this.thridId.equals(that.thridId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_thridId = true && (isSetThridId());
      list.add(present_thridId);
      if (present_thridId)
        list.add(thridId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAuditTaskWait_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetThridId()).compareTo(other.isSetThridId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThridId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thridId, other.thridId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAuditTaskWait_args(");
      boolean first = true;

      sb.append("thridId:");
      if (this.thridId == null) {
        sb.append("null");
      } else {
        sb.append(this.thridId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAuditTaskWait_argsStandardSchemeFactory implements SchemeFactory {
      public getAuditTaskWait_argsStandardScheme getScheme() {
        return new getAuditTaskWait_argsStandardScheme();
      }
    }

    private static class getAuditTaskWait_argsStandardScheme extends StandardScheme<getAuditTaskWait_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAuditTaskWait_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // THRID_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.thridId = iprot.readString();
                struct.setThridIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAuditTaskWait_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.thridId != null) {
          oprot.writeFieldBegin(THRID_ID_FIELD_DESC);
          oprot.writeString(struct.thridId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAuditTaskWait_argsTupleSchemeFactory implements SchemeFactory {
      public getAuditTaskWait_argsTupleScheme getScheme() {
        return new getAuditTaskWait_argsTupleScheme();
      }
    }

    private static class getAuditTaskWait_argsTupleScheme extends TupleScheme<getAuditTaskWait_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAuditTaskWait_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetThridId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetThridId()) {
          oprot.writeString(struct.thridId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAuditTaskWait_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.thridId = iprot.readString();
          struct.setThridIdIsSet(true);
        }
      }
    }

  }

  public static class getAuditTaskWait_result implements org.apache.thrift.TBase<getAuditTaskWait_result, getAuditTaskWait_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAuditTaskWait_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAuditTaskWait_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAuditTaskWait_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAuditTaskWait_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AuditTaskVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AuditTaskVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAuditTaskWait_result.class, metaDataMap);
    }

    public getAuditTaskWait_result() {
    }

    public getAuditTaskWait_result(
      com.froad.thrift.vo.AuditTaskVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAuditTaskWait_result(getAuditTaskWait_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AuditTaskVo(other.success);
      }
    }

    public getAuditTaskWait_result deepCopy() {
      return new getAuditTaskWait_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AuditTaskVo getSuccess() {
      return this.success;
    }

    public getAuditTaskWait_result setSuccess(com.froad.thrift.vo.AuditTaskVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AuditTaskVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAuditTaskWait_result)
        return this.equals((getAuditTaskWait_result)that);
      return false;
    }

    public boolean equals(getAuditTaskWait_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAuditTaskWait_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAuditTaskWait_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAuditTaskWait_resultStandardSchemeFactory implements SchemeFactory {
      public getAuditTaskWait_resultStandardScheme getScheme() {
        return new getAuditTaskWait_resultStandardScheme();
      }
    }

    private static class getAuditTaskWait_resultStandardScheme extends StandardScheme<getAuditTaskWait_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAuditTaskWait_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AuditTaskVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAuditTaskWait_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAuditTaskWait_resultTupleSchemeFactory implements SchemeFactory {
      public getAuditTaskWait_resultTupleScheme getScheme() {
        return new getAuditTaskWait_resultTupleScheme();
      }
    }

    private static class getAuditTaskWait_resultTupleScheme extends TupleScheme<getAuditTaskWait_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAuditTaskWait_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAuditTaskWait_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AuditTaskVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAuditTaskByAuditId_args implements org.apache.thrift.TBase<getAuditTaskByAuditId_args, getAuditTaskByAuditId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAuditTaskByAuditId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAuditTaskByAuditId_args");

    private static final org.apache.thrift.protocol.TField AUDIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("auditId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAuditTaskByAuditId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAuditTaskByAuditId_argsTupleSchemeFactory());
    }

    public String auditId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUDIT_ID((short)1, "auditId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUDIT_ID
            return AUDIT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUDIT_ID, new org.apache.thrift.meta_data.FieldMetaData("auditId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAuditTaskByAuditId_args.class, metaDataMap);
    }

    public getAuditTaskByAuditId_args() {
    }

    public getAuditTaskByAuditId_args(
      String auditId)
    {
      this();
      this.auditId = auditId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAuditTaskByAuditId_args(getAuditTaskByAuditId_args other) {
      if (other.isSetAuditId()) {
        this.auditId = other.auditId;
      }
    }

    public getAuditTaskByAuditId_args deepCopy() {
      return new getAuditTaskByAuditId_args(this);
    }

    @Override
    public void clear() {
      this.auditId = null;
    }

    public String getAuditId() {
      return this.auditId;
    }

    public getAuditTaskByAuditId_args setAuditId(String auditId) {
      this.auditId = auditId;
      return this;
    }

    public void unsetAuditId() {
      this.auditId = null;
    }

    /** Returns true if field auditId is set (has been assigned a value) and false otherwise */
    public boolean isSetAuditId() {
      return this.auditId != null;
    }

    public void setAuditIdIsSet(boolean value) {
      if (!value) {
        this.auditId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUDIT_ID:
        if (value == null) {
          unsetAuditId();
        } else {
          setAuditId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUDIT_ID:
        return getAuditId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUDIT_ID:
        return isSetAuditId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAuditTaskByAuditId_args)
        return this.equals((getAuditTaskByAuditId_args)that);
      return false;
    }

    public boolean equals(getAuditTaskByAuditId_args that) {
      if (that == null)
        return false;

      boolean this_present_auditId = true && this.isSetAuditId();
      boolean that_present_auditId = true && that.isSetAuditId();
      if (this_present_auditId || that_present_auditId) {
        if (!(this_present_auditId && that_present_auditId))
          return false;
        if (!this.auditId.equals(that.auditId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_auditId = true && (isSetAuditId());
      list.add(present_auditId);
      if (present_auditId)
        list.add(auditId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAuditTaskByAuditId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuditId()).compareTo(other.isSetAuditId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuditId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditId, other.auditId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAuditTaskByAuditId_args(");
      boolean first = true;

      sb.append("auditId:");
      if (this.auditId == null) {
        sb.append("null");
      } else {
        sb.append(this.auditId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAuditTaskByAuditId_argsStandardSchemeFactory implements SchemeFactory {
      public getAuditTaskByAuditId_argsStandardScheme getScheme() {
        return new getAuditTaskByAuditId_argsStandardScheme();
      }
    }

    private static class getAuditTaskByAuditId_argsStandardScheme extends StandardScheme<getAuditTaskByAuditId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAuditTaskByAuditId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUDIT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.auditId = iprot.readString();
                struct.setAuditIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAuditTaskByAuditId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auditId != null) {
          oprot.writeFieldBegin(AUDIT_ID_FIELD_DESC);
          oprot.writeString(struct.auditId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAuditTaskByAuditId_argsTupleSchemeFactory implements SchemeFactory {
      public getAuditTaskByAuditId_argsTupleScheme getScheme() {
        return new getAuditTaskByAuditId_argsTupleScheme();
      }
    }

    private static class getAuditTaskByAuditId_argsTupleScheme extends TupleScheme<getAuditTaskByAuditId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAuditTaskByAuditId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuditId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuditId()) {
          oprot.writeString(struct.auditId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAuditTaskByAuditId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.auditId = iprot.readString();
          struct.setAuditIdIsSet(true);
        }
      }
    }

  }

  public static class getAuditTaskByAuditId_result implements org.apache.thrift.TBase<getAuditTaskByAuditId_result, getAuditTaskByAuditId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAuditTaskByAuditId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAuditTaskByAuditId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAuditTaskByAuditId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAuditTaskByAuditId_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AuditTaskVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AuditTaskVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAuditTaskByAuditId_result.class, metaDataMap);
    }

    public getAuditTaskByAuditId_result() {
    }

    public getAuditTaskByAuditId_result(
      com.froad.thrift.vo.AuditTaskVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAuditTaskByAuditId_result(getAuditTaskByAuditId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AuditTaskVo(other.success);
      }
    }

    public getAuditTaskByAuditId_result deepCopy() {
      return new getAuditTaskByAuditId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AuditTaskVo getSuccess() {
      return this.success;
    }

    public getAuditTaskByAuditId_result setSuccess(com.froad.thrift.vo.AuditTaskVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AuditTaskVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAuditTaskByAuditId_result)
        return this.equals((getAuditTaskByAuditId_result)that);
      return false;
    }

    public boolean equals(getAuditTaskByAuditId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAuditTaskByAuditId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAuditTaskByAuditId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAuditTaskByAuditId_resultStandardSchemeFactory implements SchemeFactory {
      public getAuditTaskByAuditId_resultStandardScheme getScheme() {
        return new getAuditTaskByAuditId_resultStandardScheme();
      }
    }

    private static class getAuditTaskByAuditId_resultStandardScheme extends StandardScheme<getAuditTaskByAuditId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAuditTaskByAuditId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AuditTaskVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAuditTaskByAuditId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAuditTaskByAuditId_resultTupleSchemeFactory implements SchemeFactory {
      public getAuditTaskByAuditId_resultTupleScheme getScheme() {
        return new getAuditTaskByAuditId_resultTupleScheme();
      }
    }

    private static class getAuditTaskByAuditId_resultTupleScheme extends TupleScheme<getAuditTaskByAuditId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAuditTaskByAuditId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAuditTaskByAuditId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AuditTaskVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAuditTaskByPage_args implements org.apache.thrift.TBase<getAuditTaskByPage_args, getAuditTaskByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAuditTaskByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAuditTaskByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUDIT_TASK_FILTER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("auditTaskFilterVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAuditTaskByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAuditTaskByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.AuditTaskFilterVo auditTaskFilterVo; // required
    public int flag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      AUDIT_TASK_FILTER_VO((short)2, "auditTaskFilterVo"),
      FLAG((short)3, "flag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // AUDIT_TASK_FILTER_VO
            return AUDIT_TASK_FILTER_VO;
          case 3: // FLAG
            return FLAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FLAG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.AUDIT_TASK_FILTER_VO, new org.apache.thrift.meta_data.FieldMetaData("auditTaskFilterVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AuditTaskFilterVo.class)));
      tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAuditTaskByPage_args.class, metaDataMap);
    }

    public getAuditTaskByPage_args() {
    }

    public getAuditTaskByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.AuditTaskFilterVo auditTaskFilterVo,
      int flag)
    {
      this();
      this.page = page;
      this.auditTaskFilterVo = auditTaskFilterVo;
      this.flag = flag;
      setFlagIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAuditTaskByPage_args(getAuditTaskByPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetAuditTaskFilterVo()) {
        this.auditTaskFilterVo = new com.froad.thrift.vo.AuditTaskFilterVo(other.auditTaskFilterVo);
      }
      this.flag = other.flag;
    }

    public getAuditTaskByPage_args deepCopy() {
      return new getAuditTaskByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.auditTaskFilterVo = null;
      setFlagIsSet(false);
      this.flag = 0;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getAuditTaskByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.AuditTaskFilterVo getAuditTaskFilterVo() {
      return this.auditTaskFilterVo;
    }

    public getAuditTaskByPage_args setAuditTaskFilterVo(com.froad.thrift.vo.AuditTaskFilterVo auditTaskFilterVo) {
      this.auditTaskFilterVo = auditTaskFilterVo;
      return this;
    }

    public void unsetAuditTaskFilterVo() {
      this.auditTaskFilterVo = null;
    }

    /** Returns true if field auditTaskFilterVo is set (has been assigned a value) and false otherwise */
    public boolean isSetAuditTaskFilterVo() {
      return this.auditTaskFilterVo != null;
    }

    public void setAuditTaskFilterVoIsSet(boolean value) {
      if (!value) {
        this.auditTaskFilterVo = null;
      }
    }

    public int getFlag() {
      return this.flag;
    }

    public getAuditTaskByPage_args setFlag(int flag) {
      this.flag = flag;
      setFlagIsSet(true);
      return this;
    }

    public void unsetFlag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    /** Returns true if field flag is set (has been assigned a value) and false otherwise */
    public boolean isSetFlag() {
      return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    public void setFlagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case AUDIT_TASK_FILTER_VO:
        if (value == null) {
          unsetAuditTaskFilterVo();
        } else {
          setAuditTaskFilterVo((com.froad.thrift.vo.AuditTaskFilterVo)value);
        }
        break;

      case FLAG:
        if (value == null) {
          unsetFlag();
        } else {
          setFlag((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case AUDIT_TASK_FILTER_VO:
        return getAuditTaskFilterVo();

      case FLAG:
        return Integer.valueOf(getFlag());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case AUDIT_TASK_FILTER_VO:
        return isSetAuditTaskFilterVo();
      case FLAG:
        return isSetFlag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAuditTaskByPage_args)
        return this.equals((getAuditTaskByPage_args)that);
      return false;
    }

    public boolean equals(getAuditTaskByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_auditTaskFilterVo = true && this.isSetAuditTaskFilterVo();
      boolean that_present_auditTaskFilterVo = true && that.isSetAuditTaskFilterVo();
      if (this_present_auditTaskFilterVo || that_present_auditTaskFilterVo) {
        if (!(this_present_auditTaskFilterVo && that_present_auditTaskFilterVo))
          return false;
        if (!this.auditTaskFilterVo.equals(that.auditTaskFilterVo))
          return false;
      }

      boolean this_present_flag = true;
      boolean that_present_flag = true;
      if (this_present_flag || that_present_flag) {
        if (!(this_present_flag && that_present_flag))
          return false;
        if (this.flag != that.flag)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_auditTaskFilterVo = true && (isSetAuditTaskFilterVo());
      list.add(present_auditTaskFilterVo);
      if (present_auditTaskFilterVo)
        list.add(auditTaskFilterVo);

      boolean present_flag = true;
      list.add(present_flag);
      if (present_flag)
        list.add(flag);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAuditTaskByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuditTaskFilterVo()).compareTo(other.isSetAuditTaskFilterVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuditTaskFilterVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditTaskFilterVo, other.auditTaskFilterVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAuditTaskByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auditTaskFilterVo:");
      if (this.auditTaskFilterVo == null) {
        sb.append("null");
      } else {
        sb.append(this.auditTaskFilterVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flag:");
      sb.append(this.flag);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (auditTaskFilterVo != null) {
        auditTaskFilterVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAuditTaskByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getAuditTaskByPage_argsStandardScheme getScheme() {
        return new getAuditTaskByPage_argsStandardScheme();
      }
    }

    private static class getAuditTaskByPage_argsStandardScheme extends StandardScheme<getAuditTaskByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAuditTaskByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUDIT_TASK_FILTER_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auditTaskFilterVo = new com.froad.thrift.vo.AuditTaskFilterVo();
                struct.auditTaskFilterVo.read(iprot);
                struct.setAuditTaskFilterVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.flag = iprot.readI32();
                struct.setFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAuditTaskByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.auditTaskFilterVo != null) {
          oprot.writeFieldBegin(AUDIT_TASK_FILTER_VO_FIELD_DESC);
          struct.auditTaskFilterVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeI32(struct.flag);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAuditTaskByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getAuditTaskByPage_argsTupleScheme getScheme() {
        return new getAuditTaskByPage_argsTupleScheme();
      }
    }

    private static class getAuditTaskByPage_argsTupleScheme extends TupleScheme<getAuditTaskByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAuditTaskByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetAuditTaskFilterVo()) {
          optionals.set(1);
        }
        if (struct.isSetFlag()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetAuditTaskFilterVo()) {
          struct.auditTaskFilterVo.write(oprot);
        }
        if (struct.isSetFlag()) {
          oprot.writeI32(struct.flag);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAuditTaskByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auditTaskFilterVo = new com.froad.thrift.vo.AuditTaskFilterVo();
          struct.auditTaskFilterVo.read(iprot);
          struct.setAuditTaskFilterVoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.flag = iprot.readI32();
          struct.setFlagIsSet(true);
        }
      }
    }

  }

  public static class getAuditTaskByPage_result implements org.apache.thrift.TBase<getAuditTaskByPage_result, getAuditTaskByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAuditTaskByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAuditTaskByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAuditTaskByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAuditTaskByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AuditTaskPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AuditTaskPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAuditTaskByPage_result.class, metaDataMap);
    }

    public getAuditTaskByPage_result() {
    }

    public getAuditTaskByPage_result(
      com.froad.thrift.vo.AuditTaskPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAuditTaskByPage_result(getAuditTaskByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AuditTaskPageVoRes(other.success);
      }
    }

    public getAuditTaskByPage_result deepCopy() {
      return new getAuditTaskByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AuditTaskPageVoRes getSuccess() {
      return this.success;
    }

    public getAuditTaskByPage_result setSuccess(com.froad.thrift.vo.AuditTaskPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AuditTaskPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAuditTaskByPage_result)
        return this.equals((getAuditTaskByPage_result)that);
      return false;
    }

    public boolean equals(getAuditTaskByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAuditTaskByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAuditTaskByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAuditTaskByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getAuditTaskByPage_resultStandardScheme getScheme() {
        return new getAuditTaskByPage_resultStandardScheme();
      }
    }

    private static class getAuditTaskByPage_resultStandardScheme extends StandardScheme<getAuditTaskByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAuditTaskByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AuditTaskPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAuditTaskByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAuditTaskByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getAuditTaskByPage_resultTupleScheme getScheme() {
        return new getAuditTaskByPage_resultTupleScheme();
      }
    }

    private static class getAuditTaskByPage_resultTupleScheme extends TupleScheme<getAuditTaskByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAuditTaskByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAuditTaskByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AuditTaskPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
