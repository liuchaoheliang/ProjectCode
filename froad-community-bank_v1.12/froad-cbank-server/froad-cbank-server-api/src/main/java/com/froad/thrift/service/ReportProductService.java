/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ReportProductService {

  public interface Iface {

    /**
     * 商品销售走势
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.ProductSaleTrendResVo getProductSaleTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 商品业务类型占比
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.TypePercentResVo getProductTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 商品类目占比
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.TypePercentResVo getProductCategoryPercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 商品销售详情列表
     * 
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.ProductSaleDetailResVo getProductSaleDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

    /**
     * 商品销售详情列表(分页)
     * 
     * @param pageVo
     * @param commonParamVo
     */
    public com.froad.thrift.vo.report.ProductSaleDetailPageVo getProductSaleDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getProductSaleTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductCategoryPercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductSaleDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductSaleDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.report.ProductSaleTrendResVo getProductSaleTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getProductSaleTrend(commonParamVo);
      return recv_getProductSaleTrend();
    }

    public void send_getProductSaleTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getProductSaleTrend_args args = new getProductSaleTrend_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getProductSaleTrend", args);
    }

    public com.froad.thrift.vo.report.ProductSaleTrendResVo recv_getProductSaleTrend() throws org.apache.thrift.TException
    {
      getProductSaleTrend_result result = new getProductSaleTrend_result();
      receiveBase(result, "getProductSaleTrend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductSaleTrend failed: unknown result");
    }

    public com.froad.thrift.vo.report.TypePercentResVo getProductTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getProductTypePercent(commonParamVo);
      return recv_getProductTypePercent();
    }

    public void send_getProductTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getProductTypePercent_args args = new getProductTypePercent_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getProductTypePercent", args);
    }

    public com.froad.thrift.vo.report.TypePercentResVo recv_getProductTypePercent() throws org.apache.thrift.TException
    {
      getProductTypePercent_result result = new getProductTypePercent_result();
      receiveBase(result, "getProductTypePercent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductTypePercent failed: unknown result");
    }

    public com.froad.thrift.vo.report.TypePercentResVo getProductCategoryPercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getProductCategoryPercent(commonParamVo);
      return recv_getProductCategoryPercent();
    }

    public void send_getProductCategoryPercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getProductCategoryPercent_args args = new getProductCategoryPercent_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getProductCategoryPercent", args);
    }

    public com.froad.thrift.vo.report.TypePercentResVo recv_getProductCategoryPercent() throws org.apache.thrift.TException
    {
      getProductCategoryPercent_result result = new getProductCategoryPercent_result();
      receiveBase(result, "getProductCategoryPercent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductCategoryPercent failed: unknown result");
    }

    public com.froad.thrift.vo.report.ProductSaleDetailResVo getProductSaleDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getProductSaleDetail(commonParamVo);
      return recv_getProductSaleDetail();
    }

    public void send_getProductSaleDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getProductSaleDetail_args args = new getProductSaleDetail_args();
      args.setCommonParamVo(commonParamVo);
      sendBase("getProductSaleDetail", args);
    }

    public com.froad.thrift.vo.report.ProductSaleDetailResVo recv_getProductSaleDetail() throws org.apache.thrift.TException
    {
      getProductSaleDetail_result result = new getProductSaleDetail_result();
      receiveBase(result, "getProductSaleDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductSaleDetail failed: unknown result");
    }

    public com.froad.thrift.vo.report.ProductSaleDetailPageVo getProductSaleDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      send_getProductSaleDetailListByPage(pageVo, commonParamVo);
      return recv_getProductSaleDetailListByPage();
    }

    public void send_getProductSaleDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo) throws org.apache.thrift.TException
    {
      getProductSaleDetailListByPage_args args = new getProductSaleDetailListByPage_args();
      args.setPageVo(pageVo);
      args.setCommonParamVo(commonParamVo);
      sendBase("getProductSaleDetailListByPage", args);
    }

    public com.froad.thrift.vo.report.ProductSaleDetailPageVo recv_getProductSaleDetailListByPage() throws org.apache.thrift.TException
    {
      getProductSaleDetailListByPage_result result = new getProductSaleDetailListByPage_result();
      receiveBase(result, "getProductSaleDetailListByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductSaleDetailListByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getProductSaleTrend(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductSaleTrend_call method_call = new getProductSaleTrend_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductSaleTrend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getProductSaleTrend_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductSaleTrend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductSaleTrend_args args = new getProductSaleTrend_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.ProductSaleTrendResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductSaleTrend();
      }
    }

    public void getProductTypePercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductTypePercent_call method_call = new getProductTypePercent_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductTypePercent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getProductTypePercent_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductTypePercent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductTypePercent_args args = new getProductTypePercent_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.TypePercentResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductTypePercent();
      }
    }

    public void getProductCategoryPercent(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductCategoryPercent_call method_call = new getProductCategoryPercent_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductCategoryPercent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getProductCategoryPercent_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductCategoryPercent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductCategoryPercent_args args = new getProductCategoryPercent_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.TypePercentResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductCategoryPercent();
      }
    }

    public void getProductSaleDetail(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductSaleDetail_call method_call = new getProductSaleDetail_call(commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductSaleDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getProductSaleDetail_call(com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductSaleDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductSaleDetail_args args = new getProductSaleDetail_args();
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.ProductSaleDetailResVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductSaleDetail();
      }
    }

    public void getProductSaleDetailListByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductSaleDetailListByPage_call method_call = new getProductSaleDetailListByPage_call(pageVo, commonParamVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductSaleDetailListByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo pageVo;
      private com.froad.thrift.vo.report.CommonParamVo commonParamVo;
      public getProductSaleDetailListByPage_call(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.report.CommonParamVo commonParamVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageVo = pageVo;
        this.commonParamVo = commonParamVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductSaleDetailListByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductSaleDetailListByPage_args args = new getProductSaleDetailListByPage_args();
        args.setPageVo(pageVo);
        args.setCommonParamVo(commonParamVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.report.ProductSaleDetailPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductSaleDetailListByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getProductSaleTrend", new getProductSaleTrend());
      processMap.put("getProductTypePercent", new getProductTypePercent());
      processMap.put("getProductCategoryPercent", new getProductCategoryPercent());
      processMap.put("getProductSaleDetail", new getProductSaleDetail());
      processMap.put("getProductSaleDetailListByPage", new getProductSaleDetailListByPage());
      return processMap;
    }

    public static class getProductSaleTrend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductSaleTrend_args> {
      public getProductSaleTrend() {
        super("getProductSaleTrend");
      }

      public getProductSaleTrend_args getEmptyArgsInstance() {
        return new getProductSaleTrend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductSaleTrend_result getResult(I iface, getProductSaleTrend_args args) throws org.apache.thrift.TException {
        getProductSaleTrend_result result = new getProductSaleTrend_result();
        result.success = iface.getProductSaleTrend(args.commonParamVo);
        return result;
      }
    }

    public static class getProductTypePercent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductTypePercent_args> {
      public getProductTypePercent() {
        super("getProductTypePercent");
      }

      public getProductTypePercent_args getEmptyArgsInstance() {
        return new getProductTypePercent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductTypePercent_result getResult(I iface, getProductTypePercent_args args) throws org.apache.thrift.TException {
        getProductTypePercent_result result = new getProductTypePercent_result();
        result.success = iface.getProductTypePercent(args.commonParamVo);
        return result;
      }
    }

    public static class getProductCategoryPercent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductCategoryPercent_args> {
      public getProductCategoryPercent() {
        super("getProductCategoryPercent");
      }

      public getProductCategoryPercent_args getEmptyArgsInstance() {
        return new getProductCategoryPercent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductCategoryPercent_result getResult(I iface, getProductCategoryPercent_args args) throws org.apache.thrift.TException {
        getProductCategoryPercent_result result = new getProductCategoryPercent_result();
        result.success = iface.getProductCategoryPercent(args.commonParamVo);
        return result;
      }
    }

    public static class getProductSaleDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductSaleDetail_args> {
      public getProductSaleDetail() {
        super("getProductSaleDetail");
      }

      public getProductSaleDetail_args getEmptyArgsInstance() {
        return new getProductSaleDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductSaleDetail_result getResult(I iface, getProductSaleDetail_args args) throws org.apache.thrift.TException {
        getProductSaleDetail_result result = new getProductSaleDetail_result();
        result.success = iface.getProductSaleDetail(args.commonParamVo);
        return result;
      }
    }

    public static class getProductSaleDetailListByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductSaleDetailListByPage_args> {
      public getProductSaleDetailListByPage() {
        super("getProductSaleDetailListByPage");
      }

      public getProductSaleDetailListByPage_args getEmptyArgsInstance() {
        return new getProductSaleDetailListByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductSaleDetailListByPage_result getResult(I iface, getProductSaleDetailListByPage_args args) throws org.apache.thrift.TException {
        getProductSaleDetailListByPage_result result = new getProductSaleDetailListByPage_result();
        result.success = iface.getProductSaleDetailListByPage(args.pageVo, args.commonParamVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getProductSaleTrend", new getProductSaleTrend());
      processMap.put("getProductTypePercent", new getProductTypePercent());
      processMap.put("getProductCategoryPercent", new getProductCategoryPercent());
      processMap.put("getProductSaleDetail", new getProductSaleDetail());
      processMap.put("getProductSaleDetailListByPage", new getProductSaleDetailListByPage());
      return processMap;
    }

    public static class getProductSaleTrend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductSaleTrend_args, com.froad.thrift.vo.report.ProductSaleTrendResVo> {
      public getProductSaleTrend() {
        super("getProductSaleTrend");
      }

      public getProductSaleTrend_args getEmptyArgsInstance() {
        return new getProductSaleTrend_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.ProductSaleTrendResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.ProductSaleTrendResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.ProductSaleTrendResVo o) {
            getProductSaleTrend_result result = new getProductSaleTrend_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductSaleTrend_result result = new getProductSaleTrend_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductSaleTrend_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.ProductSaleTrendResVo> resultHandler) throws TException {
        iface.getProductSaleTrend(args.commonParamVo,resultHandler);
      }
    }

    public static class getProductTypePercent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductTypePercent_args, com.froad.thrift.vo.report.TypePercentResVo> {
      public getProductTypePercent() {
        super("getProductTypePercent");
      }

      public getProductTypePercent_args getEmptyArgsInstance() {
        return new getProductTypePercent_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.TypePercentResVo o) {
            getProductTypePercent_result result = new getProductTypePercent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductTypePercent_result result = new getProductTypePercent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductTypePercent_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> resultHandler) throws TException {
        iface.getProductTypePercent(args.commonParamVo,resultHandler);
      }
    }

    public static class getProductCategoryPercent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductCategoryPercent_args, com.froad.thrift.vo.report.TypePercentResVo> {
      public getProductCategoryPercent() {
        super("getProductCategoryPercent");
      }

      public getProductCategoryPercent_args getEmptyArgsInstance() {
        return new getProductCategoryPercent_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.TypePercentResVo o) {
            getProductCategoryPercent_result result = new getProductCategoryPercent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductCategoryPercent_result result = new getProductCategoryPercent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductCategoryPercent_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.TypePercentResVo> resultHandler) throws TException {
        iface.getProductCategoryPercent(args.commonParamVo,resultHandler);
      }
    }

    public static class getProductSaleDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductSaleDetail_args, com.froad.thrift.vo.report.ProductSaleDetailResVo> {
      public getProductSaleDetail() {
        super("getProductSaleDetail");
      }

      public getProductSaleDetail_args getEmptyArgsInstance() {
        return new getProductSaleDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.ProductSaleDetailResVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.ProductSaleDetailResVo>() { 
          public void onComplete(com.froad.thrift.vo.report.ProductSaleDetailResVo o) {
            getProductSaleDetail_result result = new getProductSaleDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductSaleDetail_result result = new getProductSaleDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductSaleDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.ProductSaleDetailResVo> resultHandler) throws TException {
        iface.getProductSaleDetail(args.commonParamVo,resultHandler);
      }
    }

    public static class getProductSaleDetailListByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductSaleDetailListByPage_args, com.froad.thrift.vo.report.ProductSaleDetailPageVo> {
      public getProductSaleDetailListByPage() {
        super("getProductSaleDetailListByPage");
      }

      public getProductSaleDetailListByPage_args getEmptyArgsInstance() {
        return new getProductSaleDetailListByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.report.ProductSaleDetailPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.report.ProductSaleDetailPageVo>() { 
          public void onComplete(com.froad.thrift.vo.report.ProductSaleDetailPageVo o) {
            getProductSaleDetailListByPage_result result = new getProductSaleDetailListByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductSaleDetailListByPage_result result = new getProductSaleDetailListByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductSaleDetailListByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.report.ProductSaleDetailPageVo> resultHandler) throws TException {
        iface.getProductSaleDetailListByPage(args.pageVo, args.commonParamVo,resultHandler);
      }
    }

  }

  public static class getProductSaleTrend_args implements org.apache.thrift.TBase<getProductSaleTrend_args, getProductSaleTrend_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductSaleTrend_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductSaleTrend_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductSaleTrend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductSaleTrend_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductSaleTrend_args.class, metaDataMap);
    }

    public getProductSaleTrend_args() {
    }

    public getProductSaleTrend_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductSaleTrend_args(getProductSaleTrend_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getProductSaleTrend_args deepCopy() {
      return new getProductSaleTrend_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getProductSaleTrend_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductSaleTrend_args)
        return this.equals((getProductSaleTrend_args)that);
      return false;
    }

    public boolean equals(getProductSaleTrend_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductSaleTrend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductSaleTrend_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductSaleTrend_argsStandardSchemeFactory implements SchemeFactory {
      public getProductSaleTrend_argsStandardScheme getScheme() {
        return new getProductSaleTrend_argsStandardScheme();
      }
    }

    private static class getProductSaleTrend_argsStandardScheme extends StandardScheme<getProductSaleTrend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductSaleTrend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductSaleTrend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductSaleTrend_argsTupleSchemeFactory implements SchemeFactory {
      public getProductSaleTrend_argsTupleScheme getScheme() {
        return new getProductSaleTrend_argsTupleScheme();
      }
    }

    private static class getProductSaleTrend_argsTupleScheme extends TupleScheme<getProductSaleTrend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductSaleTrend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductSaleTrend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getProductSaleTrend_result implements org.apache.thrift.TBase<getProductSaleTrend_result, getProductSaleTrend_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductSaleTrend_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductSaleTrend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductSaleTrend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductSaleTrend_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.ProductSaleTrendResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.ProductSaleTrendResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductSaleTrend_result.class, metaDataMap);
    }

    public getProductSaleTrend_result() {
    }

    public getProductSaleTrend_result(
      com.froad.thrift.vo.report.ProductSaleTrendResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductSaleTrend_result(getProductSaleTrend_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.ProductSaleTrendResVo(other.success);
      }
    }

    public getProductSaleTrend_result deepCopy() {
      return new getProductSaleTrend_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.ProductSaleTrendResVo getSuccess() {
      return this.success;
    }

    public getProductSaleTrend_result setSuccess(com.froad.thrift.vo.report.ProductSaleTrendResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.ProductSaleTrendResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductSaleTrend_result)
        return this.equals((getProductSaleTrend_result)that);
      return false;
    }

    public boolean equals(getProductSaleTrend_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductSaleTrend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductSaleTrend_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductSaleTrend_resultStandardSchemeFactory implements SchemeFactory {
      public getProductSaleTrend_resultStandardScheme getScheme() {
        return new getProductSaleTrend_resultStandardScheme();
      }
    }

    private static class getProductSaleTrend_resultStandardScheme extends StandardScheme<getProductSaleTrend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductSaleTrend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.ProductSaleTrendResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductSaleTrend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductSaleTrend_resultTupleSchemeFactory implements SchemeFactory {
      public getProductSaleTrend_resultTupleScheme getScheme() {
        return new getProductSaleTrend_resultTupleScheme();
      }
    }

    private static class getProductSaleTrend_resultTupleScheme extends TupleScheme<getProductSaleTrend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductSaleTrend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductSaleTrend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.ProductSaleTrendResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductTypePercent_args implements org.apache.thrift.TBase<getProductTypePercent_args, getProductTypePercent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductTypePercent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductTypePercent_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductTypePercent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductTypePercent_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductTypePercent_args.class, metaDataMap);
    }

    public getProductTypePercent_args() {
    }

    public getProductTypePercent_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductTypePercent_args(getProductTypePercent_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getProductTypePercent_args deepCopy() {
      return new getProductTypePercent_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getProductTypePercent_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductTypePercent_args)
        return this.equals((getProductTypePercent_args)that);
      return false;
    }

    public boolean equals(getProductTypePercent_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductTypePercent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductTypePercent_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductTypePercent_argsStandardSchemeFactory implements SchemeFactory {
      public getProductTypePercent_argsStandardScheme getScheme() {
        return new getProductTypePercent_argsStandardScheme();
      }
    }

    private static class getProductTypePercent_argsStandardScheme extends StandardScheme<getProductTypePercent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductTypePercent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductTypePercent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductTypePercent_argsTupleSchemeFactory implements SchemeFactory {
      public getProductTypePercent_argsTupleScheme getScheme() {
        return new getProductTypePercent_argsTupleScheme();
      }
    }

    private static class getProductTypePercent_argsTupleScheme extends TupleScheme<getProductTypePercent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductTypePercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductTypePercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getProductTypePercent_result implements org.apache.thrift.TBase<getProductTypePercent_result, getProductTypePercent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductTypePercent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductTypePercent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductTypePercent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductTypePercent_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.TypePercentResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.TypePercentResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductTypePercent_result.class, metaDataMap);
    }

    public getProductTypePercent_result() {
    }

    public getProductTypePercent_result(
      com.froad.thrift.vo.report.TypePercentResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductTypePercent_result(getProductTypePercent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.TypePercentResVo(other.success);
      }
    }

    public getProductTypePercent_result deepCopy() {
      return new getProductTypePercent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.TypePercentResVo getSuccess() {
      return this.success;
    }

    public getProductTypePercent_result setSuccess(com.froad.thrift.vo.report.TypePercentResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.TypePercentResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductTypePercent_result)
        return this.equals((getProductTypePercent_result)that);
      return false;
    }

    public boolean equals(getProductTypePercent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductTypePercent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductTypePercent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductTypePercent_resultStandardSchemeFactory implements SchemeFactory {
      public getProductTypePercent_resultStandardScheme getScheme() {
        return new getProductTypePercent_resultStandardScheme();
      }
    }

    private static class getProductTypePercent_resultStandardScheme extends StandardScheme<getProductTypePercent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductTypePercent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductTypePercent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductTypePercent_resultTupleSchemeFactory implements SchemeFactory {
      public getProductTypePercent_resultTupleScheme getScheme() {
        return new getProductTypePercent_resultTupleScheme();
      }
    }

    private static class getProductTypePercent_resultTupleScheme extends TupleScheme<getProductTypePercent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductTypePercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductTypePercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductCategoryPercent_args implements org.apache.thrift.TBase<getProductCategoryPercent_args, getProductCategoryPercent_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductCategoryPercent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductCategoryPercent_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductCategoryPercent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductCategoryPercent_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductCategoryPercent_args.class, metaDataMap);
    }

    public getProductCategoryPercent_args() {
    }

    public getProductCategoryPercent_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductCategoryPercent_args(getProductCategoryPercent_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getProductCategoryPercent_args deepCopy() {
      return new getProductCategoryPercent_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getProductCategoryPercent_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductCategoryPercent_args)
        return this.equals((getProductCategoryPercent_args)that);
      return false;
    }

    public boolean equals(getProductCategoryPercent_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductCategoryPercent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductCategoryPercent_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductCategoryPercent_argsStandardSchemeFactory implements SchemeFactory {
      public getProductCategoryPercent_argsStandardScheme getScheme() {
        return new getProductCategoryPercent_argsStandardScheme();
      }
    }

    private static class getProductCategoryPercent_argsStandardScheme extends StandardScheme<getProductCategoryPercent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductCategoryPercent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductCategoryPercent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductCategoryPercent_argsTupleSchemeFactory implements SchemeFactory {
      public getProductCategoryPercent_argsTupleScheme getScheme() {
        return new getProductCategoryPercent_argsTupleScheme();
      }
    }

    private static class getProductCategoryPercent_argsTupleScheme extends TupleScheme<getProductCategoryPercent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductCategoryPercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductCategoryPercent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getProductCategoryPercent_result implements org.apache.thrift.TBase<getProductCategoryPercent_result, getProductCategoryPercent_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductCategoryPercent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductCategoryPercent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductCategoryPercent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductCategoryPercent_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.TypePercentResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.TypePercentResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductCategoryPercent_result.class, metaDataMap);
    }

    public getProductCategoryPercent_result() {
    }

    public getProductCategoryPercent_result(
      com.froad.thrift.vo.report.TypePercentResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductCategoryPercent_result(getProductCategoryPercent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.TypePercentResVo(other.success);
      }
    }

    public getProductCategoryPercent_result deepCopy() {
      return new getProductCategoryPercent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.TypePercentResVo getSuccess() {
      return this.success;
    }

    public getProductCategoryPercent_result setSuccess(com.froad.thrift.vo.report.TypePercentResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.TypePercentResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductCategoryPercent_result)
        return this.equals((getProductCategoryPercent_result)that);
      return false;
    }

    public boolean equals(getProductCategoryPercent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductCategoryPercent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductCategoryPercent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductCategoryPercent_resultStandardSchemeFactory implements SchemeFactory {
      public getProductCategoryPercent_resultStandardScheme getScheme() {
        return new getProductCategoryPercent_resultStandardScheme();
      }
    }

    private static class getProductCategoryPercent_resultStandardScheme extends StandardScheme<getProductCategoryPercent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductCategoryPercent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductCategoryPercent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductCategoryPercent_resultTupleSchemeFactory implements SchemeFactory {
      public getProductCategoryPercent_resultTupleScheme getScheme() {
        return new getProductCategoryPercent_resultTupleScheme();
      }
    }

    private static class getProductCategoryPercent_resultTupleScheme extends TupleScheme<getProductCategoryPercent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductCategoryPercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductCategoryPercent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.TypePercentResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductSaleDetail_args implements org.apache.thrift.TBase<getProductSaleDetail_args, getProductSaleDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductSaleDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductSaleDetail_args");

    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductSaleDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductSaleDetail_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMON_PARAM_VO((short)1, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductSaleDetail_args.class, metaDataMap);
    }

    public getProductSaleDetail_args() {
    }

    public getProductSaleDetail_args(
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductSaleDetail_args(getProductSaleDetail_args other) {
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getProductSaleDetail_args deepCopy() {
      return new getProductSaleDetail_args(this);
    }

    @Override
    public void clear() {
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getProductSaleDetail_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductSaleDetail_args)
        return this.equals((getProductSaleDetail_args)that);
      return false;
    }

    public boolean equals(getProductSaleDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductSaleDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductSaleDetail_args(");
      boolean first = true;

      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductSaleDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getProductSaleDetail_argsStandardScheme getScheme() {
        return new getProductSaleDetail_argsStandardScheme();
      }
    }

    private static class getProductSaleDetail_argsStandardScheme extends StandardScheme<getProductSaleDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductSaleDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductSaleDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductSaleDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getProductSaleDetail_argsTupleScheme getScheme() {
        return new getProductSaleDetail_argsTupleScheme();
      }
    }

    private static class getProductSaleDetail_argsTupleScheme extends TupleScheme<getProductSaleDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductSaleDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommonParamVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductSaleDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getProductSaleDetail_result implements org.apache.thrift.TBase<getProductSaleDetail_result, getProductSaleDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductSaleDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductSaleDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductSaleDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductSaleDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.ProductSaleDetailResVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.ProductSaleDetailResVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductSaleDetail_result.class, metaDataMap);
    }

    public getProductSaleDetail_result() {
    }

    public getProductSaleDetail_result(
      com.froad.thrift.vo.report.ProductSaleDetailResVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductSaleDetail_result(getProductSaleDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.ProductSaleDetailResVo(other.success);
      }
    }

    public getProductSaleDetail_result deepCopy() {
      return new getProductSaleDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.ProductSaleDetailResVo getSuccess() {
      return this.success;
    }

    public getProductSaleDetail_result setSuccess(com.froad.thrift.vo.report.ProductSaleDetailResVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.ProductSaleDetailResVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductSaleDetail_result)
        return this.equals((getProductSaleDetail_result)that);
      return false;
    }

    public boolean equals(getProductSaleDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductSaleDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductSaleDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductSaleDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getProductSaleDetail_resultStandardScheme getScheme() {
        return new getProductSaleDetail_resultStandardScheme();
      }
    }

    private static class getProductSaleDetail_resultStandardScheme extends StandardScheme<getProductSaleDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductSaleDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.ProductSaleDetailResVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductSaleDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductSaleDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getProductSaleDetail_resultTupleScheme getScheme() {
        return new getProductSaleDetail_resultTupleScheme();
      }
    }

    private static class getProductSaleDetail_resultTupleScheme extends TupleScheme<getProductSaleDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductSaleDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductSaleDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.ProductSaleDetailResVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductSaleDetailListByPage_args implements org.apache.thrift.TBase<getProductSaleDetailListByPage_args, getProductSaleDetailListByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductSaleDetailListByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductSaleDetailListByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMON_PARAM_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("commonParamVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductSaleDetailListByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductSaleDetailListByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo pageVo; // required
    public com.froad.thrift.vo.report.CommonParamVo commonParamVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_VO((short)1, "pageVo"),
      COMMON_PARAM_VO((short)2, "commonParamVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_VO
            return PAGE_VO;
          case 2: // COMMON_PARAM_VO
            return COMMON_PARAM_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.COMMON_PARAM_VO, new org.apache.thrift.meta_data.FieldMetaData("commonParamVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.CommonParamVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductSaleDetailListByPage_args.class, metaDataMap);
    }

    public getProductSaleDetailListByPage_args() {
    }

    public getProductSaleDetailListByPage_args(
      com.froad.thrift.vo.PageVo pageVo,
      com.froad.thrift.vo.report.CommonParamVo commonParamVo)
    {
      this();
      this.pageVo = pageVo;
      this.commonParamVo = commonParamVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductSaleDetailListByPage_args(getProductSaleDetailListByPage_args other) {
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
      if (other.isSetCommonParamVo()) {
        this.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo(other.commonParamVo);
      }
    }

    public getProductSaleDetailListByPage_args deepCopy() {
      return new getProductSaleDetailListByPage_args(this);
    }

    @Override
    public void clear() {
      this.pageVo = null;
      this.commonParamVo = null;
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public getProductSaleDetailListByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public com.froad.thrift.vo.report.CommonParamVo getCommonParamVo() {
      return this.commonParamVo;
    }

    public getProductSaleDetailListByPage_args setCommonParamVo(com.froad.thrift.vo.report.CommonParamVo commonParamVo) {
      this.commonParamVo = commonParamVo;
      return this;
    }

    public void unsetCommonParamVo() {
      this.commonParamVo = null;
    }

    /** Returns true if field commonParamVo is set (has been assigned a value) and false otherwise */
    public boolean isSetCommonParamVo() {
      return this.commonParamVo != null;
    }

    public void setCommonParamVoIsSet(boolean value) {
      if (!value) {
        this.commonParamVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case COMMON_PARAM_VO:
        if (value == null) {
          unsetCommonParamVo();
        } else {
          setCommonParamVo((com.froad.thrift.vo.report.CommonParamVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_VO:
        return getPageVo();

      case COMMON_PARAM_VO:
        return getCommonParamVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_VO:
        return isSetPageVo();
      case COMMON_PARAM_VO:
        return isSetCommonParamVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductSaleDetailListByPage_args)
        return this.equals((getProductSaleDetailListByPage_args)that);
      return false;
    }

    public boolean equals(getProductSaleDetailListByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      boolean this_present_commonParamVo = true && this.isSetCommonParamVo();
      boolean that_present_commonParamVo = true && that.isSetCommonParamVo();
      if (this_present_commonParamVo || that_present_commonParamVo) {
        if (!(this_present_commonParamVo && that_present_commonParamVo))
          return false;
        if (!this.commonParamVo.equals(that.commonParamVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      boolean present_commonParamVo = true && (isSetCommonParamVo());
      list.add(present_commonParamVo);
      if (present_commonParamVo)
        list.add(commonParamVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductSaleDetailListByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommonParamVo()).compareTo(other.isSetCommonParamVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommonParamVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commonParamVo, other.commonParamVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductSaleDetailListByPage_args(");
      boolean first = true;

      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("commonParamVo:");
      if (this.commonParamVo == null) {
        sb.append("null");
      } else {
        sb.append(this.commonParamVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageVo != null) {
        pageVo.validate();
      }
      if (commonParamVo != null) {
        commonParamVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductSaleDetailListByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getProductSaleDetailListByPage_argsStandardScheme getScheme() {
        return new getProductSaleDetailListByPage_argsStandardScheme();
      }
    }

    private static class getProductSaleDetailListByPage_argsStandardScheme extends StandardScheme<getProductSaleDetailListByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductSaleDetailListByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMON_PARAM_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
                struct.commonParamVo.read(iprot);
                struct.setCommonParamVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductSaleDetailListByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.commonParamVo != null) {
          oprot.writeFieldBegin(COMMON_PARAM_VO_FIELD_DESC);
          struct.commonParamVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductSaleDetailListByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getProductSaleDetailListByPage_argsTupleScheme getScheme() {
        return new getProductSaleDetailListByPage_argsTupleScheme();
      }
    }

    private static class getProductSaleDetailListByPage_argsTupleScheme extends TupleScheme<getProductSaleDetailListByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductSaleDetailListByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageVo()) {
          optionals.set(0);
        }
        if (struct.isSetCommonParamVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
        if (struct.isSetCommonParamVo()) {
          struct.commonParamVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductSaleDetailListByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.commonParamVo = new com.froad.thrift.vo.report.CommonParamVo();
          struct.commonParamVo.read(iprot);
          struct.setCommonParamVoIsSet(true);
        }
      }
    }

  }

  public static class getProductSaleDetailListByPage_result implements org.apache.thrift.TBase<getProductSaleDetailListByPage_result, getProductSaleDetailListByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductSaleDetailListByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductSaleDetailListByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductSaleDetailListByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductSaleDetailListByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.report.ProductSaleDetailPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.report.ProductSaleDetailPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductSaleDetailListByPage_result.class, metaDataMap);
    }

    public getProductSaleDetailListByPage_result() {
    }

    public getProductSaleDetailListByPage_result(
      com.froad.thrift.vo.report.ProductSaleDetailPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductSaleDetailListByPage_result(getProductSaleDetailListByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.report.ProductSaleDetailPageVo(other.success);
      }
    }

    public getProductSaleDetailListByPage_result deepCopy() {
      return new getProductSaleDetailListByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.report.ProductSaleDetailPageVo getSuccess() {
      return this.success;
    }

    public getProductSaleDetailListByPage_result setSuccess(com.froad.thrift.vo.report.ProductSaleDetailPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.report.ProductSaleDetailPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductSaleDetailListByPage_result)
        return this.equals((getProductSaleDetailListByPage_result)that);
      return false;
    }

    public boolean equals(getProductSaleDetailListByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductSaleDetailListByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductSaleDetailListByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductSaleDetailListByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getProductSaleDetailListByPage_resultStandardScheme getScheme() {
        return new getProductSaleDetailListByPage_resultStandardScheme();
      }
    }

    private static class getProductSaleDetailListByPage_resultStandardScheme extends StandardScheme<getProductSaleDetailListByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductSaleDetailListByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.report.ProductSaleDetailPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductSaleDetailListByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductSaleDetailListByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getProductSaleDetailListByPage_resultTupleScheme getScheme() {
        return new getProductSaleDetailListByPage_resultTupleScheme();
      }
    }

    private static class getProductSaleDetailListByPage_resultTupleScheme extends TupleScheme<getProductSaleDetailListByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductSaleDetailListByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductSaleDetailListByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.report.ProductSaleDetailPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
