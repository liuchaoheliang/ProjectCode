/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 面对面支付订单概要信息
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class QrcodeOrderSummaryVo implements org.apache.thrift.TBase<QrcodeOrderSummaryVo, QrcodeOrderSummaryVo._Fields>, java.io.Serializable, Cloneable, Comparable<QrcodeOrderSummaryVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QrcodeOrderSummaryVo");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatus", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("realPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField PAYMENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField IS_VIP_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("isVipOrder", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField IS_ENABLE_CANCEL_FIELD_DESC = new org.apache.thrift.protocol.TField("isEnableCancel", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField IS_ENABLE_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isEnablePay", org.apache.thrift.protocol.TType.BOOL, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QrcodeOrderSummaryVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QrcodeOrderSummaryVoTupleSchemeFactory());
  }

  /**
   * 订单ID
   */
  public String orderId; // required
  /**
   * 订单状态
   */
  public String orderStatus; // required
  /**
   * 订单实际总货币值
   */
  public double realPrice; // required
  /**
   * 商户ID
   */
  public String merchantId; // required
  /**
   * 商户名称
   */
  public String merchantName; // required
  /**
   * 创建时间
   */
  public long createTime; // required
  /**
   * 总金额
   */
  public double totalPrice; // required
  /**
   * 支付时间
   */
  public long paymentTime; // required
  /**
   * 是否VIP订单
   */
  public boolean isVipOrder; // required
  /**
   * 门店ID
   */
  public String outletId; // required
  /**
   * 门店名称
   */
  public String outletName; // required
  /**
   * 是否可取消
   */
  public boolean isEnableCancel; // required
  /**
   * 是否可支付
   */
  public boolean isEnablePay; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 订单ID
     */
    ORDER_ID((short)1, "orderId"),
    /**
     * 订单状态
     */
    ORDER_STATUS((short)2, "orderStatus"),
    /**
     * 订单实际总货币值
     */
    REAL_PRICE((short)3, "realPrice"),
    /**
     * 商户ID
     */
    MERCHANT_ID((short)4, "merchantId"),
    /**
     * 商户名称
     */
    MERCHANT_NAME((short)5, "merchantName"),
    /**
     * 创建时间
     */
    CREATE_TIME((short)6, "createTime"),
    /**
     * 总金额
     */
    TOTAL_PRICE((short)7, "totalPrice"),
    /**
     * 支付时间
     */
    PAYMENT_TIME((short)8, "paymentTime"),
    /**
     * 是否VIP订单
     */
    IS_VIP_ORDER((short)9, "isVipOrder"),
    /**
     * 门店ID
     */
    OUTLET_ID((short)10, "outletId"),
    /**
     * 门店名称
     */
    OUTLET_NAME((short)11, "outletName"),
    /**
     * 是否可取消
     */
    IS_ENABLE_CANCEL((short)12, "isEnableCancel"),
    /**
     * 是否可支付
     */
    IS_ENABLE_PAY((short)13, "isEnablePay");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // ORDER_STATUS
          return ORDER_STATUS;
        case 3: // REAL_PRICE
          return REAL_PRICE;
        case 4: // MERCHANT_ID
          return MERCHANT_ID;
        case 5: // MERCHANT_NAME
          return MERCHANT_NAME;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 7: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 8: // PAYMENT_TIME
          return PAYMENT_TIME;
        case 9: // IS_VIP_ORDER
          return IS_VIP_ORDER;
        case 10: // OUTLET_ID
          return OUTLET_ID;
        case 11: // OUTLET_NAME
          return OUTLET_NAME;
        case 12: // IS_ENABLE_CANCEL
          return IS_ENABLE_CANCEL;
        case 13: // IS_ENABLE_PAY
          return IS_ENABLE_PAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REALPRICE_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __TOTALPRICE_ISSET_ID = 2;
  private static final int __PAYMENTTIME_ISSET_ID = 3;
  private static final int __ISVIPORDER_ISSET_ID = 4;
  private static final int __ISENABLECANCEL_ISSET_ID = 5;
  private static final int __ISENABLEPAY_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("orderStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("realPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAYMENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("paymentTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_VIP_ORDER, new org.apache.thrift.meta_data.FieldMetaData("isVipOrder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ENABLE_CANCEL, new org.apache.thrift.meta_data.FieldMetaData("isEnableCancel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ENABLE_PAY, new org.apache.thrift.meta_data.FieldMetaData("isEnablePay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QrcodeOrderSummaryVo.class, metaDataMap);
  }

  public QrcodeOrderSummaryVo() {
  }

  public QrcodeOrderSummaryVo(
    String orderId,
    String orderStatus,
    double realPrice,
    String merchantId,
    String merchantName,
    long createTime,
    double totalPrice,
    long paymentTime,
    boolean isVipOrder,
    String outletId,
    String outletName,
    boolean isEnableCancel,
    boolean isEnablePay)
  {
    this();
    this.orderId = orderId;
    this.orderStatus = orderStatus;
    this.realPrice = realPrice;
    setRealPriceIsSet(true);
    this.merchantId = merchantId;
    this.merchantName = merchantName;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    this.paymentTime = paymentTime;
    setPaymentTimeIsSet(true);
    this.isVipOrder = isVipOrder;
    setIsVipOrderIsSet(true);
    this.outletId = outletId;
    this.outletName = outletName;
    this.isEnableCancel = isEnableCancel;
    setIsEnableCancelIsSet(true);
    this.isEnablePay = isEnablePay;
    setIsEnablePayIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QrcodeOrderSummaryVo(QrcodeOrderSummaryVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetOrderStatus()) {
      this.orderStatus = other.orderStatus;
    }
    this.realPrice = other.realPrice;
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetMerchantName()) {
      this.merchantName = other.merchantName;
    }
    this.createTime = other.createTime;
    this.totalPrice = other.totalPrice;
    this.paymentTime = other.paymentTime;
    this.isVipOrder = other.isVipOrder;
    if (other.isSetOutletId()) {
      this.outletId = other.outletId;
    }
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
    this.isEnableCancel = other.isEnableCancel;
    this.isEnablePay = other.isEnablePay;
  }

  public QrcodeOrderSummaryVo deepCopy() {
    return new QrcodeOrderSummaryVo(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.orderStatus = null;
    setRealPriceIsSet(false);
    this.realPrice = 0.0;
    this.merchantId = null;
    this.merchantName = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setTotalPriceIsSet(false);
    this.totalPrice = 0.0;
    setPaymentTimeIsSet(false);
    this.paymentTime = 0;
    setIsVipOrderIsSet(false);
    this.isVipOrder = false;
    this.outletId = null;
    this.outletName = null;
    setIsEnableCancelIsSet(false);
    this.isEnableCancel = false;
    setIsEnablePayIsSet(false);
    this.isEnablePay = false;
  }

  /**
   * 订单ID
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单ID
   */
  public QrcodeOrderSummaryVo setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 订单状态
   */
  public String getOrderStatus() {
    return this.orderStatus;
  }

  /**
   * 订单状态
   */
  public QrcodeOrderSummaryVo setOrderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
    return this;
  }

  public void unsetOrderStatus() {
    this.orderStatus = null;
  }

  /** Returns true if field orderStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderStatus() {
    return this.orderStatus != null;
  }

  public void setOrderStatusIsSet(boolean value) {
    if (!value) {
      this.orderStatus = null;
    }
  }

  /**
   * 订单实际总货币值
   */
  public double getRealPrice() {
    return this.realPrice;
  }

  /**
   * 订单实际总货币值
   */
  public QrcodeOrderSummaryVo setRealPrice(double realPrice) {
    this.realPrice = realPrice;
    setRealPriceIsSet(true);
    return this;
  }

  public void unsetRealPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALPRICE_ISSET_ID);
  }

  /** Returns true if field realPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetRealPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __REALPRICE_ISSET_ID);
  }

  public void setRealPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALPRICE_ISSET_ID, value);
  }

  /**
   * 商户ID
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户ID
   */
  public QrcodeOrderSummaryVo setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 商户名称
   */
  public String getMerchantName() {
    return this.merchantName;
  }

  /**
   * 商户名称
   */
  public QrcodeOrderSummaryVo setMerchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  public void unsetMerchantName() {
    this.merchantName = null;
  }

  /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantName() {
    return this.merchantName != null;
  }

  public void setMerchantNameIsSet(boolean value) {
    if (!value) {
      this.merchantName = null;
    }
  }

  /**
   * 创建时间
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * 创建时间
   */
  public QrcodeOrderSummaryVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * 总金额
   */
  public double getTotalPrice() {
    return this.totalPrice;
  }

  /**
   * 总金额
   */
  public QrcodeOrderSummaryVo setTotalPrice(double totalPrice) {
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    return this;
  }

  public void unsetTotalPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  public void setTotalPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
  }

  /**
   * 支付时间
   */
  public long getPaymentTime() {
    return this.paymentTime;
  }

  /**
   * 支付时间
   */
  public QrcodeOrderSummaryVo setPaymentTime(long paymentTime) {
    this.paymentTime = paymentTime;
    setPaymentTimeIsSet(true);
    return this;
  }

  public void unsetPaymentTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID);
  }

  /** Returns true if field paymentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID);
  }

  public void setPaymentTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTTIME_ISSET_ID, value);
  }

  /**
   * 是否VIP订单
   */
  public boolean isIsVipOrder() {
    return this.isVipOrder;
  }

  /**
   * 是否VIP订单
   */
  public QrcodeOrderSummaryVo setIsVipOrder(boolean isVipOrder) {
    this.isVipOrder = isVipOrder;
    setIsVipOrderIsSet(true);
    return this;
  }

  public void unsetIsVipOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISVIPORDER_ISSET_ID);
  }

  /** Returns true if field isVipOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetIsVipOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ISVIPORDER_ISSET_ID);
  }

  public void setIsVipOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISVIPORDER_ISSET_ID, value);
  }

  /**
   * 门店ID
   */
  public String getOutletId() {
    return this.outletId;
  }

  /**
   * 门店ID
   */
  public QrcodeOrderSummaryVo setOutletId(String outletId) {
    this.outletId = outletId;
    return this;
  }

  public void unsetOutletId() {
    this.outletId = null;
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return this.outletId != null;
  }

  public void setOutletIdIsSet(boolean value) {
    if (!value) {
      this.outletId = null;
    }
  }

  /**
   * 门店名称
   */
  public String getOutletName() {
    return this.outletName;
  }

  /**
   * 门店名称
   */
  public QrcodeOrderSummaryVo setOutletName(String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  /**
   * 是否可取消
   */
  public boolean isIsEnableCancel() {
    return this.isEnableCancel;
  }

  /**
   * 是否可取消
   */
  public QrcodeOrderSummaryVo setIsEnableCancel(boolean isEnableCancel) {
    this.isEnableCancel = isEnableCancel;
    setIsEnableCancelIsSet(true);
    return this;
  }

  public void unsetIsEnableCancel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISENABLECANCEL_ISSET_ID);
  }

  /** Returns true if field isEnableCancel is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEnableCancel() {
    return EncodingUtils.testBit(__isset_bitfield, __ISENABLECANCEL_ISSET_ID);
  }

  public void setIsEnableCancelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISENABLECANCEL_ISSET_ID, value);
  }

  /**
   * 是否可支付
   */
  public boolean isIsEnablePay() {
    return this.isEnablePay;
  }

  /**
   * 是否可支付
   */
  public QrcodeOrderSummaryVo setIsEnablePay(boolean isEnablePay) {
    this.isEnablePay = isEnablePay;
    setIsEnablePayIsSet(true);
    return this;
  }

  public void unsetIsEnablePay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISENABLEPAY_ISSET_ID);
  }

  /** Returns true if field isEnablePay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEnablePay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISENABLEPAY_ISSET_ID);
  }

  public void setIsEnablePayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISENABLEPAY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case ORDER_STATUS:
      if (value == null) {
        unsetOrderStatus();
      } else {
        setOrderStatus((String)value);
      }
      break;

    case REAL_PRICE:
      if (value == null) {
        unsetRealPrice();
      } else {
        setRealPrice((Double)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case MERCHANT_NAME:
      if (value == null) {
        unsetMerchantName();
      } else {
        setMerchantName((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((Double)value);
      }
      break;

    case PAYMENT_TIME:
      if (value == null) {
        unsetPaymentTime();
      } else {
        setPaymentTime((Long)value);
      }
      break;

    case IS_VIP_ORDER:
      if (value == null) {
        unsetIsVipOrder();
      } else {
        setIsVipOrder((Boolean)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((String)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((String)value);
      }
      break;

    case IS_ENABLE_CANCEL:
      if (value == null) {
        unsetIsEnableCancel();
      } else {
        setIsEnableCancel((Boolean)value);
      }
      break;

    case IS_ENABLE_PAY:
      if (value == null) {
        unsetIsEnablePay();
      } else {
        setIsEnablePay((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case ORDER_STATUS:
      return getOrderStatus();

    case REAL_PRICE:
      return Double.valueOf(getRealPrice());

    case MERCHANT_ID:
      return getMerchantId();

    case MERCHANT_NAME:
      return getMerchantName();

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case TOTAL_PRICE:
      return Double.valueOf(getTotalPrice());

    case PAYMENT_TIME:
      return Long.valueOf(getPaymentTime());

    case IS_VIP_ORDER:
      return Boolean.valueOf(isIsVipOrder());

    case OUTLET_ID:
      return getOutletId();

    case OUTLET_NAME:
      return getOutletName();

    case IS_ENABLE_CANCEL:
      return Boolean.valueOf(isIsEnableCancel());

    case IS_ENABLE_PAY:
      return Boolean.valueOf(isIsEnablePay());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case ORDER_STATUS:
      return isSetOrderStatus();
    case REAL_PRICE:
      return isSetRealPrice();
    case MERCHANT_ID:
      return isSetMerchantId();
    case MERCHANT_NAME:
      return isSetMerchantName();
    case CREATE_TIME:
      return isSetCreateTime();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case PAYMENT_TIME:
      return isSetPaymentTime();
    case IS_VIP_ORDER:
      return isSetIsVipOrder();
    case OUTLET_ID:
      return isSetOutletId();
    case OUTLET_NAME:
      return isSetOutletName();
    case IS_ENABLE_CANCEL:
      return isSetIsEnableCancel();
    case IS_ENABLE_PAY:
      return isSetIsEnablePay();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QrcodeOrderSummaryVo)
      return this.equals((QrcodeOrderSummaryVo)that);
    return false;
  }

  public boolean equals(QrcodeOrderSummaryVo that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_orderStatus = true && this.isSetOrderStatus();
    boolean that_present_orderStatus = true && that.isSetOrderStatus();
    if (this_present_orderStatus || that_present_orderStatus) {
      if (!(this_present_orderStatus && that_present_orderStatus))
        return false;
      if (!this.orderStatus.equals(that.orderStatus))
        return false;
    }

    boolean this_present_realPrice = true;
    boolean that_present_realPrice = true;
    if (this_present_realPrice || that_present_realPrice) {
      if (!(this_present_realPrice && that_present_realPrice))
        return false;
      if (this.realPrice != that.realPrice)
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_merchantName = true && this.isSetMerchantName();
    boolean that_present_merchantName = true && that.isSetMerchantName();
    if (this_present_merchantName || that_present_merchantName) {
      if (!(this_present_merchantName && that_present_merchantName))
        return false;
      if (!this.merchantName.equals(that.merchantName))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_totalPrice = true;
    boolean that_present_totalPrice = true;
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (this.totalPrice != that.totalPrice)
        return false;
    }

    boolean this_present_paymentTime = true;
    boolean that_present_paymentTime = true;
    if (this_present_paymentTime || that_present_paymentTime) {
      if (!(this_present_paymentTime && that_present_paymentTime))
        return false;
      if (this.paymentTime != that.paymentTime)
        return false;
    }

    boolean this_present_isVipOrder = true;
    boolean that_present_isVipOrder = true;
    if (this_present_isVipOrder || that_present_isVipOrder) {
      if (!(this_present_isVipOrder && that_present_isVipOrder))
        return false;
      if (this.isVipOrder != that.isVipOrder)
        return false;
    }

    boolean this_present_outletId = true && this.isSetOutletId();
    boolean that_present_outletId = true && that.isSetOutletId();
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (!this.outletId.equals(that.outletId))
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    boolean this_present_isEnableCancel = true;
    boolean that_present_isEnableCancel = true;
    if (this_present_isEnableCancel || that_present_isEnableCancel) {
      if (!(this_present_isEnableCancel && that_present_isEnableCancel))
        return false;
      if (this.isEnableCancel != that.isEnableCancel)
        return false;
    }

    boolean this_present_isEnablePay = true;
    boolean that_present_isEnablePay = true;
    if (this_present_isEnablePay || that_present_isEnablePay) {
      if (!(this_present_isEnablePay && that_present_isEnablePay))
        return false;
      if (this.isEnablePay != that.isEnablePay)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_orderStatus = true && (isSetOrderStatus());
    list.add(present_orderStatus);
    if (present_orderStatus)
      list.add(orderStatus);

    boolean present_realPrice = true;
    list.add(present_realPrice);
    if (present_realPrice)
      list.add(realPrice);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_merchantName = true && (isSetMerchantName());
    list.add(present_merchantName);
    if (present_merchantName)
      list.add(merchantName);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_totalPrice = true;
    list.add(present_totalPrice);
    if (present_totalPrice)
      list.add(totalPrice);

    boolean present_paymentTime = true;
    list.add(present_paymentTime);
    if (present_paymentTime)
      list.add(paymentTime);

    boolean present_isVipOrder = true;
    list.add(present_isVipOrder);
    if (present_isVipOrder)
      list.add(isVipOrder);

    boolean present_outletId = true && (isSetOutletId());
    list.add(present_outletId);
    if (present_outletId)
      list.add(outletId);

    boolean present_outletName = true && (isSetOutletName());
    list.add(present_outletName);
    if (present_outletName)
      list.add(outletName);

    boolean present_isEnableCancel = true;
    list.add(present_isEnableCancel);
    if (present_isEnableCancel)
      list.add(isEnableCancel);

    boolean present_isEnablePay = true;
    list.add(present_isEnablePay);
    if (present_isEnablePay)
      list.add(isEnablePay);

    return list.hashCode();
  }

  @Override
  public int compareTo(QrcodeOrderSummaryVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderStatus()).compareTo(other.isSetOrderStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatus, other.orderStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealPrice()).compareTo(other.isSetRealPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realPrice, other.realPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentTime()).compareTo(other.isSetPaymentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentTime, other.paymentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsVipOrder()).compareTo(other.isSetIsVipOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsVipOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isVipOrder, other.isVipOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEnableCancel()).compareTo(other.isSetIsEnableCancel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnableCancel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEnableCancel, other.isEnableCancel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEnablePay()).compareTo(other.isSetIsEnablePay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnablePay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEnablePay, other.isEnablePay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QrcodeOrderSummaryVo(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderStatus:");
    if (this.orderStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.orderStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realPrice:");
    sb.append(this.realPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantName:");
    if (this.merchantName == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    sb.append(this.totalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentTime:");
    sb.append(this.paymentTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isVipOrder:");
    sb.append(this.isVipOrder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletId:");
    if (this.outletId == null) {
      sb.append("null");
    } else {
      sb.append(this.outletId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletName:");
    if (this.outletName == null) {
      sb.append("null");
    } else {
      sb.append(this.outletName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEnableCancel:");
    sb.append(this.isEnableCancel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEnablePay:");
    sb.append(this.isEnablePay);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QrcodeOrderSummaryVoStandardSchemeFactory implements SchemeFactory {
    public QrcodeOrderSummaryVoStandardScheme getScheme() {
      return new QrcodeOrderSummaryVoStandardScheme();
    }
  }

  private static class QrcodeOrderSummaryVoStandardScheme extends StandardScheme<QrcodeOrderSummaryVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QrcodeOrderSummaryVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderStatus = iprot.readString();
              struct.setOrderStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realPrice = iprot.readDouble();
              struct.setRealPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MERCHANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantName = iprot.readString();
              struct.setMerchantNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPrice = iprot.readDouble();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAYMENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.paymentTime = iprot.readI64();
              struct.setPaymentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_VIP_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isVipOrder = iprot.readBool();
              struct.setIsVipOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletId = iprot.readString();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_ENABLE_CANCEL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEnableCancel = iprot.readBool();
              struct.setIsEnableCancelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_ENABLE_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEnablePay = iprot.readBool();
              struct.setIsEnablePayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QrcodeOrderSummaryVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.orderStatus != null) {
        oprot.writeFieldBegin(ORDER_STATUS_FIELD_DESC);
        oprot.writeString(struct.orderStatus);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.realPrice);
      oprot.writeFieldEnd();
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantName != null) {
        oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
        oprot.writeString(struct.merchantName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYMENT_TIME_FIELD_DESC);
      oprot.writeI64(struct.paymentTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_VIP_ORDER_FIELD_DESC);
      oprot.writeBool(struct.isVipOrder);
      oprot.writeFieldEnd();
      if (struct.outletId != null) {
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeString(struct.outletId);
        oprot.writeFieldEnd();
      }
      if (struct.outletName != null) {
        oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
        oprot.writeString(struct.outletName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_ENABLE_CANCEL_FIELD_DESC);
      oprot.writeBool(struct.isEnableCancel);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ENABLE_PAY_FIELD_DESC);
      oprot.writeBool(struct.isEnablePay);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QrcodeOrderSummaryVoTupleSchemeFactory implements SchemeFactory {
    public QrcodeOrderSummaryVoTupleScheme getScheme() {
      return new QrcodeOrderSummaryVoTupleScheme();
    }
  }

  private static class QrcodeOrderSummaryVoTupleScheme extends TupleScheme<QrcodeOrderSummaryVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QrcodeOrderSummaryVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetOrderStatus()) {
        optionals.set(1);
      }
      if (struct.isSetRealPrice()) {
        optionals.set(2);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(3);
      }
      if (struct.isSetMerchantName()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      if (struct.isSetTotalPrice()) {
        optionals.set(6);
      }
      if (struct.isSetPaymentTime()) {
        optionals.set(7);
      }
      if (struct.isSetIsVipOrder()) {
        optionals.set(8);
      }
      if (struct.isSetOutletId()) {
        optionals.set(9);
      }
      if (struct.isSetOutletName()) {
        optionals.set(10);
      }
      if (struct.isSetIsEnableCancel()) {
        optionals.set(11);
      }
      if (struct.isSetIsEnablePay()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetOrderStatus()) {
        oprot.writeString(struct.orderStatus);
      }
      if (struct.isSetRealPrice()) {
        oprot.writeDouble(struct.realPrice);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetMerchantName()) {
        oprot.writeString(struct.merchantName);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeDouble(struct.totalPrice);
      }
      if (struct.isSetPaymentTime()) {
        oprot.writeI64(struct.paymentTime);
      }
      if (struct.isSetIsVipOrder()) {
        oprot.writeBool(struct.isVipOrder);
      }
      if (struct.isSetOutletId()) {
        oprot.writeString(struct.outletId);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
      if (struct.isSetIsEnableCancel()) {
        oprot.writeBool(struct.isEnableCancel);
      }
      if (struct.isSetIsEnablePay()) {
        oprot.writeBool(struct.isEnablePay);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QrcodeOrderSummaryVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderStatus = iprot.readString();
        struct.setOrderStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.realPrice = iprot.readDouble();
        struct.setRealPriceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.merchantName = iprot.readString();
        struct.setMerchantNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalPrice = iprot.readDouble();
        struct.setTotalPriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.paymentTime = iprot.readI64();
        struct.setPaymentTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isVipOrder = iprot.readBool();
        struct.setIsVipOrderIsSet(true);
      }
      if (incoming.get(9)) {
        struct.outletId = iprot.readString();
        struct.setOutletIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isEnableCancel = iprot.readBool();
        struct.setIsEnableCancelIsSet(true);
      }
      if (incoming.get(12)) {
        struct.isEnablePay = iprot.readBool();
        struct.setIsEnablePayIsSet(true);
      }
    }
  }

}

