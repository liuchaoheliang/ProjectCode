/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 商户/门店结算情况查询响应
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class QueryMerchantSettlementRes implements org.apache.thrift.TBase<QueryMerchantSettlementRes, QueryMerchantSettlementRes._Fields>, java.io.Serializable, Cloneable, Comparable<QueryMerchantSettlementRes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryMerchantSettlementRes");

  private static final org.apache.thrift.protocol.TField GROUP_TODAY_TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("groupTodayTotalCount", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_TODAY_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("groupTodayTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_TODAY_TAKE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("groupTodayTakeCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField GROUP_TODAY_SETTLE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("groupTodaySettleMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField F2F_TODAY_TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("f2fTodayTotalCount", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField F2F_TODAY_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("f2fTodayTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField GROUP_MONTH_TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("groupMonthTotalCount", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField GROUP_MONTH_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("groupMonthTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField GROUP_MONTH_TAKE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("groupMonthTakeCount", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField GROUP_MONTH_SETTLE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("groupMonthSettleMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField F2F_MONTH_TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("f2fMonthTotalCount", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField F2F_MONTH_TOTAL_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("f2fMonthTotalMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField MONTH_TOTAL_SETTLE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("monthTotalSettleCount", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField MONTH_TOTAL_SETTLE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("monthTotalSettleMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField RESULT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("resultVo", org.apache.thrift.protocol.TType.STRUCT, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryMerchantSettlementResStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryMerchantSettlementResTupleSchemeFactory());
  }

  /**
   * 今日团购总数
   */
  public long groupTodayTotalCount; // required
  /**
   * 今日团购总金额（含未消费）
   */
  public double groupTodayTotalMoney; // required
  /**
   * 今日团购已提货笔数
   */
  public long groupTodayTakeCount; // required
  /**
   * 今日团购已结算金额
   */
  public double groupTodaySettleMoney; // required
  /**
   * 今日面对面总笔数
   */
  public long f2fTodayTotalCount; // required
  /**
   * 今日面对面总金额
   */
  public double f2fTodayTotalMoney; // required
  /**
   * 本月团购总数
   */
  public long groupMonthTotalCount; // required
  /**
   * 本月团购总金额（含未消费）
   */
  public double groupMonthTotalMoney; // required
  /**
   * 本月团购已提货笔数
   */
  public long groupMonthTakeCount; // required
  /**
   * 本月团购已结算金额
   */
  public double groupMonthSettleMoney; // required
  /**
   * 本月面对面总笔数
   */
  public long f2fMonthTotalCount; // required
  /**
   * 本月面对面总金额
   */
  public double f2fMonthTotalMoney; // required
  /**
   * 本月结算总笔数（团购+面对面）
   */
  public long monthTotalSettleCount; // required
  /**
   * 本月结算总金额（团购+面对面）
   */
  public double monthTotalSettleMoney; // required
  /**
   * 响应结果
   */
  public com.froad.thrift.vo.ResultVo resultVo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 今日团购总数
     */
    GROUP_TODAY_TOTAL_COUNT((short)1, "groupTodayTotalCount"),
    /**
     * 今日团购总金额（含未消费）
     */
    GROUP_TODAY_TOTAL_MONEY((short)2, "groupTodayTotalMoney"),
    /**
     * 今日团购已提货笔数
     */
    GROUP_TODAY_TAKE_COUNT((short)3, "groupTodayTakeCount"),
    /**
     * 今日团购已结算金额
     */
    GROUP_TODAY_SETTLE_MONEY((short)4, "groupTodaySettleMoney"),
    /**
     * 今日面对面总笔数
     */
    F2F_TODAY_TOTAL_COUNT((short)5, "f2fTodayTotalCount"),
    /**
     * 今日面对面总金额
     */
    F2F_TODAY_TOTAL_MONEY((short)6, "f2fTodayTotalMoney"),
    /**
     * 本月团购总数
     */
    GROUP_MONTH_TOTAL_COUNT((short)7, "groupMonthTotalCount"),
    /**
     * 本月团购总金额（含未消费）
     */
    GROUP_MONTH_TOTAL_MONEY((short)8, "groupMonthTotalMoney"),
    /**
     * 本月团购已提货笔数
     */
    GROUP_MONTH_TAKE_COUNT((short)9, "groupMonthTakeCount"),
    /**
     * 本月团购已结算金额
     */
    GROUP_MONTH_SETTLE_MONEY((short)10, "groupMonthSettleMoney"),
    /**
     * 本月面对面总笔数
     */
    F2F_MONTH_TOTAL_COUNT((short)11, "f2fMonthTotalCount"),
    /**
     * 本月面对面总金额
     */
    F2F_MONTH_TOTAL_MONEY((short)12, "f2fMonthTotalMoney"),
    /**
     * 本月结算总笔数（团购+面对面）
     */
    MONTH_TOTAL_SETTLE_COUNT((short)13, "monthTotalSettleCount"),
    /**
     * 本月结算总金额（团购+面对面）
     */
    MONTH_TOTAL_SETTLE_MONEY((short)14, "monthTotalSettleMoney"),
    /**
     * 响应结果
     */
    RESULT_VO((short)15, "resultVo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_TODAY_TOTAL_COUNT
          return GROUP_TODAY_TOTAL_COUNT;
        case 2: // GROUP_TODAY_TOTAL_MONEY
          return GROUP_TODAY_TOTAL_MONEY;
        case 3: // GROUP_TODAY_TAKE_COUNT
          return GROUP_TODAY_TAKE_COUNT;
        case 4: // GROUP_TODAY_SETTLE_MONEY
          return GROUP_TODAY_SETTLE_MONEY;
        case 5: // F2F_TODAY_TOTAL_COUNT
          return F2F_TODAY_TOTAL_COUNT;
        case 6: // F2F_TODAY_TOTAL_MONEY
          return F2F_TODAY_TOTAL_MONEY;
        case 7: // GROUP_MONTH_TOTAL_COUNT
          return GROUP_MONTH_TOTAL_COUNT;
        case 8: // GROUP_MONTH_TOTAL_MONEY
          return GROUP_MONTH_TOTAL_MONEY;
        case 9: // GROUP_MONTH_TAKE_COUNT
          return GROUP_MONTH_TAKE_COUNT;
        case 10: // GROUP_MONTH_SETTLE_MONEY
          return GROUP_MONTH_SETTLE_MONEY;
        case 11: // F2F_MONTH_TOTAL_COUNT
          return F2F_MONTH_TOTAL_COUNT;
        case 12: // F2F_MONTH_TOTAL_MONEY
          return F2F_MONTH_TOTAL_MONEY;
        case 13: // MONTH_TOTAL_SETTLE_COUNT
          return MONTH_TOTAL_SETTLE_COUNT;
        case 14: // MONTH_TOTAL_SETTLE_MONEY
          return MONTH_TOTAL_SETTLE_MONEY;
        case 15: // RESULT_VO
          return RESULT_VO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GROUPTODAYTOTALCOUNT_ISSET_ID = 0;
  private static final int __GROUPTODAYTOTALMONEY_ISSET_ID = 1;
  private static final int __GROUPTODAYTAKECOUNT_ISSET_ID = 2;
  private static final int __GROUPTODAYSETTLEMONEY_ISSET_ID = 3;
  private static final int __F2FTODAYTOTALCOUNT_ISSET_ID = 4;
  private static final int __F2FTODAYTOTALMONEY_ISSET_ID = 5;
  private static final int __GROUPMONTHTOTALCOUNT_ISSET_ID = 6;
  private static final int __GROUPMONTHTOTALMONEY_ISSET_ID = 7;
  private static final int __GROUPMONTHTAKECOUNT_ISSET_ID = 8;
  private static final int __GROUPMONTHSETTLEMONEY_ISSET_ID = 9;
  private static final int __F2FMONTHTOTALCOUNT_ISSET_ID = 10;
  private static final int __F2FMONTHTOTALMONEY_ISSET_ID = 11;
  private static final int __MONTHTOTALSETTLECOUNT_ISSET_ID = 12;
  private static final int __MONTHTOTALSETTLEMONEY_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_TODAY_TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("groupTodayTotalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GROUP_TODAY_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("groupTodayTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GROUP_TODAY_TAKE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("groupTodayTakeCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GROUP_TODAY_SETTLE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("groupTodaySettleMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.F2F_TODAY_TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("f2fTodayTotalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.F2F_TODAY_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("f2fTodayTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GROUP_MONTH_TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("groupMonthTotalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GROUP_MONTH_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("groupMonthTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GROUP_MONTH_TAKE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("groupMonthTakeCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GROUP_MONTH_SETTLE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("groupMonthSettleMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.F2F_MONTH_TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("f2fMonthTotalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.F2F_MONTH_TOTAL_MONEY, new org.apache.thrift.meta_data.FieldMetaData("f2fMonthTotalMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTH_TOTAL_SETTLE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("monthTotalSettleCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MONTH_TOTAL_SETTLE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("monthTotalSettleMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESULT_VO, new org.apache.thrift.meta_data.FieldMetaData("resultVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryMerchantSettlementRes.class, metaDataMap);
  }

  public QueryMerchantSettlementRes() {
  }

  public QueryMerchantSettlementRes(
    long groupTodayTotalCount,
    double groupTodayTotalMoney,
    long groupTodayTakeCount,
    double groupTodaySettleMoney,
    long f2fTodayTotalCount,
    double f2fTodayTotalMoney,
    long groupMonthTotalCount,
    double groupMonthTotalMoney,
    long groupMonthTakeCount,
    double groupMonthSettleMoney,
    long f2fMonthTotalCount,
    double f2fMonthTotalMoney,
    long monthTotalSettleCount,
    double monthTotalSettleMoney,
    com.froad.thrift.vo.ResultVo resultVo)
  {
    this();
    this.groupTodayTotalCount = groupTodayTotalCount;
    setGroupTodayTotalCountIsSet(true);
    this.groupTodayTotalMoney = groupTodayTotalMoney;
    setGroupTodayTotalMoneyIsSet(true);
    this.groupTodayTakeCount = groupTodayTakeCount;
    setGroupTodayTakeCountIsSet(true);
    this.groupTodaySettleMoney = groupTodaySettleMoney;
    setGroupTodaySettleMoneyIsSet(true);
    this.f2fTodayTotalCount = f2fTodayTotalCount;
    setF2fTodayTotalCountIsSet(true);
    this.f2fTodayTotalMoney = f2fTodayTotalMoney;
    setF2fTodayTotalMoneyIsSet(true);
    this.groupMonthTotalCount = groupMonthTotalCount;
    setGroupMonthTotalCountIsSet(true);
    this.groupMonthTotalMoney = groupMonthTotalMoney;
    setGroupMonthTotalMoneyIsSet(true);
    this.groupMonthTakeCount = groupMonthTakeCount;
    setGroupMonthTakeCountIsSet(true);
    this.groupMonthSettleMoney = groupMonthSettleMoney;
    setGroupMonthSettleMoneyIsSet(true);
    this.f2fMonthTotalCount = f2fMonthTotalCount;
    setF2fMonthTotalCountIsSet(true);
    this.f2fMonthTotalMoney = f2fMonthTotalMoney;
    setF2fMonthTotalMoneyIsSet(true);
    this.monthTotalSettleCount = monthTotalSettleCount;
    setMonthTotalSettleCountIsSet(true);
    this.monthTotalSettleMoney = monthTotalSettleMoney;
    setMonthTotalSettleMoneyIsSet(true);
    this.resultVo = resultVo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryMerchantSettlementRes(QueryMerchantSettlementRes other) {
    __isset_bitfield = other.__isset_bitfield;
    this.groupTodayTotalCount = other.groupTodayTotalCount;
    this.groupTodayTotalMoney = other.groupTodayTotalMoney;
    this.groupTodayTakeCount = other.groupTodayTakeCount;
    this.groupTodaySettleMoney = other.groupTodaySettleMoney;
    this.f2fTodayTotalCount = other.f2fTodayTotalCount;
    this.f2fTodayTotalMoney = other.f2fTodayTotalMoney;
    this.groupMonthTotalCount = other.groupMonthTotalCount;
    this.groupMonthTotalMoney = other.groupMonthTotalMoney;
    this.groupMonthTakeCount = other.groupMonthTakeCount;
    this.groupMonthSettleMoney = other.groupMonthSettleMoney;
    this.f2fMonthTotalCount = other.f2fMonthTotalCount;
    this.f2fMonthTotalMoney = other.f2fMonthTotalMoney;
    this.monthTotalSettleCount = other.monthTotalSettleCount;
    this.monthTotalSettleMoney = other.monthTotalSettleMoney;
    if (other.isSetResultVo()) {
      this.resultVo = new com.froad.thrift.vo.ResultVo(other.resultVo);
    }
  }

  public QueryMerchantSettlementRes deepCopy() {
    return new QueryMerchantSettlementRes(this);
  }

  @Override
  public void clear() {
    setGroupTodayTotalCountIsSet(false);
    this.groupTodayTotalCount = 0;
    setGroupTodayTotalMoneyIsSet(false);
    this.groupTodayTotalMoney = 0.0;
    setGroupTodayTakeCountIsSet(false);
    this.groupTodayTakeCount = 0;
    setGroupTodaySettleMoneyIsSet(false);
    this.groupTodaySettleMoney = 0.0;
    setF2fTodayTotalCountIsSet(false);
    this.f2fTodayTotalCount = 0;
    setF2fTodayTotalMoneyIsSet(false);
    this.f2fTodayTotalMoney = 0.0;
    setGroupMonthTotalCountIsSet(false);
    this.groupMonthTotalCount = 0;
    setGroupMonthTotalMoneyIsSet(false);
    this.groupMonthTotalMoney = 0.0;
    setGroupMonthTakeCountIsSet(false);
    this.groupMonthTakeCount = 0;
    setGroupMonthSettleMoneyIsSet(false);
    this.groupMonthSettleMoney = 0.0;
    setF2fMonthTotalCountIsSet(false);
    this.f2fMonthTotalCount = 0;
    setF2fMonthTotalMoneyIsSet(false);
    this.f2fMonthTotalMoney = 0.0;
    setMonthTotalSettleCountIsSet(false);
    this.monthTotalSettleCount = 0;
    setMonthTotalSettleMoneyIsSet(false);
    this.monthTotalSettleMoney = 0.0;
    this.resultVo = null;
  }

  /**
   * 今日团购总数
   */
  public long getGroupTodayTotalCount() {
    return this.groupTodayTotalCount;
  }

  /**
   * 今日团购总数
   */
  public QueryMerchantSettlementRes setGroupTodayTotalCount(long groupTodayTotalCount) {
    this.groupTodayTotalCount = groupTodayTotalCount;
    setGroupTodayTotalCountIsSet(true);
    return this;
  }

  public void unsetGroupTodayTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPTODAYTOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field groupTodayTotalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupTodayTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPTODAYTOTALCOUNT_ISSET_ID);
  }

  public void setGroupTodayTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPTODAYTOTALCOUNT_ISSET_ID, value);
  }

  /**
   * 今日团购总金额（含未消费）
   */
  public double getGroupTodayTotalMoney() {
    return this.groupTodayTotalMoney;
  }

  /**
   * 今日团购总金额（含未消费）
   */
  public QueryMerchantSettlementRes setGroupTodayTotalMoney(double groupTodayTotalMoney) {
    this.groupTodayTotalMoney = groupTodayTotalMoney;
    setGroupTodayTotalMoneyIsSet(true);
    return this;
  }

  public void unsetGroupTodayTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPTODAYTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field groupTodayTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupTodayTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPTODAYTOTALMONEY_ISSET_ID);
  }

  public void setGroupTodayTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPTODAYTOTALMONEY_ISSET_ID, value);
  }

  /**
   * 今日团购已提货笔数
   */
  public long getGroupTodayTakeCount() {
    return this.groupTodayTakeCount;
  }

  /**
   * 今日团购已提货笔数
   */
  public QueryMerchantSettlementRes setGroupTodayTakeCount(long groupTodayTakeCount) {
    this.groupTodayTakeCount = groupTodayTakeCount;
    setGroupTodayTakeCountIsSet(true);
    return this;
  }

  public void unsetGroupTodayTakeCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPTODAYTAKECOUNT_ISSET_ID);
  }

  /** Returns true if field groupTodayTakeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupTodayTakeCount() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPTODAYTAKECOUNT_ISSET_ID);
  }

  public void setGroupTodayTakeCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPTODAYTAKECOUNT_ISSET_ID, value);
  }

  /**
   * 今日团购已结算金额
   */
  public double getGroupTodaySettleMoney() {
    return this.groupTodaySettleMoney;
  }

  /**
   * 今日团购已结算金额
   */
  public QueryMerchantSettlementRes setGroupTodaySettleMoney(double groupTodaySettleMoney) {
    this.groupTodaySettleMoney = groupTodaySettleMoney;
    setGroupTodaySettleMoneyIsSet(true);
    return this;
  }

  public void unsetGroupTodaySettleMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPTODAYSETTLEMONEY_ISSET_ID);
  }

  /** Returns true if field groupTodaySettleMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupTodaySettleMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPTODAYSETTLEMONEY_ISSET_ID);
  }

  public void setGroupTodaySettleMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPTODAYSETTLEMONEY_ISSET_ID, value);
  }

  /**
   * 今日面对面总笔数
   */
  public long getF2fTodayTotalCount() {
    return this.f2fTodayTotalCount;
  }

  /**
   * 今日面对面总笔数
   */
  public QueryMerchantSettlementRes setF2fTodayTotalCount(long f2fTodayTotalCount) {
    this.f2fTodayTotalCount = f2fTodayTotalCount;
    setF2fTodayTotalCountIsSet(true);
    return this;
  }

  public void unsetF2fTodayTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __F2FTODAYTOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field f2fTodayTotalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetF2fTodayTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __F2FTODAYTOTALCOUNT_ISSET_ID);
  }

  public void setF2fTodayTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __F2FTODAYTOTALCOUNT_ISSET_ID, value);
  }

  /**
   * 今日面对面总金额
   */
  public double getF2fTodayTotalMoney() {
    return this.f2fTodayTotalMoney;
  }

  /**
   * 今日面对面总金额
   */
  public QueryMerchantSettlementRes setF2fTodayTotalMoney(double f2fTodayTotalMoney) {
    this.f2fTodayTotalMoney = f2fTodayTotalMoney;
    setF2fTodayTotalMoneyIsSet(true);
    return this;
  }

  public void unsetF2fTodayTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __F2FTODAYTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field f2fTodayTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetF2fTodayTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __F2FTODAYTOTALMONEY_ISSET_ID);
  }

  public void setF2fTodayTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __F2FTODAYTOTALMONEY_ISSET_ID, value);
  }

  /**
   * 本月团购总数
   */
  public long getGroupMonthTotalCount() {
    return this.groupMonthTotalCount;
  }

  /**
   * 本月团购总数
   */
  public QueryMerchantSettlementRes setGroupMonthTotalCount(long groupMonthTotalCount) {
    this.groupMonthTotalCount = groupMonthTotalCount;
    setGroupMonthTotalCountIsSet(true);
    return this;
  }

  public void unsetGroupMonthTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPMONTHTOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field groupMonthTotalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupMonthTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPMONTHTOTALCOUNT_ISSET_ID);
  }

  public void setGroupMonthTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPMONTHTOTALCOUNT_ISSET_ID, value);
  }

  /**
   * 本月团购总金额（含未消费）
   */
  public double getGroupMonthTotalMoney() {
    return this.groupMonthTotalMoney;
  }

  /**
   * 本月团购总金额（含未消费）
   */
  public QueryMerchantSettlementRes setGroupMonthTotalMoney(double groupMonthTotalMoney) {
    this.groupMonthTotalMoney = groupMonthTotalMoney;
    setGroupMonthTotalMoneyIsSet(true);
    return this;
  }

  public void unsetGroupMonthTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPMONTHTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field groupMonthTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupMonthTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPMONTHTOTALMONEY_ISSET_ID);
  }

  public void setGroupMonthTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPMONTHTOTALMONEY_ISSET_ID, value);
  }

  /**
   * 本月团购已提货笔数
   */
  public long getGroupMonthTakeCount() {
    return this.groupMonthTakeCount;
  }

  /**
   * 本月团购已提货笔数
   */
  public QueryMerchantSettlementRes setGroupMonthTakeCount(long groupMonthTakeCount) {
    this.groupMonthTakeCount = groupMonthTakeCount;
    setGroupMonthTakeCountIsSet(true);
    return this;
  }

  public void unsetGroupMonthTakeCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPMONTHTAKECOUNT_ISSET_ID);
  }

  /** Returns true if field groupMonthTakeCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupMonthTakeCount() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPMONTHTAKECOUNT_ISSET_ID);
  }

  public void setGroupMonthTakeCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPMONTHTAKECOUNT_ISSET_ID, value);
  }

  /**
   * 本月团购已结算金额
   */
  public double getGroupMonthSettleMoney() {
    return this.groupMonthSettleMoney;
  }

  /**
   * 本月团购已结算金额
   */
  public QueryMerchantSettlementRes setGroupMonthSettleMoney(double groupMonthSettleMoney) {
    this.groupMonthSettleMoney = groupMonthSettleMoney;
    setGroupMonthSettleMoneyIsSet(true);
    return this;
  }

  public void unsetGroupMonthSettleMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPMONTHSETTLEMONEY_ISSET_ID);
  }

  /** Returns true if field groupMonthSettleMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupMonthSettleMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPMONTHSETTLEMONEY_ISSET_ID);
  }

  public void setGroupMonthSettleMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPMONTHSETTLEMONEY_ISSET_ID, value);
  }

  /**
   * 本月面对面总笔数
   */
  public long getF2fMonthTotalCount() {
    return this.f2fMonthTotalCount;
  }

  /**
   * 本月面对面总笔数
   */
  public QueryMerchantSettlementRes setF2fMonthTotalCount(long f2fMonthTotalCount) {
    this.f2fMonthTotalCount = f2fMonthTotalCount;
    setF2fMonthTotalCountIsSet(true);
    return this;
  }

  public void unsetF2fMonthTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __F2FMONTHTOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field f2fMonthTotalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetF2fMonthTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __F2FMONTHTOTALCOUNT_ISSET_ID);
  }

  public void setF2fMonthTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __F2FMONTHTOTALCOUNT_ISSET_ID, value);
  }

  /**
   * 本月面对面总金额
   */
  public double getF2fMonthTotalMoney() {
    return this.f2fMonthTotalMoney;
  }

  /**
   * 本月面对面总金额
   */
  public QueryMerchantSettlementRes setF2fMonthTotalMoney(double f2fMonthTotalMoney) {
    this.f2fMonthTotalMoney = f2fMonthTotalMoney;
    setF2fMonthTotalMoneyIsSet(true);
    return this;
  }

  public void unsetF2fMonthTotalMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __F2FMONTHTOTALMONEY_ISSET_ID);
  }

  /** Returns true if field f2fMonthTotalMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetF2fMonthTotalMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __F2FMONTHTOTALMONEY_ISSET_ID);
  }

  public void setF2fMonthTotalMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __F2FMONTHTOTALMONEY_ISSET_ID, value);
  }

  /**
   * 本月结算总笔数（团购+面对面）
   */
  public long getMonthTotalSettleCount() {
    return this.monthTotalSettleCount;
  }

  /**
   * 本月结算总笔数（团购+面对面）
   */
  public QueryMerchantSettlementRes setMonthTotalSettleCount(long monthTotalSettleCount) {
    this.monthTotalSettleCount = monthTotalSettleCount;
    setMonthTotalSettleCountIsSet(true);
    return this;
  }

  public void unsetMonthTotalSettleCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHTOTALSETTLECOUNT_ISSET_ID);
  }

  /** Returns true if field monthTotalSettleCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthTotalSettleCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHTOTALSETTLECOUNT_ISSET_ID);
  }

  public void setMonthTotalSettleCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHTOTALSETTLECOUNT_ISSET_ID, value);
  }

  /**
   * 本月结算总金额（团购+面对面）
   */
  public double getMonthTotalSettleMoney() {
    return this.monthTotalSettleMoney;
  }

  /**
   * 本月结算总金额（团购+面对面）
   */
  public QueryMerchantSettlementRes setMonthTotalSettleMoney(double monthTotalSettleMoney) {
    this.monthTotalSettleMoney = monthTotalSettleMoney;
    setMonthTotalSettleMoneyIsSet(true);
    return this;
  }

  public void unsetMonthTotalSettleMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHTOTALSETTLEMONEY_ISSET_ID);
  }

  /** Returns true if field monthTotalSettleMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthTotalSettleMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHTOTALSETTLEMONEY_ISSET_ID);
  }

  public void setMonthTotalSettleMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHTOTALSETTLEMONEY_ISSET_ID, value);
  }

  /**
   * 响应结果
   */
  public com.froad.thrift.vo.ResultVo getResultVo() {
    return this.resultVo;
  }

  /**
   * 响应结果
   */
  public QueryMerchantSettlementRes setResultVo(com.froad.thrift.vo.ResultVo resultVo) {
    this.resultVo = resultVo;
    return this;
  }

  public void unsetResultVo() {
    this.resultVo = null;
  }

  /** Returns true if field resultVo is set (has been assigned a value) and false otherwise */
  public boolean isSetResultVo() {
    return this.resultVo != null;
  }

  public void setResultVoIsSet(boolean value) {
    if (!value) {
      this.resultVo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP_TODAY_TOTAL_COUNT:
      if (value == null) {
        unsetGroupTodayTotalCount();
      } else {
        setGroupTodayTotalCount((Long)value);
      }
      break;

    case GROUP_TODAY_TOTAL_MONEY:
      if (value == null) {
        unsetGroupTodayTotalMoney();
      } else {
        setGroupTodayTotalMoney((Double)value);
      }
      break;

    case GROUP_TODAY_TAKE_COUNT:
      if (value == null) {
        unsetGroupTodayTakeCount();
      } else {
        setGroupTodayTakeCount((Long)value);
      }
      break;

    case GROUP_TODAY_SETTLE_MONEY:
      if (value == null) {
        unsetGroupTodaySettleMoney();
      } else {
        setGroupTodaySettleMoney((Double)value);
      }
      break;

    case F2F_TODAY_TOTAL_COUNT:
      if (value == null) {
        unsetF2fTodayTotalCount();
      } else {
        setF2fTodayTotalCount((Long)value);
      }
      break;

    case F2F_TODAY_TOTAL_MONEY:
      if (value == null) {
        unsetF2fTodayTotalMoney();
      } else {
        setF2fTodayTotalMoney((Double)value);
      }
      break;

    case GROUP_MONTH_TOTAL_COUNT:
      if (value == null) {
        unsetGroupMonthTotalCount();
      } else {
        setGroupMonthTotalCount((Long)value);
      }
      break;

    case GROUP_MONTH_TOTAL_MONEY:
      if (value == null) {
        unsetGroupMonthTotalMoney();
      } else {
        setGroupMonthTotalMoney((Double)value);
      }
      break;

    case GROUP_MONTH_TAKE_COUNT:
      if (value == null) {
        unsetGroupMonthTakeCount();
      } else {
        setGroupMonthTakeCount((Long)value);
      }
      break;

    case GROUP_MONTH_SETTLE_MONEY:
      if (value == null) {
        unsetGroupMonthSettleMoney();
      } else {
        setGroupMonthSettleMoney((Double)value);
      }
      break;

    case F2F_MONTH_TOTAL_COUNT:
      if (value == null) {
        unsetF2fMonthTotalCount();
      } else {
        setF2fMonthTotalCount((Long)value);
      }
      break;

    case F2F_MONTH_TOTAL_MONEY:
      if (value == null) {
        unsetF2fMonthTotalMoney();
      } else {
        setF2fMonthTotalMoney((Double)value);
      }
      break;

    case MONTH_TOTAL_SETTLE_COUNT:
      if (value == null) {
        unsetMonthTotalSettleCount();
      } else {
        setMonthTotalSettleCount((Long)value);
      }
      break;

    case MONTH_TOTAL_SETTLE_MONEY:
      if (value == null) {
        unsetMonthTotalSettleMoney();
      } else {
        setMonthTotalSettleMoney((Double)value);
      }
      break;

    case RESULT_VO:
      if (value == null) {
        unsetResultVo();
      } else {
        setResultVo((com.froad.thrift.vo.ResultVo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_TODAY_TOTAL_COUNT:
      return Long.valueOf(getGroupTodayTotalCount());

    case GROUP_TODAY_TOTAL_MONEY:
      return Double.valueOf(getGroupTodayTotalMoney());

    case GROUP_TODAY_TAKE_COUNT:
      return Long.valueOf(getGroupTodayTakeCount());

    case GROUP_TODAY_SETTLE_MONEY:
      return Double.valueOf(getGroupTodaySettleMoney());

    case F2F_TODAY_TOTAL_COUNT:
      return Long.valueOf(getF2fTodayTotalCount());

    case F2F_TODAY_TOTAL_MONEY:
      return Double.valueOf(getF2fTodayTotalMoney());

    case GROUP_MONTH_TOTAL_COUNT:
      return Long.valueOf(getGroupMonthTotalCount());

    case GROUP_MONTH_TOTAL_MONEY:
      return Double.valueOf(getGroupMonthTotalMoney());

    case GROUP_MONTH_TAKE_COUNT:
      return Long.valueOf(getGroupMonthTakeCount());

    case GROUP_MONTH_SETTLE_MONEY:
      return Double.valueOf(getGroupMonthSettleMoney());

    case F2F_MONTH_TOTAL_COUNT:
      return Long.valueOf(getF2fMonthTotalCount());

    case F2F_MONTH_TOTAL_MONEY:
      return Double.valueOf(getF2fMonthTotalMoney());

    case MONTH_TOTAL_SETTLE_COUNT:
      return Long.valueOf(getMonthTotalSettleCount());

    case MONTH_TOTAL_SETTLE_MONEY:
      return Double.valueOf(getMonthTotalSettleMoney());

    case RESULT_VO:
      return getResultVo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP_TODAY_TOTAL_COUNT:
      return isSetGroupTodayTotalCount();
    case GROUP_TODAY_TOTAL_MONEY:
      return isSetGroupTodayTotalMoney();
    case GROUP_TODAY_TAKE_COUNT:
      return isSetGroupTodayTakeCount();
    case GROUP_TODAY_SETTLE_MONEY:
      return isSetGroupTodaySettleMoney();
    case F2F_TODAY_TOTAL_COUNT:
      return isSetF2fTodayTotalCount();
    case F2F_TODAY_TOTAL_MONEY:
      return isSetF2fTodayTotalMoney();
    case GROUP_MONTH_TOTAL_COUNT:
      return isSetGroupMonthTotalCount();
    case GROUP_MONTH_TOTAL_MONEY:
      return isSetGroupMonthTotalMoney();
    case GROUP_MONTH_TAKE_COUNT:
      return isSetGroupMonthTakeCount();
    case GROUP_MONTH_SETTLE_MONEY:
      return isSetGroupMonthSettleMoney();
    case F2F_MONTH_TOTAL_COUNT:
      return isSetF2fMonthTotalCount();
    case F2F_MONTH_TOTAL_MONEY:
      return isSetF2fMonthTotalMoney();
    case MONTH_TOTAL_SETTLE_COUNT:
      return isSetMonthTotalSettleCount();
    case MONTH_TOTAL_SETTLE_MONEY:
      return isSetMonthTotalSettleMoney();
    case RESULT_VO:
      return isSetResultVo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryMerchantSettlementRes)
      return this.equals((QueryMerchantSettlementRes)that);
    return false;
  }

  public boolean equals(QueryMerchantSettlementRes that) {
    if (that == null)
      return false;

    boolean this_present_groupTodayTotalCount = true;
    boolean that_present_groupTodayTotalCount = true;
    if (this_present_groupTodayTotalCount || that_present_groupTodayTotalCount) {
      if (!(this_present_groupTodayTotalCount && that_present_groupTodayTotalCount))
        return false;
      if (this.groupTodayTotalCount != that.groupTodayTotalCount)
        return false;
    }

    boolean this_present_groupTodayTotalMoney = true;
    boolean that_present_groupTodayTotalMoney = true;
    if (this_present_groupTodayTotalMoney || that_present_groupTodayTotalMoney) {
      if (!(this_present_groupTodayTotalMoney && that_present_groupTodayTotalMoney))
        return false;
      if (this.groupTodayTotalMoney != that.groupTodayTotalMoney)
        return false;
    }

    boolean this_present_groupTodayTakeCount = true;
    boolean that_present_groupTodayTakeCount = true;
    if (this_present_groupTodayTakeCount || that_present_groupTodayTakeCount) {
      if (!(this_present_groupTodayTakeCount && that_present_groupTodayTakeCount))
        return false;
      if (this.groupTodayTakeCount != that.groupTodayTakeCount)
        return false;
    }

    boolean this_present_groupTodaySettleMoney = true;
    boolean that_present_groupTodaySettleMoney = true;
    if (this_present_groupTodaySettleMoney || that_present_groupTodaySettleMoney) {
      if (!(this_present_groupTodaySettleMoney && that_present_groupTodaySettleMoney))
        return false;
      if (this.groupTodaySettleMoney != that.groupTodaySettleMoney)
        return false;
    }

    boolean this_present_f2fTodayTotalCount = true;
    boolean that_present_f2fTodayTotalCount = true;
    if (this_present_f2fTodayTotalCount || that_present_f2fTodayTotalCount) {
      if (!(this_present_f2fTodayTotalCount && that_present_f2fTodayTotalCount))
        return false;
      if (this.f2fTodayTotalCount != that.f2fTodayTotalCount)
        return false;
    }

    boolean this_present_f2fTodayTotalMoney = true;
    boolean that_present_f2fTodayTotalMoney = true;
    if (this_present_f2fTodayTotalMoney || that_present_f2fTodayTotalMoney) {
      if (!(this_present_f2fTodayTotalMoney && that_present_f2fTodayTotalMoney))
        return false;
      if (this.f2fTodayTotalMoney != that.f2fTodayTotalMoney)
        return false;
    }

    boolean this_present_groupMonthTotalCount = true;
    boolean that_present_groupMonthTotalCount = true;
    if (this_present_groupMonthTotalCount || that_present_groupMonthTotalCount) {
      if (!(this_present_groupMonthTotalCount && that_present_groupMonthTotalCount))
        return false;
      if (this.groupMonthTotalCount != that.groupMonthTotalCount)
        return false;
    }

    boolean this_present_groupMonthTotalMoney = true;
    boolean that_present_groupMonthTotalMoney = true;
    if (this_present_groupMonthTotalMoney || that_present_groupMonthTotalMoney) {
      if (!(this_present_groupMonthTotalMoney && that_present_groupMonthTotalMoney))
        return false;
      if (this.groupMonthTotalMoney != that.groupMonthTotalMoney)
        return false;
    }

    boolean this_present_groupMonthTakeCount = true;
    boolean that_present_groupMonthTakeCount = true;
    if (this_present_groupMonthTakeCount || that_present_groupMonthTakeCount) {
      if (!(this_present_groupMonthTakeCount && that_present_groupMonthTakeCount))
        return false;
      if (this.groupMonthTakeCount != that.groupMonthTakeCount)
        return false;
    }

    boolean this_present_groupMonthSettleMoney = true;
    boolean that_present_groupMonthSettleMoney = true;
    if (this_present_groupMonthSettleMoney || that_present_groupMonthSettleMoney) {
      if (!(this_present_groupMonthSettleMoney && that_present_groupMonthSettleMoney))
        return false;
      if (this.groupMonthSettleMoney != that.groupMonthSettleMoney)
        return false;
    }

    boolean this_present_f2fMonthTotalCount = true;
    boolean that_present_f2fMonthTotalCount = true;
    if (this_present_f2fMonthTotalCount || that_present_f2fMonthTotalCount) {
      if (!(this_present_f2fMonthTotalCount && that_present_f2fMonthTotalCount))
        return false;
      if (this.f2fMonthTotalCount != that.f2fMonthTotalCount)
        return false;
    }

    boolean this_present_f2fMonthTotalMoney = true;
    boolean that_present_f2fMonthTotalMoney = true;
    if (this_present_f2fMonthTotalMoney || that_present_f2fMonthTotalMoney) {
      if (!(this_present_f2fMonthTotalMoney && that_present_f2fMonthTotalMoney))
        return false;
      if (this.f2fMonthTotalMoney != that.f2fMonthTotalMoney)
        return false;
    }

    boolean this_present_monthTotalSettleCount = true;
    boolean that_present_monthTotalSettleCount = true;
    if (this_present_monthTotalSettleCount || that_present_monthTotalSettleCount) {
      if (!(this_present_monthTotalSettleCount && that_present_monthTotalSettleCount))
        return false;
      if (this.monthTotalSettleCount != that.monthTotalSettleCount)
        return false;
    }

    boolean this_present_monthTotalSettleMoney = true;
    boolean that_present_monthTotalSettleMoney = true;
    if (this_present_monthTotalSettleMoney || that_present_monthTotalSettleMoney) {
      if (!(this_present_monthTotalSettleMoney && that_present_monthTotalSettleMoney))
        return false;
      if (this.monthTotalSettleMoney != that.monthTotalSettleMoney)
        return false;
    }

    boolean this_present_resultVo = true && this.isSetResultVo();
    boolean that_present_resultVo = true && that.isSetResultVo();
    if (this_present_resultVo || that_present_resultVo) {
      if (!(this_present_resultVo && that_present_resultVo))
        return false;
      if (!this.resultVo.equals(that.resultVo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_groupTodayTotalCount = true;
    list.add(present_groupTodayTotalCount);
    if (present_groupTodayTotalCount)
      list.add(groupTodayTotalCount);

    boolean present_groupTodayTotalMoney = true;
    list.add(present_groupTodayTotalMoney);
    if (present_groupTodayTotalMoney)
      list.add(groupTodayTotalMoney);

    boolean present_groupTodayTakeCount = true;
    list.add(present_groupTodayTakeCount);
    if (present_groupTodayTakeCount)
      list.add(groupTodayTakeCount);

    boolean present_groupTodaySettleMoney = true;
    list.add(present_groupTodaySettleMoney);
    if (present_groupTodaySettleMoney)
      list.add(groupTodaySettleMoney);

    boolean present_f2fTodayTotalCount = true;
    list.add(present_f2fTodayTotalCount);
    if (present_f2fTodayTotalCount)
      list.add(f2fTodayTotalCount);

    boolean present_f2fTodayTotalMoney = true;
    list.add(present_f2fTodayTotalMoney);
    if (present_f2fTodayTotalMoney)
      list.add(f2fTodayTotalMoney);

    boolean present_groupMonthTotalCount = true;
    list.add(present_groupMonthTotalCount);
    if (present_groupMonthTotalCount)
      list.add(groupMonthTotalCount);

    boolean present_groupMonthTotalMoney = true;
    list.add(present_groupMonthTotalMoney);
    if (present_groupMonthTotalMoney)
      list.add(groupMonthTotalMoney);

    boolean present_groupMonthTakeCount = true;
    list.add(present_groupMonthTakeCount);
    if (present_groupMonthTakeCount)
      list.add(groupMonthTakeCount);

    boolean present_groupMonthSettleMoney = true;
    list.add(present_groupMonthSettleMoney);
    if (present_groupMonthSettleMoney)
      list.add(groupMonthSettleMoney);

    boolean present_f2fMonthTotalCount = true;
    list.add(present_f2fMonthTotalCount);
    if (present_f2fMonthTotalCount)
      list.add(f2fMonthTotalCount);

    boolean present_f2fMonthTotalMoney = true;
    list.add(present_f2fMonthTotalMoney);
    if (present_f2fMonthTotalMoney)
      list.add(f2fMonthTotalMoney);

    boolean present_monthTotalSettleCount = true;
    list.add(present_monthTotalSettleCount);
    if (present_monthTotalSettleCount)
      list.add(monthTotalSettleCount);

    boolean present_monthTotalSettleMoney = true;
    list.add(present_monthTotalSettleMoney);
    if (present_monthTotalSettleMoney)
      list.add(monthTotalSettleMoney);

    boolean present_resultVo = true && (isSetResultVo());
    list.add(present_resultVo);
    if (present_resultVo)
      list.add(resultVo);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryMerchantSettlementRes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGroupTodayTotalCount()).compareTo(other.isSetGroupTodayTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupTodayTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupTodayTotalCount, other.groupTodayTotalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupTodayTotalMoney()).compareTo(other.isSetGroupTodayTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupTodayTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupTodayTotalMoney, other.groupTodayTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupTodayTakeCount()).compareTo(other.isSetGroupTodayTakeCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupTodayTakeCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupTodayTakeCount, other.groupTodayTakeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupTodaySettleMoney()).compareTo(other.isSetGroupTodaySettleMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupTodaySettleMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupTodaySettleMoney, other.groupTodaySettleMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetF2fTodayTotalCount()).compareTo(other.isSetF2fTodayTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF2fTodayTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f2fTodayTotalCount, other.f2fTodayTotalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetF2fTodayTotalMoney()).compareTo(other.isSetF2fTodayTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF2fTodayTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f2fTodayTotalMoney, other.f2fTodayTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupMonthTotalCount()).compareTo(other.isSetGroupMonthTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupMonthTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupMonthTotalCount, other.groupMonthTotalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupMonthTotalMoney()).compareTo(other.isSetGroupMonthTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupMonthTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupMonthTotalMoney, other.groupMonthTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupMonthTakeCount()).compareTo(other.isSetGroupMonthTakeCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupMonthTakeCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupMonthTakeCount, other.groupMonthTakeCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupMonthSettleMoney()).compareTo(other.isSetGroupMonthSettleMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupMonthSettleMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupMonthSettleMoney, other.groupMonthSettleMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetF2fMonthTotalCount()).compareTo(other.isSetF2fMonthTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF2fMonthTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f2fMonthTotalCount, other.f2fMonthTotalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetF2fMonthTotalMoney()).compareTo(other.isSetF2fMonthTotalMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetF2fMonthTotalMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f2fMonthTotalMoney, other.f2fMonthTotalMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthTotalSettleCount()).compareTo(other.isSetMonthTotalSettleCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthTotalSettleCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthTotalSettleCount, other.monthTotalSettleCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthTotalSettleMoney()).compareTo(other.isSetMonthTotalSettleMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthTotalSettleMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthTotalSettleMoney, other.monthTotalSettleMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultVo()).compareTo(other.isSetResultVo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultVo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultVo, other.resultVo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryMerchantSettlementRes(");
    boolean first = true;

    sb.append("groupTodayTotalCount:");
    sb.append(this.groupTodayTotalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupTodayTotalMoney:");
    sb.append(this.groupTodayTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupTodayTakeCount:");
    sb.append(this.groupTodayTakeCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupTodaySettleMoney:");
    sb.append(this.groupTodaySettleMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f2fTodayTotalCount:");
    sb.append(this.f2fTodayTotalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f2fTodayTotalMoney:");
    sb.append(this.f2fTodayTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupMonthTotalCount:");
    sb.append(this.groupMonthTotalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupMonthTotalMoney:");
    sb.append(this.groupMonthTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupMonthTakeCount:");
    sb.append(this.groupMonthTakeCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupMonthSettleMoney:");
    sb.append(this.groupMonthSettleMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f2fMonthTotalCount:");
    sb.append(this.f2fMonthTotalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("f2fMonthTotalMoney:");
    sb.append(this.f2fMonthTotalMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthTotalSettleCount:");
    sb.append(this.monthTotalSettleCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthTotalSettleMoney:");
    sb.append(this.monthTotalSettleMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultVo:");
    if (this.resultVo == null) {
      sb.append("null");
    } else {
      sb.append(this.resultVo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (resultVo != null) {
      resultVo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryMerchantSettlementResStandardSchemeFactory implements SchemeFactory {
    public QueryMerchantSettlementResStandardScheme getScheme() {
      return new QueryMerchantSettlementResStandardScheme();
    }
  }

  private static class QueryMerchantSettlementResStandardScheme extends StandardScheme<QueryMerchantSettlementRes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryMerchantSettlementRes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP_TODAY_TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.groupTodayTotalCount = iprot.readI64();
              struct.setGroupTodayTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP_TODAY_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.groupTodayTotalMoney = iprot.readDouble();
              struct.setGroupTodayTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP_TODAY_TAKE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.groupTodayTakeCount = iprot.readI64();
              struct.setGroupTodayTakeCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GROUP_TODAY_SETTLE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.groupTodaySettleMoney = iprot.readDouble();
              struct.setGroupTodaySettleMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // F2F_TODAY_TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.f2fTodayTotalCount = iprot.readI64();
              struct.setF2fTodayTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // F2F_TODAY_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.f2fTodayTotalMoney = iprot.readDouble();
              struct.setF2fTodayTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GROUP_MONTH_TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.groupMonthTotalCount = iprot.readI64();
              struct.setGroupMonthTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GROUP_MONTH_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.groupMonthTotalMoney = iprot.readDouble();
              struct.setGroupMonthTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GROUP_MONTH_TAKE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.groupMonthTakeCount = iprot.readI64();
              struct.setGroupMonthTakeCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GROUP_MONTH_SETTLE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.groupMonthSettleMoney = iprot.readDouble();
              struct.setGroupMonthSettleMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // F2F_MONTH_TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.f2fMonthTotalCount = iprot.readI64();
              struct.setF2fMonthTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // F2F_MONTH_TOTAL_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.f2fMonthTotalMoney = iprot.readDouble();
              struct.setF2fMonthTotalMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MONTH_TOTAL_SETTLE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.monthTotalSettleCount = iprot.readI64();
              struct.setMonthTotalSettleCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MONTH_TOTAL_SETTLE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthTotalSettleMoney = iprot.readDouble();
              struct.setMonthTotalSettleMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RESULT_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resultVo = new com.froad.thrift.vo.ResultVo();
              struct.resultVo.read(iprot);
              struct.setResultVoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryMerchantSettlementRes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(GROUP_TODAY_TOTAL_COUNT_FIELD_DESC);
      oprot.writeI64(struct.groupTodayTotalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_TODAY_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.groupTodayTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_TODAY_TAKE_COUNT_FIELD_DESC);
      oprot.writeI64(struct.groupTodayTakeCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_TODAY_SETTLE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.groupTodaySettleMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F2F_TODAY_TOTAL_COUNT_FIELD_DESC);
      oprot.writeI64(struct.f2fTodayTotalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F2F_TODAY_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.f2fTodayTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_MONTH_TOTAL_COUNT_FIELD_DESC);
      oprot.writeI64(struct.groupMonthTotalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_MONTH_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.groupMonthTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_MONTH_TAKE_COUNT_FIELD_DESC);
      oprot.writeI64(struct.groupMonthTakeCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_MONTH_SETTLE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.groupMonthSettleMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F2F_MONTH_TOTAL_COUNT_FIELD_DESC);
      oprot.writeI64(struct.f2fMonthTotalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(F2F_MONTH_TOTAL_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.f2fMonthTotalMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_TOTAL_SETTLE_COUNT_FIELD_DESC);
      oprot.writeI64(struct.monthTotalSettleCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_TOTAL_SETTLE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.monthTotalSettleMoney);
      oprot.writeFieldEnd();
      if (struct.resultVo != null) {
        oprot.writeFieldBegin(RESULT_VO_FIELD_DESC);
        struct.resultVo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryMerchantSettlementResTupleSchemeFactory implements SchemeFactory {
    public QueryMerchantSettlementResTupleScheme getScheme() {
      return new QueryMerchantSettlementResTupleScheme();
    }
  }

  private static class QueryMerchantSettlementResTupleScheme extends TupleScheme<QueryMerchantSettlementRes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryMerchantSettlementRes struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGroupTodayTotalCount()) {
        optionals.set(0);
      }
      if (struct.isSetGroupTodayTotalMoney()) {
        optionals.set(1);
      }
      if (struct.isSetGroupTodayTakeCount()) {
        optionals.set(2);
      }
      if (struct.isSetGroupTodaySettleMoney()) {
        optionals.set(3);
      }
      if (struct.isSetF2fTodayTotalCount()) {
        optionals.set(4);
      }
      if (struct.isSetF2fTodayTotalMoney()) {
        optionals.set(5);
      }
      if (struct.isSetGroupMonthTotalCount()) {
        optionals.set(6);
      }
      if (struct.isSetGroupMonthTotalMoney()) {
        optionals.set(7);
      }
      if (struct.isSetGroupMonthTakeCount()) {
        optionals.set(8);
      }
      if (struct.isSetGroupMonthSettleMoney()) {
        optionals.set(9);
      }
      if (struct.isSetF2fMonthTotalCount()) {
        optionals.set(10);
      }
      if (struct.isSetF2fMonthTotalMoney()) {
        optionals.set(11);
      }
      if (struct.isSetMonthTotalSettleCount()) {
        optionals.set(12);
      }
      if (struct.isSetMonthTotalSettleMoney()) {
        optionals.set(13);
      }
      if (struct.isSetResultVo()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetGroupTodayTotalCount()) {
        oprot.writeI64(struct.groupTodayTotalCount);
      }
      if (struct.isSetGroupTodayTotalMoney()) {
        oprot.writeDouble(struct.groupTodayTotalMoney);
      }
      if (struct.isSetGroupTodayTakeCount()) {
        oprot.writeI64(struct.groupTodayTakeCount);
      }
      if (struct.isSetGroupTodaySettleMoney()) {
        oprot.writeDouble(struct.groupTodaySettleMoney);
      }
      if (struct.isSetF2fTodayTotalCount()) {
        oprot.writeI64(struct.f2fTodayTotalCount);
      }
      if (struct.isSetF2fTodayTotalMoney()) {
        oprot.writeDouble(struct.f2fTodayTotalMoney);
      }
      if (struct.isSetGroupMonthTotalCount()) {
        oprot.writeI64(struct.groupMonthTotalCount);
      }
      if (struct.isSetGroupMonthTotalMoney()) {
        oprot.writeDouble(struct.groupMonthTotalMoney);
      }
      if (struct.isSetGroupMonthTakeCount()) {
        oprot.writeI64(struct.groupMonthTakeCount);
      }
      if (struct.isSetGroupMonthSettleMoney()) {
        oprot.writeDouble(struct.groupMonthSettleMoney);
      }
      if (struct.isSetF2fMonthTotalCount()) {
        oprot.writeI64(struct.f2fMonthTotalCount);
      }
      if (struct.isSetF2fMonthTotalMoney()) {
        oprot.writeDouble(struct.f2fMonthTotalMoney);
      }
      if (struct.isSetMonthTotalSettleCount()) {
        oprot.writeI64(struct.monthTotalSettleCount);
      }
      if (struct.isSetMonthTotalSettleMoney()) {
        oprot.writeDouble(struct.monthTotalSettleMoney);
      }
      if (struct.isSetResultVo()) {
        struct.resultVo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryMerchantSettlementRes struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.groupTodayTotalCount = iprot.readI64();
        struct.setGroupTodayTotalCountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.groupTodayTotalMoney = iprot.readDouble();
        struct.setGroupTodayTotalMoneyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.groupTodayTakeCount = iprot.readI64();
        struct.setGroupTodayTakeCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.groupTodaySettleMoney = iprot.readDouble();
        struct.setGroupTodaySettleMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.f2fTodayTotalCount = iprot.readI64();
        struct.setF2fTodayTotalCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.f2fTodayTotalMoney = iprot.readDouble();
        struct.setF2fTodayTotalMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.groupMonthTotalCount = iprot.readI64();
        struct.setGroupMonthTotalCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.groupMonthTotalMoney = iprot.readDouble();
        struct.setGroupMonthTotalMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.groupMonthTakeCount = iprot.readI64();
        struct.setGroupMonthTakeCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.groupMonthSettleMoney = iprot.readDouble();
        struct.setGroupMonthSettleMoneyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.f2fMonthTotalCount = iprot.readI64();
        struct.setF2fMonthTotalCountIsSet(true);
      }
      if (incoming.get(11)) {
        struct.f2fMonthTotalMoney = iprot.readDouble();
        struct.setF2fMonthTotalMoneyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.monthTotalSettleCount = iprot.readI64();
        struct.setMonthTotalSettleCountIsSet(true);
      }
      if (incoming.get(13)) {
        struct.monthTotalSettleMoney = iprot.readDouble();
        struct.setMonthTotalSettleMoneyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.resultVo = new com.froad.thrift.vo.ResultVo();
        struct.resultVo.read(iprot);
        struct.setResultVoIsSet(true);
      }
    }
  }

}

