/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.ticket;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class VerifyTicketListByPageResponseVo implements org.apache.thrift.TBase<VerifyTicketListByPageResponseVo, VerifyTicketListByPageResponseVo._Fields>, java.io.Serializable, Cloneable, Comparable<VerifyTicketListByPageResponseVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VerifyTicketListByPageResponseVo");

  private static final org.apache.thrift.protocol.TField RESULT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("resultVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TICKET_DETAIL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketDetailList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VerifyTicketListByPageResponseVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VerifyTicketListByPageResponseVoTupleSchemeFactory());
  }

  /**
   * 返回结果
   */
  public com.froad.thrift.vo.ResultVo resultVo; // required
  /**
   * 商品类型
   */
  public List<TicketDetailVo> ticketDetailList; // required
  /**
   * 总金额
   */
  public String totalAmount; // required
  /**
   * 分页信息
   */
  public com.froad.thrift.vo.PageVo pageVo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 返回结果
     */
    RESULT_VO((short)1, "resultVo"),
    /**
     * 商品类型
     */
    TICKET_DETAIL_LIST((short)2, "ticketDetailList"),
    /**
     * 总金额
     */
    TOTAL_AMOUNT((short)3, "totalAmount"),
    /**
     * 分页信息
     */
    PAGE_VO((short)4, "pageVo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT_VO
          return RESULT_VO;
        case 2: // TICKET_DETAIL_LIST
          return TICKET_DETAIL_LIST;
        case 3: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 4: // PAGE_VO
          return PAGE_VO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT_VO, new org.apache.thrift.meta_data.FieldMetaData("resultVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
    tmpMap.put(_Fields.TICKET_DETAIL_LIST, new org.apache.thrift.meta_data.FieldMetaData("ticketDetailList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TicketDetailVo.class))));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VerifyTicketListByPageResponseVo.class, metaDataMap);
  }

  public VerifyTicketListByPageResponseVo() {
  }

  public VerifyTicketListByPageResponseVo(
    com.froad.thrift.vo.ResultVo resultVo,
    List<TicketDetailVo> ticketDetailList,
    String totalAmount,
    com.froad.thrift.vo.PageVo pageVo)
  {
    this();
    this.resultVo = resultVo;
    this.ticketDetailList = ticketDetailList;
    this.totalAmount = totalAmount;
    this.pageVo = pageVo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VerifyTicketListByPageResponseVo(VerifyTicketListByPageResponseVo other) {
    if (other.isSetResultVo()) {
      this.resultVo = new com.froad.thrift.vo.ResultVo(other.resultVo);
    }
    if (other.isSetTicketDetailList()) {
      List<TicketDetailVo> __this__ticketDetailList = new ArrayList<TicketDetailVo>(other.ticketDetailList.size());
      for (TicketDetailVo other_element : other.ticketDetailList) {
        __this__ticketDetailList.add(new TicketDetailVo(other_element));
      }
      this.ticketDetailList = __this__ticketDetailList;
    }
    if (other.isSetTotalAmount()) {
      this.totalAmount = other.totalAmount;
    }
    if (other.isSetPageVo()) {
      this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
    }
  }

  public VerifyTicketListByPageResponseVo deepCopy() {
    return new VerifyTicketListByPageResponseVo(this);
  }

  @Override
  public void clear() {
    this.resultVo = null;
    this.ticketDetailList = null;
    this.totalAmount = null;
    this.pageVo = null;
  }

  /**
   * 返回结果
   */
  public com.froad.thrift.vo.ResultVo getResultVo() {
    return this.resultVo;
  }

  /**
   * 返回结果
   */
  public VerifyTicketListByPageResponseVo setResultVo(com.froad.thrift.vo.ResultVo resultVo) {
    this.resultVo = resultVo;
    return this;
  }

  public void unsetResultVo() {
    this.resultVo = null;
  }

  /** Returns true if field resultVo is set (has been assigned a value) and false otherwise */
  public boolean isSetResultVo() {
    return this.resultVo != null;
  }

  public void setResultVoIsSet(boolean value) {
    if (!value) {
      this.resultVo = null;
    }
  }

  public int getTicketDetailListSize() {
    return (this.ticketDetailList == null) ? 0 : this.ticketDetailList.size();
  }

  public java.util.Iterator<TicketDetailVo> getTicketDetailListIterator() {
    return (this.ticketDetailList == null) ? null : this.ticketDetailList.iterator();
  }

  public void addToTicketDetailList(TicketDetailVo elem) {
    if (this.ticketDetailList == null) {
      this.ticketDetailList = new ArrayList<TicketDetailVo>();
    }
    this.ticketDetailList.add(elem);
  }

  /**
   * 商品类型
   */
  public List<TicketDetailVo> getTicketDetailList() {
    return this.ticketDetailList;
  }

  /**
   * 商品类型
   */
  public VerifyTicketListByPageResponseVo setTicketDetailList(List<TicketDetailVo> ticketDetailList) {
    this.ticketDetailList = ticketDetailList;
    return this;
  }

  public void unsetTicketDetailList() {
    this.ticketDetailList = null;
  }

  /** Returns true if field ticketDetailList is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketDetailList() {
    return this.ticketDetailList != null;
  }

  public void setTicketDetailListIsSet(boolean value) {
    if (!value) {
      this.ticketDetailList = null;
    }
  }

  /**
   * 总金额
   */
  public String getTotalAmount() {
    return this.totalAmount;
  }

  /**
   * 总金额
   */
  public VerifyTicketListByPageResponseVo setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  public void unsetTotalAmount() {
    this.totalAmount = null;
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return this.totalAmount != null;
  }

  public void setTotalAmountIsSet(boolean value) {
    if (!value) {
      this.totalAmount = null;
    }
  }

  /**
   * 分页信息
   */
  public com.froad.thrift.vo.PageVo getPageVo() {
    return this.pageVo;
  }

  /**
   * 分页信息
   */
  public VerifyTicketListByPageResponseVo setPageVo(com.froad.thrift.vo.PageVo pageVo) {
    this.pageVo = pageVo;
    return this;
  }

  public void unsetPageVo() {
    this.pageVo = null;
  }

  /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
  public boolean isSetPageVo() {
    return this.pageVo != null;
  }

  public void setPageVoIsSet(boolean value) {
    if (!value) {
      this.pageVo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT_VO:
      if (value == null) {
        unsetResultVo();
      } else {
        setResultVo((com.froad.thrift.vo.ResultVo)value);
      }
      break;

    case TICKET_DETAIL_LIST:
      if (value == null) {
        unsetTicketDetailList();
      } else {
        setTicketDetailList((List<TicketDetailVo>)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((String)value);
      }
      break;

    case PAGE_VO:
      if (value == null) {
        unsetPageVo();
      } else {
        setPageVo((com.froad.thrift.vo.PageVo)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT_VO:
      return getResultVo();

    case TICKET_DETAIL_LIST:
      return getTicketDetailList();

    case TOTAL_AMOUNT:
      return getTotalAmount();

    case PAGE_VO:
      return getPageVo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT_VO:
      return isSetResultVo();
    case TICKET_DETAIL_LIST:
      return isSetTicketDetailList();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case PAGE_VO:
      return isSetPageVo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VerifyTicketListByPageResponseVo)
      return this.equals((VerifyTicketListByPageResponseVo)that);
    return false;
  }

  public boolean equals(VerifyTicketListByPageResponseVo that) {
    if (that == null)
      return false;

    boolean this_present_resultVo = true && this.isSetResultVo();
    boolean that_present_resultVo = true && that.isSetResultVo();
    if (this_present_resultVo || that_present_resultVo) {
      if (!(this_present_resultVo && that_present_resultVo))
        return false;
      if (!this.resultVo.equals(that.resultVo))
        return false;
    }

    boolean this_present_ticketDetailList = true && this.isSetTicketDetailList();
    boolean that_present_ticketDetailList = true && that.isSetTicketDetailList();
    if (this_present_ticketDetailList || that_present_ticketDetailList) {
      if (!(this_present_ticketDetailList && that_present_ticketDetailList))
        return false;
      if (!this.ticketDetailList.equals(that.ticketDetailList))
        return false;
    }

    boolean this_present_totalAmount = true && this.isSetTotalAmount();
    boolean that_present_totalAmount = true && that.isSetTotalAmount();
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (!this.totalAmount.equals(that.totalAmount))
        return false;
    }

    boolean this_present_pageVo = true && this.isSetPageVo();
    boolean that_present_pageVo = true && that.isSetPageVo();
    if (this_present_pageVo || that_present_pageVo) {
      if (!(this_present_pageVo && that_present_pageVo))
        return false;
      if (!this.pageVo.equals(that.pageVo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resultVo = true && (isSetResultVo());
    list.add(present_resultVo);
    if (present_resultVo)
      list.add(resultVo);

    boolean present_ticketDetailList = true && (isSetTicketDetailList());
    list.add(present_ticketDetailList);
    if (present_ticketDetailList)
      list.add(ticketDetailList);

    boolean present_totalAmount = true && (isSetTotalAmount());
    list.add(present_totalAmount);
    if (present_totalAmount)
      list.add(totalAmount);

    boolean present_pageVo = true && (isSetPageVo());
    list.add(present_pageVo);
    if (present_pageVo)
      list.add(pageVo);

    return list.hashCode();
  }

  @Override
  public int compareTo(VerifyTicketListByPageResponseVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResultVo()).compareTo(other.isSetResultVo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultVo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultVo, other.resultVo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketDetailList()).compareTo(other.isSetTicketDetailList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketDetailList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketDetailList, other.ticketDetailList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageVo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VerifyTicketListByPageResponseVo(");
    boolean first = true;

    sb.append("resultVo:");
    if (this.resultVo == null) {
      sb.append("null");
    } else {
      sb.append(this.resultVo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketDetailList:");
    if (this.ticketDetailList == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketDetailList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmount:");
    if (this.totalAmount == null) {
      sb.append("null");
    } else {
      sb.append(this.totalAmount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageVo:");
    if (this.pageVo == null) {
      sb.append("null");
    } else {
      sb.append(this.pageVo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (resultVo != null) {
      resultVo.validate();
    }
    if (pageVo != null) {
      pageVo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VerifyTicketListByPageResponseVoStandardSchemeFactory implements SchemeFactory {
    public VerifyTicketListByPageResponseVoStandardScheme getScheme() {
      return new VerifyTicketListByPageResponseVoStandardScheme();
    }
  }

  private static class VerifyTicketListByPageResponseVoStandardScheme extends StandardScheme<VerifyTicketListByPageResponseVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VerifyTicketListByPageResponseVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resultVo = new com.froad.thrift.vo.ResultVo();
              struct.resultVo.read(iprot);
              struct.setResultVoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TICKET_DETAIL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.ticketDetailList = new ArrayList<TicketDetailVo>(_list72.size);
                TicketDetailVo _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = new TicketDetailVo();
                  _elem73.read(iprot);
                  struct.ticketDetailList.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setTicketDetailListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalAmount = iprot.readString();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAGE_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pageVo = new com.froad.thrift.vo.PageVo();
              struct.pageVo.read(iprot);
              struct.setPageVoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VerifyTicketListByPageResponseVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resultVo != null) {
        oprot.writeFieldBegin(RESULT_VO_FIELD_DESC);
        struct.resultVo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.ticketDetailList != null) {
        oprot.writeFieldBegin(TICKET_DETAIL_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ticketDetailList.size()));
          for (TicketDetailVo _iter75 : struct.ticketDetailList)
          {
            _iter75.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.totalAmount != null) {
        oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
        oprot.writeString(struct.totalAmount);
        oprot.writeFieldEnd();
      }
      if (struct.pageVo != null) {
        oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
        struct.pageVo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VerifyTicketListByPageResponseVoTupleSchemeFactory implements SchemeFactory {
    public VerifyTicketListByPageResponseVoTupleScheme getScheme() {
      return new VerifyTicketListByPageResponseVoTupleScheme();
    }
  }

  private static class VerifyTicketListByPageResponseVoTupleScheme extends TupleScheme<VerifyTicketListByPageResponseVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VerifyTicketListByPageResponseVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResultVo()) {
        optionals.set(0);
      }
      if (struct.isSetTicketDetailList()) {
        optionals.set(1);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(2);
      }
      if (struct.isSetPageVo()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetResultVo()) {
        struct.resultVo.write(oprot);
      }
      if (struct.isSetTicketDetailList()) {
        {
          oprot.writeI32(struct.ticketDetailList.size());
          for (TicketDetailVo _iter76 : struct.ticketDetailList)
          {
            _iter76.write(oprot);
          }
        }
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeString(struct.totalAmount);
      }
      if (struct.isSetPageVo()) {
        struct.pageVo.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VerifyTicketListByPageResponseVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.resultVo = new com.froad.thrift.vo.ResultVo();
        struct.resultVo.read(iprot);
        struct.setResultVoIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ticketDetailList = new ArrayList<TicketDetailVo>(_list77.size);
          TicketDetailVo _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = new TicketDetailVo();
            _elem78.read(iprot);
            struct.ticketDetailList.add(_elem78);
          }
        }
        struct.setTicketDetailListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalAmount = iprot.readString();
        struct.setTotalAmountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pageVo = new com.froad.thrift.vo.PageVo();
        struct.pageVo.read(iprot);
        struct.setPageVoIsSet(true);
      }
    }
  }

}

