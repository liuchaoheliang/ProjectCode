/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 销售走势图
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class SaleTrendVo implements org.apache.thrift.TBase<SaleTrendVo, SaleTrendVo._Fields>, java.io.Serializable, Cloneable, Comparable<SaleTrendVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SaleTrendVo");

  private static final org.apache.thrift.protocol.TField WEEK_FIELD_DESC = new org.apache.thrift.protocol.TField("week", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SALE_PRODUCT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("saleProductAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SaleTrendVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SaleTrendVoTupleSchemeFactory());
  }

  /**
   * 周 *
   */
  public int week; // optional
  /**
   * 商品总金额 *
   */
  public double saleProductAmount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 周 *
     */
    WEEK((short)1, "week"),
    /**
     * 商品总金额 *
     */
    SALE_PRODUCT_AMOUNT((short)2, "saleProductAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WEEK
          return WEEK;
        case 2: // SALE_PRODUCT_AMOUNT
          return SALE_PRODUCT_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WEEK_ISSET_ID = 0;
  private static final int __SALEPRODUCTAMOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.WEEK,_Fields.SALE_PRODUCT_AMOUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WEEK, new org.apache.thrift.meta_data.FieldMetaData("week", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALE_PRODUCT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("saleProductAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SaleTrendVo.class, metaDataMap);
  }

  public SaleTrendVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SaleTrendVo(SaleTrendVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.week = other.week;
    this.saleProductAmount = other.saleProductAmount;
  }

  public SaleTrendVo deepCopy() {
    return new SaleTrendVo(this);
  }

  @Override
  public void clear() {
    setWeekIsSet(false);
    this.week = 0;
    setSaleProductAmountIsSet(false);
    this.saleProductAmount = 0.0;
  }

  /**
   * 周 *
   */
  public int getWeek() {
    return this.week;
  }

  /**
   * 周 *
   */
  public SaleTrendVo setWeek(int week) {
    this.week = week;
    setWeekIsSet(true);
    return this;
  }

  public void unsetWeek() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEEK_ISSET_ID);
  }

  /** Returns true if field week is set (has been assigned a value) and false otherwise */
  public boolean isSetWeek() {
    return EncodingUtils.testBit(__isset_bitfield, __WEEK_ISSET_ID);
  }

  public void setWeekIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEEK_ISSET_ID, value);
  }

  /**
   * 商品总金额 *
   */
  public double getSaleProductAmount() {
    return this.saleProductAmount;
  }

  /**
   * 商品总金额 *
   */
  public SaleTrendVo setSaleProductAmount(double saleProductAmount) {
    this.saleProductAmount = saleProductAmount;
    setSaleProductAmountIsSet(true);
    return this;
  }

  public void unsetSaleProductAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALEPRODUCTAMOUNT_ISSET_ID);
  }

  /** Returns true if field saleProductAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetSaleProductAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __SALEPRODUCTAMOUNT_ISSET_ID);
  }

  public void setSaleProductAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALEPRODUCTAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WEEK:
      if (value == null) {
        unsetWeek();
      } else {
        setWeek((Integer)value);
      }
      break;

    case SALE_PRODUCT_AMOUNT:
      if (value == null) {
        unsetSaleProductAmount();
      } else {
        setSaleProductAmount((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WEEK:
      return Integer.valueOf(getWeek());

    case SALE_PRODUCT_AMOUNT:
      return Double.valueOf(getSaleProductAmount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WEEK:
      return isSetWeek();
    case SALE_PRODUCT_AMOUNT:
      return isSetSaleProductAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SaleTrendVo)
      return this.equals((SaleTrendVo)that);
    return false;
  }

  public boolean equals(SaleTrendVo that) {
    if (that == null)
      return false;

    boolean this_present_week = true && this.isSetWeek();
    boolean that_present_week = true && that.isSetWeek();
    if (this_present_week || that_present_week) {
      if (!(this_present_week && that_present_week))
        return false;
      if (this.week != that.week)
        return false;
    }

    boolean this_present_saleProductAmount = true && this.isSetSaleProductAmount();
    boolean that_present_saleProductAmount = true && that.isSetSaleProductAmount();
    if (this_present_saleProductAmount || that_present_saleProductAmount) {
      if (!(this_present_saleProductAmount && that_present_saleProductAmount))
        return false;
      if (this.saleProductAmount != that.saleProductAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_week = true && (isSetWeek());
    list.add(present_week);
    if (present_week)
      list.add(week);

    boolean present_saleProductAmount = true && (isSetSaleProductAmount());
    list.add(present_saleProductAmount);
    if (present_saleProductAmount)
      list.add(saleProductAmount);

    return list.hashCode();
  }

  @Override
  public int compareTo(SaleTrendVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWeek()).compareTo(other.isSetWeek());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeek()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.week, other.week);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaleProductAmount()).compareTo(other.isSetSaleProductAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaleProductAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saleProductAmount, other.saleProductAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SaleTrendVo(");
    boolean first = true;

    if (isSetWeek()) {
      sb.append("week:");
      sb.append(this.week);
      first = false;
    }
    if (isSetSaleProductAmount()) {
      if (!first) sb.append(", ");
      sb.append("saleProductAmount:");
      sb.append(this.saleProductAmount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SaleTrendVoStandardSchemeFactory implements SchemeFactory {
    public SaleTrendVoStandardScheme getScheme() {
      return new SaleTrendVoStandardScheme();
    }
  }

  private static class SaleTrendVoStandardScheme extends StandardScheme<SaleTrendVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SaleTrendVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WEEK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.week = iprot.readI32();
              struct.setWeekIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SALE_PRODUCT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.saleProductAmount = iprot.readDouble();
              struct.setSaleProductAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SaleTrendVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetWeek()) {
        oprot.writeFieldBegin(WEEK_FIELD_DESC);
        oprot.writeI32(struct.week);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSaleProductAmount()) {
        oprot.writeFieldBegin(SALE_PRODUCT_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.saleProductAmount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SaleTrendVoTupleSchemeFactory implements SchemeFactory {
    public SaleTrendVoTupleScheme getScheme() {
      return new SaleTrendVoTupleScheme();
    }
  }

  private static class SaleTrendVoTupleScheme extends TupleScheme<SaleTrendVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SaleTrendVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWeek()) {
        optionals.set(0);
      }
      if (struct.isSetSaleProductAmount()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetWeek()) {
        oprot.writeI32(struct.week);
      }
      if (struct.isSetSaleProductAmount()) {
        oprot.writeDouble(struct.saleProductAmount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SaleTrendVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.week = iprot.readI32();
        struct.setWeekIsSet(true);
      }
      if (incoming.get(1)) {
        struct.saleProductAmount = iprot.readDouble();
        struct.setSaleProductAmountIsSet(true);
      }
    }
  }

}

