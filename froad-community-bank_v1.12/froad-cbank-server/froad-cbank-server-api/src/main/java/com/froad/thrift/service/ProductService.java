/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ProductService {

  /**
   * ProductService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 Product
     * @param OriginVo
     * @param ProductInfoVo
     * @return AddProductVoRes
     * 
     * @param originVo
     * @param productInfoVo
     */
    public com.froad.thrift.vo.AddProductVoRes addProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductInfoVo productInfoVo) throws org.apache.thrift.TException;

    /**
     * 删除 Product
     * @param OriginVo
     * @param ProductOperateVoReq
     * @return ResultVo
     * 
     * @param originVo
     * @param productVoReq
     */
    public com.froad.thrift.vo.ResultVo deleteProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductOperateVoReq productVoReq) throws org.apache.thrift.TException;

    /**
     * 修改 Product
     * @param OriginVo
     * @param ProductInfoVo
     * @return ResultVo
     * 
     * @param originVo
     * @param productInfoVo
     */
    public com.froad.thrift.vo.ResultVo updateProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductInfoVo productInfoVo) throws org.apache.thrift.TException;

    /**
     * 修改 Product确定的一些信息
     * @param OriginVo
     * @param ProductBaseVo
     * @return ResultVo
     * 
     * @param originVo
     * @param productBaseVo
     */
    public com.froad.thrift.vo.ResultVo updateProductInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductBaseVo productBaseVo) throws org.apache.thrift.TException;

    /**
     * 查询 Product详情商品管理商品时修改商品之前查询用到
     * @param ProductOperateVoReq
     * @return ProductInfoVo
     * 
     * @param productVoReq
     */
    public com.froad.thrift.vo.ProductInfoVo getMerchantProductDetail(com.froad.thrift.vo.ProductOperateVoReq productVoReq) throws org.apache.thrift.TException;

    /**
     * 同一个客户端同一类型下面是否已经存在Product
     * @param product
     * @return boolean
     * 
     * @param productExistVoReq
     */
    public boolean isProductExist(com.froad.thrift.vo.ProductExistVoReq productExistVoReq) throws org.apache.thrift.TException;

    /**
     * 分页查询 Product (商品管理)
     * @param ProductFilterVoReq
     * @param pageVo
     * @return ProductBriefPageVo
     * 
     * @param productFilterVoReq
     * @param pageVo
     */
    public com.froad.thrift.vo.ProductBriefPageVo findMerchantProductsByPage(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 Product (H5用户查看)
     * @param ProductFilterVoReq
     * @param pageVo
     * @return ProductBriefPageVoRes
     * 
     * @param productFilterVoReq
     * @param pageVo
     */
    public com.froad.thrift.vo.ProductBriefPageVoRes queryProducts(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * 查询 Product详情(H5用户查看)
     * @param ProductOperateVoReq
     * @return ProductInfoVo
     * 
     * @param productVoReq
     */
    public com.froad.thrift.vo.ProductInfoVo queryProductDetail(com.froad.thrift.vo.ProductOperateVoReq productVoReq) throws org.apache.thrift.TException;

    /**
     * 上下架 Product
     * @param ProductStatusVoReq
     * @return boolean
     * 
     * @param originVo
     * @param productStatusVoReq
     */
    public com.froad.thrift.vo.ResultVo updateProductStatus(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusVoReq productStatusVoReq) throws org.apache.thrift.TException;

    /**
     * 批量上下架 Product
     * @param list<ProductStatusVoReq>
     * @return ResultVo
     * 
     * @param originVo
     * @param productStatusBatchVoReq
     */
    public com.froad.thrift.vo.ResultVo updateProductStatusBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq) throws org.apache.thrift.TException;

    /**
     * 新建面对面商品 返回二维码
     * @param OutletProductVo
     * @return AddOutletProductVoRes
     * 
     * @param originVo
     * @param outletProductVo
     */
    public com.froad.thrift.vo.AddOutletProductVoRes addOutletProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductVo outletProductVo) throws org.apache.thrift.TException;

    /**
     * H5新建面对面商品 返回二维码
     * @param OutletProductVo
     * @return AddOutletProductVoRes
     * 
     * @param originVo
     * @param outletProductDiscountVo
     */
    public com.froad.thrift.vo.AddOutletProductVoRes addH5OutletProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductDiscountVo outletProductDiscountVo) throws org.apache.thrift.TException;

    /**
     * 扫码后查看面对面商品详情
     * @param OutletProductVoReq
     * @return OutletProductVoRes
     * 
     * @param outletProductVoReq
     */
    public com.froad.thrift.vo.OutletProductVoRes getOutletProduct(com.froad.thrift.vo.OutletProductVoReq outletProductVoReq) throws org.apache.thrift.TException;

    /**
     * 删除面对面商品
     * @param OutletProduct
     * @return boolean
     * 
     * @param originVo
     * @param outletProductVo
     */
    public com.froad.thrift.vo.ResultVo deleteOutletProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductVo outletProductVo) throws org.apache.thrift.TException;

    /**
     * 分页查询面对面商品
     * @param OutletProduct
     * @return OutletProductPageVo
     * 
     * @param outletProductVo
     * @param pageVo
     */
    public com.froad.thrift.vo.OutletProductPageVo getOutletProductListByPage(com.froad.thrift.vo.OutletProductVo outletProductVo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     *    * 分页查询商品评价列表(商户管理用到)
     *    * @param ProductCommentFilterReq
     * * @param pageVo
     * * @return ProductCommentPageVo
     * 
     * @param productCommentFilterReq
     * @param pageVo
     */
    public com.froad.thrift.vo.ProductCommentPageVo getProductCommentList(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * 商品评价详情查询(商户管理用到)
     * @param ProductCommentVo
     * @return ProductCommentVo
     * 
     * @param productCommentVo
     */
    public com.froad.thrift.vo.ProductCommentVo getProductCommentDetail(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException;

    /**
     * 删除商品评价(商户管理用到)
     * @param ProductCommentVo
     * @return Boolean
     * 
     * @param productCommentVo
     */
    public com.froad.thrift.vo.ResultVo deleteProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException;

    /**
     * 商户回复商品评价(商户管理用到)
     * @param ProductCommentVo
     * @return Boolean
     * 
     * @param productCommentVo
     */
    public com.froad.thrift.vo.ResultVo replayProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException;

    /**
     * 批量商户回复商品评价(商户管理用到)
     * @param list<ProductCommentVo>
     * @return String
     * 
     * @param productCommentVo
     */
    public com.froad.thrift.vo.ResultVo replayProductCommentBatch(List<com.froad.thrift.vo.ProductCommentVo> productCommentVo) throws org.apache.thrift.TException;

    /**
     * 用户评价商品(用户H5用到)
     * @param ProductCommentVo
     * @return Boolean
     * 
     * @param productCommentVo
     */
    public com.froad.thrift.vo.ResultVo addProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException;

    /**
     * 用户更新商品评价(用户H5用到)
     * @param ProductCommentVo
     * @return Boolean
     * 
     * @param productCommentVo
     */
    public com.froad.thrift.vo.ResultVo updateProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException;

    /**
     * 商品评价内容查询(H5用到)
     * @param ProductCommentVo
     * @return ProductCommentVo
     * 
     * @param productCommentVo
     */
    public com.froad.thrift.vo.ProductCommentVo queryProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException;

    /**
     *    * 用户分页查看商品评价,用户购买商品时候 查看评价用到
     *    * @param ProductCommentFilterReq
     * * @param pageVo
     * * @return ProductCommentPageVo
     * 
     * @param productCommentFilterReq
     * @param pageVo
     */
    public com.froad.thrift.vo.ProductCommentPageVo queryProductComments(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     *    * 商品关联活动
     *    * @param ProductRelateActivitiesVo
     * * @return ResultVo(提示信息)
     * 
     * @param originVo
     * @param relateActivities
     */
    public com.froad.thrift.vo.ResultVo addProductActivties(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductRelateActivitiesVo relateActivities) throws org.apache.thrift.TException;

    /**
     *    * 商品关联门店
     *    * @param ProductRelateOutletVo
     * * @return ResultVo(提示信息)
     * 
     * @param originVo
     * @param outlets
     */
    public com.froad.thrift.vo.ResultVo addProductOutlets(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductRelateOutletVo outlets) throws org.apache.thrift.TException;

    /**
     *    * 查询商品所属区下面的网店
     * * @param ProductAreaVo
     * * @return list<ProductAreaVo>
     * 
     * @param productAreaVo
     */
    public List<com.froad.thrift.vo.ProductAreaVo> getProductAreaOutlets(com.froad.thrift.vo.ProductAreaVo productAreaVo) throws org.apache.thrift.TException;

    /**
     * 商品批量失效
     * @param string
     * @return ResultVo
     * 
     * @param originVo
     * @param invalidProductBatchVo
     */
    public com.froad.thrift.vo.ResultVo invalidProductBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo) throws org.apache.thrift.TException;

    /**
     * 启用商户时 将除团购以外的商品的 该普通商户的未提交状态变成待审核
     * @param string
     * @return ResultVo
     * 
     * @param merchantId
     */
    public com.froad.thrift.vo.ResultVo validMerchantProductBatch(String merchantId) throws org.apache.thrift.TException;

    /**
     * 商品批量禁用，启用
     * @param string
     * @return bool
     * 
     * @param originVo
     * @param invalidProductBatchVo
     * @param flag
     */
    public com.froad.thrift.vo.ResultVo endisableProductBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo, String flag) throws org.apache.thrift.TException;

    /**
     *    * 查询评论数量
     *    * @param ProductCommentFilterReq
     * * @return int
     * 
     * @param productCommentFilterReq
     */
    public int queryProductCommentCount(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq) throws org.apache.thrift.TException;

    /**
     * 批量删除 Product
     * @param ProductStatusBatchVoReq
     * @return ResultVo
     * 
     * @param originVo
     * @param productStatusBatchVoReq
     */
    public com.froad.thrift.vo.ResultVo deleteProductBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq) throws org.apache.thrift.TException;

    /**
     * 获取 ProductStatus
     * @param ProductStatusVoReq
     * @return list<ProductStatusVoReq>
     */
    public List<com.froad.thrift.vo.ProductStatusVoReq> getProductStatus() throws org.apache.thrift.TException;

    /**
     * 批量更改商品审核状态 ProductAuditState
     * @param ProductStatusVoReq
     * @return bool
     * 
     * @param originVo
     * @param productAuditVoList
     */
    public com.froad.thrift.vo.ResultVo updateAuditProductBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductAuditVo> productAuditVoList) throws org.apache.thrift.TException;

    /**
     * 获取 getProductBaseInfo
     * @param clientId
     * @param list<ProductStoreFilterVo> products
     * @return list<ProductBaseInfoVo>
     * 
     * @param clientId
     * @param products
     */
    public List<com.froad.thrift.vo.ProductBaseInfoVo> getProductBaseInfo(String clientId, List<com.froad.thrift.vo.ProductStoreFilterVo> products) throws org.apache.thrift.TException;

    public boolean isExitsStoreProductInfo(String clientId, long memberCode, String productId) throws org.apache.thrift.TException;

    /**
     * 增加 StoreProductInfoVo
     * @param storeProductInfoVo
     * @return long    主键ID
     * 
     * @param clientId
     * @param memberCode
     * @param storeProductInfoVo
     */
    public com.froad.thrift.vo.ResultVo addStoreProductInfoVo(String clientId, long memberCode, com.froad.thrift.vo.StoreProductInfoVo storeProductInfoVo) throws org.apache.thrift.TException;

    /**
     * 取消商品收藏 StoreProductInfoVo
     * @param storeProductInfoVo
     * @return boolean
     * 
     * @param clientId
     * @param memberCode
     * @param productId
     */
    public boolean deleteStoreProductInfoVo(String clientId, long memberCode, String productId) throws org.apache.thrift.TException;

    /**
     * 商品收藏查询接口 StoreProductInfoVo
     * @param storeProductInfoVo
     * @return List<StoreProductInfoVo>
     * 
     * @param clientId
     * @param memberCode
     */
    public List<com.froad.thrift.vo.StoreProductInfoVo> getStoreProductInfoVo(String clientId, long memberCode) throws org.apache.thrift.TException;

    /**
     * 商品收藏分页查询接口 StoreProductInfoVo
     * @param storeProductInfoVo
     * @return List<StoreProductInfoVo>
     * 
     * @param page
     * @param clientId
     * @param memberCode
     */
    public com.froad.thrift.vo.StoreProductInfoPageVoRes getStoreProductInfoByPage(com.froad.thrift.vo.PageVo page, String clientId, long memberCode) throws org.apache.thrift.TException;

    /**
     * 批量增加 Product
     * @param list<ProductInfoVo>
     * @return List<AddProductVoRes>
     * 
     * @param originVo
     * @param productInfoVos
     */
    public List<com.froad.thrift.vo.AddProductVoRes> addProductBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductInfoVo> productInfoVos) throws org.apache.thrift.TException;

    /**
     * 修改 Product模块的敏感词
     * @param opt 1表示新增0表示删除
     * @param word 敏感词
     * @return
     * 
     * @param opt
     * @param word
     */
    public void modifySenseWord(int opt, String word) throws org.apache.thrift.TException;

    /**
     *    * 活动批量绑定商品
     *    * @param originVo 操作人信息
     *    * @param activityId 活动Id
     *    * @param productIds 商品Ids
     * * @return ResultVo(提示信息)
     * 
     * @param originVo
     * @param activityId
     * @param productIds
     */
    public com.froad.thrift.vo.ResultVo addActivtyToProducts(com.froad.thrift.vo.OriginVo originVo, long activityId, List<String> productIds) throws org.apache.thrift.TException;

    /**
     *    * 活动批量解除绑定商品
     *    * @param originVo 操作人信息
     *    * @param activtyId 活动id
     *    * @param productId 商品id 如果有值代表解除单条绑定 如果没有值解除该活动下所有商品绑定
     * * @return ResultVo(提示信息)
     * 
     * @param originVo
     * @param activtyId
     * @param productId
     */
    public com.froad.thrift.vo.ResultVo removeActivtyFromProducts(com.froad.thrift.vo.OriginVo originVo, long activtyId, String productId) throws org.apache.thrift.TException;

    /**
     * 查询活动已经绑定的商品列表
     * @param activtyId 活动id
     * @param pageVo
     * @return ActivityProductPageVo
     * 
     * @param activtyId
     * @param pageVo
     */
    public com.froad.thrift.vo.ActivityProductPageVo findActivtyProductsByPage(long activtyId, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * 查询可以绑定活动的商品
     * @param activtyId 活动id
     * @param name 商品名称
     * @param pageVo
     * @return ActivityProductPageVo
     * 
     * @param activtyId
     * @param name
     * @param pageVo
     */
    public com.froad.thrift.vo.ActivityProductPageVo findProductsForActivtyByPage(long activtyId, String name, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * 查询一个商品下面所有可以提货的网点
     * @param productId 商品id
     * @param cityId 城市id
     * @param clientId 客户端id
     * @param pageVo
     * @return OutletProductPageVo
     * 
     * @param productId
     * @param cityId
     * @param clientId
     * @param pageVo
     */
    public com.froad.thrift.vo.ProductOutletPageVo findProductsForAreaByPage(String productId, long cityId, String clientId, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * 查询一个商品下面所有可以提货的区
     * @param productId 商品id
     * @param cityId 城市id
     * @param clientId 客户端id
     * @return list<AreaVo>
     * 
     * @param productId
     * @param cityId
     * @param clientId
     */
    public List<com.froad.thrift.vo.AreaVo> findAreaForCityByList(String productId, long cityId, String clientId) throws org.apache.thrift.TException;

    /**
     * VIP预售商品推荐列表查询
     * @param ProductFilterVoReq
     * @param pageVo
     * @return ProductBriefPageVoRes
     * 
     * @param productFilterVoReq
     * @param pageVo
     */
    public com.froad.thrift.vo.ProductBriefPageVoRes queryVipPresellProducts(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     *    *根据定位的距离查询特惠商品推荐列表或特惠商品列表查询
     *    * @param QueryProductFilterVo过滤条件
     *    * @param filedSorts 排序
     * * @param pageVo 分页
     * * @return ProductBriefPageVoRes
     * 
     * @param filterVo
     * @param filedSorts
     * @param pageVo
     */
    public com.froad.thrift.vo.GroupProductPageVoRes queryGroupProducts(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * 根据商户id(定位的距离查询到的商户)查询该商户的特惠商品列表 QueryProductFilterVo过滤条件 filedSorts 排序 pageVo 分页
     * 
     * @param filterVo
     * @param filedSorts
     * @param pageVo
     */
    public com.froad.thrift.vo.MerchantProductPageVoRes queryMerchantProducts(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * 批量获取商品二维码信息
     * @param ProductInfoVo
     * @param list
     * @return list<ProductInfoVo>
     * 
     * @param productList
     */
    public List<com.froad.thrift.vo.ProductVo> findUrlCodeByList(List<com.froad.thrift.vo.ProductVo> productList) throws org.apache.thrift.TException;

    /**
     * 下载商品信息
     * @param ProductSearchVo
     * @param type
     * @return ExportResultRes
     * 
     * @param productSearchVo
     * @param type
     */
    public com.froad.thrift.vo.ExportResultRes downProducts(com.froad.thrift.vo.ProductSearchVo productSearchVo, String type) throws org.apache.thrift.TException;

    /**
     *    * 根据定位的距离查询类目营销里的特惠商品推荐列表
     *    * @param QueryProductFilterVo过滤条件
     *    * @param filedSorts 排序
     * * @param pageVo 分页
     * * @return ProductPageVoRes
     * 
     * @param filterVo
     * @param filedSorts
     * @param pageVo
     */
    public com.froad.thrift.vo.ProductPageVoRes searchProductByType(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     *    * 真实门店新增 修改 删除 需要修改对应商品关联的地区，门店信息
     *    * @param clientId客户端id
     *    * @param type门店操作类型（1:新增;2:修改;3:删除）
     * * @param OutletVo门店信息
     * * @return ResultVo
     * 
     * @param clientId
     * @param type
     * @param outletVo
     */
    public com.froad.thrift.vo.ResultVo updateGroupProductByOutlet(String clientId, String type, com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException;

    public com.froad.thrift.vo.ResultVo updateHisGroupGoodsOutlets() throws org.apache.thrift.TException;

    /**
     * 销售期到期自动将上架状态变成下架
     */
    public com.froad.thrift.vo.ResultVo autoOffShelfProductSaleEnd() throws org.apache.thrift.TException;

    /**
     * boss商品管理平台分页查询商品列表(精品商城商品列表)
     * @param ProductFilterVo
     * @param pageVo
     * @return ProductListPageVo
     * 
     * @param productFilterVo
     * @param pageVo
     */
    public com.froad.thrift.vo.ProductListPageVo findGoodsByPage(com.froad.thrift.vo.ProductFilterVo productFilterVo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * boss商品管理平台新增精品商城商品
     * @param OriginVo
     * @param GoodsInfoVo
     * @return AddProductVoRes
     * 
     * @param originVo
     * @param productInfoVo
     */
    public com.froad.thrift.vo.AddProductVoRes addGoods(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.GoodsInfoVo productInfoVo) throws org.apache.thrift.TException;

    /**
     * boss商品管理平台修改精品商城商品
     * @param OriginVo
     * @param GoodsInfoVo
     * @return ResultVo
     * 
     * @param originVo
     * @param productInfoVo
     */
    public com.froad.thrift.vo.ResultVo updateGoods(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.GoodsInfoVo productInfoVo) throws org.apache.thrift.TException;

    /**
     * boss商品管理平台查询精品商城商品详情修改精品商城商品之前查询用到
     * @param string
     * @return GoodsInfoVo
     * 
     * @param productId
     */
    public com.froad.thrift.vo.GoodsInfoVo getGoodsDetail(String productId) throws org.apache.thrift.TException;

    /**
     * boss管理平台上架精品商城商品
     * @param OriginVo
     * @param string
     * @return ResultVo
     * 
     * @param originVo
     * @param productId
     */
    public com.froad.thrift.vo.ResultVo updateGoodsStatusOn(com.froad.thrift.vo.OriginVo originVo, String productId) throws org.apache.thrift.TException;

    /**
     * boss管理平台下架精品商城商品
     * @param OriginVo
     * @param string
     * @return ResultVo
     * 
     * @param originVo
     * @param productId
     */
    public com.froad.thrift.vo.ResultVo updateGoodsStatusOff(com.froad.thrift.vo.OriginVo originVo, String productId) throws org.apache.thrift.TException;

    /**
     *    * H5获取精品商城的商品列表
     *    * @param QueryBoutiqueGoodsFilterVo过滤条件
     *    * @param filedSorts 排序
     * * @param pageVo 分页
     * * @return BoutiqueProductPageVoRes
     * 
     * @param filterVo
     * @param filedSort
     * @param pageVo
     */
    public com.froad.thrift.vo.BoutiqueProductPageVoRes queryBoutiqueGoods(com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo filterVo, com.froad.thrift.vo.FiledSort filedSort, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * H5获取精品商城的商品详情
     * @param productId
     * @return BoutiqueGoodsInfoVo
     * 
     * @param productId
     */
    public com.froad.thrift.vo.BoutiqueGoodsInfoVo queryBoutiqueGoodsDetail(String productId) throws org.apache.thrift.TException;

    /**
     * 管理平台商品管理查询商品详情(商户管理平台和银行管理平台)
     * @param productId
     * @return ProductDetailInfo
     * 
     * @param productId
     */
    public com.froad.thrift.vo.ProductDetailInfo getProductDetail(String productId) throws org.apache.thrift.TException;

    /**
     * 管理平台商品管理查询商品列表(商户管理平台和银行管理平台)
     * @param ProductFilterReqVo
     * @param filedSorts
     * @param pageVo
     * @return ProductPageVo
     * 
     * @param filterVo
     * @param filedSorts
     * @param pageVo
     */
    public com.froad.thrift.vo.ProductPageVo findProductsByPage(com.froad.thrift.vo.ProductFilterReqVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

    /**
     * 更新商品审核状态，只能是未提交或待审核两种情况
     * @param list<EditProductAuditStateVo>
     * @return ResultVo
     * 
     * @param productAuditStates
     */
    public com.froad.thrift.vo.ResultVo updateProductAuditState(List<com.froad.thrift.vo.EditProductAuditStateVo> productAuditStates) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductOperateVoReq productVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateProductInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductBaseVo productBaseVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantProductDetail(com.froad.thrift.vo.ProductOperateVoReq productVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isProductExist(com.froad.thrift.vo.ProductExistVoReq productExistVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findMerchantProductsByPage(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryProducts(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryProductDetail(com.froad.thrift.vo.ProductOperateVoReq productVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateProductStatus(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusVoReq productStatusVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateProductStatusBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addOutletProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductVo outletProductVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addH5OutletProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductDiscountVo outletProductDiscountVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletProduct(com.froad.thrift.vo.OutletProductVoReq outletProductVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteOutletProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductVo outletProductVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutletProductListByPage(com.froad.thrift.vo.OutletProductVo outletProductVo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductCommentList(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductCommentDetail(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void replayProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void replayProductCommentBatch(List<com.froad.thrift.vo.ProductCommentVo> productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryProductComments(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addProductActivties(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductRelateActivitiesVo relateActivities, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addProductOutlets(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductRelateOutletVo outlets, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductAreaOutlets(com.froad.thrift.vo.ProductAreaVo productAreaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void invalidProductBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void validMerchantProductBatch(String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void endisableProductBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo, String flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryProductCommentCount(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteProductBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductStatus(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateAuditProductBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductAuditVo> productAuditVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductBaseInfo(String clientId, List<com.froad.thrift.vo.ProductStoreFilterVo> products, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isExitsStoreProductInfo(String clientId, long memberCode, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addStoreProductInfoVo(String clientId, long memberCode, com.froad.thrift.vo.StoreProductInfoVo storeProductInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteStoreProductInfoVo(String clientId, long memberCode, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStoreProductInfoVo(String clientId, long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStoreProductInfoByPage(com.froad.thrift.vo.PageVo page, String clientId, long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addProductBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductInfoVo> productInfoVos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void modifySenseWord(int opt, String word, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addActivtyToProducts(com.froad.thrift.vo.OriginVo originVo, long activityId, List<String> productIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeActivtyFromProducts(com.froad.thrift.vo.OriginVo originVo, long activtyId, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findActivtyProductsByPage(long activtyId, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findProductsForActivtyByPage(long activtyId, String name, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findProductsForAreaByPage(String productId, long cityId, String clientId, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAreaForCityByList(String productId, long cityId, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryVipPresellProducts(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryGroupProducts(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryMerchantProducts(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findUrlCodeByList(List<com.froad.thrift.vo.ProductVo> productList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void downProducts(com.froad.thrift.vo.ProductSearchVo productSearchVo, String type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchProductByType(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateGroupProductByOutlet(String clientId, String type, com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateHisGroupGoodsOutlets(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void autoOffShelfProductSaleEnd(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findGoodsByPage(com.froad.thrift.vo.ProductFilterVo productFilterVo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addGoods(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.GoodsInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateGoods(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.GoodsInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getGoodsDetail(String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateGoodsStatusOn(com.froad.thrift.vo.OriginVo originVo, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateGoodsStatusOff(com.froad.thrift.vo.OriginVo originVo, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBoutiqueGoods(com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo filterVo, com.froad.thrift.vo.FiledSort filedSort, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBoutiqueGoodsDetail(String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductDetail(String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findProductsByPage(com.froad.thrift.vo.ProductFilterReqVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateProductAuditState(List<com.froad.thrift.vo.EditProductAuditStateVo> productAuditStates, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.AddProductVoRes addProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductInfoVo productInfoVo) throws org.apache.thrift.TException
    {
      send_addProduct(originVo, productInfoVo);
      return recv_addProduct();
    }

    public void send_addProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductInfoVo productInfoVo) throws org.apache.thrift.TException
    {
      addProduct_args args = new addProduct_args();
      args.setOriginVo(originVo);
      args.setProductInfoVo(productInfoVo);
      sendBase("addProduct", args);
    }

    public com.froad.thrift.vo.AddProductVoRes recv_addProduct() throws org.apache.thrift.TException
    {
      addProduct_result result = new addProduct_result();
      receiveBase(result, "addProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addProduct failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductOperateVoReq productVoReq) throws org.apache.thrift.TException
    {
      send_deleteProduct(originVo, productVoReq);
      return recv_deleteProduct();
    }

    public void send_deleteProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductOperateVoReq productVoReq) throws org.apache.thrift.TException
    {
      deleteProduct_args args = new deleteProduct_args();
      args.setOriginVo(originVo);
      args.setProductVoReq(productVoReq);
      sendBase("deleteProduct", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteProduct() throws org.apache.thrift.TException
    {
      deleteProduct_result result = new deleteProduct_result();
      receiveBase(result, "deleteProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteProduct failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductInfoVo productInfoVo) throws org.apache.thrift.TException
    {
      send_updateProduct(originVo, productInfoVo);
      return recv_updateProduct();
    }

    public void send_updateProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductInfoVo productInfoVo) throws org.apache.thrift.TException
    {
      updateProduct_args args = new updateProduct_args();
      args.setOriginVo(originVo);
      args.setProductInfoVo(productInfoVo);
      sendBase("updateProduct", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateProduct() throws org.apache.thrift.TException
    {
      updateProduct_result result = new updateProduct_result();
      receiveBase(result, "updateProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProduct failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateProductInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductBaseVo productBaseVo) throws org.apache.thrift.TException
    {
      send_updateProductInfo(originVo, productBaseVo);
      return recv_updateProductInfo();
    }

    public void send_updateProductInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductBaseVo productBaseVo) throws org.apache.thrift.TException
    {
      updateProductInfo_args args = new updateProductInfo_args();
      args.setOriginVo(originVo);
      args.setProductBaseVo(productBaseVo);
      sendBase("updateProductInfo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateProductInfo() throws org.apache.thrift.TException
    {
      updateProductInfo_result result = new updateProductInfo_result();
      receiveBase(result, "updateProductInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProductInfo failed: unknown result");
    }

    public com.froad.thrift.vo.ProductInfoVo getMerchantProductDetail(com.froad.thrift.vo.ProductOperateVoReq productVoReq) throws org.apache.thrift.TException
    {
      send_getMerchantProductDetail(productVoReq);
      return recv_getMerchantProductDetail();
    }

    public void send_getMerchantProductDetail(com.froad.thrift.vo.ProductOperateVoReq productVoReq) throws org.apache.thrift.TException
    {
      getMerchantProductDetail_args args = new getMerchantProductDetail_args();
      args.setProductVoReq(productVoReq);
      sendBase("getMerchantProductDetail", args);
    }

    public com.froad.thrift.vo.ProductInfoVo recv_getMerchantProductDetail() throws org.apache.thrift.TException
    {
      getMerchantProductDetail_result result = new getMerchantProductDetail_result();
      receiveBase(result, "getMerchantProductDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantProductDetail failed: unknown result");
    }

    public boolean isProductExist(com.froad.thrift.vo.ProductExistVoReq productExistVoReq) throws org.apache.thrift.TException
    {
      send_isProductExist(productExistVoReq);
      return recv_isProductExist();
    }

    public void send_isProductExist(com.froad.thrift.vo.ProductExistVoReq productExistVoReq) throws org.apache.thrift.TException
    {
      isProductExist_args args = new isProductExist_args();
      args.setProductExistVoReq(productExistVoReq);
      sendBase("isProductExist", args);
    }

    public boolean recv_isProductExist() throws org.apache.thrift.TException
    {
      isProductExist_result result = new isProductExist_result();
      receiveBase(result, "isProductExist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isProductExist failed: unknown result");
    }

    public com.froad.thrift.vo.ProductBriefPageVo findMerchantProductsByPage(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_findMerchantProductsByPage(productFilterVoReq, pageVo);
      return recv_findMerchantProductsByPage();
    }

    public void send_findMerchantProductsByPage(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      findMerchantProductsByPage_args args = new findMerchantProductsByPage_args();
      args.setProductFilterVoReq(productFilterVoReq);
      args.setPageVo(pageVo);
      sendBase("findMerchantProductsByPage", args);
    }

    public com.froad.thrift.vo.ProductBriefPageVo recv_findMerchantProductsByPage() throws org.apache.thrift.TException
    {
      findMerchantProductsByPage_result result = new findMerchantProductsByPage_result();
      receiveBase(result, "findMerchantProductsByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findMerchantProductsByPage failed: unknown result");
    }

    public com.froad.thrift.vo.ProductBriefPageVoRes queryProducts(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_queryProducts(productFilterVoReq, pageVo);
      return recv_queryProducts();
    }

    public void send_queryProducts(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      queryProducts_args args = new queryProducts_args();
      args.setProductFilterVoReq(productFilterVoReq);
      args.setPageVo(pageVo);
      sendBase("queryProducts", args);
    }

    public com.froad.thrift.vo.ProductBriefPageVoRes recv_queryProducts() throws org.apache.thrift.TException
    {
      queryProducts_result result = new queryProducts_result();
      receiveBase(result, "queryProducts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryProducts failed: unknown result");
    }

    public com.froad.thrift.vo.ProductInfoVo queryProductDetail(com.froad.thrift.vo.ProductOperateVoReq productVoReq) throws org.apache.thrift.TException
    {
      send_queryProductDetail(productVoReq);
      return recv_queryProductDetail();
    }

    public void send_queryProductDetail(com.froad.thrift.vo.ProductOperateVoReq productVoReq) throws org.apache.thrift.TException
    {
      queryProductDetail_args args = new queryProductDetail_args();
      args.setProductVoReq(productVoReq);
      sendBase("queryProductDetail", args);
    }

    public com.froad.thrift.vo.ProductInfoVo recv_queryProductDetail() throws org.apache.thrift.TException
    {
      queryProductDetail_result result = new queryProductDetail_result();
      receiveBase(result, "queryProductDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryProductDetail failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateProductStatus(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusVoReq productStatusVoReq) throws org.apache.thrift.TException
    {
      send_updateProductStatus(originVo, productStatusVoReq);
      return recv_updateProductStatus();
    }

    public void send_updateProductStatus(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusVoReq productStatusVoReq) throws org.apache.thrift.TException
    {
      updateProductStatus_args args = new updateProductStatus_args();
      args.setOriginVo(originVo);
      args.setProductStatusVoReq(productStatusVoReq);
      sendBase("updateProductStatus", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateProductStatus() throws org.apache.thrift.TException
    {
      updateProductStatus_result result = new updateProductStatus_result();
      receiveBase(result, "updateProductStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProductStatus failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateProductStatusBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq) throws org.apache.thrift.TException
    {
      send_updateProductStatusBatch(originVo, productStatusBatchVoReq);
      return recv_updateProductStatusBatch();
    }

    public void send_updateProductStatusBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq) throws org.apache.thrift.TException
    {
      updateProductStatusBatch_args args = new updateProductStatusBatch_args();
      args.setOriginVo(originVo);
      args.setProductStatusBatchVoReq(productStatusBatchVoReq);
      sendBase("updateProductStatusBatch", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateProductStatusBatch() throws org.apache.thrift.TException
    {
      updateProductStatusBatch_result result = new updateProductStatusBatch_result();
      receiveBase(result, "updateProductStatusBatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProductStatusBatch failed: unknown result");
    }

    public com.froad.thrift.vo.AddOutletProductVoRes addOutletProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductVo outletProductVo) throws org.apache.thrift.TException
    {
      send_addOutletProduct(originVo, outletProductVo);
      return recv_addOutletProduct();
    }

    public void send_addOutletProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductVo outletProductVo) throws org.apache.thrift.TException
    {
      addOutletProduct_args args = new addOutletProduct_args();
      args.setOriginVo(originVo);
      args.setOutletProductVo(outletProductVo);
      sendBase("addOutletProduct", args);
    }

    public com.froad.thrift.vo.AddOutletProductVoRes recv_addOutletProduct() throws org.apache.thrift.TException
    {
      addOutletProduct_result result = new addOutletProduct_result();
      receiveBase(result, "addOutletProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOutletProduct failed: unknown result");
    }

    public com.froad.thrift.vo.AddOutletProductVoRes addH5OutletProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductDiscountVo outletProductDiscountVo) throws org.apache.thrift.TException
    {
      send_addH5OutletProduct(originVo, outletProductDiscountVo);
      return recv_addH5OutletProduct();
    }

    public void send_addH5OutletProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductDiscountVo outletProductDiscountVo) throws org.apache.thrift.TException
    {
      addH5OutletProduct_args args = new addH5OutletProduct_args();
      args.setOriginVo(originVo);
      args.setOutletProductDiscountVo(outletProductDiscountVo);
      sendBase("addH5OutletProduct", args);
    }

    public com.froad.thrift.vo.AddOutletProductVoRes recv_addH5OutletProduct() throws org.apache.thrift.TException
    {
      addH5OutletProduct_result result = new addH5OutletProduct_result();
      receiveBase(result, "addH5OutletProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addH5OutletProduct failed: unknown result");
    }

    public com.froad.thrift.vo.OutletProductVoRes getOutletProduct(com.froad.thrift.vo.OutletProductVoReq outletProductVoReq) throws org.apache.thrift.TException
    {
      send_getOutletProduct(outletProductVoReq);
      return recv_getOutletProduct();
    }

    public void send_getOutletProduct(com.froad.thrift.vo.OutletProductVoReq outletProductVoReq) throws org.apache.thrift.TException
    {
      getOutletProduct_args args = new getOutletProduct_args();
      args.setOutletProductVoReq(outletProductVoReq);
      sendBase("getOutletProduct", args);
    }

    public com.froad.thrift.vo.OutletProductVoRes recv_getOutletProduct() throws org.apache.thrift.TException
    {
      getOutletProduct_result result = new getOutletProduct_result();
      receiveBase(result, "getOutletProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletProduct failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteOutletProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductVo outletProductVo) throws org.apache.thrift.TException
    {
      send_deleteOutletProduct(originVo, outletProductVo);
      return recv_deleteOutletProduct();
    }

    public void send_deleteOutletProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductVo outletProductVo) throws org.apache.thrift.TException
    {
      deleteOutletProduct_args args = new deleteOutletProduct_args();
      args.setOriginVo(originVo);
      args.setOutletProductVo(outletProductVo);
      sendBase("deleteOutletProduct", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteOutletProduct() throws org.apache.thrift.TException
    {
      deleteOutletProduct_result result = new deleteOutletProduct_result();
      receiveBase(result, "deleteOutletProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteOutletProduct failed: unknown result");
    }

    public com.froad.thrift.vo.OutletProductPageVo getOutletProductListByPage(com.froad.thrift.vo.OutletProductVo outletProductVo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_getOutletProductListByPage(outletProductVo, pageVo);
      return recv_getOutletProductListByPage();
    }

    public void send_getOutletProductListByPage(com.froad.thrift.vo.OutletProductVo outletProductVo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      getOutletProductListByPage_args args = new getOutletProductListByPage_args();
      args.setOutletProductVo(outletProductVo);
      args.setPageVo(pageVo);
      sendBase("getOutletProductListByPage", args);
    }

    public com.froad.thrift.vo.OutletProductPageVo recv_getOutletProductListByPage() throws org.apache.thrift.TException
    {
      getOutletProductListByPage_result result = new getOutletProductListByPage_result();
      receiveBase(result, "getOutletProductListByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutletProductListByPage failed: unknown result");
    }

    public com.froad.thrift.vo.ProductCommentPageVo getProductCommentList(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_getProductCommentList(productCommentFilterReq, pageVo);
      return recv_getProductCommentList();
    }

    public void send_getProductCommentList(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      getProductCommentList_args args = new getProductCommentList_args();
      args.setProductCommentFilterReq(productCommentFilterReq);
      args.setPageVo(pageVo);
      sendBase("getProductCommentList", args);
    }

    public com.froad.thrift.vo.ProductCommentPageVo recv_getProductCommentList() throws org.apache.thrift.TException
    {
      getProductCommentList_result result = new getProductCommentList_result();
      receiveBase(result, "getProductCommentList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductCommentList failed: unknown result");
    }

    public com.froad.thrift.vo.ProductCommentVo getProductCommentDetail(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException
    {
      send_getProductCommentDetail(productCommentVo);
      return recv_getProductCommentDetail();
    }

    public void send_getProductCommentDetail(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException
    {
      getProductCommentDetail_args args = new getProductCommentDetail_args();
      args.setProductCommentVo(productCommentVo);
      sendBase("getProductCommentDetail", args);
    }

    public com.froad.thrift.vo.ProductCommentVo recv_getProductCommentDetail() throws org.apache.thrift.TException
    {
      getProductCommentDetail_result result = new getProductCommentDetail_result();
      receiveBase(result, "getProductCommentDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductCommentDetail failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException
    {
      send_deleteProductComment(productCommentVo);
      return recv_deleteProductComment();
    }

    public void send_deleteProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException
    {
      deleteProductComment_args args = new deleteProductComment_args();
      args.setProductCommentVo(productCommentVo);
      sendBase("deleteProductComment", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteProductComment() throws org.apache.thrift.TException
    {
      deleteProductComment_result result = new deleteProductComment_result();
      receiveBase(result, "deleteProductComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteProductComment failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo replayProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException
    {
      send_replayProductComment(productCommentVo);
      return recv_replayProductComment();
    }

    public void send_replayProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException
    {
      replayProductComment_args args = new replayProductComment_args();
      args.setProductCommentVo(productCommentVo);
      sendBase("replayProductComment", args);
    }

    public com.froad.thrift.vo.ResultVo recv_replayProductComment() throws org.apache.thrift.TException
    {
      replayProductComment_result result = new replayProductComment_result();
      receiveBase(result, "replayProductComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "replayProductComment failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo replayProductCommentBatch(List<com.froad.thrift.vo.ProductCommentVo> productCommentVo) throws org.apache.thrift.TException
    {
      send_replayProductCommentBatch(productCommentVo);
      return recv_replayProductCommentBatch();
    }

    public void send_replayProductCommentBatch(List<com.froad.thrift.vo.ProductCommentVo> productCommentVo) throws org.apache.thrift.TException
    {
      replayProductCommentBatch_args args = new replayProductCommentBatch_args();
      args.setProductCommentVo(productCommentVo);
      sendBase("replayProductCommentBatch", args);
    }

    public com.froad.thrift.vo.ResultVo recv_replayProductCommentBatch() throws org.apache.thrift.TException
    {
      replayProductCommentBatch_result result = new replayProductCommentBatch_result();
      receiveBase(result, "replayProductCommentBatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "replayProductCommentBatch failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo addProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException
    {
      send_addProductComment(productCommentVo);
      return recv_addProductComment();
    }

    public void send_addProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException
    {
      addProductComment_args args = new addProductComment_args();
      args.setProductCommentVo(productCommentVo);
      sendBase("addProductComment", args);
    }

    public com.froad.thrift.vo.ResultVo recv_addProductComment() throws org.apache.thrift.TException
    {
      addProductComment_result result = new addProductComment_result();
      receiveBase(result, "addProductComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addProductComment failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException
    {
      send_updateProductComment(productCommentVo);
      return recv_updateProductComment();
    }

    public void send_updateProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException
    {
      updateProductComment_args args = new updateProductComment_args();
      args.setProductCommentVo(productCommentVo);
      sendBase("updateProductComment", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateProductComment() throws org.apache.thrift.TException
    {
      updateProductComment_result result = new updateProductComment_result();
      receiveBase(result, "updateProductComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProductComment failed: unknown result");
    }

    public com.froad.thrift.vo.ProductCommentVo queryProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException
    {
      send_queryProductComment(productCommentVo);
      return recv_queryProductComment();
    }

    public void send_queryProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo) throws org.apache.thrift.TException
    {
      queryProductComment_args args = new queryProductComment_args();
      args.setProductCommentVo(productCommentVo);
      sendBase("queryProductComment", args);
    }

    public com.froad.thrift.vo.ProductCommentVo recv_queryProductComment() throws org.apache.thrift.TException
    {
      queryProductComment_result result = new queryProductComment_result();
      receiveBase(result, "queryProductComment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryProductComment failed: unknown result");
    }

    public com.froad.thrift.vo.ProductCommentPageVo queryProductComments(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_queryProductComments(productCommentFilterReq, pageVo);
      return recv_queryProductComments();
    }

    public void send_queryProductComments(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      queryProductComments_args args = new queryProductComments_args();
      args.setProductCommentFilterReq(productCommentFilterReq);
      args.setPageVo(pageVo);
      sendBase("queryProductComments", args);
    }

    public com.froad.thrift.vo.ProductCommentPageVo recv_queryProductComments() throws org.apache.thrift.TException
    {
      queryProductComments_result result = new queryProductComments_result();
      receiveBase(result, "queryProductComments");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryProductComments failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo addProductActivties(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductRelateActivitiesVo relateActivities) throws org.apache.thrift.TException
    {
      send_addProductActivties(originVo, relateActivities);
      return recv_addProductActivties();
    }

    public void send_addProductActivties(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductRelateActivitiesVo relateActivities) throws org.apache.thrift.TException
    {
      addProductActivties_args args = new addProductActivties_args();
      args.setOriginVo(originVo);
      args.setRelateActivities(relateActivities);
      sendBase("addProductActivties", args);
    }

    public com.froad.thrift.vo.ResultVo recv_addProductActivties() throws org.apache.thrift.TException
    {
      addProductActivties_result result = new addProductActivties_result();
      receiveBase(result, "addProductActivties");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addProductActivties failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo addProductOutlets(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductRelateOutletVo outlets) throws org.apache.thrift.TException
    {
      send_addProductOutlets(originVo, outlets);
      return recv_addProductOutlets();
    }

    public void send_addProductOutlets(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductRelateOutletVo outlets) throws org.apache.thrift.TException
    {
      addProductOutlets_args args = new addProductOutlets_args();
      args.setOriginVo(originVo);
      args.setOutlets(outlets);
      sendBase("addProductOutlets", args);
    }

    public com.froad.thrift.vo.ResultVo recv_addProductOutlets() throws org.apache.thrift.TException
    {
      addProductOutlets_result result = new addProductOutlets_result();
      receiveBase(result, "addProductOutlets");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addProductOutlets failed: unknown result");
    }

    public List<com.froad.thrift.vo.ProductAreaVo> getProductAreaOutlets(com.froad.thrift.vo.ProductAreaVo productAreaVo) throws org.apache.thrift.TException
    {
      send_getProductAreaOutlets(productAreaVo);
      return recv_getProductAreaOutlets();
    }

    public void send_getProductAreaOutlets(com.froad.thrift.vo.ProductAreaVo productAreaVo) throws org.apache.thrift.TException
    {
      getProductAreaOutlets_args args = new getProductAreaOutlets_args();
      args.setProductAreaVo(productAreaVo);
      sendBase("getProductAreaOutlets", args);
    }

    public List<com.froad.thrift.vo.ProductAreaVo> recv_getProductAreaOutlets() throws org.apache.thrift.TException
    {
      getProductAreaOutlets_result result = new getProductAreaOutlets_result();
      receiveBase(result, "getProductAreaOutlets");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductAreaOutlets failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo invalidProductBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo) throws org.apache.thrift.TException
    {
      send_invalidProductBatch(originVo, invalidProductBatchVo);
      return recv_invalidProductBatch();
    }

    public void send_invalidProductBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo) throws org.apache.thrift.TException
    {
      invalidProductBatch_args args = new invalidProductBatch_args();
      args.setOriginVo(originVo);
      args.setInvalidProductBatchVo(invalidProductBatchVo);
      sendBase("invalidProductBatch", args);
    }

    public com.froad.thrift.vo.ResultVo recv_invalidProductBatch() throws org.apache.thrift.TException
    {
      invalidProductBatch_result result = new invalidProductBatch_result();
      receiveBase(result, "invalidProductBatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "invalidProductBatch failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo validMerchantProductBatch(String merchantId) throws org.apache.thrift.TException
    {
      send_validMerchantProductBatch(merchantId);
      return recv_validMerchantProductBatch();
    }

    public void send_validMerchantProductBatch(String merchantId) throws org.apache.thrift.TException
    {
      validMerchantProductBatch_args args = new validMerchantProductBatch_args();
      args.setMerchantId(merchantId);
      sendBase("validMerchantProductBatch", args);
    }

    public com.froad.thrift.vo.ResultVo recv_validMerchantProductBatch() throws org.apache.thrift.TException
    {
      validMerchantProductBatch_result result = new validMerchantProductBatch_result();
      receiveBase(result, "validMerchantProductBatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "validMerchantProductBatch failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo endisableProductBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo, String flag) throws org.apache.thrift.TException
    {
      send_endisableProductBatch(originVo, invalidProductBatchVo, flag);
      return recv_endisableProductBatch();
    }

    public void send_endisableProductBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo, String flag) throws org.apache.thrift.TException
    {
      endisableProductBatch_args args = new endisableProductBatch_args();
      args.setOriginVo(originVo);
      args.setInvalidProductBatchVo(invalidProductBatchVo);
      args.setFlag(flag);
      sendBase("endisableProductBatch", args);
    }

    public com.froad.thrift.vo.ResultVo recv_endisableProductBatch() throws org.apache.thrift.TException
    {
      endisableProductBatch_result result = new endisableProductBatch_result();
      receiveBase(result, "endisableProductBatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "endisableProductBatch failed: unknown result");
    }

    public int queryProductCommentCount(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq) throws org.apache.thrift.TException
    {
      send_queryProductCommentCount(productCommentFilterReq);
      return recv_queryProductCommentCount();
    }

    public void send_queryProductCommentCount(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq) throws org.apache.thrift.TException
    {
      queryProductCommentCount_args args = new queryProductCommentCount_args();
      args.setProductCommentFilterReq(productCommentFilterReq);
      sendBase("queryProductCommentCount", args);
    }

    public int recv_queryProductCommentCount() throws org.apache.thrift.TException
    {
      queryProductCommentCount_result result = new queryProductCommentCount_result();
      receiveBase(result, "queryProductCommentCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryProductCommentCount failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteProductBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq) throws org.apache.thrift.TException
    {
      send_deleteProductBatch(originVo, productStatusBatchVoReq);
      return recv_deleteProductBatch();
    }

    public void send_deleteProductBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq) throws org.apache.thrift.TException
    {
      deleteProductBatch_args args = new deleteProductBatch_args();
      args.setOriginVo(originVo);
      args.setProductStatusBatchVoReq(productStatusBatchVoReq);
      sendBase("deleteProductBatch", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteProductBatch() throws org.apache.thrift.TException
    {
      deleteProductBatch_result result = new deleteProductBatch_result();
      receiveBase(result, "deleteProductBatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteProductBatch failed: unknown result");
    }

    public List<com.froad.thrift.vo.ProductStatusVoReq> getProductStatus() throws org.apache.thrift.TException
    {
      send_getProductStatus();
      return recv_getProductStatus();
    }

    public void send_getProductStatus() throws org.apache.thrift.TException
    {
      getProductStatus_args args = new getProductStatus_args();
      sendBase("getProductStatus", args);
    }

    public List<com.froad.thrift.vo.ProductStatusVoReq> recv_getProductStatus() throws org.apache.thrift.TException
    {
      getProductStatus_result result = new getProductStatus_result();
      receiveBase(result, "getProductStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductStatus failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateAuditProductBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductAuditVo> productAuditVoList) throws org.apache.thrift.TException
    {
      send_updateAuditProductBatch(originVo, productAuditVoList);
      return recv_updateAuditProductBatch();
    }

    public void send_updateAuditProductBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductAuditVo> productAuditVoList) throws org.apache.thrift.TException
    {
      updateAuditProductBatch_args args = new updateAuditProductBatch_args();
      args.setOriginVo(originVo);
      args.setProductAuditVoList(productAuditVoList);
      sendBase("updateAuditProductBatch", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateAuditProductBatch() throws org.apache.thrift.TException
    {
      updateAuditProductBatch_result result = new updateAuditProductBatch_result();
      receiveBase(result, "updateAuditProductBatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAuditProductBatch failed: unknown result");
    }

    public List<com.froad.thrift.vo.ProductBaseInfoVo> getProductBaseInfo(String clientId, List<com.froad.thrift.vo.ProductStoreFilterVo> products) throws org.apache.thrift.TException
    {
      send_getProductBaseInfo(clientId, products);
      return recv_getProductBaseInfo();
    }

    public void send_getProductBaseInfo(String clientId, List<com.froad.thrift.vo.ProductStoreFilterVo> products) throws org.apache.thrift.TException
    {
      getProductBaseInfo_args args = new getProductBaseInfo_args();
      args.setClientId(clientId);
      args.setProducts(products);
      sendBase("getProductBaseInfo", args);
    }

    public List<com.froad.thrift.vo.ProductBaseInfoVo> recv_getProductBaseInfo() throws org.apache.thrift.TException
    {
      getProductBaseInfo_result result = new getProductBaseInfo_result();
      receiveBase(result, "getProductBaseInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductBaseInfo failed: unknown result");
    }

    public boolean isExitsStoreProductInfo(String clientId, long memberCode, String productId) throws org.apache.thrift.TException
    {
      send_isExitsStoreProductInfo(clientId, memberCode, productId);
      return recv_isExitsStoreProductInfo();
    }

    public void send_isExitsStoreProductInfo(String clientId, long memberCode, String productId) throws org.apache.thrift.TException
    {
      isExitsStoreProductInfo_args args = new isExitsStoreProductInfo_args();
      args.setClientId(clientId);
      args.setMemberCode(memberCode);
      args.setProductId(productId);
      sendBase("isExitsStoreProductInfo", args);
    }

    public boolean recv_isExitsStoreProductInfo() throws org.apache.thrift.TException
    {
      isExitsStoreProductInfo_result result = new isExitsStoreProductInfo_result();
      receiveBase(result, "isExitsStoreProductInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isExitsStoreProductInfo failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo addStoreProductInfoVo(String clientId, long memberCode, com.froad.thrift.vo.StoreProductInfoVo storeProductInfoVo) throws org.apache.thrift.TException
    {
      send_addStoreProductInfoVo(clientId, memberCode, storeProductInfoVo);
      return recv_addStoreProductInfoVo();
    }

    public void send_addStoreProductInfoVo(String clientId, long memberCode, com.froad.thrift.vo.StoreProductInfoVo storeProductInfoVo) throws org.apache.thrift.TException
    {
      addStoreProductInfoVo_args args = new addStoreProductInfoVo_args();
      args.setClientId(clientId);
      args.setMemberCode(memberCode);
      args.setStoreProductInfoVo(storeProductInfoVo);
      sendBase("addStoreProductInfoVo", args);
    }

    public com.froad.thrift.vo.ResultVo recv_addStoreProductInfoVo() throws org.apache.thrift.TException
    {
      addStoreProductInfoVo_result result = new addStoreProductInfoVo_result();
      receiveBase(result, "addStoreProductInfoVo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addStoreProductInfoVo failed: unknown result");
    }

    public boolean deleteStoreProductInfoVo(String clientId, long memberCode, String productId) throws org.apache.thrift.TException
    {
      send_deleteStoreProductInfoVo(clientId, memberCode, productId);
      return recv_deleteStoreProductInfoVo();
    }

    public void send_deleteStoreProductInfoVo(String clientId, long memberCode, String productId) throws org.apache.thrift.TException
    {
      deleteStoreProductInfoVo_args args = new deleteStoreProductInfoVo_args();
      args.setClientId(clientId);
      args.setMemberCode(memberCode);
      args.setProductId(productId);
      sendBase("deleteStoreProductInfoVo", args);
    }

    public boolean recv_deleteStoreProductInfoVo() throws org.apache.thrift.TException
    {
      deleteStoreProductInfoVo_result result = new deleteStoreProductInfoVo_result();
      receiveBase(result, "deleteStoreProductInfoVo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteStoreProductInfoVo failed: unknown result");
    }

    public List<com.froad.thrift.vo.StoreProductInfoVo> getStoreProductInfoVo(String clientId, long memberCode) throws org.apache.thrift.TException
    {
      send_getStoreProductInfoVo(clientId, memberCode);
      return recv_getStoreProductInfoVo();
    }

    public void send_getStoreProductInfoVo(String clientId, long memberCode) throws org.apache.thrift.TException
    {
      getStoreProductInfoVo_args args = new getStoreProductInfoVo_args();
      args.setClientId(clientId);
      args.setMemberCode(memberCode);
      sendBase("getStoreProductInfoVo", args);
    }

    public List<com.froad.thrift.vo.StoreProductInfoVo> recv_getStoreProductInfoVo() throws org.apache.thrift.TException
    {
      getStoreProductInfoVo_result result = new getStoreProductInfoVo_result();
      receiveBase(result, "getStoreProductInfoVo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStoreProductInfoVo failed: unknown result");
    }

    public com.froad.thrift.vo.StoreProductInfoPageVoRes getStoreProductInfoByPage(com.froad.thrift.vo.PageVo page, String clientId, long memberCode) throws org.apache.thrift.TException
    {
      send_getStoreProductInfoByPage(page, clientId, memberCode);
      return recv_getStoreProductInfoByPage();
    }

    public void send_getStoreProductInfoByPage(com.froad.thrift.vo.PageVo page, String clientId, long memberCode) throws org.apache.thrift.TException
    {
      getStoreProductInfoByPage_args args = new getStoreProductInfoByPage_args();
      args.setPage(page);
      args.setClientId(clientId);
      args.setMemberCode(memberCode);
      sendBase("getStoreProductInfoByPage", args);
    }

    public com.froad.thrift.vo.StoreProductInfoPageVoRes recv_getStoreProductInfoByPage() throws org.apache.thrift.TException
    {
      getStoreProductInfoByPage_result result = new getStoreProductInfoByPage_result();
      receiveBase(result, "getStoreProductInfoByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStoreProductInfoByPage failed: unknown result");
    }

    public List<com.froad.thrift.vo.AddProductVoRes> addProductBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductInfoVo> productInfoVos) throws org.apache.thrift.TException
    {
      send_addProductBatch(originVo, productInfoVos);
      return recv_addProductBatch();
    }

    public void send_addProductBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductInfoVo> productInfoVos) throws org.apache.thrift.TException
    {
      addProductBatch_args args = new addProductBatch_args();
      args.setOriginVo(originVo);
      args.setProductInfoVos(productInfoVos);
      sendBase("addProductBatch", args);
    }

    public List<com.froad.thrift.vo.AddProductVoRes> recv_addProductBatch() throws org.apache.thrift.TException
    {
      addProductBatch_result result = new addProductBatch_result();
      receiveBase(result, "addProductBatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addProductBatch failed: unknown result");
    }

    public void modifySenseWord(int opt, String word) throws org.apache.thrift.TException
    {
      send_modifySenseWord(opt, word);
      recv_modifySenseWord();
    }

    public void send_modifySenseWord(int opt, String word) throws org.apache.thrift.TException
    {
      modifySenseWord_args args = new modifySenseWord_args();
      args.setOpt(opt);
      args.setWord(word);
      sendBase("modifySenseWord", args);
    }

    public void recv_modifySenseWord() throws org.apache.thrift.TException
    {
      modifySenseWord_result result = new modifySenseWord_result();
      receiveBase(result, "modifySenseWord");
      return;
    }

    public com.froad.thrift.vo.ResultVo addActivtyToProducts(com.froad.thrift.vo.OriginVo originVo, long activityId, List<String> productIds) throws org.apache.thrift.TException
    {
      send_addActivtyToProducts(originVo, activityId, productIds);
      return recv_addActivtyToProducts();
    }

    public void send_addActivtyToProducts(com.froad.thrift.vo.OriginVo originVo, long activityId, List<String> productIds) throws org.apache.thrift.TException
    {
      addActivtyToProducts_args args = new addActivtyToProducts_args();
      args.setOriginVo(originVo);
      args.setActivityId(activityId);
      args.setProductIds(productIds);
      sendBase("addActivtyToProducts", args);
    }

    public com.froad.thrift.vo.ResultVo recv_addActivtyToProducts() throws org.apache.thrift.TException
    {
      addActivtyToProducts_result result = new addActivtyToProducts_result();
      receiveBase(result, "addActivtyToProducts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addActivtyToProducts failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo removeActivtyFromProducts(com.froad.thrift.vo.OriginVo originVo, long activtyId, String productId) throws org.apache.thrift.TException
    {
      send_removeActivtyFromProducts(originVo, activtyId, productId);
      return recv_removeActivtyFromProducts();
    }

    public void send_removeActivtyFromProducts(com.froad.thrift.vo.OriginVo originVo, long activtyId, String productId) throws org.apache.thrift.TException
    {
      removeActivtyFromProducts_args args = new removeActivtyFromProducts_args();
      args.setOriginVo(originVo);
      args.setActivtyId(activtyId);
      args.setProductId(productId);
      sendBase("removeActivtyFromProducts", args);
    }

    public com.froad.thrift.vo.ResultVo recv_removeActivtyFromProducts() throws org.apache.thrift.TException
    {
      removeActivtyFromProducts_result result = new removeActivtyFromProducts_result();
      receiveBase(result, "removeActivtyFromProducts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeActivtyFromProducts failed: unknown result");
    }

    public com.froad.thrift.vo.ActivityProductPageVo findActivtyProductsByPage(long activtyId, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_findActivtyProductsByPage(activtyId, pageVo);
      return recv_findActivtyProductsByPage();
    }

    public void send_findActivtyProductsByPage(long activtyId, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      findActivtyProductsByPage_args args = new findActivtyProductsByPage_args();
      args.setActivtyId(activtyId);
      args.setPageVo(pageVo);
      sendBase("findActivtyProductsByPage", args);
    }

    public com.froad.thrift.vo.ActivityProductPageVo recv_findActivtyProductsByPage() throws org.apache.thrift.TException
    {
      findActivtyProductsByPage_result result = new findActivtyProductsByPage_result();
      receiveBase(result, "findActivtyProductsByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findActivtyProductsByPage failed: unknown result");
    }

    public com.froad.thrift.vo.ActivityProductPageVo findProductsForActivtyByPage(long activtyId, String name, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_findProductsForActivtyByPage(activtyId, name, pageVo);
      return recv_findProductsForActivtyByPage();
    }

    public void send_findProductsForActivtyByPage(long activtyId, String name, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      findProductsForActivtyByPage_args args = new findProductsForActivtyByPage_args();
      args.setActivtyId(activtyId);
      args.setName(name);
      args.setPageVo(pageVo);
      sendBase("findProductsForActivtyByPage", args);
    }

    public com.froad.thrift.vo.ActivityProductPageVo recv_findProductsForActivtyByPage() throws org.apache.thrift.TException
    {
      findProductsForActivtyByPage_result result = new findProductsForActivtyByPage_result();
      receiveBase(result, "findProductsForActivtyByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findProductsForActivtyByPage failed: unknown result");
    }

    public com.froad.thrift.vo.ProductOutletPageVo findProductsForAreaByPage(String productId, long cityId, String clientId, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_findProductsForAreaByPage(productId, cityId, clientId, pageVo);
      return recv_findProductsForAreaByPage();
    }

    public void send_findProductsForAreaByPage(String productId, long cityId, String clientId, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      findProductsForAreaByPage_args args = new findProductsForAreaByPage_args();
      args.setProductId(productId);
      args.setCityId(cityId);
      args.setClientId(clientId);
      args.setPageVo(pageVo);
      sendBase("findProductsForAreaByPage", args);
    }

    public com.froad.thrift.vo.ProductOutletPageVo recv_findProductsForAreaByPage() throws org.apache.thrift.TException
    {
      findProductsForAreaByPage_result result = new findProductsForAreaByPage_result();
      receiveBase(result, "findProductsForAreaByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findProductsForAreaByPage failed: unknown result");
    }

    public List<com.froad.thrift.vo.AreaVo> findAreaForCityByList(String productId, long cityId, String clientId) throws org.apache.thrift.TException
    {
      send_findAreaForCityByList(productId, cityId, clientId);
      return recv_findAreaForCityByList();
    }

    public void send_findAreaForCityByList(String productId, long cityId, String clientId) throws org.apache.thrift.TException
    {
      findAreaForCityByList_args args = new findAreaForCityByList_args();
      args.setProductId(productId);
      args.setCityId(cityId);
      args.setClientId(clientId);
      sendBase("findAreaForCityByList", args);
    }

    public List<com.froad.thrift.vo.AreaVo> recv_findAreaForCityByList() throws org.apache.thrift.TException
    {
      findAreaForCityByList_result result = new findAreaForCityByList_result();
      receiveBase(result, "findAreaForCityByList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAreaForCityByList failed: unknown result");
    }

    public com.froad.thrift.vo.ProductBriefPageVoRes queryVipPresellProducts(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_queryVipPresellProducts(productFilterVoReq, pageVo);
      return recv_queryVipPresellProducts();
    }

    public void send_queryVipPresellProducts(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      queryVipPresellProducts_args args = new queryVipPresellProducts_args();
      args.setProductFilterVoReq(productFilterVoReq);
      args.setPageVo(pageVo);
      sendBase("queryVipPresellProducts", args);
    }

    public com.froad.thrift.vo.ProductBriefPageVoRes recv_queryVipPresellProducts() throws org.apache.thrift.TException
    {
      queryVipPresellProducts_result result = new queryVipPresellProducts_result();
      receiveBase(result, "queryVipPresellProducts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryVipPresellProducts failed: unknown result");
    }

    public com.froad.thrift.vo.GroupProductPageVoRes queryGroupProducts(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_queryGroupProducts(filterVo, filedSorts, pageVo);
      return recv_queryGroupProducts();
    }

    public void send_queryGroupProducts(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      queryGroupProducts_args args = new queryGroupProducts_args();
      args.setFilterVo(filterVo);
      args.setFiledSorts(filedSorts);
      args.setPageVo(pageVo);
      sendBase("queryGroupProducts", args);
    }

    public com.froad.thrift.vo.GroupProductPageVoRes recv_queryGroupProducts() throws org.apache.thrift.TException
    {
      queryGroupProducts_result result = new queryGroupProducts_result();
      receiveBase(result, "queryGroupProducts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryGroupProducts failed: unknown result");
    }

    public com.froad.thrift.vo.MerchantProductPageVoRes queryMerchantProducts(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_queryMerchantProducts(filterVo, filedSorts, pageVo);
      return recv_queryMerchantProducts();
    }

    public void send_queryMerchantProducts(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      queryMerchantProducts_args args = new queryMerchantProducts_args();
      args.setFilterVo(filterVo);
      args.setFiledSorts(filedSorts);
      args.setPageVo(pageVo);
      sendBase("queryMerchantProducts", args);
    }

    public com.froad.thrift.vo.MerchantProductPageVoRes recv_queryMerchantProducts() throws org.apache.thrift.TException
    {
      queryMerchantProducts_result result = new queryMerchantProducts_result();
      receiveBase(result, "queryMerchantProducts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryMerchantProducts failed: unknown result");
    }

    public List<com.froad.thrift.vo.ProductVo> findUrlCodeByList(List<com.froad.thrift.vo.ProductVo> productList) throws org.apache.thrift.TException
    {
      send_findUrlCodeByList(productList);
      return recv_findUrlCodeByList();
    }

    public void send_findUrlCodeByList(List<com.froad.thrift.vo.ProductVo> productList) throws org.apache.thrift.TException
    {
      findUrlCodeByList_args args = new findUrlCodeByList_args();
      args.setProductList(productList);
      sendBase("findUrlCodeByList", args);
    }

    public List<com.froad.thrift.vo.ProductVo> recv_findUrlCodeByList() throws org.apache.thrift.TException
    {
      findUrlCodeByList_result result = new findUrlCodeByList_result();
      receiveBase(result, "findUrlCodeByList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUrlCodeByList failed: unknown result");
    }

    public com.froad.thrift.vo.ExportResultRes downProducts(com.froad.thrift.vo.ProductSearchVo productSearchVo, String type) throws org.apache.thrift.TException
    {
      send_downProducts(productSearchVo, type);
      return recv_downProducts();
    }

    public void send_downProducts(com.froad.thrift.vo.ProductSearchVo productSearchVo, String type) throws org.apache.thrift.TException
    {
      downProducts_args args = new downProducts_args();
      args.setProductSearchVo(productSearchVo);
      args.setType(type);
      sendBase("downProducts", args);
    }

    public com.froad.thrift.vo.ExportResultRes recv_downProducts() throws org.apache.thrift.TException
    {
      downProducts_result result = new downProducts_result();
      receiveBase(result, "downProducts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "downProducts failed: unknown result");
    }

    public com.froad.thrift.vo.ProductPageVoRes searchProductByType(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_searchProductByType(filterVo, filedSorts, pageVo);
      return recv_searchProductByType();
    }

    public void send_searchProductByType(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      searchProductByType_args args = new searchProductByType_args();
      args.setFilterVo(filterVo);
      args.setFiledSorts(filedSorts);
      args.setPageVo(pageVo);
      sendBase("searchProductByType", args);
    }

    public com.froad.thrift.vo.ProductPageVoRes recv_searchProductByType() throws org.apache.thrift.TException
    {
      searchProductByType_result result = new searchProductByType_result();
      receiveBase(result, "searchProductByType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchProductByType failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateGroupProductByOutlet(String clientId, String type, com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException
    {
      send_updateGroupProductByOutlet(clientId, type, outletVo);
      return recv_updateGroupProductByOutlet();
    }

    public void send_updateGroupProductByOutlet(String clientId, String type, com.froad.thrift.vo.OutletVo outletVo) throws org.apache.thrift.TException
    {
      updateGroupProductByOutlet_args args = new updateGroupProductByOutlet_args();
      args.setClientId(clientId);
      args.setType(type);
      args.setOutletVo(outletVo);
      sendBase("updateGroupProductByOutlet", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateGroupProductByOutlet() throws org.apache.thrift.TException
    {
      updateGroupProductByOutlet_result result = new updateGroupProductByOutlet_result();
      receiveBase(result, "updateGroupProductByOutlet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateGroupProductByOutlet failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateHisGroupGoodsOutlets() throws org.apache.thrift.TException
    {
      send_updateHisGroupGoodsOutlets();
      return recv_updateHisGroupGoodsOutlets();
    }

    public void send_updateHisGroupGoodsOutlets() throws org.apache.thrift.TException
    {
      updateHisGroupGoodsOutlets_args args = new updateHisGroupGoodsOutlets_args();
      sendBase("updateHisGroupGoodsOutlets", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateHisGroupGoodsOutlets() throws org.apache.thrift.TException
    {
      updateHisGroupGoodsOutlets_result result = new updateHisGroupGoodsOutlets_result();
      receiveBase(result, "updateHisGroupGoodsOutlets");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateHisGroupGoodsOutlets failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo autoOffShelfProductSaleEnd() throws org.apache.thrift.TException
    {
      send_autoOffShelfProductSaleEnd();
      return recv_autoOffShelfProductSaleEnd();
    }

    public void send_autoOffShelfProductSaleEnd() throws org.apache.thrift.TException
    {
      autoOffShelfProductSaleEnd_args args = new autoOffShelfProductSaleEnd_args();
      sendBase("autoOffShelfProductSaleEnd", args);
    }

    public com.froad.thrift.vo.ResultVo recv_autoOffShelfProductSaleEnd() throws org.apache.thrift.TException
    {
      autoOffShelfProductSaleEnd_result result = new autoOffShelfProductSaleEnd_result();
      receiveBase(result, "autoOffShelfProductSaleEnd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "autoOffShelfProductSaleEnd failed: unknown result");
    }

    public com.froad.thrift.vo.ProductListPageVo findGoodsByPage(com.froad.thrift.vo.ProductFilterVo productFilterVo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_findGoodsByPage(productFilterVo, pageVo);
      return recv_findGoodsByPage();
    }

    public void send_findGoodsByPage(com.froad.thrift.vo.ProductFilterVo productFilterVo, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      findGoodsByPage_args args = new findGoodsByPage_args();
      args.setProductFilterVo(productFilterVo);
      args.setPageVo(pageVo);
      sendBase("findGoodsByPage", args);
    }

    public com.froad.thrift.vo.ProductListPageVo recv_findGoodsByPage() throws org.apache.thrift.TException
    {
      findGoodsByPage_result result = new findGoodsByPage_result();
      receiveBase(result, "findGoodsByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findGoodsByPage failed: unknown result");
    }

    public com.froad.thrift.vo.AddProductVoRes addGoods(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.GoodsInfoVo productInfoVo) throws org.apache.thrift.TException
    {
      send_addGoods(originVo, productInfoVo);
      return recv_addGoods();
    }

    public void send_addGoods(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.GoodsInfoVo productInfoVo) throws org.apache.thrift.TException
    {
      addGoods_args args = new addGoods_args();
      args.setOriginVo(originVo);
      args.setProductInfoVo(productInfoVo);
      sendBase("addGoods", args);
    }

    public com.froad.thrift.vo.AddProductVoRes recv_addGoods() throws org.apache.thrift.TException
    {
      addGoods_result result = new addGoods_result();
      receiveBase(result, "addGoods");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addGoods failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateGoods(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.GoodsInfoVo productInfoVo) throws org.apache.thrift.TException
    {
      send_updateGoods(originVo, productInfoVo);
      return recv_updateGoods();
    }

    public void send_updateGoods(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.GoodsInfoVo productInfoVo) throws org.apache.thrift.TException
    {
      updateGoods_args args = new updateGoods_args();
      args.setOriginVo(originVo);
      args.setProductInfoVo(productInfoVo);
      sendBase("updateGoods", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateGoods() throws org.apache.thrift.TException
    {
      updateGoods_result result = new updateGoods_result();
      receiveBase(result, "updateGoods");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateGoods failed: unknown result");
    }

    public com.froad.thrift.vo.GoodsInfoVo getGoodsDetail(String productId) throws org.apache.thrift.TException
    {
      send_getGoodsDetail(productId);
      return recv_getGoodsDetail();
    }

    public void send_getGoodsDetail(String productId) throws org.apache.thrift.TException
    {
      getGoodsDetail_args args = new getGoodsDetail_args();
      args.setProductId(productId);
      sendBase("getGoodsDetail", args);
    }

    public com.froad.thrift.vo.GoodsInfoVo recv_getGoodsDetail() throws org.apache.thrift.TException
    {
      getGoodsDetail_result result = new getGoodsDetail_result();
      receiveBase(result, "getGoodsDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGoodsDetail failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateGoodsStatusOn(com.froad.thrift.vo.OriginVo originVo, String productId) throws org.apache.thrift.TException
    {
      send_updateGoodsStatusOn(originVo, productId);
      return recv_updateGoodsStatusOn();
    }

    public void send_updateGoodsStatusOn(com.froad.thrift.vo.OriginVo originVo, String productId) throws org.apache.thrift.TException
    {
      updateGoodsStatusOn_args args = new updateGoodsStatusOn_args();
      args.setOriginVo(originVo);
      args.setProductId(productId);
      sendBase("updateGoodsStatusOn", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateGoodsStatusOn() throws org.apache.thrift.TException
    {
      updateGoodsStatusOn_result result = new updateGoodsStatusOn_result();
      receiveBase(result, "updateGoodsStatusOn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateGoodsStatusOn failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateGoodsStatusOff(com.froad.thrift.vo.OriginVo originVo, String productId) throws org.apache.thrift.TException
    {
      send_updateGoodsStatusOff(originVo, productId);
      return recv_updateGoodsStatusOff();
    }

    public void send_updateGoodsStatusOff(com.froad.thrift.vo.OriginVo originVo, String productId) throws org.apache.thrift.TException
    {
      updateGoodsStatusOff_args args = new updateGoodsStatusOff_args();
      args.setOriginVo(originVo);
      args.setProductId(productId);
      sendBase("updateGoodsStatusOff", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateGoodsStatusOff() throws org.apache.thrift.TException
    {
      updateGoodsStatusOff_result result = new updateGoodsStatusOff_result();
      receiveBase(result, "updateGoodsStatusOff");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateGoodsStatusOff failed: unknown result");
    }

    public com.froad.thrift.vo.BoutiqueProductPageVoRes queryBoutiqueGoods(com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo filterVo, com.froad.thrift.vo.FiledSort filedSort, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_queryBoutiqueGoods(filterVo, filedSort, pageVo);
      return recv_queryBoutiqueGoods();
    }

    public void send_queryBoutiqueGoods(com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo filterVo, com.froad.thrift.vo.FiledSort filedSort, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      queryBoutiqueGoods_args args = new queryBoutiqueGoods_args();
      args.setFilterVo(filterVo);
      args.setFiledSort(filedSort);
      args.setPageVo(pageVo);
      sendBase("queryBoutiqueGoods", args);
    }

    public com.froad.thrift.vo.BoutiqueProductPageVoRes recv_queryBoutiqueGoods() throws org.apache.thrift.TException
    {
      queryBoutiqueGoods_result result = new queryBoutiqueGoods_result();
      receiveBase(result, "queryBoutiqueGoods");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBoutiqueGoods failed: unknown result");
    }

    public com.froad.thrift.vo.BoutiqueGoodsInfoVo queryBoutiqueGoodsDetail(String productId) throws org.apache.thrift.TException
    {
      send_queryBoutiqueGoodsDetail(productId);
      return recv_queryBoutiqueGoodsDetail();
    }

    public void send_queryBoutiqueGoodsDetail(String productId) throws org.apache.thrift.TException
    {
      queryBoutiqueGoodsDetail_args args = new queryBoutiqueGoodsDetail_args();
      args.setProductId(productId);
      sendBase("queryBoutiqueGoodsDetail", args);
    }

    public com.froad.thrift.vo.BoutiqueGoodsInfoVo recv_queryBoutiqueGoodsDetail() throws org.apache.thrift.TException
    {
      queryBoutiqueGoodsDetail_result result = new queryBoutiqueGoodsDetail_result();
      receiveBase(result, "queryBoutiqueGoodsDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBoutiqueGoodsDetail failed: unknown result");
    }

    public com.froad.thrift.vo.ProductDetailInfo getProductDetail(String productId) throws org.apache.thrift.TException
    {
      send_getProductDetail(productId);
      return recv_getProductDetail();
    }

    public void send_getProductDetail(String productId) throws org.apache.thrift.TException
    {
      getProductDetail_args args = new getProductDetail_args();
      args.setProductId(productId);
      sendBase("getProductDetail", args);
    }

    public com.froad.thrift.vo.ProductDetailInfo recv_getProductDetail() throws org.apache.thrift.TException
    {
      getProductDetail_result result = new getProductDetail_result();
      receiveBase(result, "getProductDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductDetail failed: unknown result");
    }

    public com.froad.thrift.vo.ProductPageVo findProductsByPage(com.froad.thrift.vo.ProductFilterReqVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_findProductsByPage(filterVo, filedSorts, pageVo);
      return recv_findProductsByPage();
    }

    public void send_findProductsByPage(com.froad.thrift.vo.ProductFilterReqVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      findProductsByPage_args args = new findProductsByPage_args();
      args.setFilterVo(filterVo);
      args.setFiledSorts(filedSorts);
      args.setPageVo(pageVo);
      sendBase("findProductsByPage", args);
    }

    public com.froad.thrift.vo.ProductPageVo recv_findProductsByPage() throws org.apache.thrift.TException
    {
      findProductsByPage_result result = new findProductsByPage_result();
      receiveBase(result, "findProductsByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findProductsByPage failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateProductAuditState(List<com.froad.thrift.vo.EditProductAuditStateVo> productAuditStates) throws org.apache.thrift.TException
    {
      send_updateProductAuditState(productAuditStates);
      return recv_updateProductAuditState();
    }

    public void send_updateProductAuditState(List<com.froad.thrift.vo.EditProductAuditStateVo> productAuditStates) throws org.apache.thrift.TException
    {
      updateProductAuditState_args args = new updateProductAuditState_args();
      args.setProductAuditStates(productAuditStates);
      sendBase("updateProductAuditState", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateProductAuditState() throws org.apache.thrift.TException
    {
      updateProductAuditState_result result = new updateProductAuditState_result();
      receiveBase(result, "updateProductAuditState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProductAuditState failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addProduct_call method_call = new addProduct_call(originVo, productInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ProductInfoVo productInfoVo;
      public addProduct_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productInfoVo = productInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addProduct_args args = new addProduct_args();
        args.setOriginVo(originVo);
        args.setProductInfoVo(productInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AddProductVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addProduct();
      }
    }

    public void deleteProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductOperateVoReq productVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteProduct_call method_call = new deleteProduct_call(originVo, productVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ProductOperateVoReq productVoReq;
      public deleteProduct_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductOperateVoReq productVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productVoReq = productVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteProduct_args args = new deleteProduct_args();
        args.setOriginVo(originVo);
        args.setProductVoReq(productVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteProduct();
      }
    }

    public void updateProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProduct_call method_call = new updateProduct_call(originVo, productInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ProductInfoVo productInfoVo;
      public updateProduct_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productInfoVo = productInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProduct_args args = new updateProduct_args();
        args.setOriginVo(originVo);
        args.setProductInfoVo(productInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProduct();
      }
    }

    public void updateProductInfo(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductBaseVo productBaseVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProductInfo_call method_call = new updateProductInfo_call(originVo, productBaseVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProductInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ProductBaseVo productBaseVo;
      public updateProductInfo_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductBaseVo productBaseVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productBaseVo = productBaseVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProductInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProductInfo_args args = new updateProductInfo_args();
        args.setOriginVo(originVo);
        args.setProductBaseVo(productBaseVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProductInfo();
      }
    }

    public void getMerchantProductDetail(com.froad.thrift.vo.ProductOperateVoReq productVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantProductDetail_call method_call = new getMerchantProductDetail_call(productVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantProductDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductOperateVoReq productVoReq;
      public getMerchantProductDetail_call(com.froad.thrift.vo.ProductOperateVoReq productVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productVoReq = productVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantProductDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantProductDetail_args args = new getMerchantProductDetail_args();
        args.setProductVoReq(productVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductInfoVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantProductDetail();
      }
    }

    public void isProductExist(com.froad.thrift.vo.ProductExistVoReq productExistVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isProductExist_call method_call = new isProductExist_call(productExistVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isProductExist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductExistVoReq productExistVoReq;
      public isProductExist_call(com.froad.thrift.vo.ProductExistVoReq productExistVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productExistVoReq = productExistVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isProductExist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isProductExist_args args = new isProductExist_args();
        args.setProductExistVoReq(productExistVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isProductExist();
      }
    }

    public void findMerchantProductsByPage(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findMerchantProductsByPage_call method_call = new findMerchantProductsByPage_call(productFilterVoReq, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findMerchantProductsByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq;
      private com.froad.thrift.vo.PageVo pageVo;
      public findMerchantProductsByPage_call(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productFilterVoReq = productFilterVoReq;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findMerchantProductsByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findMerchantProductsByPage_args args = new findMerchantProductsByPage_args();
        args.setProductFilterVoReq(productFilterVoReq);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductBriefPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findMerchantProductsByPage();
      }
    }

    public void queryProducts(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryProducts_call method_call = new queryProducts_call(productFilterVoReq, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryProducts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq;
      private com.froad.thrift.vo.PageVo pageVo;
      public queryProducts_call(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productFilterVoReq = productFilterVoReq;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryProducts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryProducts_args args = new queryProducts_args();
        args.setProductFilterVoReq(productFilterVoReq);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductBriefPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryProducts();
      }
    }

    public void queryProductDetail(com.froad.thrift.vo.ProductOperateVoReq productVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryProductDetail_call method_call = new queryProductDetail_call(productVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryProductDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductOperateVoReq productVoReq;
      public queryProductDetail_call(com.froad.thrift.vo.ProductOperateVoReq productVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productVoReq = productVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryProductDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryProductDetail_args args = new queryProductDetail_args();
        args.setProductVoReq(productVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductInfoVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryProductDetail();
      }
    }

    public void updateProductStatus(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusVoReq productStatusVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProductStatus_call method_call = new updateProductStatus_call(originVo, productStatusVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProductStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ProductStatusVoReq productStatusVoReq;
      public updateProductStatus_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusVoReq productStatusVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productStatusVoReq = productStatusVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProductStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProductStatus_args args = new updateProductStatus_args();
        args.setOriginVo(originVo);
        args.setProductStatusVoReq(productStatusVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProductStatus();
      }
    }

    public void updateProductStatusBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProductStatusBatch_call method_call = new updateProductStatusBatch_call(originVo, productStatusBatchVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProductStatusBatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq;
      public updateProductStatusBatch_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productStatusBatchVoReq = productStatusBatchVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProductStatusBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProductStatusBatch_args args = new updateProductStatusBatch_args();
        args.setOriginVo(originVo);
        args.setProductStatusBatchVoReq(productStatusBatchVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProductStatusBatch();
      }
    }

    public void addOutletProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductVo outletProductVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOutletProduct_call method_call = new addOutletProduct_call(originVo, outletProductVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOutletProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.OutletProductVo outletProductVo;
      public addOutletProduct_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductVo outletProductVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.outletProductVo = outletProductVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOutletProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOutletProduct_args args = new addOutletProduct_args();
        args.setOriginVo(originVo);
        args.setOutletProductVo(outletProductVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AddOutletProductVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addOutletProduct();
      }
    }

    public void addH5OutletProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductDiscountVo outletProductDiscountVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addH5OutletProduct_call method_call = new addH5OutletProduct_call(originVo, outletProductDiscountVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addH5OutletProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.OutletProductDiscountVo outletProductDiscountVo;
      public addH5OutletProduct_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductDiscountVo outletProductDiscountVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.outletProductDiscountVo = outletProductDiscountVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addH5OutletProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addH5OutletProduct_args args = new addH5OutletProduct_args();
        args.setOriginVo(originVo);
        args.setOutletProductDiscountVo(outletProductDiscountVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AddOutletProductVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addH5OutletProduct();
      }
    }

    public void getOutletProduct(com.froad.thrift.vo.OutletProductVoReq outletProductVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletProduct_call method_call = new getOutletProduct_call(outletProductVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OutletProductVoReq outletProductVoReq;
      public getOutletProduct_call(com.froad.thrift.vo.OutletProductVoReq outletProductVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletProductVoReq = outletProductVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletProduct_args args = new getOutletProduct_args();
        args.setOutletProductVoReq(outletProductVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletProductVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletProduct();
      }
    }

    public void deleteOutletProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductVo outletProductVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteOutletProduct_call method_call = new deleteOutletProduct_call(originVo, outletProductVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteOutletProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.OutletProductVo outletProductVo;
      public deleteOutletProduct_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.OutletProductVo outletProductVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.outletProductVo = outletProductVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteOutletProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteOutletProduct_args args = new deleteOutletProduct_args();
        args.setOriginVo(originVo);
        args.setOutletProductVo(outletProductVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteOutletProduct();
      }
    }

    public void getOutletProductListByPage(com.froad.thrift.vo.OutletProductVo outletProductVo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutletProductListByPage_call method_call = new getOutletProductListByPage_call(outletProductVo, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutletProductListByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OutletProductVo outletProductVo;
      private com.froad.thrift.vo.PageVo pageVo;
      public getOutletProductListByPage_call(com.froad.thrift.vo.OutletProductVo outletProductVo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.outletProductVo = outletProductVo;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutletProductListByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutletProductListByPage_args args = new getOutletProductListByPage_args();
        args.setOutletProductVo(outletProductVo);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.OutletProductPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutletProductListByPage();
      }
    }

    public void getProductCommentList(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductCommentList_call method_call = new getProductCommentList_call(productCommentFilterReq, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductCommentList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq;
      private com.froad.thrift.vo.PageVo pageVo;
      public getProductCommentList_call(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCommentFilterReq = productCommentFilterReq;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductCommentList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductCommentList_args args = new getProductCommentList_args();
        args.setProductCommentFilterReq(productCommentFilterReq);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductCommentPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductCommentList();
      }
    }

    public void getProductCommentDetail(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductCommentDetail_call method_call = new getProductCommentDetail_call(productCommentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductCommentDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductCommentVo productCommentVo;
      public getProductCommentDetail_call(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCommentVo = productCommentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductCommentDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductCommentDetail_args args = new getProductCommentDetail_args();
        args.setProductCommentVo(productCommentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductCommentVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductCommentDetail();
      }
    }

    public void deleteProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteProductComment_call method_call = new deleteProductComment_call(productCommentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteProductComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductCommentVo productCommentVo;
      public deleteProductComment_call(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCommentVo = productCommentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteProductComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteProductComment_args args = new deleteProductComment_args();
        args.setProductCommentVo(productCommentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteProductComment();
      }
    }

    public void replayProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      replayProductComment_call method_call = new replayProductComment_call(productCommentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replayProductComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductCommentVo productCommentVo;
      public replayProductComment_call(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCommentVo = productCommentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("replayProductComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replayProductComment_args args = new replayProductComment_args();
        args.setProductCommentVo(productCommentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_replayProductComment();
      }
    }

    public void replayProductCommentBatch(List<com.froad.thrift.vo.ProductCommentVo> productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      replayProductCommentBatch_call method_call = new replayProductCommentBatch_call(productCommentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replayProductCommentBatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.froad.thrift.vo.ProductCommentVo> productCommentVo;
      public replayProductCommentBatch_call(List<com.froad.thrift.vo.ProductCommentVo> productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCommentVo = productCommentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("replayProductCommentBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replayProductCommentBatch_args args = new replayProductCommentBatch_args();
        args.setProductCommentVo(productCommentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_replayProductCommentBatch();
      }
    }

    public void addProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addProductComment_call method_call = new addProductComment_call(productCommentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addProductComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductCommentVo productCommentVo;
      public addProductComment_call(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCommentVo = productCommentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProductComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addProductComment_args args = new addProductComment_args();
        args.setProductCommentVo(productCommentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addProductComment();
      }
    }

    public void updateProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProductComment_call method_call = new updateProductComment_call(productCommentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProductComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductCommentVo productCommentVo;
      public updateProductComment_call(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCommentVo = productCommentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProductComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProductComment_args args = new updateProductComment_args();
        args.setProductCommentVo(productCommentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProductComment();
      }
    }

    public void queryProductComment(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryProductComment_call method_call = new queryProductComment_call(productCommentVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryProductComment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductCommentVo productCommentVo;
      public queryProductComment_call(com.froad.thrift.vo.ProductCommentVo productCommentVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCommentVo = productCommentVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryProductComment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryProductComment_args args = new queryProductComment_args();
        args.setProductCommentVo(productCommentVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductCommentVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryProductComment();
      }
    }

    public void queryProductComments(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryProductComments_call method_call = new queryProductComments_call(productCommentFilterReq, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryProductComments_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq;
      private com.froad.thrift.vo.PageVo pageVo;
      public queryProductComments_call(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCommentFilterReq = productCommentFilterReq;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryProductComments", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryProductComments_args args = new queryProductComments_args();
        args.setProductCommentFilterReq(productCommentFilterReq);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductCommentPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryProductComments();
      }
    }

    public void addProductActivties(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductRelateActivitiesVo relateActivities, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addProductActivties_call method_call = new addProductActivties_call(originVo, relateActivities, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addProductActivties_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ProductRelateActivitiesVo relateActivities;
      public addProductActivties_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductRelateActivitiesVo relateActivities, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.relateActivities = relateActivities;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProductActivties", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addProductActivties_args args = new addProductActivties_args();
        args.setOriginVo(originVo);
        args.setRelateActivities(relateActivities);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addProductActivties();
      }
    }

    public void addProductOutlets(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductRelateOutletVo outlets, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addProductOutlets_call method_call = new addProductOutlets_call(originVo, outlets, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addProductOutlets_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ProductRelateOutletVo outlets;
      public addProductOutlets_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductRelateOutletVo outlets, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.outlets = outlets;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProductOutlets", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addProductOutlets_args args = new addProductOutlets_args();
        args.setOriginVo(originVo);
        args.setOutlets(outlets);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addProductOutlets();
      }
    }

    public void getProductAreaOutlets(com.froad.thrift.vo.ProductAreaVo productAreaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductAreaOutlets_call method_call = new getProductAreaOutlets_call(productAreaVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductAreaOutlets_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductAreaVo productAreaVo;
      public getProductAreaOutlets_call(com.froad.thrift.vo.ProductAreaVo productAreaVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productAreaVo = productAreaVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductAreaOutlets", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductAreaOutlets_args args = new getProductAreaOutlets_args();
        args.setProductAreaVo(productAreaVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.ProductAreaVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductAreaOutlets();
      }
    }

    public void invalidProductBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      invalidProductBatch_call method_call = new invalidProductBatch_call(originVo, invalidProductBatchVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class invalidProductBatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo;
      public invalidProductBatch_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.invalidProductBatchVo = invalidProductBatchVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("invalidProductBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        invalidProductBatch_args args = new invalidProductBatch_args();
        args.setOriginVo(originVo);
        args.setInvalidProductBatchVo(invalidProductBatchVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_invalidProductBatch();
      }
    }

    public void validMerchantProductBatch(String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      validMerchantProductBatch_call method_call = new validMerchantProductBatch_call(merchantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class validMerchantProductBatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      public validMerchantProductBatch_call(String merchantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("validMerchantProductBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        validMerchantProductBatch_args args = new validMerchantProductBatch_args();
        args.setMerchantId(merchantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_validMerchantProductBatch();
      }
    }

    public void endisableProductBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo, String flag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      endisableProductBatch_call method_call = new endisableProductBatch_call(originVo, invalidProductBatchVo, flag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class endisableProductBatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo;
      private String flag;
      public endisableProductBatch_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo, String flag, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.invalidProductBatchVo = invalidProductBatchVo;
        this.flag = flag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("endisableProductBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        endisableProductBatch_args args = new endisableProductBatch_args();
        args.setOriginVo(originVo);
        args.setInvalidProductBatchVo(invalidProductBatchVo);
        args.setFlag(flag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_endisableProductBatch();
      }
    }

    public void queryProductCommentCount(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryProductCommentCount_call method_call = new queryProductCommentCount_call(productCommentFilterReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryProductCommentCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq;
      public queryProductCommentCount_call(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCommentFilterReq = productCommentFilterReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryProductCommentCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryProductCommentCount_args args = new queryProductCommentCount_args();
        args.setProductCommentFilterReq(productCommentFilterReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryProductCommentCount();
      }
    }

    public void deleteProductBatch(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteProductBatch_call method_call = new deleteProductBatch_call(originVo, productStatusBatchVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteProductBatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq;
      public deleteProductBatch_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productStatusBatchVoReq = productStatusBatchVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteProductBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteProductBatch_args args = new deleteProductBatch_args();
        args.setOriginVo(originVo);
        args.setProductStatusBatchVoReq(productStatusBatchVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteProductBatch();
      }
    }

    public void getProductStatus(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductStatus_call method_call = new getProductStatus_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getProductStatus_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductStatus_args args = new getProductStatus_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.ProductStatusVoReq> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductStatus();
      }
    }

    public void updateAuditProductBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductAuditVo> productAuditVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAuditProductBatch_call method_call = new updateAuditProductBatch_call(originVo, productAuditVoList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAuditProductBatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private List<com.froad.thrift.vo.ProductAuditVo> productAuditVoList;
      public updateAuditProductBatch_call(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductAuditVo> productAuditVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productAuditVoList = productAuditVoList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAuditProductBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAuditProductBatch_args args = new updateAuditProductBatch_args();
        args.setOriginVo(originVo);
        args.setProductAuditVoList(productAuditVoList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateAuditProductBatch();
      }
    }

    public void getProductBaseInfo(String clientId, List<com.froad.thrift.vo.ProductStoreFilterVo> products, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductBaseInfo_call method_call = new getProductBaseInfo_call(clientId, products, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductBaseInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private List<com.froad.thrift.vo.ProductStoreFilterVo> products;
      public getProductBaseInfo_call(String clientId, List<com.froad.thrift.vo.ProductStoreFilterVo> products, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.products = products;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductBaseInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductBaseInfo_args args = new getProductBaseInfo_args();
        args.setClientId(clientId);
        args.setProducts(products);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.ProductBaseInfoVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductBaseInfo();
      }
    }

    public void isExitsStoreProductInfo(String clientId, long memberCode, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isExitsStoreProductInfo_call method_call = new isExitsStoreProductInfo_call(clientId, memberCode, productId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isExitsStoreProductInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private long memberCode;
      private String productId;
      public isExitsStoreProductInfo_call(String clientId, long memberCode, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.memberCode = memberCode;
        this.productId = productId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isExitsStoreProductInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isExitsStoreProductInfo_args args = new isExitsStoreProductInfo_args();
        args.setClientId(clientId);
        args.setMemberCode(memberCode);
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isExitsStoreProductInfo();
      }
    }

    public void addStoreProductInfoVo(String clientId, long memberCode, com.froad.thrift.vo.StoreProductInfoVo storeProductInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addStoreProductInfoVo_call method_call = new addStoreProductInfoVo_call(clientId, memberCode, storeProductInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addStoreProductInfoVo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private long memberCode;
      private com.froad.thrift.vo.StoreProductInfoVo storeProductInfoVo;
      public addStoreProductInfoVo_call(String clientId, long memberCode, com.froad.thrift.vo.StoreProductInfoVo storeProductInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.memberCode = memberCode;
        this.storeProductInfoVo = storeProductInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addStoreProductInfoVo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addStoreProductInfoVo_args args = new addStoreProductInfoVo_args();
        args.setClientId(clientId);
        args.setMemberCode(memberCode);
        args.setStoreProductInfoVo(storeProductInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addStoreProductInfoVo();
      }
    }

    public void deleteStoreProductInfoVo(String clientId, long memberCode, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteStoreProductInfoVo_call method_call = new deleteStoreProductInfoVo_call(clientId, memberCode, productId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteStoreProductInfoVo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private long memberCode;
      private String productId;
      public deleteStoreProductInfoVo_call(String clientId, long memberCode, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.memberCode = memberCode;
        this.productId = productId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteStoreProductInfoVo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteStoreProductInfoVo_args args = new deleteStoreProductInfoVo_args();
        args.setClientId(clientId);
        args.setMemberCode(memberCode);
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteStoreProductInfoVo();
      }
    }

    public void getStoreProductInfoVo(String clientId, long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStoreProductInfoVo_call method_call = new getStoreProductInfoVo_call(clientId, memberCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStoreProductInfoVo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private long memberCode;
      public getStoreProductInfoVo_call(String clientId, long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.memberCode = memberCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStoreProductInfoVo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStoreProductInfoVo_args args = new getStoreProductInfoVo_args();
        args.setClientId(clientId);
        args.setMemberCode(memberCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.StoreProductInfoVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStoreProductInfoVo();
      }
    }

    public void getStoreProductInfoByPage(com.froad.thrift.vo.PageVo page, String clientId, long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStoreProductInfoByPage_call method_call = new getStoreProductInfoByPage_call(page, clientId, memberCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStoreProductInfoByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private String clientId;
      private long memberCode;
      public getStoreProductInfoByPage_call(com.froad.thrift.vo.PageVo page, String clientId, long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.clientId = clientId;
        this.memberCode = memberCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStoreProductInfoByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStoreProductInfoByPage_args args = new getStoreProductInfoByPage_args();
        args.setPage(page);
        args.setClientId(clientId);
        args.setMemberCode(memberCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.StoreProductInfoPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStoreProductInfoByPage();
      }
    }

    public void addProductBatch(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductInfoVo> productInfoVos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addProductBatch_call method_call = new addProductBatch_call(originVo, productInfoVos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addProductBatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private List<com.froad.thrift.vo.ProductInfoVo> productInfoVos;
      public addProductBatch_call(com.froad.thrift.vo.OriginVo originVo, List<com.froad.thrift.vo.ProductInfoVo> productInfoVos, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productInfoVos = productInfoVos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProductBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addProductBatch_args args = new addProductBatch_args();
        args.setOriginVo(originVo);
        args.setProductInfoVos(productInfoVos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.AddProductVoRes> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addProductBatch();
      }
    }

    public void modifySenseWord(int opt, String word, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifySenseWord_call method_call = new modifySenseWord_call(opt, word, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifySenseWord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int opt;
      private String word;
      public modifySenseWord_call(int opt, String word, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.opt = opt;
        this.word = word;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifySenseWord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifySenseWord_args args = new modifySenseWord_args();
        args.setOpt(opt);
        args.setWord(word);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_modifySenseWord();
      }
    }

    public void addActivtyToProducts(com.froad.thrift.vo.OriginVo originVo, long activityId, List<String> productIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addActivtyToProducts_call method_call = new addActivtyToProducts_call(originVo, activityId, productIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addActivtyToProducts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private long activityId;
      private List<String> productIds;
      public addActivtyToProducts_call(com.froad.thrift.vo.OriginVo originVo, long activityId, List<String> productIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.activityId = activityId;
        this.productIds = productIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addActivtyToProducts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addActivtyToProducts_args args = new addActivtyToProducts_args();
        args.setOriginVo(originVo);
        args.setActivityId(activityId);
        args.setProductIds(productIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addActivtyToProducts();
      }
    }

    public void removeActivtyFromProducts(com.froad.thrift.vo.OriginVo originVo, long activtyId, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeActivtyFromProducts_call method_call = new removeActivtyFromProducts_call(originVo, activtyId, productId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeActivtyFromProducts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private long activtyId;
      private String productId;
      public removeActivtyFromProducts_call(com.froad.thrift.vo.OriginVo originVo, long activtyId, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.activtyId = activtyId;
        this.productId = productId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeActivtyFromProducts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeActivtyFromProducts_args args = new removeActivtyFromProducts_args();
        args.setOriginVo(originVo);
        args.setActivtyId(activtyId);
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeActivtyFromProducts();
      }
    }

    public void findActivtyProductsByPage(long activtyId, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findActivtyProductsByPage_call method_call = new findActivtyProductsByPage_call(activtyId, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findActivtyProductsByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long activtyId;
      private com.froad.thrift.vo.PageVo pageVo;
      public findActivtyProductsByPage_call(long activtyId, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.activtyId = activtyId;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findActivtyProductsByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findActivtyProductsByPage_args args = new findActivtyProductsByPage_args();
        args.setActivtyId(activtyId);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ActivityProductPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findActivtyProductsByPage();
      }
    }

    public void findProductsForActivtyByPage(long activtyId, String name, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findProductsForActivtyByPage_call method_call = new findProductsForActivtyByPage_call(activtyId, name, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findProductsForActivtyByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long activtyId;
      private String name;
      private com.froad.thrift.vo.PageVo pageVo;
      public findProductsForActivtyByPage_call(long activtyId, String name, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.activtyId = activtyId;
        this.name = name;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findProductsForActivtyByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findProductsForActivtyByPage_args args = new findProductsForActivtyByPage_args();
        args.setActivtyId(activtyId);
        args.setName(name);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ActivityProductPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findProductsForActivtyByPage();
      }
    }

    public void findProductsForAreaByPage(String productId, long cityId, String clientId, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findProductsForAreaByPage_call method_call = new findProductsForAreaByPage_call(productId, cityId, clientId, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findProductsForAreaByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productId;
      private long cityId;
      private String clientId;
      private com.froad.thrift.vo.PageVo pageVo;
      public findProductsForAreaByPage_call(String productId, long cityId, String clientId, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
        this.cityId = cityId;
        this.clientId = clientId;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findProductsForAreaByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findProductsForAreaByPage_args args = new findProductsForAreaByPage_args();
        args.setProductId(productId);
        args.setCityId(cityId);
        args.setClientId(clientId);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductOutletPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findProductsForAreaByPage();
      }
    }

    public void findAreaForCityByList(String productId, long cityId, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAreaForCityByList_call method_call = new findAreaForCityByList_call(productId, cityId, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAreaForCityByList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productId;
      private long cityId;
      private String clientId;
      public findAreaForCityByList_call(String productId, long cityId, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
        this.cityId = cityId;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAreaForCityByList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAreaForCityByList_args args = new findAreaForCityByList_args();
        args.setProductId(productId);
        args.setCityId(cityId);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.AreaVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAreaForCityByList();
      }
    }

    public void queryVipPresellProducts(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryVipPresellProducts_call method_call = new queryVipPresellProducts_call(productFilterVoReq, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryVipPresellProducts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq;
      private com.froad.thrift.vo.PageVo pageVo;
      public queryVipPresellProducts_call(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productFilterVoReq = productFilterVoReq;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryVipPresellProducts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryVipPresellProducts_args args = new queryVipPresellProducts_args();
        args.setProductFilterVoReq(productFilterVoReq);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductBriefPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryVipPresellProducts();
      }
    }

    public void queryGroupProducts(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryGroupProducts_call method_call = new queryGroupProducts_call(filterVo, filedSorts, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryGroupProducts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.QueryProductFilterVo filterVo;
      private List<com.froad.thrift.vo.FiledSort> filedSorts;
      private com.froad.thrift.vo.PageVo pageVo;
      public queryGroupProducts_call(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filterVo = filterVo;
        this.filedSorts = filedSorts;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryGroupProducts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryGroupProducts_args args = new queryGroupProducts_args();
        args.setFilterVo(filterVo);
        args.setFiledSorts(filedSorts);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.GroupProductPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryGroupProducts();
      }
    }

    public void queryMerchantProducts(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryMerchantProducts_call method_call = new queryMerchantProducts_call(filterVo, filedSorts, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryMerchantProducts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.QueryProductFilterVo filterVo;
      private List<com.froad.thrift.vo.FiledSort> filedSorts;
      private com.froad.thrift.vo.PageVo pageVo;
      public queryMerchantProducts_call(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filterVo = filterVo;
        this.filedSorts = filedSorts;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryMerchantProducts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryMerchantProducts_args args = new queryMerchantProducts_args();
        args.setFilterVo(filterVo);
        args.setFiledSorts(filedSorts);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantProductPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryMerchantProducts();
      }
    }

    public void findUrlCodeByList(List<com.froad.thrift.vo.ProductVo> productList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUrlCodeByList_call method_call = new findUrlCodeByList_call(productList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUrlCodeByList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.froad.thrift.vo.ProductVo> productList;
      public findUrlCodeByList_call(List<com.froad.thrift.vo.ProductVo> productList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productList = productList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUrlCodeByList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUrlCodeByList_args args = new findUrlCodeByList_args();
        args.setProductList(productList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.ProductVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUrlCodeByList();
      }
    }

    public void downProducts(com.froad.thrift.vo.ProductSearchVo productSearchVo, String type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      downProducts_call method_call = new downProducts_call(productSearchVo, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class downProducts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductSearchVo productSearchVo;
      private String type;
      public downProducts_call(com.froad.thrift.vo.ProductSearchVo productSearchVo, String type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productSearchVo = productSearchVo;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("downProducts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        downProducts_args args = new downProducts_args();
        args.setProductSearchVo(productSearchVo);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ExportResultRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_downProducts();
      }
    }

    public void searchProductByType(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchProductByType_call method_call = new searchProductByType_call(filterVo, filedSorts, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchProductByType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.QueryProductFilterVo filterVo;
      private List<com.froad.thrift.vo.FiledSort> filedSorts;
      private com.froad.thrift.vo.PageVo pageVo;
      public searchProductByType_call(com.froad.thrift.vo.QueryProductFilterVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filterVo = filterVo;
        this.filedSorts = filedSorts;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchProductByType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchProductByType_args args = new searchProductByType_args();
        args.setFilterVo(filterVo);
        args.setFiledSorts(filedSorts);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchProductByType();
      }
    }

    public void updateGroupProductByOutlet(String clientId, String type, com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateGroupProductByOutlet_call method_call = new updateGroupProductByOutlet_call(clientId, type, outletVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateGroupProductByOutlet_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String type;
      private com.froad.thrift.vo.OutletVo outletVo;
      public updateGroupProductByOutlet_call(String clientId, String type, com.froad.thrift.vo.OutletVo outletVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.type = type;
        this.outletVo = outletVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateGroupProductByOutlet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateGroupProductByOutlet_args args = new updateGroupProductByOutlet_args();
        args.setClientId(clientId);
        args.setType(type);
        args.setOutletVo(outletVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateGroupProductByOutlet();
      }
    }

    public void updateHisGroupGoodsOutlets(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateHisGroupGoodsOutlets_call method_call = new updateHisGroupGoodsOutlets_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateHisGroupGoodsOutlets_call extends org.apache.thrift.async.TAsyncMethodCall {
      public updateHisGroupGoodsOutlets_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateHisGroupGoodsOutlets", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateHisGroupGoodsOutlets_args args = new updateHisGroupGoodsOutlets_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateHisGroupGoodsOutlets();
      }
    }

    public void autoOffShelfProductSaleEnd(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      autoOffShelfProductSaleEnd_call method_call = new autoOffShelfProductSaleEnd_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class autoOffShelfProductSaleEnd_call extends org.apache.thrift.async.TAsyncMethodCall {
      public autoOffShelfProductSaleEnd_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("autoOffShelfProductSaleEnd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        autoOffShelfProductSaleEnd_args args = new autoOffShelfProductSaleEnd_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_autoOffShelfProductSaleEnd();
      }
    }

    public void findGoodsByPage(com.froad.thrift.vo.ProductFilterVo productFilterVo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findGoodsByPage_call method_call = new findGoodsByPage_call(productFilterVo, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findGoodsByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductFilterVo productFilterVo;
      private com.froad.thrift.vo.PageVo pageVo;
      public findGoodsByPage_call(com.froad.thrift.vo.ProductFilterVo productFilterVo, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productFilterVo = productFilterVo;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findGoodsByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findGoodsByPage_args args = new findGoodsByPage_args();
        args.setProductFilterVo(productFilterVo);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductListPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findGoodsByPage();
      }
    }

    public void addGoods(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.GoodsInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addGoods_call method_call = new addGoods_call(originVo, productInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addGoods_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.GoodsInfoVo productInfoVo;
      public addGoods_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.GoodsInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productInfoVo = productInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addGoods", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addGoods_args args = new addGoods_args();
        args.setOriginVo(originVo);
        args.setProductInfoVo(productInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AddProductVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addGoods();
      }
    }

    public void updateGoods(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.GoodsInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateGoods_call method_call = new updateGoods_call(originVo, productInfoVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateGoods_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.GoodsInfoVo productInfoVo;
      public updateGoods_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.GoodsInfoVo productInfoVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productInfoVo = productInfoVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateGoods", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateGoods_args args = new updateGoods_args();
        args.setOriginVo(originVo);
        args.setProductInfoVo(productInfoVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateGoods();
      }
    }

    public void getGoodsDetail(String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGoodsDetail_call method_call = new getGoodsDetail_call(productId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGoodsDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productId;
      public getGoodsDetail_call(String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGoodsDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGoodsDetail_args args = new getGoodsDetail_args();
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.GoodsInfoVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGoodsDetail();
      }
    }

    public void updateGoodsStatusOn(com.froad.thrift.vo.OriginVo originVo, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateGoodsStatusOn_call method_call = new updateGoodsStatusOn_call(originVo, productId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateGoodsStatusOn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String productId;
      public updateGoodsStatusOn_call(com.froad.thrift.vo.OriginVo originVo, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productId = productId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateGoodsStatusOn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateGoodsStatusOn_args args = new updateGoodsStatusOn_args();
        args.setOriginVo(originVo);
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateGoodsStatusOn();
      }
    }

    public void updateGoodsStatusOff(com.froad.thrift.vo.OriginVo originVo, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateGoodsStatusOff_call method_call = new updateGoodsStatusOff_call(originVo, productId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateGoodsStatusOff_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String productId;
      public updateGoodsStatusOff_call(com.froad.thrift.vo.OriginVo originVo, String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.productId = productId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateGoodsStatusOff", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateGoodsStatusOff_args args = new updateGoodsStatusOff_args();
        args.setOriginVo(originVo);
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateGoodsStatusOff();
      }
    }

    public void queryBoutiqueGoods(com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo filterVo, com.froad.thrift.vo.FiledSort filedSort, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBoutiqueGoods_call method_call = new queryBoutiqueGoods_call(filterVo, filedSort, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBoutiqueGoods_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo filterVo;
      private com.froad.thrift.vo.FiledSort filedSort;
      private com.froad.thrift.vo.PageVo pageVo;
      public queryBoutiqueGoods_call(com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo filterVo, com.froad.thrift.vo.FiledSort filedSort, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filterVo = filterVo;
        this.filedSort = filedSort;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBoutiqueGoods", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBoutiqueGoods_args args = new queryBoutiqueGoods_args();
        args.setFilterVo(filterVo);
        args.setFiledSort(filedSort);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.BoutiqueProductPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBoutiqueGoods();
      }
    }

    public void queryBoutiqueGoodsDetail(String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBoutiqueGoodsDetail_call method_call = new queryBoutiqueGoodsDetail_call(productId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBoutiqueGoodsDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productId;
      public queryBoutiqueGoodsDetail_call(String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBoutiqueGoodsDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBoutiqueGoodsDetail_args args = new queryBoutiqueGoodsDetail_args();
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.BoutiqueGoodsInfoVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBoutiqueGoodsDetail();
      }
    }

    public void getProductDetail(String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductDetail_call method_call = new getProductDetail_call(productId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productId;
      public getProductDetail_call(String productId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductDetail_args args = new getProductDetail_args();
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductDetailInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductDetail();
      }
    }

    public void findProductsByPage(com.froad.thrift.vo.ProductFilterReqVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findProductsByPage_call method_call = new findProductsByPage_call(filterVo, filedSorts, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findProductsByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ProductFilterReqVo filterVo;
      private List<com.froad.thrift.vo.FiledSort> filedSorts;
      private com.froad.thrift.vo.PageVo pageVo;
      public findProductsByPage_call(com.froad.thrift.vo.ProductFilterReqVo filterVo, List<com.froad.thrift.vo.FiledSort> filedSorts, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filterVo = filterVo;
        this.filedSorts = filedSorts;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findProductsByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findProductsByPage_args args = new findProductsByPage_args();
        args.setFilterVo(filterVo);
        args.setFiledSorts(filedSorts);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findProductsByPage();
      }
    }

    public void updateProductAuditState(List<com.froad.thrift.vo.EditProductAuditStateVo> productAuditStates, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProductAuditState_call method_call = new updateProductAuditState_call(productAuditStates, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProductAuditState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.froad.thrift.vo.EditProductAuditStateVo> productAuditStates;
      public updateProductAuditState_call(List<com.froad.thrift.vo.EditProductAuditStateVo> productAuditStates, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productAuditStates = productAuditStates;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProductAuditState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProductAuditState_args args = new updateProductAuditState_args();
        args.setProductAuditStates(productAuditStates);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProductAuditState();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addProduct", new addProduct());
      processMap.put("deleteProduct", new deleteProduct());
      processMap.put("updateProduct", new updateProduct());
      processMap.put("updateProductInfo", new updateProductInfo());
      processMap.put("getMerchantProductDetail", new getMerchantProductDetail());
      processMap.put("isProductExist", new isProductExist());
      processMap.put("findMerchantProductsByPage", new findMerchantProductsByPage());
      processMap.put("queryProducts", new queryProducts());
      processMap.put("queryProductDetail", new queryProductDetail());
      processMap.put("updateProductStatus", new updateProductStatus());
      processMap.put("updateProductStatusBatch", new updateProductStatusBatch());
      processMap.put("addOutletProduct", new addOutletProduct());
      processMap.put("addH5OutletProduct", new addH5OutletProduct());
      processMap.put("getOutletProduct", new getOutletProduct());
      processMap.put("deleteOutletProduct", new deleteOutletProduct());
      processMap.put("getOutletProductListByPage", new getOutletProductListByPage());
      processMap.put("getProductCommentList", new getProductCommentList());
      processMap.put("getProductCommentDetail", new getProductCommentDetail());
      processMap.put("deleteProductComment", new deleteProductComment());
      processMap.put("replayProductComment", new replayProductComment());
      processMap.put("replayProductCommentBatch", new replayProductCommentBatch());
      processMap.put("addProductComment", new addProductComment());
      processMap.put("updateProductComment", new updateProductComment());
      processMap.put("queryProductComment", new queryProductComment());
      processMap.put("queryProductComments", new queryProductComments());
      processMap.put("addProductActivties", new addProductActivties());
      processMap.put("addProductOutlets", new addProductOutlets());
      processMap.put("getProductAreaOutlets", new getProductAreaOutlets());
      processMap.put("invalidProductBatch", new invalidProductBatch());
      processMap.put("validMerchantProductBatch", new validMerchantProductBatch());
      processMap.put("endisableProductBatch", new endisableProductBatch());
      processMap.put("queryProductCommentCount", new queryProductCommentCount());
      processMap.put("deleteProductBatch", new deleteProductBatch());
      processMap.put("getProductStatus", new getProductStatus());
      processMap.put("updateAuditProductBatch", new updateAuditProductBatch());
      processMap.put("getProductBaseInfo", new getProductBaseInfo());
      processMap.put("isExitsStoreProductInfo", new isExitsStoreProductInfo());
      processMap.put("addStoreProductInfoVo", new addStoreProductInfoVo());
      processMap.put("deleteStoreProductInfoVo", new deleteStoreProductInfoVo());
      processMap.put("getStoreProductInfoVo", new getStoreProductInfoVo());
      processMap.put("getStoreProductInfoByPage", new getStoreProductInfoByPage());
      processMap.put("addProductBatch", new addProductBatch());
      processMap.put("modifySenseWord", new modifySenseWord());
      processMap.put("addActivtyToProducts", new addActivtyToProducts());
      processMap.put("removeActivtyFromProducts", new removeActivtyFromProducts());
      processMap.put("findActivtyProductsByPage", new findActivtyProductsByPage());
      processMap.put("findProductsForActivtyByPage", new findProductsForActivtyByPage());
      processMap.put("findProductsForAreaByPage", new findProductsForAreaByPage());
      processMap.put("findAreaForCityByList", new findAreaForCityByList());
      processMap.put("queryVipPresellProducts", new queryVipPresellProducts());
      processMap.put("queryGroupProducts", new queryGroupProducts());
      processMap.put("queryMerchantProducts", new queryMerchantProducts());
      processMap.put("findUrlCodeByList", new findUrlCodeByList());
      processMap.put("downProducts", new downProducts());
      processMap.put("searchProductByType", new searchProductByType());
      processMap.put("updateGroupProductByOutlet", new updateGroupProductByOutlet());
      processMap.put("updateHisGroupGoodsOutlets", new updateHisGroupGoodsOutlets());
      processMap.put("autoOffShelfProductSaleEnd", new autoOffShelfProductSaleEnd());
      processMap.put("findGoodsByPage", new findGoodsByPage());
      processMap.put("addGoods", new addGoods());
      processMap.put("updateGoods", new updateGoods());
      processMap.put("getGoodsDetail", new getGoodsDetail());
      processMap.put("updateGoodsStatusOn", new updateGoodsStatusOn());
      processMap.put("updateGoodsStatusOff", new updateGoodsStatusOff());
      processMap.put("queryBoutiqueGoods", new queryBoutiqueGoods());
      processMap.put("queryBoutiqueGoodsDetail", new queryBoutiqueGoodsDetail());
      processMap.put("getProductDetail", new getProductDetail());
      processMap.put("findProductsByPage", new findProductsByPage());
      processMap.put("updateProductAuditState", new updateProductAuditState());
      return processMap;
    }

    public static class addProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProduct_args> {
      public addProduct() {
        super("addProduct");
      }

      public addProduct_args getEmptyArgsInstance() {
        return new addProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addProduct_result getResult(I iface, addProduct_args args) throws org.apache.thrift.TException {
        addProduct_result result = new addProduct_result();
        result.success = iface.addProduct(args.originVo, args.productInfoVo);
        return result;
      }
    }

    public static class deleteProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteProduct_args> {
      public deleteProduct() {
        super("deleteProduct");
      }

      public deleteProduct_args getEmptyArgsInstance() {
        return new deleteProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteProduct_result getResult(I iface, deleteProduct_args args) throws org.apache.thrift.TException {
        deleteProduct_result result = new deleteProduct_result();
        result.success = iface.deleteProduct(args.originVo, args.productVoReq);
        return result;
      }
    }

    public static class updateProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProduct_args> {
      public updateProduct() {
        super("updateProduct");
      }

      public updateProduct_args getEmptyArgsInstance() {
        return new updateProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateProduct_result getResult(I iface, updateProduct_args args) throws org.apache.thrift.TException {
        updateProduct_result result = new updateProduct_result();
        result.success = iface.updateProduct(args.originVo, args.productInfoVo);
        return result;
      }
    }

    public static class updateProductInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProductInfo_args> {
      public updateProductInfo() {
        super("updateProductInfo");
      }

      public updateProductInfo_args getEmptyArgsInstance() {
        return new updateProductInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateProductInfo_result getResult(I iface, updateProductInfo_args args) throws org.apache.thrift.TException {
        updateProductInfo_result result = new updateProductInfo_result();
        result.success = iface.updateProductInfo(args.originVo, args.productBaseVo);
        return result;
      }
    }

    public static class getMerchantProductDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantProductDetail_args> {
      public getMerchantProductDetail() {
        super("getMerchantProductDetail");
      }

      public getMerchantProductDetail_args getEmptyArgsInstance() {
        return new getMerchantProductDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantProductDetail_result getResult(I iface, getMerchantProductDetail_args args) throws org.apache.thrift.TException {
        getMerchantProductDetail_result result = new getMerchantProductDetail_result();
        result.success = iface.getMerchantProductDetail(args.productVoReq);
        return result;
      }
    }

    public static class isProductExist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isProductExist_args> {
      public isProductExist() {
        super("isProductExist");
      }

      public isProductExist_args getEmptyArgsInstance() {
        return new isProductExist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isProductExist_result getResult(I iface, isProductExist_args args) throws org.apache.thrift.TException {
        isProductExist_result result = new isProductExist_result();
        result.success = iface.isProductExist(args.productExistVoReq);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findMerchantProductsByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findMerchantProductsByPage_args> {
      public findMerchantProductsByPage() {
        super("findMerchantProductsByPage");
      }

      public findMerchantProductsByPage_args getEmptyArgsInstance() {
        return new findMerchantProductsByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findMerchantProductsByPage_result getResult(I iface, findMerchantProductsByPage_args args) throws org.apache.thrift.TException {
        findMerchantProductsByPage_result result = new findMerchantProductsByPage_result();
        result.success = iface.findMerchantProductsByPage(args.productFilterVoReq, args.pageVo);
        return result;
      }
    }

    public static class queryProducts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryProducts_args> {
      public queryProducts() {
        super("queryProducts");
      }

      public queryProducts_args getEmptyArgsInstance() {
        return new queryProducts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryProducts_result getResult(I iface, queryProducts_args args) throws org.apache.thrift.TException {
        queryProducts_result result = new queryProducts_result();
        result.success = iface.queryProducts(args.productFilterVoReq, args.pageVo);
        return result;
      }
    }

    public static class queryProductDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryProductDetail_args> {
      public queryProductDetail() {
        super("queryProductDetail");
      }

      public queryProductDetail_args getEmptyArgsInstance() {
        return new queryProductDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryProductDetail_result getResult(I iface, queryProductDetail_args args) throws org.apache.thrift.TException {
        queryProductDetail_result result = new queryProductDetail_result();
        result.success = iface.queryProductDetail(args.productVoReq);
        return result;
      }
    }

    public static class updateProductStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProductStatus_args> {
      public updateProductStatus() {
        super("updateProductStatus");
      }

      public updateProductStatus_args getEmptyArgsInstance() {
        return new updateProductStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateProductStatus_result getResult(I iface, updateProductStatus_args args) throws org.apache.thrift.TException {
        updateProductStatus_result result = new updateProductStatus_result();
        result.success = iface.updateProductStatus(args.originVo, args.productStatusVoReq);
        return result;
      }
    }

    public static class updateProductStatusBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProductStatusBatch_args> {
      public updateProductStatusBatch() {
        super("updateProductStatusBatch");
      }

      public updateProductStatusBatch_args getEmptyArgsInstance() {
        return new updateProductStatusBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateProductStatusBatch_result getResult(I iface, updateProductStatusBatch_args args) throws org.apache.thrift.TException {
        updateProductStatusBatch_result result = new updateProductStatusBatch_result();
        result.success = iface.updateProductStatusBatch(args.originVo, args.productStatusBatchVoReq);
        return result;
      }
    }

    public static class addOutletProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOutletProduct_args> {
      public addOutletProduct() {
        super("addOutletProduct");
      }

      public addOutletProduct_args getEmptyArgsInstance() {
        return new addOutletProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOutletProduct_result getResult(I iface, addOutletProduct_args args) throws org.apache.thrift.TException {
        addOutletProduct_result result = new addOutletProduct_result();
        result.success = iface.addOutletProduct(args.originVo, args.outletProductVo);
        return result;
      }
    }

    public static class addH5OutletProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addH5OutletProduct_args> {
      public addH5OutletProduct() {
        super("addH5OutletProduct");
      }

      public addH5OutletProduct_args getEmptyArgsInstance() {
        return new addH5OutletProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addH5OutletProduct_result getResult(I iface, addH5OutletProduct_args args) throws org.apache.thrift.TException {
        addH5OutletProduct_result result = new addH5OutletProduct_result();
        result.success = iface.addH5OutletProduct(args.originVo, args.outletProductDiscountVo);
        return result;
      }
    }

    public static class getOutletProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletProduct_args> {
      public getOutletProduct() {
        super("getOutletProduct");
      }

      public getOutletProduct_args getEmptyArgsInstance() {
        return new getOutletProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletProduct_result getResult(I iface, getOutletProduct_args args) throws org.apache.thrift.TException {
        getOutletProduct_result result = new getOutletProduct_result();
        result.success = iface.getOutletProduct(args.outletProductVoReq);
        return result;
      }
    }

    public static class deleteOutletProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteOutletProduct_args> {
      public deleteOutletProduct() {
        super("deleteOutletProduct");
      }

      public deleteOutletProduct_args getEmptyArgsInstance() {
        return new deleteOutletProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteOutletProduct_result getResult(I iface, deleteOutletProduct_args args) throws org.apache.thrift.TException {
        deleteOutletProduct_result result = new deleteOutletProduct_result();
        result.success = iface.deleteOutletProduct(args.originVo, args.outletProductVo);
        return result;
      }
    }

    public static class getOutletProductListByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutletProductListByPage_args> {
      public getOutletProductListByPage() {
        super("getOutletProductListByPage");
      }

      public getOutletProductListByPage_args getEmptyArgsInstance() {
        return new getOutletProductListByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutletProductListByPage_result getResult(I iface, getOutletProductListByPage_args args) throws org.apache.thrift.TException {
        getOutletProductListByPage_result result = new getOutletProductListByPage_result();
        result.success = iface.getOutletProductListByPage(args.outletProductVo, args.pageVo);
        return result;
      }
    }

    public static class getProductCommentList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductCommentList_args> {
      public getProductCommentList() {
        super("getProductCommentList");
      }

      public getProductCommentList_args getEmptyArgsInstance() {
        return new getProductCommentList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductCommentList_result getResult(I iface, getProductCommentList_args args) throws org.apache.thrift.TException {
        getProductCommentList_result result = new getProductCommentList_result();
        result.success = iface.getProductCommentList(args.productCommentFilterReq, args.pageVo);
        return result;
      }
    }

    public static class getProductCommentDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductCommentDetail_args> {
      public getProductCommentDetail() {
        super("getProductCommentDetail");
      }

      public getProductCommentDetail_args getEmptyArgsInstance() {
        return new getProductCommentDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductCommentDetail_result getResult(I iface, getProductCommentDetail_args args) throws org.apache.thrift.TException {
        getProductCommentDetail_result result = new getProductCommentDetail_result();
        result.success = iface.getProductCommentDetail(args.productCommentVo);
        return result;
      }
    }

    public static class deleteProductComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteProductComment_args> {
      public deleteProductComment() {
        super("deleteProductComment");
      }

      public deleteProductComment_args getEmptyArgsInstance() {
        return new deleteProductComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteProductComment_result getResult(I iface, deleteProductComment_args args) throws org.apache.thrift.TException {
        deleteProductComment_result result = new deleteProductComment_result();
        result.success = iface.deleteProductComment(args.productCommentVo);
        return result;
      }
    }

    public static class replayProductComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, replayProductComment_args> {
      public replayProductComment() {
        super("replayProductComment");
      }

      public replayProductComment_args getEmptyArgsInstance() {
        return new replayProductComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public replayProductComment_result getResult(I iface, replayProductComment_args args) throws org.apache.thrift.TException {
        replayProductComment_result result = new replayProductComment_result();
        result.success = iface.replayProductComment(args.productCommentVo);
        return result;
      }
    }

    public static class replayProductCommentBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, replayProductCommentBatch_args> {
      public replayProductCommentBatch() {
        super("replayProductCommentBatch");
      }

      public replayProductCommentBatch_args getEmptyArgsInstance() {
        return new replayProductCommentBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public replayProductCommentBatch_result getResult(I iface, replayProductCommentBatch_args args) throws org.apache.thrift.TException {
        replayProductCommentBatch_result result = new replayProductCommentBatch_result();
        result.success = iface.replayProductCommentBatch(args.productCommentVo);
        return result;
      }
    }

    public static class addProductComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProductComment_args> {
      public addProductComment() {
        super("addProductComment");
      }

      public addProductComment_args getEmptyArgsInstance() {
        return new addProductComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addProductComment_result getResult(I iface, addProductComment_args args) throws org.apache.thrift.TException {
        addProductComment_result result = new addProductComment_result();
        result.success = iface.addProductComment(args.productCommentVo);
        return result;
      }
    }

    public static class updateProductComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProductComment_args> {
      public updateProductComment() {
        super("updateProductComment");
      }

      public updateProductComment_args getEmptyArgsInstance() {
        return new updateProductComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateProductComment_result getResult(I iface, updateProductComment_args args) throws org.apache.thrift.TException {
        updateProductComment_result result = new updateProductComment_result();
        result.success = iface.updateProductComment(args.productCommentVo);
        return result;
      }
    }

    public static class queryProductComment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryProductComment_args> {
      public queryProductComment() {
        super("queryProductComment");
      }

      public queryProductComment_args getEmptyArgsInstance() {
        return new queryProductComment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryProductComment_result getResult(I iface, queryProductComment_args args) throws org.apache.thrift.TException {
        queryProductComment_result result = new queryProductComment_result();
        result.success = iface.queryProductComment(args.productCommentVo);
        return result;
      }
    }

    public static class queryProductComments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryProductComments_args> {
      public queryProductComments() {
        super("queryProductComments");
      }

      public queryProductComments_args getEmptyArgsInstance() {
        return new queryProductComments_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryProductComments_result getResult(I iface, queryProductComments_args args) throws org.apache.thrift.TException {
        queryProductComments_result result = new queryProductComments_result();
        result.success = iface.queryProductComments(args.productCommentFilterReq, args.pageVo);
        return result;
      }
    }

    public static class addProductActivties<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProductActivties_args> {
      public addProductActivties() {
        super("addProductActivties");
      }

      public addProductActivties_args getEmptyArgsInstance() {
        return new addProductActivties_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addProductActivties_result getResult(I iface, addProductActivties_args args) throws org.apache.thrift.TException {
        addProductActivties_result result = new addProductActivties_result();
        result.success = iface.addProductActivties(args.originVo, args.relateActivities);
        return result;
      }
    }

    public static class addProductOutlets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProductOutlets_args> {
      public addProductOutlets() {
        super("addProductOutlets");
      }

      public addProductOutlets_args getEmptyArgsInstance() {
        return new addProductOutlets_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addProductOutlets_result getResult(I iface, addProductOutlets_args args) throws org.apache.thrift.TException {
        addProductOutlets_result result = new addProductOutlets_result();
        result.success = iface.addProductOutlets(args.originVo, args.outlets);
        return result;
      }
    }

    public static class getProductAreaOutlets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductAreaOutlets_args> {
      public getProductAreaOutlets() {
        super("getProductAreaOutlets");
      }

      public getProductAreaOutlets_args getEmptyArgsInstance() {
        return new getProductAreaOutlets_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductAreaOutlets_result getResult(I iface, getProductAreaOutlets_args args) throws org.apache.thrift.TException {
        getProductAreaOutlets_result result = new getProductAreaOutlets_result();
        result.success = iface.getProductAreaOutlets(args.productAreaVo);
        return result;
      }
    }

    public static class invalidProductBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, invalidProductBatch_args> {
      public invalidProductBatch() {
        super("invalidProductBatch");
      }

      public invalidProductBatch_args getEmptyArgsInstance() {
        return new invalidProductBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public invalidProductBatch_result getResult(I iface, invalidProductBatch_args args) throws org.apache.thrift.TException {
        invalidProductBatch_result result = new invalidProductBatch_result();
        result.success = iface.invalidProductBatch(args.originVo, args.invalidProductBatchVo);
        return result;
      }
    }

    public static class validMerchantProductBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, validMerchantProductBatch_args> {
      public validMerchantProductBatch() {
        super("validMerchantProductBatch");
      }

      public validMerchantProductBatch_args getEmptyArgsInstance() {
        return new validMerchantProductBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public validMerchantProductBatch_result getResult(I iface, validMerchantProductBatch_args args) throws org.apache.thrift.TException {
        validMerchantProductBatch_result result = new validMerchantProductBatch_result();
        result.success = iface.validMerchantProductBatch(args.merchantId);
        return result;
      }
    }

    public static class endisableProductBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, endisableProductBatch_args> {
      public endisableProductBatch() {
        super("endisableProductBatch");
      }

      public endisableProductBatch_args getEmptyArgsInstance() {
        return new endisableProductBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public endisableProductBatch_result getResult(I iface, endisableProductBatch_args args) throws org.apache.thrift.TException {
        endisableProductBatch_result result = new endisableProductBatch_result();
        result.success = iface.endisableProductBatch(args.originVo, args.invalidProductBatchVo, args.flag);
        return result;
      }
    }

    public static class queryProductCommentCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryProductCommentCount_args> {
      public queryProductCommentCount() {
        super("queryProductCommentCount");
      }

      public queryProductCommentCount_args getEmptyArgsInstance() {
        return new queryProductCommentCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryProductCommentCount_result getResult(I iface, queryProductCommentCount_args args) throws org.apache.thrift.TException {
        queryProductCommentCount_result result = new queryProductCommentCount_result();
        result.success = iface.queryProductCommentCount(args.productCommentFilterReq);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteProductBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteProductBatch_args> {
      public deleteProductBatch() {
        super("deleteProductBatch");
      }

      public deleteProductBatch_args getEmptyArgsInstance() {
        return new deleteProductBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteProductBatch_result getResult(I iface, deleteProductBatch_args args) throws org.apache.thrift.TException {
        deleteProductBatch_result result = new deleteProductBatch_result();
        result.success = iface.deleteProductBatch(args.originVo, args.productStatusBatchVoReq);
        return result;
      }
    }

    public static class getProductStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductStatus_args> {
      public getProductStatus() {
        super("getProductStatus");
      }

      public getProductStatus_args getEmptyArgsInstance() {
        return new getProductStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductStatus_result getResult(I iface, getProductStatus_args args) throws org.apache.thrift.TException {
        getProductStatus_result result = new getProductStatus_result();
        result.success = iface.getProductStatus();
        return result;
      }
    }

    public static class updateAuditProductBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAuditProductBatch_args> {
      public updateAuditProductBatch() {
        super("updateAuditProductBatch");
      }

      public updateAuditProductBatch_args getEmptyArgsInstance() {
        return new updateAuditProductBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAuditProductBatch_result getResult(I iface, updateAuditProductBatch_args args) throws org.apache.thrift.TException {
        updateAuditProductBatch_result result = new updateAuditProductBatch_result();
        result.success = iface.updateAuditProductBatch(args.originVo, args.productAuditVoList);
        return result;
      }
    }

    public static class getProductBaseInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductBaseInfo_args> {
      public getProductBaseInfo() {
        super("getProductBaseInfo");
      }

      public getProductBaseInfo_args getEmptyArgsInstance() {
        return new getProductBaseInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductBaseInfo_result getResult(I iface, getProductBaseInfo_args args) throws org.apache.thrift.TException {
        getProductBaseInfo_result result = new getProductBaseInfo_result();
        result.success = iface.getProductBaseInfo(args.clientId, args.products);
        return result;
      }
    }

    public static class isExitsStoreProductInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isExitsStoreProductInfo_args> {
      public isExitsStoreProductInfo() {
        super("isExitsStoreProductInfo");
      }

      public isExitsStoreProductInfo_args getEmptyArgsInstance() {
        return new isExitsStoreProductInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isExitsStoreProductInfo_result getResult(I iface, isExitsStoreProductInfo_args args) throws org.apache.thrift.TException {
        isExitsStoreProductInfo_result result = new isExitsStoreProductInfo_result();
        result.success = iface.isExitsStoreProductInfo(args.clientId, args.memberCode, args.productId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addStoreProductInfoVo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addStoreProductInfoVo_args> {
      public addStoreProductInfoVo() {
        super("addStoreProductInfoVo");
      }

      public addStoreProductInfoVo_args getEmptyArgsInstance() {
        return new addStoreProductInfoVo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addStoreProductInfoVo_result getResult(I iface, addStoreProductInfoVo_args args) throws org.apache.thrift.TException {
        addStoreProductInfoVo_result result = new addStoreProductInfoVo_result();
        result.success = iface.addStoreProductInfoVo(args.clientId, args.memberCode, args.storeProductInfoVo);
        return result;
      }
    }

    public static class deleteStoreProductInfoVo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteStoreProductInfoVo_args> {
      public deleteStoreProductInfoVo() {
        super("deleteStoreProductInfoVo");
      }

      public deleteStoreProductInfoVo_args getEmptyArgsInstance() {
        return new deleteStoreProductInfoVo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteStoreProductInfoVo_result getResult(I iface, deleteStoreProductInfoVo_args args) throws org.apache.thrift.TException {
        deleteStoreProductInfoVo_result result = new deleteStoreProductInfoVo_result();
        result.success = iface.deleteStoreProductInfoVo(args.clientId, args.memberCode, args.productId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getStoreProductInfoVo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStoreProductInfoVo_args> {
      public getStoreProductInfoVo() {
        super("getStoreProductInfoVo");
      }

      public getStoreProductInfoVo_args getEmptyArgsInstance() {
        return new getStoreProductInfoVo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStoreProductInfoVo_result getResult(I iface, getStoreProductInfoVo_args args) throws org.apache.thrift.TException {
        getStoreProductInfoVo_result result = new getStoreProductInfoVo_result();
        result.success = iface.getStoreProductInfoVo(args.clientId, args.memberCode);
        return result;
      }
    }

    public static class getStoreProductInfoByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStoreProductInfoByPage_args> {
      public getStoreProductInfoByPage() {
        super("getStoreProductInfoByPage");
      }

      public getStoreProductInfoByPage_args getEmptyArgsInstance() {
        return new getStoreProductInfoByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStoreProductInfoByPage_result getResult(I iface, getStoreProductInfoByPage_args args) throws org.apache.thrift.TException {
        getStoreProductInfoByPage_result result = new getStoreProductInfoByPage_result();
        result.success = iface.getStoreProductInfoByPage(args.page, args.clientId, args.memberCode);
        return result;
      }
    }

    public static class addProductBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProductBatch_args> {
      public addProductBatch() {
        super("addProductBatch");
      }

      public addProductBatch_args getEmptyArgsInstance() {
        return new addProductBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addProductBatch_result getResult(I iface, addProductBatch_args args) throws org.apache.thrift.TException {
        addProductBatch_result result = new addProductBatch_result();
        result.success = iface.addProductBatch(args.originVo, args.productInfoVos);
        return result;
      }
    }

    public static class modifySenseWord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifySenseWord_args> {
      public modifySenseWord() {
        super("modifySenseWord");
      }

      public modifySenseWord_args getEmptyArgsInstance() {
        return new modifySenseWord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public modifySenseWord_result getResult(I iface, modifySenseWord_args args) throws org.apache.thrift.TException {
        modifySenseWord_result result = new modifySenseWord_result();
        iface.modifySenseWord(args.opt, args.word);
        return result;
      }
    }

    public static class addActivtyToProducts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addActivtyToProducts_args> {
      public addActivtyToProducts() {
        super("addActivtyToProducts");
      }

      public addActivtyToProducts_args getEmptyArgsInstance() {
        return new addActivtyToProducts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addActivtyToProducts_result getResult(I iface, addActivtyToProducts_args args) throws org.apache.thrift.TException {
        addActivtyToProducts_result result = new addActivtyToProducts_result();
        result.success = iface.addActivtyToProducts(args.originVo, args.activityId, args.productIds);
        return result;
      }
    }

    public static class removeActivtyFromProducts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeActivtyFromProducts_args> {
      public removeActivtyFromProducts() {
        super("removeActivtyFromProducts");
      }

      public removeActivtyFromProducts_args getEmptyArgsInstance() {
        return new removeActivtyFromProducts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeActivtyFromProducts_result getResult(I iface, removeActivtyFromProducts_args args) throws org.apache.thrift.TException {
        removeActivtyFromProducts_result result = new removeActivtyFromProducts_result();
        result.success = iface.removeActivtyFromProducts(args.originVo, args.activtyId, args.productId);
        return result;
      }
    }

    public static class findActivtyProductsByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findActivtyProductsByPage_args> {
      public findActivtyProductsByPage() {
        super("findActivtyProductsByPage");
      }

      public findActivtyProductsByPage_args getEmptyArgsInstance() {
        return new findActivtyProductsByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findActivtyProductsByPage_result getResult(I iface, findActivtyProductsByPage_args args) throws org.apache.thrift.TException {
        findActivtyProductsByPage_result result = new findActivtyProductsByPage_result();
        result.success = iface.findActivtyProductsByPage(args.activtyId, args.pageVo);
        return result;
      }
    }

    public static class findProductsForActivtyByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findProductsForActivtyByPage_args> {
      public findProductsForActivtyByPage() {
        super("findProductsForActivtyByPage");
      }

      public findProductsForActivtyByPage_args getEmptyArgsInstance() {
        return new findProductsForActivtyByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findProductsForActivtyByPage_result getResult(I iface, findProductsForActivtyByPage_args args) throws org.apache.thrift.TException {
        findProductsForActivtyByPage_result result = new findProductsForActivtyByPage_result();
        result.success = iface.findProductsForActivtyByPage(args.activtyId, args.name, args.pageVo);
        return result;
      }
    }

    public static class findProductsForAreaByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findProductsForAreaByPage_args> {
      public findProductsForAreaByPage() {
        super("findProductsForAreaByPage");
      }

      public findProductsForAreaByPage_args getEmptyArgsInstance() {
        return new findProductsForAreaByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findProductsForAreaByPage_result getResult(I iface, findProductsForAreaByPage_args args) throws org.apache.thrift.TException {
        findProductsForAreaByPage_result result = new findProductsForAreaByPage_result();
        result.success = iface.findProductsForAreaByPage(args.productId, args.cityId, args.clientId, args.pageVo);
        return result;
      }
    }

    public static class findAreaForCityByList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAreaForCityByList_args> {
      public findAreaForCityByList() {
        super("findAreaForCityByList");
      }

      public findAreaForCityByList_args getEmptyArgsInstance() {
        return new findAreaForCityByList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAreaForCityByList_result getResult(I iface, findAreaForCityByList_args args) throws org.apache.thrift.TException {
        findAreaForCityByList_result result = new findAreaForCityByList_result();
        result.success = iface.findAreaForCityByList(args.productId, args.cityId, args.clientId);
        return result;
      }
    }

    public static class queryVipPresellProducts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryVipPresellProducts_args> {
      public queryVipPresellProducts() {
        super("queryVipPresellProducts");
      }

      public queryVipPresellProducts_args getEmptyArgsInstance() {
        return new queryVipPresellProducts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryVipPresellProducts_result getResult(I iface, queryVipPresellProducts_args args) throws org.apache.thrift.TException {
        queryVipPresellProducts_result result = new queryVipPresellProducts_result();
        result.success = iface.queryVipPresellProducts(args.productFilterVoReq, args.pageVo);
        return result;
      }
    }

    public static class queryGroupProducts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryGroupProducts_args> {
      public queryGroupProducts() {
        super("queryGroupProducts");
      }

      public queryGroupProducts_args getEmptyArgsInstance() {
        return new queryGroupProducts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryGroupProducts_result getResult(I iface, queryGroupProducts_args args) throws org.apache.thrift.TException {
        queryGroupProducts_result result = new queryGroupProducts_result();
        result.success = iface.queryGroupProducts(args.filterVo, args.filedSorts, args.pageVo);
        return result;
      }
    }

    public static class queryMerchantProducts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryMerchantProducts_args> {
      public queryMerchantProducts() {
        super("queryMerchantProducts");
      }

      public queryMerchantProducts_args getEmptyArgsInstance() {
        return new queryMerchantProducts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryMerchantProducts_result getResult(I iface, queryMerchantProducts_args args) throws org.apache.thrift.TException {
        queryMerchantProducts_result result = new queryMerchantProducts_result();
        result.success = iface.queryMerchantProducts(args.filterVo, args.filedSorts, args.pageVo);
        return result;
      }
    }

    public static class findUrlCodeByList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUrlCodeByList_args> {
      public findUrlCodeByList() {
        super("findUrlCodeByList");
      }

      public findUrlCodeByList_args getEmptyArgsInstance() {
        return new findUrlCodeByList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findUrlCodeByList_result getResult(I iface, findUrlCodeByList_args args) throws org.apache.thrift.TException {
        findUrlCodeByList_result result = new findUrlCodeByList_result();
        result.success = iface.findUrlCodeByList(args.productList);
        return result;
      }
    }

    public static class downProducts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, downProducts_args> {
      public downProducts() {
        super("downProducts");
      }

      public downProducts_args getEmptyArgsInstance() {
        return new downProducts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public downProducts_result getResult(I iface, downProducts_args args) throws org.apache.thrift.TException {
        downProducts_result result = new downProducts_result();
        result.success = iface.downProducts(args.productSearchVo, args.type);
        return result;
      }
    }

    public static class searchProductByType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchProductByType_args> {
      public searchProductByType() {
        super("searchProductByType");
      }

      public searchProductByType_args getEmptyArgsInstance() {
        return new searchProductByType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchProductByType_result getResult(I iface, searchProductByType_args args) throws org.apache.thrift.TException {
        searchProductByType_result result = new searchProductByType_result();
        result.success = iface.searchProductByType(args.filterVo, args.filedSorts, args.pageVo);
        return result;
      }
    }

    public static class updateGroupProductByOutlet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateGroupProductByOutlet_args> {
      public updateGroupProductByOutlet() {
        super("updateGroupProductByOutlet");
      }

      public updateGroupProductByOutlet_args getEmptyArgsInstance() {
        return new updateGroupProductByOutlet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateGroupProductByOutlet_result getResult(I iface, updateGroupProductByOutlet_args args) throws org.apache.thrift.TException {
        updateGroupProductByOutlet_result result = new updateGroupProductByOutlet_result();
        result.success = iface.updateGroupProductByOutlet(args.clientId, args.type, args.outletVo);
        return result;
      }
    }

    public static class updateHisGroupGoodsOutlets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateHisGroupGoodsOutlets_args> {
      public updateHisGroupGoodsOutlets() {
        super("updateHisGroupGoodsOutlets");
      }

      public updateHisGroupGoodsOutlets_args getEmptyArgsInstance() {
        return new updateHisGroupGoodsOutlets_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateHisGroupGoodsOutlets_result getResult(I iface, updateHisGroupGoodsOutlets_args args) throws org.apache.thrift.TException {
        updateHisGroupGoodsOutlets_result result = new updateHisGroupGoodsOutlets_result();
        result.success = iface.updateHisGroupGoodsOutlets();
        return result;
      }
    }

    public static class autoOffShelfProductSaleEnd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, autoOffShelfProductSaleEnd_args> {
      public autoOffShelfProductSaleEnd() {
        super("autoOffShelfProductSaleEnd");
      }

      public autoOffShelfProductSaleEnd_args getEmptyArgsInstance() {
        return new autoOffShelfProductSaleEnd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public autoOffShelfProductSaleEnd_result getResult(I iface, autoOffShelfProductSaleEnd_args args) throws org.apache.thrift.TException {
        autoOffShelfProductSaleEnd_result result = new autoOffShelfProductSaleEnd_result();
        result.success = iface.autoOffShelfProductSaleEnd();
        return result;
      }
    }

    public static class findGoodsByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findGoodsByPage_args> {
      public findGoodsByPage() {
        super("findGoodsByPage");
      }

      public findGoodsByPage_args getEmptyArgsInstance() {
        return new findGoodsByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findGoodsByPage_result getResult(I iface, findGoodsByPage_args args) throws org.apache.thrift.TException {
        findGoodsByPage_result result = new findGoodsByPage_result();
        result.success = iface.findGoodsByPage(args.productFilterVo, args.pageVo);
        return result;
      }
    }

    public static class addGoods<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addGoods_args> {
      public addGoods() {
        super("addGoods");
      }

      public addGoods_args getEmptyArgsInstance() {
        return new addGoods_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addGoods_result getResult(I iface, addGoods_args args) throws org.apache.thrift.TException {
        addGoods_result result = new addGoods_result();
        result.success = iface.addGoods(args.originVo, args.productInfoVo);
        return result;
      }
    }

    public static class updateGoods<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateGoods_args> {
      public updateGoods() {
        super("updateGoods");
      }

      public updateGoods_args getEmptyArgsInstance() {
        return new updateGoods_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateGoods_result getResult(I iface, updateGoods_args args) throws org.apache.thrift.TException {
        updateGoods_result result = new updateGoods_result();
        result.success = iface.updateGoods(args.originVo, args.productInfoVo);
        return result;
      }
    }

    public static class getGoodsDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGoodsDetail_args> {
      public getGoodsDetail() {
        super("getGoodsDetail");
      }

      public getGoodsDetail_args getEmptyArgsInstance() {
        return new getGoodsDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGoodsDetail_result getResult(I iface, getGoodsDetail_args args) throws org.apache.thrift.TException {
        getGoodsDetail_result result = new getGoodsDetail_result();
        result.success = iface.getGoodsDetail(args.productId);
        return result;
      }
    }

    public static class updateGoodsStatusOn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateGoodsStatusOn_args> {
      public updateGoodsStatusOn() {
        super("updateGoodsStatusOn");
      }

      public updateGoodsStatusOn_args getEmptyArgsInstance() {
        return new updateGoodsStatusOn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateGoodsStatusOn_result getResult(I iface, updateGoodsStatusOn_args args) throws org.apache.thrift.TException {
        updateGoodsStatusOn_result result = new updateGoodsStatusOn_result();
        result.success = iface.updateGoodsStatusOn(args.originVo, args.productId);
        return result;
      }
    }

    public static class updateGoodsStatusOff<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateGoodsStatusOff_args> {
      public updateGoodsStatusOff() {
        super("updateGoodsStatusOff");
      }

      public updateGoodsStatusOff_args getEmptyArgsInstance() {
        return new updateGoodsStatusOff_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateGoodsStatusOff_result getResult(I iface, updateGoodsStatusOff_args args) throws org.apache.thrift.TException {
        updateGoodsStatusOff_result result = new updateGoodsStatusOff_result();
        result.success = iface.updateGoodsStatusOff(args.originVo, args.productId);
        return result;
      }
    }

    public static class queryBoutiqueGoods<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBoutiqueGoods_args> {
      public queryBoutiqueGoods() {
        super("queryBoutiqueGoods");
      }

      public queryBoutiqueGoods_args getEmptyArgsInstance() {
        return new queryBoutiqueGoods_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBoutiqueGoods_result getResult(I iface, queryBoutiqueGoods_args args) throws org.apache.thrift.TException {
        queryBoutiqueGoods_result result = new queryBoutiqueGoods_result();
        result.success = iface.queryBoutiqueGoods(args.filterVo, args.filedSort, args.pageVo);
        return result;
      }
    }

    public static class queryBoutiqueGoodsDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBoutiqueGoodsDetail_args> {
      public queryBoutiqueGoodsDetail() {
        super("queryBoutiqueGoodsDetail");
      }

      public queryBoutiqueGoodsDetail_args getEmptyArgsInstance() {
        return new queryBoutiqueGoodsDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBoutiqueGoodsDetail_result getResult(I iface, queryBoutiqueGoodsDetail_args args) throws org.apache.thrift.TException {
        queryBoutiqueGoodsDetail_result result = new queryBoutiqueGoodsDetail_result();
        result.success = iface.queryBoutiqueGoodsDetail(args.productId);
        return result;
      }
    }

    public static class getProductDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductDetail_args> {
      public getProductDetail() {
        super("getProductDetail");
      }

      public getProductDetail_args getEmptyArgsInstance() {
        return new getProductDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductDetail_result getResult(I iface, getProductDetail_args args) throws org.apache.thrift.TException {
        getProductDetail_result result = new getProductDetail_result();
        result.success = iface.getProductDetail(args.productId);
        return result;
      }
    }

    public static class findProductsByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findProductsByPage_args> {
      public findProductsByPage() {
        super("findProductsByPage");
      }

      public findProductsByPage_args getEmptyArgsInstance() {
        return new findProductsByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findProductsByPage_result getResult(I iface, findProductsByPage_args args) throws org.apache.thrift.TException {
        findProductsByPage_result result = new findProductsByPage_result();
        result.success = iface.findProductsByPage(args.filterVo, args.filedSorts, args.pageVo);
        return result;
      }
    }

    public static class updateProductAuditState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProductAuditState_args> {
      public updateProductAuditState() {
        super("updateProductAuditState");
      }

      public updateProductAuditState_args getEmptyArgsInstance() {
        return new updateProductAuditState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateProductAuditState_result getResult(I iface, updateProductAuditState_args args) throws org.apache.thrift.TException {
        updateProductAuditState_result result = new updateProductAuditState_result();
        result.success = iface.updateProductAuditState(args.productAuditStates);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addProduct", new addProduct());
      processMap.put("deleteProduct", new deleteProduct());
      processMap.put("updateProduct", new updateProduct());
      processMap.put("updateProductInfo", new updateProductInfo());
      processMap.put("getMerchantProductDetail", new getMerchantProductDetail());
      processMap.put("isProductExist", new isProductExist());
      processMap.put("findMerchantProductsByPage", new findMerchantProductsByPage());
      processMap.put("queryProducts", new queryProducts());
      processMap.put("queryProductDetail", new queryProductDetail());
      processMap.put("updateProductStatus", new updateProductStatus());
      processMap.put("updateProductStatusBatch", new updateProductStatusBatch());
      processMap.put("addOutletProduct", new addOutletProduct());
      processMap.put("addH5OutletProduct", new addH5OutletProduct());
      processMap.put("getOutletProduct", new getOutletProduct());
      processMap.put("deleteOutletProduct", new deleteOutletProduct());
      processMap.put("getOutletProductListByPage", new getOutletProductListByPage());
      processMap.put("getProductCommentList", new getProductCommentList());
      processMap.put("getProductCommentDetail", new getProductCommentDetail());
      processMap.put("deleteProductComment", new deleteProductComment());
      processMap.put("replayProductComment", new replayProductComment());
      processMap.put("replayProductCommentBatch", new replayProductCommentBatch());
      processMap.put("addProductComment", new addProductComment());
      processMap.put("updateProductComment", new updateProductComment());
      processMap.put("queryProductComment", new queryProductComment());
      processMap.put("queryProductComments", new queryProductComments());
      processMap.put("addProductActivties", new addProductActivties());
      processMap.put("addProductOutlets", new addProductOutlets());
      processMap.put("getProductAreaOutlets", new getProductAreaOutlets());
      processMap.put("invalidProductBatch", new invalidProductBatch());
      processMap.put("validMerchantProductBatch", new validMerchantProductBatch());
      processMap.put("endisableProductBatch", new endisableProductBatch());
      processMap.put("queryProductCommentCount", new queryProductCommentCount());
      processMap.put("deleteProductBatch", new deleteProductBatch());
      processMap.put("getProductStatus", new getProductStatus());
      processMap.put("updateAuditProductBatch", new updateAuditProductBatch());
      processMap.put("getProductBaseInfo", new getProductBaseInfo());
      processMap.put("isExitsStoreProductInfo", new isExitsStoreProductInfo());
      processMap.put("addStoreProductInfoVo", new addStoreProductInfoVo());
      processMap.put("deleteStoreProductInfoVo", new deleteStoreProductInfoVo());
      processMap.put("getStoreProductInfoVo", new getStoreProductInfoVo());
      processMap.put("getStoreProductInfoByPage", new getStoreProductInfoByPage());
      processMap.put("addProductBatch", new addProductBatch());
      processMap.put("modifySenseWord", new modifySenseWord());
      processMap.put("addActivtyToProducts", new addActivtyToProducts());
      processMap.put("removeActivtyFromProducts", new removeActivtyFromProducts());
      processMap.put("findActivtyProductsByPage", new findActivtyProductsByPage());
      processMap.put("findProductsForActivtyByPage", new findProductsForActivtyByPage());
      processMap.put("findProductsForAreaByPage", new findProductsForAreaByPage());
      processMap.put("findAreaForCityByList", new findAreaForCityByList());
      processMap.put("queryVipPresellProducts", new queryVipPresellProducts());
      processMap.put("queryGroupProducts", new queryGroupProducts());
      processMap.put("queryMerchantProducts", new queryMerchantProducts());
      processMap.put("findUrlCodeByList", new findUrlCodeByList());
      processMap.put("downProducts", new downProducts());
      processMap.put("searchProductByType", new searchProductByType());
      processMap.put("updateGroupProductByOutlet", new updateGroupProductByOutlet());
      processMap.put("updateHisGroupGoodsOutlets", new updateHisGroupGoodsOutlets());
      processMap.put("autoOffShelfProductSaleEnd", new autoOffShelfProductSaleEnd());
      processMap.put("findGoodsByPage", new findGoodsByPage());
      processMap.put("addGoods", new addGoods());
      processMap.put("updateGoods", new updateGoods());
      processMap.put("getGoodsDetail", new getGoodsDetail());
      processMap.put("updateGoodsStatusOn", new updateGoodsStatusOn());
      processMap.put("updateGoodsStatusOff", new updateGoodsStatusOff());
      processMap.put("queryBoutiqueGoods", new queryBoutiqueGoods());
      processMap.put("queryBoutiqueGoodsDetail", new queryBoutiqueGoodsDetail());
      processMap.put("getProductDetail", new getProductDetail());
      processMap.put("findProductsByPage", new findProductsByPage());
      processMap.put("updateProductAuditState", new updateProductAuditState());
      return processMap;
    }

    public static class addProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addProduct_args, com.froad.thrift.vo.AddProductVoRes> {
      public addProduct() {
        super("addProduct");
      }

      public addProduct_args getEmptyArgsInstance() {
        return new addProduct_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AddProductVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AddProductVoRes>() { 
          public void onComplete(com.froad.thrift.vo.AddProductVoRes o) {
            addProduct_result result = new addProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addProduct_result result = new addProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addProduct_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AddProductVoRes> resultHandler) throws TException {
        iface.addProduct(args.originVo, args.productInfoVo,resultHandler);
      }
    }

    public static class deleteProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteProduct_args, com.froad.thrift.vo.ResultVo> {
      public deleteProduct() {
        super("deleteProduct");
      }

      public deleteProduct_args getEmptyArgsInstance() {
        return new deleteProduct_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteProduct_result result = new deleteProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteProduct_result result = new deleteProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteProduct_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteProduct(args.originVo, args.productVoReq,resultHandler);
      }
    }

    public static class updateProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProduct_args, com.froad.thrift.vo.ResultVo> {
      public updateProduct() {
        super("updateProduct");
      }

      public updateProduct_args getEmptyArgsInstance() {
        return new updateProduct_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateProduct_result result = new updateProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateProduct_result result = new updateProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProduct_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateProduct(args.originVo, args.productInfoVo,resultHandler);
      }
    }

    public static class updateProductInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProductInfo_args, com.froad.thrift.vo.ResultVo> {
      public updateProductInfo() {
        super("updateProductInfo");
      }

      public updateProductInfo_args getEmptyArgsInstance() {
        return new updateProductInfo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateProductInfo_result result = new updateProductInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateProductInfo_result result = new updateProductInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProductInfo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateProductInfo(args.originVo, args.productBaseVo,resultHandler);
      }
    }

    public static class getMerchantProductDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantProductDetail_args, com.froad.thrift.vo.ProductInfoVo> {
      public getMerchantProductDetail() {
        super("getMerchantProductDetail");
      }

      public getMerchantProductDetail_args getEmptyArgsInstance() {
        return new getMerchantProductDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductInfoVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductInfoVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductInfoVo o) {
            getMerchantProductDetail_result result = new getMerchantProductDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantProductDetail_result result = new getMerchantProductDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantProductDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductInfoVo> resultHandler) throws TException {
        iface.getMerchantProductDetail(args.productVoReq,resultHandler);
      }
    }

    public static class isProductExist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isProductExist_args, Boolean> {
      public isProductExist() {
        super("isProductExist");
      }

      public isProductExist_args getEmptyArgsInstance() {
        return new isProductExist_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isProductExist_result result = new isProductExist_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isProductExist_result result = new isProductExist_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isProductExist_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isProductExist(args.productExistVoReq,resultHandler);
      }
    }

    public static class findMerchantProductsByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findMerchantProductsByPage_args, com.froad.thrift.vo.ProductBriefPageVo> {
      public findMerchantProductsByPage() {
        super("findMerchantProductsByPage");
      }

      public findMerchantProductsByPage_args getEmptyArgsInstance() {
        return new findMerchantProductsByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductBriefPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductBriefPageVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductBriefPageVo o) {
            findMerchantProductsByPage_result result = new findMerchantProductsByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findMerchantProductsByPage_result result = new findMerchantProductsByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findMerchantProductsByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductBriefPageVo> resultHandler) throws TException {
        iface.findMerchantProductsByPage(args.productFilterVoReq, args.pageVo,resultHandler);
      }
    }

    public static class queryProducts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryProducts_args, com.froad.thrift.vo.ProductBriefPageVoRes> {
      public queryProducts() {
        super("queryProducts");
      }

      public queryProducts_args getEmptyArgsInstance() {
        return new queryProducts_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductBriefPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductBriefPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.ProductBriefPageVoRes o) {
            queryProducts_result result = new queryProducts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryProducts_result result = new queryProducts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryProducts_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductBriefPageVoRes> resultHandler) throws TException {
        iface.queryProducts(args.productFilterVoReq, args.pageVo,resultHandler);
      }
    }

    public static class queryProductDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryProductDetail_args, com.froad.thrift.vo.ProductInfoVo> {
      public queryProductDetail() {
        super("queryProductDetail");
      }

      public queryProductDetail_args getEmptyArgsInstance() {
        return new queryProductDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductInfoVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductInfoVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductInfoVo o) {
            queryProductDetail_result result = new queryProductDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryProductDetail_result result = new queryProductDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryProductDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductInfoVo> resultHandler) throws TException {
        iface.queryProductDetail(args.productVoReq,resultHandler);
      }
    }

    public static class updateProductStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProductStatus_args, com.froad.thrift.vo.ResultVo> {
      public updateProductStatus() {
        super("updateProductStatus");
      }

      public updateProductStatus_args getEmptyArgsInstance() {
        return new updateProductStatus_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateProductStatus_result result = new updateProductStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateProductStatus_result result = new updateProductStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProductStatus_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateProductStatus(args.originVo, args.productStatusVoReq,resultHandler);
      }
    }

    public static class updateProductStatusBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProductStatusBatch_args, com.froad.thrift.vo.ResultVo> {
      public updateProductStatusBatch() {
        super("updateProductStatusBatch");
      }

      public updateProductStatusBatch_args getEmptyArgsInstance() {
        return new updateProductStatusBatch_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateProductStatusBatch_result result = new updateProductStatusBatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateProductStatusBatch_result result = new updateProductStatusBatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProductStatusBatch_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateProductStatusBatch(args.originVo, args.productStatusBatchVoReq,resultHandler);
      }
    }

    public static class addOutletProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOutletProduct_args, com.froad.thrift.vo.AddOutletProductVoRes> {
      public addOutletProduct() {
        super("addOutletProduct");
      }

      public addOutletProduct_args getEmptyArgsInstance() {
        return new addOutletProduct_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AddOutletProductVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AddOutletProductVoRes>() { 
          public void onComplete(com.froad.thrift.vo.AddOutletProductVoRes o) {
            addOutletProduct_result result = new addOutletProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOutletProduct_result result = new addOutletProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOutletProduct_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AddOutletProductVoRes> resultHandler) throws TException {
        iface.addOutletProduct(args.originVo, args.outletProductVo,resultHandler);
      }
    }

    public static class addH5OutletProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addH5OutletProduct_args, com.froad.thrift.vo.AddOutletProductVoRes> {
      public addH5OutletProduct() {
        super("addH5OutletProduct");
      }

      public addH5OutletProduct_args getEmptyArgsInstance() {
        return new addH5OutletProduct_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AddOutletProductVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AddOutletProductVoRes>() { 
          public void onComplete(com.froad.thrift.vo.AddOutletProductVoRes o) {
            addH5OutletProduct_result result = new addH5OutletProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addH5OutletProduct_result result = new addH5OutletProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addH5OutletProduct_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AddOutletProductVoRes> resultHandler) throws TException {
        iface.addH5OutletProduct(args.originVo, args.outletProductDiscountVo,resultHandler);
      }
    }

    public static class getOutletProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletProduct_args, com.froad.thrift.vo.OutletProductVoRes> {
      public getOutletProduct() {
        super("getOutletProduct");
      }

      public getOutletProduct_args getEmptyArgsInstance() {
        return new getOutletProduct_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletProductVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletProductVoRes>() { 
          public void onComplete(com.froad.thrift.vo.OutletProductVoRes o) {
            getOutletProduct_result result = new getOutletProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletProduct_result result = new getOutletProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletProduct_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletProductVoRes> resultHandler) throws TException {
        iface.getOutletProduct(args.outletProductVoReq,resultHandler);
      }
    }

    public static class deleteOutletProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteOutletProduct_args, com.froad.thrift.vo.ResultVo> {
      public deleteOutletProduct() {
        super("deleteOutletProduct");
      }

      public deleteOutletProduct_args getEmptyArgsInstance() {
        return new deleteOutletProduct_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteOutletProduct_result result = new deleteOutletProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteOutletProduct_result result = new deleteOutletProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteOutletProduct_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteOutletProduct(args.originVo, args.outletProductVo,resultHandler);
      }
    }

    public static class getOutletProductListByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutletProductListByPage_args, com.froad.thrift.vo.OutletProductPageVo> {
      public getOutletProductListByPage() {
        super("getOutletProductListByPage");
      }

      public getOutletProductListByPage_args getEmptyArgsInstance() {
        return new getOutletProductListByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.OutletProductPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.OutletProductPageVo>() { 
          public void onComplete(com.froad.thrift.vo.OutletProductPageVo o) {
            getOutletProductListByPage_result result = new getOutletProductListByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutletProductListByPage_result result = new getOutletProductListByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutletProductListByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.OutletProductPageVo> resultHandler) throws TException {
        iface.getOutletProductListByPage(args.outletProductVo, args.pageVo,resultHandler);
      }
    }

    public static class getProductCommentList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductCommentList_args, com.froad.thrift.vo.ProductCommentPageVo> {
      public getProductCommentList() {
        super("getProductCommentList");
      }

      public getProductCommentList_args getEmptyArgsInstance() {
        return new getProductCommentList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductCommentPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductCommentPageVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductCommentPageVo o) {
            getProductCommentList_result result = new getProductCommentList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductCommentList_result result = new getProductCommentList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductCommentList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductCommentPageVo> resultHandler) throws TException {
        iface.getProductCommentList(args.productCommentFilterReq, args.pageVo,resultHandler);
      }
    }

    public static class getProductCommentDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductCommentDetail_args, com.froad.thrift.vo.ProductCommentVo> {
      public getProductCommentDetail() {
        super("getProductCommentDetail");
      }

      public getProductCommentDetail_args getEmptyArgsInstance() {
        return new getProductCommentDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductCommentVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductCommentVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductCommentVo o) {
            getProductCommentDetail_result result = new getProductCommentDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductCommentDetail_result result = new getProductCommentDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductCommentDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductCommentVo> resultHandler) throws TException {
        iface.getProductCommentDetail(args.productCommentVo,resultHandler);
      }
    }

    public static class deleteProductComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteProductComment_args, com.froad.thrift.vo.ResultVo> {
      public deleteProductComment() {
        super("deleteProductComment");
      }

      public deleteProductComment_args getEmptyArgsInstance() {
        return new deleteProductComment_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteProductComment_result result = new deleteProductComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteProductComment_result result = new deleteProductComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteProductComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteProductComment(args.productCommentVo,resultHandler);
      }
    }

    public static class replayProductComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, replayProductComment_args, com.froad.thrift.vo.ResultVo> {
      public replayProductComment() {
        super("replayProductComment");
      }

      public replayProductComment_args getEmptyArgsInstance() {
        return new replayProductComment_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            replayProductComment_result result = new replayProductComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            replayProductComment_result result = new replayProductComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, replayProductComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.replayProductComment(args.productCommentVo,resultHandler);
      }
    }

    public static class replayProductCommentBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, replayProductCommentBatch_args, com.froad.thrift.vo.ResultVo> {
      public replayProductCommentBatch() {
        super("replayProductCommentBatch");
      }

      public replayProductCommentBatch_args getEmptyArgsInstance() {
        return new replayProductCommentBatch_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            replayProductCommentBatch_result result = new replayProductCommentBatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            replayProductCommentBatch_result result = new replayProductCommentBatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, replayProductCommentBatch_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.replayProductCommentBatch(args.productCommentVo,resultHandler);
      }
    }

    public static class addProductComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addProductComment_args, com.froad.thrift.vo.ResultVo> {
      public addProductComment() {
        super("addProductComment");
      }

      public addProductComment_args getEmptyArgsInstance() {
        return new addProductComment_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            addProductComment_result result = new addProductComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addProductComment_result result = new addProductComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addProductComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.addProductComment(args.productCommentVo,resultHandler);
      }
    }

    public static class updateProductComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProductComment_args, com.froad.thrift.vo.ResultVo> {
      public updateProductComment() {
        super("updateProductComment");
      }

      public updateProductComment_args getEmptyArgsInstance() {
        return new updateProductComment_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateProductComment_result result = new updateProductComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateProductComment_result result = new updateProductComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProductComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateProductComment(args.productCommentVo,resultHandler);
      }
    }

    public static class queryProductComment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryProductComment_args, com.froad.thrift.vo.ProductCommentVo> {
      public queryProductComment() {
        super("queryProductComment");
      }

      public queryProductComment_args getEmptyArgsInstance() {
        return new queryProductComment_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductCommentVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductCommentVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductCommentVo o) {
            queryProductComment_result result = new queryProductComment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryProductComment_result result = new queryProductComment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryProductComment_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductCommentVo> resultHandler) throws TException {
        iface.queryProductComment(args.productCommentVo,resultHandler);
      }
    }

    public static class queryProductComments<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryProductComments_args, com.froad.thrift.vo.ProductCommentPageVo> {
      public queryProductComments() {
        super("queryProductComments");
      }

      public queryProductComments_args getEmptyArgsInstance() {
        return new queryProductComments_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductCommentPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductCommentPageVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductCommentPageVo o) {
            queryProductComments_result result = new queryProductComments_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryProductComments_result result = new queryProductComments_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryProductComments_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductCommentPageVo> resultHandler) throws TException {
        iface.queryProductComments(args.productCommentFilterReq, args.pageVo,resultHandler);
      }
    }

    public static class addProductActivties<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addProductActivties_args, com.froad.thrift.vo.ResultVo> {
      public addProductActivties() {
        super("addProductActivties");
      }

      public addProductActivties_args getEmptyArgsInstance() {
        return new addProductActivties_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            addProductActivties_result result = new addProductActivties_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addProductActivties_result result = new addProductActivties_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addProductActivties_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.addProductActivties(args.originVo, args.relateActivities,resultHandler);
      }
    }

    public static class addProductOutlets<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addProductOutlets_args, com.froad.thrift.vo.ResultVo> {
      public addProductOutlets() {
        super("addProductOutlets");
      }

      public addProductOutlets_args getEmptyArgsInstance() {
        return new addProductOutlets_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            addProductOutlets_result result = new addProductOutlets_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addProductOutlets_result result = new addProductOutlets_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addProductOutlets_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.addProductOutlets(args.originVo, args.outlets,resultHandler);
      }
    }

    public static class getProductAreaOutlets<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductAreaOutlets_args, List<com.froad.thrift.vo.ProductAreaVo>> {
      public getProductAreaOutlets() {
        super("getProductAreaOutlets");
      }

      public getProductAreaOutlets_args getEmptyArgsInstance() {
        return new getProductAreaOutlets_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.ProductAreaVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.ProductAreaVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.ProductAreaVo> o) {
            getProductAreaOutlets_result result = new getProductAreaOutlets_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductAreaOutlets_result result = new getProductAreaOutlets_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductAreaOutlets_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.ProductAreaVo>> resultHandler) throws TException {
        iface.getProductAreaOutlets(args.productAreaVo,resultHandler);
      }
    }

    public static class invalidProductBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, invalidProductBatch_args, com.froad.thrift.vo.ResultVo> {
      public invalidProductBatch() {
        super("invalidProductBatch");
      }

      public invalidProductBatch_args getEmptyArgsInstance() {
        return new invalidProductBatch_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            invalidProductBatch_result result = new invalidProductBatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            invalidProductBatch_result result = new invalidProductBatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, invalidProductBatch_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.invalidProductBatch(args.originVo, args.invalidProductBatchVo,resultHandler);
      }
    }

    public static class validMerchantProductBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, validMerchantProductBatch_args, com.froad.thrift.vo.ResultVo> {
      public validMerchantProductBatch() {
        super("validMerchantProductBatch");
      }

      public validMerchantProductBatch_args getEmptyArgsInstance() {
        return new validMerchantProductBatch_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            validMerchantProductBatch_result result = new validMerchantProductBatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            validMerchantProductBatch_result result = new validMerchantProductBatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, validMerchantProductBatch_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.validMerchantProductBatch(args.merchantId,resultHandler);
      }
    }

    public static class endisableProductBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, endisableProductBatch_args, com.froad.thrift.vo.ResultVo> {
      public endisableProductBatch() {
        super("endisableProductBatch");
      }

      public endisableProductBatch_args getEmptyArgsInstance() {
        return new endisableProductBatch_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            endisableProductBatch_result result = new endisableProductBatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            endisableProductBatch_result result = new endisableProductBatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, endisableProductBatch_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.endisableProductBatch(args.originVo, args.invalidProductBatchVo, args.flag,resultHandler);
      }
    }

    public static class queryProductCommentCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryProductCommentCount_args, Integer> {
      public queryProductCommentCount() {
        super("queryProductCommentCount");
      }

      public queryProductCommentCount_args getEmptyArgsInstance() {
        return new queryProductCommentCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            queryProductCommentCount_result result = new queryProductCommentCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryProductCommentCount_result result = new queryProductCommentCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryProductCommentCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.queryProductCommentCount(args.productCommentFilterReq,resultHandler);
      }
    }

    public static class deleteProductBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteProductBatch_args, com.froad.thrift.vo.ResultVo> {
      public deleteProductBatch() {
        super("deleteProductBatch");
      }

      public deleteProductBatch_args getEmptyArgsInstance() {
        return new deleteProductBatch_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteProductBatch_result result = new deleteProductBatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteProductBatch_result result = new deleteProductBatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteProductBatch_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteProductBatch(args.originVo, args.productStatusBatchVoReq,resultHandler);
      }
    }

    public static class getProductStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductStatus_args, List<com.froad.thrift.vo.ProductStatusVoReq>> {
      public getProductStatus() {
        super("getProductStatus");
      }

      public getProductStatus_args getEmptyArgsInstance() {
        return new getProductStatus_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.ProductStatusVoReq>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.ProductStatusVoReq>>() { 
          public void onComplete(List<com.froad.thrift.vo.ProductStatusVoReq> o) {
            getProductStatus_result result = new getProductStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductStatus_result result = new getProductStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductStatus_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.ProductStatusVoReq>> resultHandler) throws TException {
        iface.getProductStatus(resultHandler);
      }
    }

    public static class updateAuditProductBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAuditProductBatch_args, com.froad.thrift.vo.ResultVo> {
      public updateAuditProductBatch() {
        super("updateAuditProductBatch");
      }

      public updateAuditProductBatch_args getEmptyArgsInstance() {
        return new updateAuditProductBatch_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateAuditProductBatch_result result = new updateAuditProductBatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateAuditProductBatch_result result = new updateAuditProductBatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateAuditProductBatch_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateAuditProductBatch(args.originVo, args.productAuditVoList,resultHandler);
      }
    }

    public static class getProductBaseInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductBaseInfo_args, List<com.froad.thrift.vo.ProductBaseInfoVo>> {
      public getProductBaseInfo() {
        super("getProductBaseInfo");
      }

      public getProductBaseInfo_args getEmptyArgsInstance() {
        return new getProductBaseInfo_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.ProductBaseInfoVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.ProductBaseInfoVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.ProductBaseInfoVo> o) {
            getProductBaseInfo_result result = new getProductBaseInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductBaseInfo_result result = new getProductBaseInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductBaseInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.ProductBaseInfoVo>> resultHandler) throws TException {
        iface.getProductBaseInfo(args.clientId, args.products,resultHandler);
      }
    }

    public static class isExitsStoreProductInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isExitsStoreProductInfo_args, Boolean> {
      public isExitsStoreProductInfo() {
        super("isExitsStoreProductInfo");
      }

      public isExitsStoreProductInfo_args getEmptyArgsInstance() {
        return new isExitsStoreProductInfo_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isExitsStoreProductInfo_result result = new isExitsStoreProductInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isExitsStoreProductInfo_result result = new isExitsStoreProductInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isExitsStoreProductInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isExitsStoreProductInfo(args.clientId, args.memberCode, args.productId,resultHandler);
      }
    }

    public static class addStoreProductInfoVo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addStoreProductInfoVo_args, com.froad.thrift.vo.ResultVo> {
      public addStoreProductInfoVo() {
        super("addStoreProductInfoVo");
      }

      public addStoreProductInfoVo_args getEmptyArgsInstance() {
        return new addStoreProductInfoVo_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            addStoreProductInfoVo_result result = new addStoreProductInfoVo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addStoreProductInfoVo_result result = new addStoreProductInfoVo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addStoreProductInfoVo_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.addStoreProductInfoVo(args.clientId, args.memberCode, args.storeProductInfoVo,resultHandler);
      }
    }

    public static class deleteStoreProductInfoVo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteStoreProductInfoVo_args, Boolean> {
      public deleteStoreProductInfoVo() {
        super("deleteStoreProductInfoVo");
      }

      public deleteStoreProductInfoVo_args getEmptyArgsInstance() {
        return new deleteStoreProductInfoVo_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteStoreProductInfoVo_result result = new deleteStoreProductInfoVo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteStoreProductInfoVo_result result = new deleteStoreProductInfoVo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteStoreProductInfoVo_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteStoreProductInfoVo(args.clientId, args.memberCode, args.productId,resultHandler);
      }
    }

    public static class getStoreProductInfoVo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStoreProductInfoVo_args, List<com.froad.thrift.vo.StoreProductInfoVo>> {
      public getStoreProductInfoVo() {
        super("getStoreProductInfoVo");
      }

      public getStoreProductInfoVo_args getEmptyArgsInstance() {
        return new getStoreProductInfoVo_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.StoreProductInfoVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.StoreProductInfoVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.StoreProductInfoVo> o) {
            getStoreProductInfoVo_result result = new getStoreProductInfoVo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStoreProductInfoVo_result result = new getStoreProductInfoVo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStoreProductInfoVo_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.StoreProductInfoVo>> resultHandler) throws TException {
        iface.getStoreProductInfoVo(args.clientId, args.memberCode,resultHandler);
      }
    }

    public static class getStoreProductInfoByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStoreProductInfoByPage_args, com.froad.thrift.vo.StoreProductInfoPageVoRes> {
      public getStoreProductInfoByPage() {
        super("getStoreProductInfoByPage");
      }

      public getStoreProductInfoByPage_args getEmptyArgsInstance() {
        return new getStoreProductInfoByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.StoreProductInfoPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.StoreProductInfoPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.StoreProductInfoPageVoRes o) {
            getStoreProductInfoByPage_result result = new getStoreProductInfoByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStoreProductInfoByPage_result result = new getStoreProductInfoByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStoreProductInfoByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.StoreProductInfoPageVoRes> resultHandler) throws TException {
        iface.getStoreProductInfoByPage(args.page, args.clientId, args.memberCode,resultHandler);
      }
    }

    public static class addProductBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addProductBatch_args, List<com.froad.thrift.vo.AddProductVoRes>> {
      public addProductBatch() {
        super("addProductBatch");
      }

      public addProductBatch_args getEmptyArgsInstance() {
        return new addProductBatch_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.AddProductVoRes>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.AddProductVoRes>>() { 
          public void onComplete(List<com.froad.thrift.vo.AddProductVoRes> o) {
            addProductBatch_result result = new addProductBatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addProductBatch_result result = new addProductBatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addProductBatch_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.AddProductVoRes>> resultHandler) throws TException {
        iface.addProductBatch(args.originVo, args.productInfoVos,resultHandler);
      }
    }

    public static class modifySenseWord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modifySenseWord_args, Void> {
      public modifySenseWord() {
        super("modifySenseWord");
      }

      public modifySenseWord_args getEmptyArgsInstance() {
        return new modifySenseWord_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            modifySenseWord_result result = new modifySenseWord_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            modifySenseWord_result result = new modifySenseWord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modifySenseWord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.modifySenseWord(args.opt, args.word,resultHandler);
      }
    }

    public static class addActivtyToProducts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addActivtyToProducts_args, com.froad.thrift.vo.ResultVo> {
      public addActivtyToProducts() {
        super("addActivtyToProducts");
      }

      public addActivtyToProducts_args getEmptyArgsInstance() {
        return new addActivtyToProducts_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            addActivtyToProducts_result result = new addActivtyToProducts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addActivtyToProducts_result result = new addActivtyToProducts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addActivtyToProducts_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.addActivtyToProducts(args.originVo, args.activityId, args.productIds,resultHandler);
      }
    }

    public static class removeActivtyFromProducts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeActivtyFromProducts_args, com.froad.thrift.vo.ResultVo> {
      public removeActivtyFromProducts() {
        super("removeActivtyFromProducts");
      }

      public removeActivtyFromProducts_args getEmptyArgsInstance() {
        return new removeActivtyFromProducts_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            removeActivtyFromProducts_result result = new removeActivtyFromProducts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeActivtyFromProducts_result result = new removeActivtyFromProducts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeActivtyFromProducts_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.removeActivtyFromProducts(args.originVo, args.activtyId, args.productId,resultHandler);
      }
    }

    public static class findActivtyProductsByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findActivtyProductsByPage_args, com.froad.thrift.vo.ActivityProductPageVo> {
      public findActivtyProductsByPage() {
        super("findActivtyProductsByPage");
      }

      public findActivtyProductsByPage_args getEmptyArgsInstance() {
        return new findActivtyProductsByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ActivityProductPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ActivityProductPageVo>() { 
          public void onComplete(com.froad.thrift.vo.ActivityProductPageVo o) {
            findActivtyProductsByPage_result result = new findActivtyProductsByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findActivtyProductsByPage_result result = new findActivtyProductsByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findActivtyProductsByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ActivityProductPageVo> resultHandler) throws TException {
        iface.findActivtyProductsByPage(args.activtyId, args.pageVo,resultHandler);
      }
    }

    public static class findProductsForActivtyByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findProductsForActivtyByPage_args, com.froad.thrift.vo.ActivityProductPageVo> {
      public findProductsForActivtyByPage() {
        super("findProductsForActivtyByPage");
      }

      public findProductsForActivtyByPage_args getEmptyArgsInstance() {
        return new findProductsForActivtyByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ActivityProductPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ActivityProductPageVo>() { 
          public void onComplete(com.froad.thrift.vo.ActivityProductPageVo o) {
            findProductsForActivtyByPage_result result = new findProductsForActivtyByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findProductsForActivtyByPage_result result = new findProductsForActivtyByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findProductsForActivtyByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ActivityProductPageVo> resultHandler) throws TException {
        iface.findProductsForActivtyByPage(args.activtyId, args.name, args.pageVo,resultHandler);
      }
    }

    public static class findProductsForAreaByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findProductsForAreaByPage_args, com.froad.thrift.vo.ProductOutletPageVo> {
      public findProductsForAreaByPage() {
        super("findProductsForAreaByPage");
      }

      public findProductsForAreaByPage_args getEmptyArgsInstance() {
        return new findProductsForAreaByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductOutletPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductOutletPageVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductOutletPageVo o) {
            findProductsForAreaByPage_result result = new findProductsForAreaByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findProductsForAreaByPage_result result = new findProductsForAreaByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findProductsForAreaByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductOutletPageVo> resultHandler) throws TException {
        iface.findProductsForAreaByPage(args.productId, args.cityId, args.clientId, args.pageVo,resultHandler);
      }
    }

    public static class findAreaForCityByList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAreaForCityByList_args, List<com.froad.thrift.vo.AreaVo>> {
      public findAreaForCityByList() {
        super("findAreaForCityByList");
      }

      public findAreaForCityByList_args getEmptyArgsInstance() {
        return new findAreaForCityByList_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.AreaVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.AreaVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.AreaVo> o) {
            findAreaForCityByList_result result = new findAreaForCityByList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAreaForCityByList_result result = new findAreaForCityByList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAreaForCityByList_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.AreaVo>> resultHandler) throws TException {
        iface.findAreaForCityByList(args.productId, args.cityId, args.clientId,resultHandler);
      }
    }

    public static class queryVipPresellProducts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryVipPresellProducts_args, com.froad.thrift.vo.ProductBriefPageVoRes> {
      public queryVipPresellProducts() {
        super("queryVipPresellProducts");
      }

      public queryVipPresellProducts_args getEmptyArgsInstance() {
        return new queryVipPresellProducts_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductBriefPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductBriefPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.ProductBriefPageVoRes o) {
            queryVipPresellProducts_result result = new queryVipPresellProducts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryVipPresellProducts_result result = new queryVipPresellProducts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryVipPresellProducts_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductBriefPageVoRes> resultHandler) throws TException {
        iface.queryVipPresellProducts(args.productFilterVoReq, args.pageVo,resultHandler);
      }
    }

    public static class queryGroupProducts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryGroupProducts_args, com.froad.thrift.vo.GroupProductPageVoRes> {
      public queryGroupProducts() {
        super("queryGroupProducts");
      }

      public queryGroupProducts_args getEmptyArgsInstance() {
        return new queryGroupProducts_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.GroupProductPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.GroupProductPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.GroupProductPageVoRes o) {
            queryGroupProducts_result result = new queryGroupProducts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryGroupProducts_result result = new queryGroupProducts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryGroupProducts_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.GroupProductPageVoRes> resultHandler) throws TException {
        iface.queryGroupProducts(args.filterVo, args.filedSorts, args.pageVo,resultHandler);
      }
    }

    public static class queryMerchantProducts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryMerchantProducts_args, com.froad.thrift.vo.MerchantProductPageVoRes> {
      public queryMerchantProducts() {
        super("queryMerchantProducts");
      }

      public queryMerchantProducts_args getEmptyArgsInstance() {
        return new queryMerchantProducts_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantProductPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantProductPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.MerchantProductPageVoRes o) {
            queryMerchantProducts_result result = new queryMerchantProducts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryMerchantProducts_result result = new queryMerchantProducts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryMerchantProducts_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantProductPageVoRes> resultHandler) throws TException {
        iface.queryMerchantProducts(args.filterVo, args.filedSorts, args.pageVo,resultHandler);
      }
    }

    public static class findUrlCodeByList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUrlCodeByList_args, List<com.froad.thrift.vo.ProductVo>> {
      public findUrlCodeByList() {
        super("findUrlCodeByList");
      }

      public findUrlCodeByList_args getEmptyArgsInstance() {
        return new findUrlCodeByList_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.ProductVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.ProductVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.ProductVo> o) {
            findUrlCodeByList_result result = new findUrlCodeByList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findUrlCodeByList_result result = new findUrlCodeByList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUrlCodeByList_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.ProductVo>> resultHandler) throws TException {
        iface.findUrlCodeByList(args.productList,resultHandler);
      }
    }

    public static class downProducts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, downProducts_args, com.froad.thrift.vo.ExportResultRes> {
      public downProducts() {
        super("downProducts");
      }

      public downProducts_args getEmptyArgsInstance() {
        return new downProducts_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes>() { 
          public void onComplete(com.froad.thrift.vo.ExportResultRes o) {
            downProducts_result result = new downProducts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            downProducts_result result = new downProducts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, downProducts_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> resultHandler) throws TException {
        iface.downProducts(args.productSearchVo, args.type,resultHandler);
      }
    }

    public static class searchProductByType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchProductByType_args, com.froad.thrift.vo.ProductPageVoRes> {
      public searchProductByType() {
        super("searchProductByType");
      }

      public searchProductByType_args getEmptyArgsInstance() {
        return new searchProductByType_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.ProductPageVoRes o) {
            searchProductByType_result result = new searchProductByType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchProductByType_result result = new searchProductByType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchProductByType_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductPageVoRes> resultHandler) throws TException {
        iface.searchProductByType(args.filterVo, args.filedSorts, args.pageVo,resultHandler);
      }
    }

    public static class updateGroupProductByOutlet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateGroupProductByOutlet_args, com.froad.thrift.vo.ResultVo> {
      public updateGroupProductByOutlet() {
        super("updateGroupProductByOutlet");
      }

      public updateGroupProductByOutlet_args getEmptyArgsInstance() {
        return new updateGroupProductByOutlet_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateGroupProductByOutlet_result result = new updateGroupProductByOutlet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateGroupProductByOutlet_result result = new updateGroupProductByOutlet_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateGroupProductByOutlet_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateGroupProductByOutlet(args.clientId, args.type, args.outletVo,resultHandler);
      }
    }

    public static class updateHisGroupGoodsOutlets<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateHisGroupGoodsOutlets_args, com.froad.thrift.vo.ResultVo> {
      public updateHisGroupGoodsOutlets() {
        super("updateHisGroupGoodsOutlets");
      }

      public updateHisGroupGoodsOutlets_args getEmptyArgsInstance() {
        return new updateHisGroupGoodsOutlets_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateHisGroupGoodsOutlets_result result = new updateHisGroupGoodsOutlets_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateHisGroupGoodsOutlets_result result = new updateHisGroupGoodsOutlets_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateHisGroupGoodsOutlets_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateHisGroupGoodsOutlets(resultHandler);
      }
    }

    public static class autoOffShelfProductSaleEnd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, autoOffShelfProductSaleEnd_args, com.froad.thrift.vo.ResultVo> {
      public autoOffShelfProductSaleEnd() {
        super("autoOffShelfProductSaleEnd");
      }

      public autoOffShelfProductSaleEnd_args getEmptyArgsInstance() {
        return new autoOffShelfProductSaleEnd_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            autoOffShelfProductSaleEnd_result result = new autoOffShelfProductSaleEnd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            autoOffShelfProductSaleEnd_result result = new autoOffShelfProductSaleEnd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, autoOffShelfProductSaleEnd_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.autoOffShelfProductSaleEnd(resultHandler);
      }
    }

    public static class findGoodsByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findGoodsByPage_args, com.froad.thrift.vo.ProductListPageVo> {
      public findGoodsByPage() {
        super("findGoodsByPage");
      }

      public findGoodsByPage_args getEmptyArgsInstance() {
        return new findGoodsByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductListPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductListPageVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductListPageVo o) {
            findGoodsByPage_result result = new findGoodsByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findGoodsByPage_result result = new findGoodsByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findGoodsByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductListPageVo> resultHandler) throws TException {
        iface.findGoodsByPage(args.productFilterVo, args.pageVo,resultHandler);
      }
    }

    public static class addGoods<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addGoods_args, com.froad.thrift.vo.AddProductVoRes> {
      public addGoods() {
        super("addGoods");
      }

      public addGoods_args getEmptyArgsInstance() {
        return new addGoods_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AddProductVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AddProductVoRes>() { 
          public void onComplete(com.froad.thrift.vo.AddProductVoRes o) {
            addGoods_result result = new addGoods_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addGoods_result result = new addGoods_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addGoods_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AddProductVoRes> resultHandler) throws TException {
        iface.addGoods(args.originVo, args.productInfoVo,resultHandler);
      }
    }

    public static class updateGoods<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateGoods_args, com.froad.thrift.vo.ResultVo> {
      public updateGoods() {
        super("updateGoods");
      }

      public updateGoods_args getEmptyArgsInstance() {
        return new updateGoods_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateGoods_result result = new updateGoods_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateGoods_result result = new updateGoods_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateGoods_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateGoods(args.originVo, args.productInfoVo,resultHandler);
      }
    }

    public static class getGoodsDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getGoodsDetail_args, com.froad.thrift.vo.GoodsInfoVo> {
      public getGoodsDetail() {
        super("getGoodsDetail");
      }

      public getGoodsDetail_args getEmptyArgsInstance() {
        return new getGoodsDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.GoodsInfoVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.GoodsInfoVo>() { 
          public void onComplete(com.froad.thrift.vo.GoodsInfoVo o) {
            getGoodsDetail_result result = new getGoodsDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getGoodsDetail_result result = new getGoodsDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getGoodsDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.GoodsInfoVo> resultHandler) throws TException {
        iface.getGoodsDetail(args.productId,resultHandler);
      }
    }

    public static class updateGoodsStatusOn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateGoodsStatusOn_args, com.froad.thrift.vo.ResultVo> {
      public updateGoodsStatusOn() {
        super("updateGoodsStatusOn");
      }

      public updateGoodsStatusOn_args getEmptyArgsInstance() {
        return new updateGoodsStatusOn_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateGoodsStatusOn_result result = new updateGoodsStatusOn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateGoodsStatusOn_result result = new updateGoodsStatusOn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateGoodsStatusOn_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateGoodsStatusOn(args.originVo, args.productId,resultHandler);
      }
    }

    public static class updateGoodsStatusOff<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateGoodsStatusOff_args, com.froad.thrift.vo.ResultVo> {
      public updateGoodsStatusOff() {
        super("updateGoodsStatusOff");
      }

      public updateGoodsStatusOff_args getEmptyArgsInstance() {
        return new updateGoodsStatusOff_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateGoodsStatusOff_result result = new updateGoodsStatusOff_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateGoodsStatusOff_result result = new updateGoodsStatusOff_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateGoodsStatusOff_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateGoodsStatusOff(args.originVo, args.productId,resultHandler);
      }
    }

    public static class queryBoutiqueGoods<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBoutiqueGoods_args, com.froad.thrift.vo.BoutiqueProductPageVoRes> {
      public queryBoutiqueGoods() {
        super("queryBoutiqueGoods");
      }

      public queryBoutiqueGoods_args getEmptyArgsInstance() {
        return new queryBoutiqueGoods_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.BoutiqueProductPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.BoutiqueProductPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.BoutiqueProductPageVoRes o) {
            queryBoutiqueGoods_result result = new queryBoutiqueGoods_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBoutiqueGoods_result result = new queryBoutiqueGoods_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBoutiqueGoods_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.BoutiqueProductPageVoRes> resultHandler) throws TException {
        iface.queryBoutiqueGoods(args.filterVo, args.filedSort, args.pageVo,resultHandler);
      }
    }

    public static class queryBoutiqueGoodsDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBoutiqueGoodsDetail_args, com.froad.thrift.vo.BoutiqueGoodsInfoVo> {
      public queryBoutiqueGoodsDetail() {
        super("queryBoutiqueGoodsDetail");
      }

      public queryBoutiqueGoodsDetail_args getEmptyArgsInstance() {
        return new queryBoutiqueGoodsDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.BoutiqueGoodsInfoVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.BoutiqueGoodsInfoVo>() { 
          public void onComplete(com.froad.thrift.vo.BoutiqueGoodsInfoVo o) {
            queryBoutiqueGoodsDetail_result result = new queryBoutiqueGoodsDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBoutiqueGoodsDetail_result result = new queryBoutiqueGoodsDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBoutiqueGoodsDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.BoutiqueGoodsInfoVo> resultHandler) throws TException {
        iface.queryBoutiqueGoodsDetail(args.productId,resultHandler);
      }
    }

    public static class getProductDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductDetail_args, com.froad.thrift.vo.ProductDetailInfo> {
      public getProductDetail() {
        super("getProductDetail");
      }

      public getProductDetail_args getEmptyArgsInstance() {
        return new getProductDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductDetailInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductDetailInfo>() { 
          public void onComplete(com.froad.thrift.vo.ProductDetailInfo o) {
            getProductDetail_result result = new getProductDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductDetail_result result = new getProductDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductDetailInfo> resultHandler) throws TException {
        iface.getProductDetail(args.productId,resultHandler);
      }
    }

    public static class findProductsByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findProductsByPage_args, com.froad.thrift.vo.ProductPageVo> {
      public findProductsByPage() {
        super("findProductsByPage");
      }

      public findProductsByPage_args getEmptyArgsInstance() {
        return new findProductsByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductPageVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductPageVo o) {
            findProductsByPage_result result = new findProductsByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findProductsByPage_result result = new findProductsByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findProductsByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductPageVo> resultHandler) throws TException {
        iface.findProductsByPage(args.filterVo, args.filedSorts, args.pageVo,resultHandler);
      }
    }

    public static class updateProductAuditState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProductAuditState_args, com.froad.thrift.vo.ResultVo> {
      public updateProductAuditState() {
        super("updateProductAuditState");
      }

      public updateProductAuditState_args getEmptyArgsInstance() {
        return new updateProductAuditState_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateProductAuditState_result result = new updateProductAuditState_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateProductAuditState_result result = new updateProductAuditState_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProductAuditState_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateProductAuditState(args.productAuditStates,resultHandler);
      }
    }

  }

  public static class addProduct_args implements org.apache.thrift.TBase<addProduct_args, addProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<addProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProduct_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProduct_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ProductInfoVo productInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_INFO_VO((short)2, "productInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_INFO_VO
            return PRODUCT_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("productInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProduct_args.class, metaDataMap);
    }

    public addProduct_args() {
    }

    public addProduct_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ProductInfoVo productInfoVo)
    {
      this();
      this.originVo = originVo;
      this.productInfoVo = productInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProduct_args(addProduct_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductInfoVo()) {
        this.productInfoVo = new com.froad.thrift.vo.ProductInfoVo(other.productInfoVo);
      }
    }

    public addProduct_args deepCopy() {
      return new addProduct_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productInfoVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addProduct_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ProductInfoVo getProductInfoVo() {
      return this.productInfoVo;
    }

    public addProduct_args setProductInfoVo(com.froad.thrift.vo.ProductInfoVo productInfoVo) {
      this.productInfoVo = productInfoVo;
      return this;
    }

    public void unsetProductInfoVo() {
      this.productInfoVo = null;
    }

    /** Returns true if field productInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductInfoVo() {
      return this.productInfoVo != null;
    }

    public void setProductInfoVoIsSet(boolean value) {
      if (!value) {
        this.productInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_INFO_VO:
        if (value == null) {
          unsetProductInfoVo();
        } else {
          setProductInfoVo((com.froad.thrift.vo.ProductInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_INFO_VO:
        return getProductInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_INFO_VO:
        return isSetProductInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProduct_args)
        return this.equals((addProduct_args)that);
      return false;
    }

    public boolean equals(addProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productInfoVo = true && this.isSetProductInfoVo();
      boolean that_present_productInfoVo = true && that.isSetProductInfoVo();
      if (this_present_productInfoVo || that_present_productInfoVo) {
        if (!(this_present_productInfoVo && that_present_productInfoVo))
          return false;
        if (!this.productInfoVo.equals(that.productInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productInfoVo = true && (isSetProductInfoVo());
      list.add(present_productInfoVo);
      if (present_productInfoVo)
        list.add(productInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductInfoVo()).compareTo(other.isSetProductInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productInfoVo, other.productInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProduct_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productInfoVo:");
      if (this.productInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (productInfoVo != null) {
        productInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProduct_argsStandardSchemeFactory implements SchemeFactory {
      public addProduct_argsStandardScheme getScheme() {
        return new addProduct_argsStandardScheme();
      }
    }

    private static class addProduct_argsStandardScheme extends StandardScheme<addProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productInfoVo = new com.froad.thrift.vo.ProductInfoVo();
                struct.productInfoVo.read(iprot);
                struct.setProductInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productInfoVo != null) {
          oprot.writeFieldBegin(PRODUCT_INFO_VO_FIELD_DESC);
          struct.productInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProduct_argsTupleSchemeFactory implements SchemeFactory {
      public addProduct_argsTupleScheme getScheme() {
        return new addProduct_argsTupleScheme();
      }
    }

    private static class addProduct_argsTupleScheme extends TupleScheme<addProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductInfoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductInfoVo()) {
          struct.productInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productInfoVo = new com.froad.thrift.vo.ProductInfoVo();
          struct.productInfoVo.read(iprot);
          struct.setProductInfoVoIsSet(true);
        }
      }
    }

  }

  public static class addProduct_result implements org.apache.thrift.TBase<addProduct_result, addProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<addProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProduct_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AddProductVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AddProductVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProduct_result.class, metaDataMap);
    }

    public addProduct_result() {
    }

    public addProduct_result(
      com.froad.thrift.vo.AddProductVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProduct_result(addProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AddProductVoRes(other.success);
      }
    }

    public addProduct_result deepCopy() {
      return new addProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AddProductVoRes getSuccess() {
      return this.success;
    }

    public addProduct_result setSuccess(com.froad.thrift.vo.AddProductVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AddProductVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProduct_result)
        return this.equals((addProduct_result)that);
      return false;
    }

    public boolean equals(addProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProduct_resultStandardSchemeFactory implements SchemeFactory {
      public addProduct_resultStandardScheme getScheme() {
        return new addProduct_resultStandardScheme();
      }
    }

    private static class addProduct_resultStandardScheme extends StandardScheme<addProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AddProductVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProduct_resultTupleSchemeFactory implements SchemeFactory {
      public addProduct_resultTupleScheme getScheme() {
        return new addProduct_resultTupleScheme();
      }
    }

    private static class addProduct_resultTupleScheme extends TupleScheme<addProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AddProductVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteProduct_args implements org.apache.thrift.TBase<deleteProduct_args, deleteProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProduct_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProduct_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ProductOperateVoReq productVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_VO_REQ((short)2, "productVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_VO_REQ
            return PRODUCT_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("productVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductOperateVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProduct_args.class, metaDataMap);
    }

    public deleteProduct_args() {
    }

    public deleteProduct_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ProductOperateVoReq productVoReq)
    {
      this();
      this.originVo = originVo;
      this.productVoReq = productVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProduct_args(deleteProduct_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductVoReq()) {
        this.productVoReq = new com.froad.thrift.vo.ProductOperateVoReq(other.productVoReq);
      }
    }

    public deleteProduct_args deepCopy() {
      return new deleteProduct_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productVoReq = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteProduct_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ProductOperateVoReq getProductVoReq() {
      return this.productVoReq;
    }

    public deleteProduct_args setProductVoReq(com.froad.thrift.vo.ProductOperateVoReq productVoReq) {
      this.productVoReq = productVoReq;
      return this;
    }

    public void unsetProductVoReq() {
      this.productVoReq = null;
    }

    /** Returns true if field productVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductVoReq() {
      return this.productVoReq != null;
    }

    public void setProductVoReqIsSet(boolean value) {
      if (!value) {
        this.productVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_VO_REQ:
        if (value == null) {
          unsetProductVoReq();
        } else {
          setProductVoReq((com.froad.thrift.vo.ProductOperateVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_VO_REQ:
        return getProductVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_VO_REQ:
        return isSetProductVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProduct_args)
        return this.equals((deleteProduct_args)that);
      return false;
    }

    public boolean equals(deleteProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productVoReq = true && this.isSetProductVoReq();
      boolean that_present_productVoReq = true && that.isSetProductVoReq();
      if (this_present_productVoReq || that_present_productVoReq) {
        if (!(this_present_productVoReq && that_present_productVoReq))
          return false;
        if (!this.productVoReq.equals(that.productVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productVoReq = true && (isSetProductVoReq());
      list.add(present_productVoReq);
      if (present_productVoReq)
        list.add(productVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductVoReq()).compareTo(other.isSetProductVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productVoReq, other.productVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProduct_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productVoReq:");
      if (this.productVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (productVoReq != null) {
        productVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProduct_argsStandardSchemeFactory implements SchemeFactory {
      public deleteProduct_argsStandardScheme getScheme() {
        return new deleteProduct_argsStandardScheme();
      }
    }

    private static class deleteProduct_argsStandardScheme extends StandardScheme<deleteProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productVoReq = new com.froad.thrift.vo.ProductOperateVoReq();
                struct.productVoReq.read(iprot);
                struct.setProductVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productVoReq != null) {
          oprot.writeFieldBegin(PRODUCT_VO_REQ_FIELD_DESC);
          struct.productVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProduct_argsTupleSchemeFactory implements SchemeFactory {
      public deleteProduct_argsTupleScheme getScheme() {
        return new deleteProduct_argsTupleScheme();
      }
    }

    private static class deleteProduct_argsTupleScheme extends TupleScheme<deleteProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductVoReq()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductVoReq()) {
          struct.productVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productVoReq = new com.froad.thrift.vo.ProductOperateVoReq();
          struct.productVoReq.read(iprot);
          struct.setProductVoReqIsSet(true);
        }
      }
    }

  }

  public static class deleteProduct_result implements org.apache.thrift.TBase<deleteProduct_result, deleteProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProduct_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProduct_result.class, metaDataMap);
    }

    public deleteProduct_result() {
    }

    public deleteProduct_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProduct_result(deleteProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteProduct_result deepCopy() {
      return new deleteProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteProduct_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProduct_result)
        return this.equals((deleteProduct_result)that);
      return false;
    }

    public boolean equals(deleteProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProduct_resultStandardSchemeFactory implements SchemeFactory {
      public deleteProduct_resultStandardScheme getScheme() {
        return new deleteProduct_resultStandardScheme();
      }
    }

    private static class deleteProduct_resultStandardScheme extends StandardScheme<deleteProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProduct_resultTupleSchemeFactory implements SchemeFactory {
      public deleteProduct_resultTupleScheme getScheme() {
        return new deleteProduct_resultTupleScheme();
      }
    }

    private static class deleteProduct_resultTupleScheme extends TupleScheme<deleteProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateProduct_args implements org.apache.thrift.TBase<updateProduct_args, updateProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProduct_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProduct_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ProductInfoVo productInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_INFO_VO((short)2, "productInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_INFO_VO
            return PRODUCT_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("productInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProduct_args.class, metaDataMap);
    }

    public updateProduct_args() {
    }

    public updateProduct_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ProductInfoVo productInfoVo)
    {
      this();
      this.originVo = originVo;
      this.productInfoVo = productInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProduct_args(updateProduct_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductInfoVo()) {
        this.productInfoVo = new com.froad.thrift.vo.ProductInfoVo(other.productInfoVo);
      }
    }

    public updateProduct_args deepCopy() {
      return new updateProduct_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productInfoVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateProduct_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ProductInfoVo getProductInfoVo() {
      return this.productInfoVo;
    }

    public updateProduct_args setProductInfoVo(com.froad.thrift.vo.ProductInfoVo productInfoVo) {
      this.productInfoVo = productInfoVo;
      return this;
    }

    public void unsetProductInfoVo() {
      this.productInfoVo = null;
    }

    /** Returns true if field productInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductInfoVo() {
      return this.productInfoVo != null;
    }

    public void setProductInfoVoIsSet(boolean value) {
      if (!value) {
        this.productInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_INFO_VO:
        if (value == null) {
          unsetProductInfoVo();
        } else {
          setProductInfoVo((com.froad.thrift.vo.ProductInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_INFO_VO:
        return getProductInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_INFO_VO:
        return isSetProductInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProduct_args)
        return this.equals((updateProduct_args)that);
      return false;
    }

    public boolean equals(updateProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productInfoVo = true && this.isSetProductInfoVo();
      boolean that_present_productInfoVo = true && that.isSetProductInfoVo();
      if (this_present_productInfoVo || that_present_productInfoVo) {
        if (!(this_present_productInfoVo && that_present_productInfoVo))
          return false;
        if (!this.productInfoVo.equals(that.productInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productInfoVo = true && (isSetProductInfoVo());
      list.add(present_productInfoVo);
      if (present_productInfoVo)
        list.add(productInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductInfoVo()).compareTo(other.isSetProductInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productInfoVo, other.productInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProduct_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productInfoVo:");
      if (this.productInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (productInfoVo != null) {
        productInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProduct_argsStandardSchemeFactory implements SchemeFactory {
      public updateProduct_argsStandardScheme getScheme() {
        return new updateProduct_argsStandardScheme();
      }
    }

    private static class updateProduct_argsStandardScheme extends StandardScheme<updateProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productInfoVo = new com.froad.thrift.vo.ProductInfoVo();
                struct.productInfoVo.read(iprot);
                struct.setProductInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productInfoVo != null) {
          oprot.writeFieldBegin(PRODUCT_INFO_VO_FIELD_DESC);
          struct.productInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProduct_argsTupleSchemeFactory implements SchemeFactory {
      public updateProduct_argsTupleScheme getScheme() {
        return new updateProduct_argsTupleScheme();
      }
    }

    private static class updateProduct_argsTupleScheme extends TupleScheme<updateProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductInfoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductInfoVo()) {
          struct.productInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productInfoVo = new com.froad.thrift.vo.ProductInfoVo();
          struct.productInfoVo.read(iprot);
          struct.setProductInfoVoIsSet(true);
        }
      }
    }

  }

  public static class updateProduct_result implements org.apache.thrift.TBase<updateProduct_result, updateProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProduct_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProduct_result.class, metaDataMap);
    }

    public updateProduct_result() {
    }

    public updateProduct_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProduct_result(updateProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateProduct_result deepCopy() {
      return new updateProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateProduct_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProduct_result)
        return this.equals((updateProduct_result)that);
      return false;
    }

    public boolean equals(updateProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProduct_resultStandardSchemeFactory implements SchemeFactory {
      public updateProduct_resultStandardScheme getScheme() {
        return new updateProduct_resultStandardScheme();
      }
    }

    private static class updateProduct_resultStandardScheme extends StandardScheme<updateProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProduct_resultTupleSchemeFactory implements SchemeFactory {
      public updateProduct_resultTupleScheme getScheme() {
        return new updateProduct_resultTupleScheme();
      }
    }

    private static class updateProduct_resultTupleScheme extends TupleScheme<updateProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateProductInfo_args implements org.apache.thrift.TBase<updateProductInfo_args, updateProductInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductInfo_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_BASE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productBaseVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductInfo_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ProductBaseVo productBaseVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_BASE_VO((short)2, "productBaseVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_BASE_VO
            return PRODUCT_BASE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_BASE_VO, new org.apache.thrift.meta_data.FieldMetaData("productBaseVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductBaseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductInfo_args.class, metaDataMap);
    }

    public updateProductInfo_args() {
    }

    public updateProductInfo_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ProductBaseVo productBaseVo)
    {
      this();
      this.originVo = originVo;
      this.productBaseVo = productBaseVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductInfo_args(updateProductInfo_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductBaseVo()) {
        this.productBaseVo = new com.froad.thrift.vo.ProductBaseVo(other.productBaseVo);
      }
    }

    public updateProductInfo_args deepCopy() {
      return new updateProductInfo_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productBaseVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateProductInfo_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ProductBaseVo getProductBaseVo() {
      return this.productBaseVo;
    }

    public updateProductInfo_args setProductBaseVo(com.froad.thrift.vo.ProductBaseVo productBaseVo) {
      this.productBaseVo = productBaseVo;
      return this;
    }

    public void unsetProductBaseVo() {
      this.productBaseVo = null;
    }

    /** Returns true if field productBaseVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductBaseVo() {
      return this.productBaseVo != null;
    }

    public void setProductBaseVoIsSet(boolean value) {
      if (!value) {
        this.productBaseVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_BASE_VO:
        if (value == null) {
          unsetProductBaseVo();
        } else {
          setProductBaseVo((com.froad.thrift.vo.ProductBaseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_BASE_VO:
        return getProductBaseVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_BASE_VO:
        return isSetProductBaseVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductInfo_args)
        return this.equals((updateProductInfo_args)that);
      return false;
    }

    public boolean equals(updateProductInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productBaseVo = true && this.isSetProductBaseVo();
      boolean that_present_productBaseVo = true && that.isSetProductBaseVo();
      if (this_present_productBaseVo || that_present_productBaseVo) {
        if (!(this_present_productBaseVo && that_present_productBaseVo))
          return false;
        if (!this.productBaseVo.equals(that.productBaseVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productBaseVo = true && (isSetProductBaseVo());
      list.add(present_productBaseVo);
      if (present_productBaseVo)
        list.add(productBaseVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductBaseVo()).compareTo(other.isSetProductBaseVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductBaseVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productBaseVo, other.productBaseVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductInfo_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productBaseVo:");
      if (this.productBaseVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productBaseVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (productBaseVo != null) {
        productBaseVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateProductInfo_argsStandardScheme getScheme() {
        return new updateProductInfo_argsStandardScheme();
      }
    }

    private static class updateProductInfo_argsStandardScheme extends StandardScheme<updateProductInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_BASE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productBaseVo = new com.froad.thrift.vo.ProductBaseVo();
                struct.productBaseVo.read(iprot);
                struct.setProductBaseVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productBaseVo != null) {
          oprot.writeFieldBegin(PRODUCT_BASE_VO_FIELD_DESC);
          struct.productBaseVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateProductInfo_argsTupleScheme getScheme() {
        return new updateProductInfo_argsTupleScheme();
      }
    }

    private static class updateProductInfo_argsTupleScheme extends TupleScheme<updateProductInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductBaseVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductBaseVo()) {
          struct.productBaseVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productBaseVo = new com.froad.thrift.vo.ProductBaseVo();
          struct.productBaseVo.read(iprot);
          struct.setProductBaseVoIsSet(true);
        }
      }
    }

  }

  public static class updateProductInfo_result implements org.apache.thrift.TBase<updateProductInfo_result, updateProductInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductInfo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductInfo_result.class, metaDataMap);
    }

    public updateProductInfo_result() {
    }

    public updateProductInfo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductInfo_result(updateProductInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateProductInfo_result deepCopy() {
      return new updateProductInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateProductInfo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductInfo_result)
        return this.equals((updateProductInfo_result)that);
      return false;
    }

    public boolean equals(updateProductInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateProductInfo_resultStandardScheme getScheme() {
        return new updateProductInfo_resultStandardScheme();
      }
    }

    private static class updateProductInfo_resultStandardScheme extends StandardScheme<updateProductInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateProductInfo_resultTupleScheme getScheme() {
        return new updateProductInfo_resultTupleScheme();
      }
    }

    private static class updateProductInfo_resultTupleScheme extends TupleScheme<updateProductInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantProductDetail_args implements org.apache.thrift.TBase<getMerchantProductDetail_args, getMerchantProductDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantProductDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantProductDetail_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantProductDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantProductDetail_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductOperateVoReq productVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_VO_REQ((short)1, "productVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_VO_REQ
            return PRODUCT_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("productVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductOperateVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantProductDetail_args.class, metaDataMap);
    }

    public getMerchantProductDetail_args() {
    }

    public getMerchantProductDetail_args(
      com.froad.thrift.vo.ProductOperateVoReq productVoReq)
    {
      this();
      this.productVoReq = productVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantProductDetail_args(getMerchantProductDetail_args other) {
      if (other.isSetProductVoReq()) {
        this.productVoReq = new com.froad.thrift.vo.ProductOperateVoReq(other.productVoReq);
      }
    }

    public getMerchantProductDetail_args deepCopy() {
      return new getMerchantProductDetail_args(this);
    }

    @Override
    public void clear() {
      this.productVoReq = null;
    }

    public com.froad.thrift.vo.ProductOperateVoReq getProductVoReq() {
      return this.productVoReq;
    }

    public getMerchantProductDetail_args setProductVoReq(com.froad.thrift.vo.ProductOperateVoReq productVoReq) {
      this.productVoReq = productVoReq;
      return this;
    }

    public void unsetProductVoReq() {
      this.productVoReq = null;
    }

    /** Returns true if field productVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductVoReq() {
      return this.productVoReq != null;
    }

    public void setProductVoReqIsSet(boolean value) {
      if (!value) {
        this.productVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_VO_REQ:
        if (value == null) {
          unsetProductVoReq();
        } else {
          setProductVoReq((com.froad.thrift.vo.ProductOperateVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_VO_REQ:
        return getProductVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_VO_REQ:
        return isSetProductVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantProductDetail_args)
        return this.equals((getMerchantProductDetail_args)that);
      return false;
    }

    public boolean equals(getMerchantProductDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_productVoReq = true && this.isSetProductVoReq();
      boolean that_present_productVoReq = true && that.isSetProductVoReq();
      if (this_present_productVoReq || that_present_productVoReq) {
        if (!(this_present_productVoReq && that_present_productVoReq))
          return false;
        if (!this.productVoReq.equals(that.productVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productVoReq = true && (isSetProductVoReq());
      list.add(present_productVoReq);
      if (present_productVoReq)
        list.add(productVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantProductDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductVoReq()).compareTo(other.isSetProductVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productVoReq, other.productVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantProductDetail_args(");
      boolean first = true;

      sb.append("productVoReq:");
      if (this.productVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productVoReq != null) {
        productVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantProductDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantProductDetail_argsStandardScheme getScheme() {
        return new getMerchantProductDetail_argsStandardScheme();
      }
    }

    private static class getMerchantProductDetail_argsStandardScheme extends StandardScheme<getMerchantProductDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantProductDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productVoReq = new com.froad.thrift.vo.ProductOperateVoReq();
                struct.productVoReq.read(iprot);
                struct.setProductVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantProductDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productVoReq != null) {
          oprot.writeFieldBegin(PRODUCT_VO_REQ_FIELD_DESC);
          struct.productVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantProductDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantProductDetail_argsTupleScheme getScheme() {
        return new getMerchantProductDetail_argsTupleScheme();
      }
    }

    private static class getMerchantProductDetail_argsTupleScheme extends TupleScheme<getMerchantProductDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantProductDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductVoReq()) {
          struct.productVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantProductDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productVoReq = new com.froad.thrift.vo.ProductOperateVoReq();
          struct.productVoReq.read(iprot);
          struct.setProductVoReqIsSet(true);
        }
      }
    }

  }

  public static class getMerchantProductDetail_result implements org.apache.thrift.TBase<getMerchantProductDetail_result, getMerchantProductDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantProductDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantProductDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantProductDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantProductDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductInfoVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantProductDetail_result.class, metaDataMap);
    }

    public getMerchantProductDetail_result() {
    }

    public getMerchantProductDetail_result(
      com.froad.thrift.vo.ProductInfoVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantProductDetail_result(getMerchantProductDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductInfoVo(other.success);
      }
    }

    public getMerchantProductDetail_result deepCopy() {
      return new getMerchantProductDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductInfoVo getSuccess() {
      return this.success;
    }

    public getMerchantProductDetail_result setSuccess(com.froad.thrift.vo.ProductInfoVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantProductDetail_result)
        return this.equals((getMerchantProductDetail_result)that);
      return false;
    }

    public boolean equals(getMerchantProductDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantProductDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantProductDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantProductDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantProductDetail_resultStandardScheme getScheme() {
        return new getMerchantProductDetail_resultStandardScheme();
      }
    }

    private static class getMerchantProductDetail_resultStandardScheme extends StandardScheme<getMerchantProductDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantProductDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductInfoVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantProductDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantProductDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantProductDetail_resultTupleScheme getScheme() {
        return new getMerchantProductDetail_resultTupleScheme();
      }
    }

    private static class getMerchantProductDetail_resultTupleScheme extends TupleScheme<getMerchantProductDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantProductDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantProductDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductInfoVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isProductExist_args implements org.apache.thrift.TBase<isProductExist_args, isProductExist_args._Fields>, java.io.Serializable, Cloneable, Comparable<isProductExist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isProductExist_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_EXIST_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productExistVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isProductExist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isProductExist_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductExistVoReq productExistVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_EXIST_VO_REQ((short)1, "productExistVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_EXIST_VO_REQ
            return PRODUCT_EXIST_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_EXIST_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("productExistVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductExistVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isProductExist_args.class, metaDataMap);
    }

    public isProductExist_args() {
    }

    public isProductExist_args(
      com.froad.thrift.vo.ProductExistVoReq productExistVoReq)
    {
      this();
      this.productExistVoReq = productExistVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isProductExist_args(isProductExist_args other) {
      if (other.isSetProductExistVoReq()) {
        this.productExistVoReq = new com.froad.thrift.vo.ProductExistVoReq(other.productExistVoReq);
      }
    }

    public isProductExist_args deepCopy() {
      return new isProductExist_args(this);
    }

    @Override
    public void clear() {
      this.productExistVoReq = null;
    }

    public com.froad.thrift.vo.ProductExistVoReq getProductExistVoReq() {
      return this.productExistVoReq;
    }

    public isProductExist_args setProductExistVoReq(com.froad.thrift.vo.ProductExistVoReq productExistVoReq) {
      this.productExistVoReq = productExistVoReq;
      return this;
    }

    public void unsetProductExistVoReq() {
      this.productExistVoReq = null;
    }

    /** Returns true if field productExistVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductExistVoReq() {
      return this.productExistVoReq != null;
    }

    public void setProductExistVoReqIsSet(boolean value) {
      if (!value) {
        this.productExistVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_EXIST_VO_REQ:
        if (value == null) {
          unsetProductExistVoReq();
        } else {
          setProductExistVoReq((com.froad.thrift.vo.ProductExistVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_EXIST_VO_REQ:
        return getProductExistVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_EXIST_VO_REQ:
        return isSetProductExistVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isProductExist_args)
        return this.equals((isProductExist_args)that);
      return false;
    }

    public boolean equals(isProductExist_args that) {
      if (that == null)
        return false;

      boolean this_present_productExistVoReq = true && this.isSetProductExistVoReq();
      boolean that_present_productExistVoReq = true && that.isSetProductExistVoReq();
      if (this_present_productExistVoReq || that_present_productExistVoReq) {
        if (!(this_present_productExistVoReq && that_present_productExistVoReq))
          return false;
        if (!this.productExistVoReq.equals(that.productExistVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productExistVoReq = true && (isSetProductExistVoReq());
      list.add(present_productExistVoReq);
      if (present_productExistVoReq)
        list.add(productExistVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(isProductExist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductExistVoReq()).compareTo(other.isSetProductExistVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductExistVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productExistVoReq, other.productExistVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isProductExist_args(");
      boolean first = true;

      sb.append("productExistVoReq:");
      if (this.productExistVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productExistVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productExistVoReq != null) {
        productExistVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isProductExist_argsStandardSchemeFactory implements SchemeFactory {
      public isProductExist_argsStandardScheme getScheme() {
        return new isProductExist_argsStandardScheme();
      }
    }

    private static class isProductExist_argsStandardScheme extends StandardScheme<isProductExist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isProductExist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_EXIST_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productExistVoReq = new com.froad.thrift.vo.ProductExistVoReq();
                struct.productExistVoReq.read(iprot);
                struct.setProductExistVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isProductExist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productExistVoReq != null) {
          oprot.writeFieldBegin(PRODUCT_EXIST_VO_REQ_FIELD_DESC);
          struct.productExistVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isProductExist_argsTupleSchemeFactory implements SchemeFactory {
      public isProductExist_argsTupleScheme getScheme() {
        return new isProductExist_argsTupleScheme();
      }
    }

    private static class isProductExist_argsTupleScheme extends TupleScheme<isProductExist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isProductExist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductExistVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductExistVoReq()) {
          struct.productExistVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isProductExist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productExistVoReq = new com.froad.thrift.vo.ProductExistVoReq();
          struct.productExistVoReq.read(iprot);
          struct.setProductExistVoReqIsSet(true);
        }
      }
    }

  }

  public static class isProductExist_result implements org.apache.thrift.TBase<isProductExist_result, isProductExist_result._Fields>, java.io.Serializable, Cloneable, Comparable<isProductExist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isProductExist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isProductExist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isProductExist_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isProductExist_result.class, metaDataMap);
    }

    public isProductExist_result() {
    }

    public isProductExist_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isProductExist_result(isProductExist_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isProductExist_result deepCopy() {
      return new isProductExist_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isProductExist_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isProductExist_result)
        return this.equals((isProductExist_result)that);
      return false;
    }

    public boolean equals(isProductExist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isProductExist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isProductExist_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isProductExist_resultStandardSchemeFactory implements SchemeFactory {
      public isProductExist_resultStandardScheme getScheme() {
        return new isProductExist_resultStandardScheme();
      }
    }

    private static class isProductExist_resultStandardScheme extends StandardScheme<isProductExist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isProductExist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isProductExist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isProductExist_resultTupleSchemeFactory implements SchemeFactory {
      public isProductExist_resultTupleScheme getScheme() {
        return new isProductExist_resultTupleScheme();
      }
    }

    private static class isProductExist_resultTupleScheme extends TupleScheme<isProductExist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isProductExist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isProductExist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findMerchantProductsByPage_args implements org.apache.thrift.TBase<findMerchantProductsByPage_args, findMerchantProductsByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findMerchantProductsByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMerchantProductsByPage_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_FILTER_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productFilterVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMerchantProductsByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMerchantProductsByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_FILTER_VO_REQ((short)1, "productFilterVoReq"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_FILTER_VO_REQ
            return PRODUCT_FILTER_VO_REQ;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_FILTER_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("productFilterVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductFilterVoReq.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMerchantProductsByPage_args.class, metaDataMap);
    }

    public findMerchantProductsByPage_args() {
    }

    public findMerchantProductsByPage_args(
      com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.productFilterVoReq = productFilterVoReq;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMerchantProductsByPage_args(findMerchantProductsByPage_args other) {
      if (other.isSetProductFilterVoReq()) {
        this.productFilterVoReq = new com.froad.thrift.vo.ProductFilterVoReq(other.productFilterVoReq);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public findMerchantProductsByPage_args deepCopy() {
      return new findMerchantProductsByPage_args(this);
    }

    @Override
    public void clear() {
      this.productFilterVoReq = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.ProductFilterVoReq getProductFilterVoReq() {
      return this.productFilterVoReq;
    }

    public findMerchantProductsByPage_args setProductFilterVoReq(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq) {
      this.productFilterVoReq = productFilterVoReq;
      return this;
    }

    public void unsetProductFilterVoReq() {
      this.productFilterVoReq = null;
    }

    /** Returns true if field productFilterVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductFilterVoReq() {
      return this.productFilterVoReq != null;
    }

    public void setProductFilterVoReqIsSet(boolean value) {
      if (!value) {
        this.productFilterVoReq = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public findMerchantProductsByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_FILTER_VO_REQ:
        if (value == null) {
          unsetProductFilterVoReq();
        } else {
          setProductFilterVoReq((com.froad.thrift.vo.ProductFilterVoReq)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_FILTER_VO_REQ:
        return getProductFilterVoReq();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_FILTER_VO_REQ:
        return isSetProductFilterVoReq();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMerchantProductsByPage_args)
        return this.equals((findMerchantProductsByPage_args)that);
      return false;
    }

    public boolean equals(findMerchantProductsByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_productFilterVoReq = true && this.isSetProductFilterVoReq();
      boolean that_present_productFilterVoReq = true && that.isSetProductFilterVoReq();
      if (this_present_productFilterVoReq || that_present_productFilterVoReq) {
        if (!(this_present_productFilterVoReq && that_present_productFilterVoReq))
          return false;
        if (!this.productFilterVoReq.equals(that.productFilterVoReq))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productFilterVoReq = true && (isSetProductFilterVoReq());
      list.add(present_productFilterVoReq);
      if (present_productFilterVoReq)
        list.add(productFilterVoReq);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findMerchantProductsByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductFilterVoReq()).compareTo(other.isSetProductFilterVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductFilterVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productFilterVoReq, other.productFilterVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMerchantProductsByPage_args(");
      boolean first = true;

      sb.append("productFilterVoReq:");
      if (this.productFilterVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productFilterVoReq);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productFilterVoReq != null) {
        productFilterVoReq.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMerchantProductsByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findMerchantProductsByPage_argsStandardScheme getScheme() {
        return new findMerchantProductsByPage_argsStandardScheme();
      }
    }

    private static class findMerchantProductsByPage_argsStandardScheme extends StandardScheme<findMerchantProductsByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMerchantProductsByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_FILTER_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productFilterVoReq = new com.froad.thrift.vo.ProductFilterVoReq();
                struct.productFilterVoReq.read(iprot);
                struct.setProductFilterVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMerchantProductsByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productFilterVoReq != null) {
          oprot.writeFieldBegin(PRODUCT_FILTER_VO_REQ_FIELD_DESC);
          struct.productFilterVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMerchantProductsByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findMerchantProductsByPage_argsTupleScheme getScheme() {
        return new findMerchantProductsByPage_argsTupleScheme();
      }
    }

    private static class findMerchantProductsByPage_argsTupleScheme extends TupleScheme<findMerchantProductsByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMerchantProductsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductFilterVoReq()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductFilterVoReq()) {
          struct.productFilterVoReq.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMerchantProductsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productFilterVoReq = new com.froad.thrift.vo.ProductFilterVoReq();
          struct.productFilterVoReq.read(iprot);
          struct.setProductFilterVoReqIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class findMerchantProductsByPage_result implements org.apache.thrift.TBase<findMerchantProductsByPage_result, findMerchantProductsByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findMerchantProductsByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findMerchantProductsByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findMerchantProductsByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findMerchantProductsByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductBriefPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductBriefPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findMerchantProductsByPage_result.class, metaDataMap);
    }

    public findMerchantProductsByPage_result() {
    }

    public findMerchantProductsByPage_result(
      com.froad.thrift.vo.ProductBriefPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findMerchantProductsByPage_result(findMerchantProductsByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductBriefPageVo(other.success);
      }
    }

    public findMerchantProductsByPage_result deepCopy() {
      return new findMerchantProductsByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductBriefPageVo getSuccess() {
      return this.success;
    }

    public findMerchantProductsByPage_result setSuccess(com.froad.thrift.vo.ProductBriefPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductBriefPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findMerchantProductsByPage_result)
        return this.equals((findMerchantProductsByPage_result)that);
      return false;
    }

    public boolean equals(findMerchantProductsByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findMerchantProductsByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findMerchantProductsByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findMerchantProductsByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findMerchantProductsByPage_resultStandardScheme getScheme() {
        return new findMerchantProductsByPage_resultStandardScheme();
      }
    }

    private static class findMerchantProductsByPage_resultStandardScheme extends StandardScheme<findMerchantProductsByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findMerchantProductsByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductBriefPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findMerchantProductsByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findMerchantProductsByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findMerchantProductsByPage_resultTupleScheme getScheme() {
        return new findMerchantProductsByPage_resultTupleScheme();
      }
    }

    private static class findMerchantProductsByPage_resultTupleScheme extends TupleScheme<findMerchantProductsByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findMerchantProductsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findMerchantProductsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductBriefPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryProducts_args implements org.apache.thrift.TBase<queryProducts_args, queryProducts_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryProducts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryProducts_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_FILTER_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productFilterVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryProducts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryProducts_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_FILTER_VO_REQ((short)1, "productFilterVoReq"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_FILTER_VO_REQ
            return PRODUCT_FILTER_VO_REQ;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_FILTER_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("productFilterVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductFilterVoReq.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryProducts_args.class, metaDataMap);
    }

    public queryProducts_args() {
    }

    public queryProducts_args(
      com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.productFilterVoReq = productFilterVoReq;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryProducts_args(queryProducts_args other) {
      if (other.isSetProductFilterVoReq()) {
        this.productFilterVoReq = new com.froad.thrift.vo.ProductFilterVoReq(other.productFilterVoReq);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public queryProducts_args deepCopy() {
      return new queryProducts_args(this);
    }

    @Override
    public void clear() {
      this.productFilterVoReq = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.ProductFilterVoReq getProductFilterVoReq() {
      return this.productFilterVoReq;
    }

    public queryProducts_args setProductFilterVoReq(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq) {
      this.productFilterVoReq = productFilterVoReq;
      return this;
    }

    public void unsetProductFilterVoReq() {
      this.productFilterVoReq = null;
    }

    /** Returns true if field productFilterVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductFilterVoReq() {
      return this.productFilterVoReq != null;
    }

    public void setProductFilterVoReqIsSet(boolean value) {
      if (!value) {
        this.productFilterVoReq = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public queryProducts_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_FILTER_VO_REQ:
        if (value == null) {
          unsetProductFilterVoReq();
        } else {
          setProductFilterVoReq((com.froad.thrift.vo.ProductFilterVoReq)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_FILTER_VO_REQ:
        return getProductFilterVoReq();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_FILTER_VO_REQ:
        return isSetProductFilterVoReq();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryProducts_args)
        return this.equals((queryProducts_args)that);
      return false;
    }

    public boolean equals(queryProducts_args that) {
      if (that == null)
        return false;

      boolean this_present_productFilterVoReq = true && this.isSetProductFilterVoReq();
      boolean that_present_productFilterVoReq = true && that.isSetProductFilterVoReq();
      if (this_present_productFilterVoReq || that_present_productFilterVoReq) {
        if (!(this_present_productFilterVoReq && that_present_productFilterVoReq))
          return false;
        if (!this.productFilterVoReq.equals(that.productFilterVoReq))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productFilterVoReq = true && (isSetProductFilterVoReq());
      list.add(present_productFilterVoReq);
      if (present_productFilterVoReq)
        list.add(productFilterVoReq);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryProducts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductFilterVoReq()).compareTo(other.isSetProductFilterVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductFilterVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productFilterVoReq, other.productFilterVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryProducts_args(");
      boolean first = true;

      sb.append("productFilterVoReq:");
      if (this.productFilterVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productFilterVoReq);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productFilterVoReq != null) {
        productFilterVoReq.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryProducts_argsStandardSchemeFactory implements SchemeFactory {
      public queryProducts_argsStandardScheme getScheme() {
        return new queryProducts_argsStandardScheme();
      }
    }

    private static class queryProducts_argsStandardScheme extends StandardScheme<queryProducts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryProducts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_FILTER_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productFilterVoReq = new com.froad.thrift.vo.ProductFilterVoReq();
                struct.productFilterVoReq.read(iprot);
                struct.setProductFilterVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryProducts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productFilterVoReq != null) {
          oprot.writeFieldBegin(PRODUCT_FILTER_VO_REQ_FIELD_DESC);
          struct.productFilterVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryProducts_argsTupleSchemeFactory implements SchemeFactory {
      public queryProducts_argsTupleScheme getScheme() {
        return new queryProducts_argsTupleScheme();
      }
    }

    private static class queryProducts_argsTupleScheme extends TupleScheme<queryProducts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductFilterVoReq()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductFilterVoReq()) {
          struct.productFilterVoReq.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productFilterVoReq = new com.froad.thrift.vo.ProductFilterVoReq();
          struct.productFilterVoReq.read(iprot);
          struct.setProductFilterVoReqIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class queryProducts_result implements org.apache.thrift.TBase<queryProducts_result, queryProducts_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryProducts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryProducts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryProducts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryProducts_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductBriefPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductBriefPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryProducts_result.class, metaDataMap);
    }

    public queryProducts_result() {
    }

    public queryProducts_result(
      com.froad.thrift.vo.ProductBriefPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryProducts_result(queryProducts_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductBriefPageVoRes(other.success);
      }
    }

    public queryProducts_result deepCopy() {
      return new queryProducts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductBriefPageVoRes getSuccess() {
      return this.success;
    }

    public queryProducts_result setSuccess(com.froad.thrift.vo.ProductBriefPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductBriefPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryProducts_result)
        return this.equals((queryProducts_result)that);
      return false;
    }

    public boolean equals(queryProducts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryProducts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryProducts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryProducts_resultStandardSchemeFactory implements SchemeFactory {
      public queryProducts_resultStandardScheme getScheme() {
        return new queryProducts_resultStandardScheme();
      }
    }

    private static class queryProducts_resultStandardScheme extends StandardScheme<queryProducts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryProducts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductBriefPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryProducts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryProducts_resultTupleSchemeFactory implements SchemeFactory {
      public queryProducts_resultTupleScheme getScheme() {
        return new queryProducts_resultTupleScheme();
      }
    }

    private static class queryProducts_resultTupleScheme extends TupleScheme<queryProducts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductBriefPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryProductDetail_args implements org.apache.thrift.TBase<queryProductDetail_args, queryProductDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryProductDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryProductDetail_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryProductDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryProductDetail_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductOperateVoReq productVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_VO_REQ((short)1, "productVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_VO_REQ
            return PRODUCT_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("productVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductOperateVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryProductDetail_args.class, metaDataMap);
    }

    public queryProductDetail_args() {
    }

    public queryProductDetail_args(
      com.froad.thrift.vo.ProductOperateVoReq productVoReq)
    {
      this();
      this.productVoReq = productVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryProductDetail_args(queryProductDetail_args other) {
      if (other.isSetProductVoReq()) {
        this.productVoReq = new com.froad.thrift.vo.ProductOperateVoReq(other.productVoReq);
      }
    }

    public queryProductDetail_args deepCopy() {
      return new queryProductDetail_args(this);
    }

    @Override
    public void clear() {
      this.productVoReq = null;
    }

    public com.froad.thrift.vo.ProductOperateVoReq getProductVoReq() {
      return this.productVoReq;
    }

    public queryProductDetail_args setProductVoReq(com.froad.thrift.vo.ProductOperateVoReq productVoReq) {
      this.productVoReq = productVoReq;
      return this;
    }

    public void unsetProductVoReq() {
      this.productVoReq = null;
    }

    /** Returns true if field productVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductVoReq() {
      return this.productVoReq != null;
    }

    public void setProductVoReqIsSet(boolean value) {
      if (!value) {
        this.productVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_VO_REQ:
        if (value == null) {
          unsetProductVoReq();
        } else {
          setProductVoReq((com.froad.thrift.vo.ProductOperateVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_VO_REQ:
        return getProductVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_VO_REQ:
        return isSetProductVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryProductDetail_args)
        return this.equals((queryProductDetail_args)that);
      return false;
    }

    public boolean equals(queryProductDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_productVoReq = true && this.isSetProductVoReq();
      boolean that_present_productVoReq = true && that.isSetProductVoReq();
      if (this_present_productVoReq || that_present_productVoReq) {
        if (!(this_present_productVoReq && that_present_productVoReq))
          return false;
        if (!this.productVoReq.equals(that.productVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productVoReq = true && (isSetProductVoReq());
      list.add(present_productVoReq);
      if (present_productVoReq)
        list.add(productVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryProductDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductVoReq()).compareTo(other.isSetProductVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productVoReq, other.productVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryProductDetail_args(");
      boolean first = true;

      sb.append("productVoReq:");
      if (this.productVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productVoReq != null) {
        productVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryProductDetail_argsStandardSchemeFactory implements SchemeFactory {
      public queryProductDetail_argsStandardScheme getScheme() {
        return new queryProductDetail_argsStandardScheme();
      }
    }

    private static class queryProductDetail_argsStandardScheme extends StandardScheme<queryProductDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryProductDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productVoReq = new com.froad.thrift.vo.ProductOperateVoReq();
                struct.productVoReq.read(iprot);
                struct.setProductVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryProductDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productVoReq != null) {
          oprot.writeFieldBegin(PRODUCT_VO_REQ_FIELD_DESC);
          struct.productVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryProductDetail_argsTupleSchemeFactory implements SchemeFactory {
      public queryProductDetail_argsTupleScheme getScheme() {
        return new queryProductDetail_argsTupleScheme();
      }
    }

    private static class queryProductDetail_argsTupleScheme extends TupleScheme<queryProductDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryProductDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductVoReq()) {
          struct.productVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryProductDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productVoReq = new com.froad.thrift.vo.ProductOperateVoReq();
          struct.productVoReq.read(iprot);
          struct.setProductVoReqIsSet(true);
        }
      }
    }

  }

  public static class queryProductDetail_result implements org.apache.thrift.TBase<queryProductDetail_result, queryProductDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryProductDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryProductDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryProductDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryProductDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductInfoVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryProductDetail_result.class, metaDataMap);
    }

    public queryProductDetail_result() {
    }

    public queryProductDetail_result(
      com.froad.thrift.vo.ProductInfoVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryProductDetail_result(queryProductDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductInfoVo(other.success);
      }
    }

    public queryProductDetail_result deepCopy() {
      return new queryProductDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductInfoVo getSuccess() {
      return this.success;
    }

    public queryProductDetail_result setSuccess(com.froad.thrift.vo.ProductInfoVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryProductDetail_result)
        return this.equals((queryProductDetail_result)that);
      return false;
    }

    public boolean equals(queryProductDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryProductDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryProductDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryProductDetail_resultStandardSchemeFactory implements SchemeFactory {
      public queryProductDetail_resultStandardScheme getScheme() {
        return new queryProductDetail_resultStandardScheme();
      }
    }

    private static class queryProductDetail_resultStandardScheme extends StandardScheme<queryProductDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryProductDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductInfoVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryProductDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryProductDetail_resultTupleSchemeFactory implements SchemeFactory {
      public queryProductDetail_resultTupleScheme getScheme() {
        return new queryProductDetail_resultTupleScheme();
      }
    }

    private static class queryProductDetail_resultTupleScheme extends TupleScheme<queryProductDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryProductDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryProductDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductInfoVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateProductStatus_args implements org.apache.thrift.TBase<updateProductStatus_args, updateProductStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductStatus_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_STATUS_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productStatusVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductStatus_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ProductStatusVoReq productStatusVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_STATUS_VO_REQ((short)2, "productStatusVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_STATUS_VO_REQ
            return PRODUCT_STATUS_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_STATUS_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("productStatusVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductStatusVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductStatus_args.class, metaDataMap);
    }

    public updateProductStatus_args() {
    }

    public updateProductStatus_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ProductStatusVoReq productStatusVoReq)
    {
      this();
      this.originVo = originVo;
      this.productStatusVoReq = productStatusVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductStatus_args(updateProductStatus_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductStatusVoReq()) {
        this.productStatusVoReq = new com.froad.thrift.vo.ProductStatusVoReq(other.productStatusVoReq);
      }
    }

    public updateProductStatus_args deepCopy() {
      return new updateProductStatus_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productStatusVoReq = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateProductStatus_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ProductStatusVoReq getProductStatusVoReq() {
      return this.productStatusVoReq;
    }

    public updateProductStatus_args setProductStatusVoReq(com.froad.thrift.vo.ProductStatusVoReq productStatusVoReq) {
      this.productStatusVoReq = productStatusVoReq;
      return this;
    }

    public void unsetProductStatusVoReq() {
      this.productStatusVoReq = null;
    }

    /** Returns true if field productStatusVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductStatusVoReq() {
      return this.productStatusVoReq != null;
    }

    public void setProductStatusVoReqIsSet(boolean value) {
      if (!value) {
        this.productStatusVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_STATUS_VO_REQ:
        if (value == null) {
          unsetProductStatusVoReq();
        } else {
          setProductStatusVoReq((com.froad.thrift.vo.ProductStatusVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_STATUS_VO_REQ:
        return getProductStatusVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_STATUS_VO_REQ:
        return isSetProductStatusVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductStatus_args)
        return this.equals((updateProductStatus_args)that);
      return false;
    }

    public boolean equals(updateProductStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productStatusVoReq = true && this.isSetProductStatusVoReq();
      boolean that_present_productStatusVoReq = true && that.isSetProductStatusVoReq();
      if (this_present_productStatusVoReq || that_present_productStatusVoReq) {
        if (!(this_present_productStatusVoReq && that_present_productStatusVoReq))
          return false;
        if (!this.productStatusVoReq.equals(that.productStatusVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productStatusVoReq = true && (isSetProductStatusVoReq());
      list.add(present_productStatusVoReq);
      if (present_productStatusVoReq)
        list.add(productStatusVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductStatusVoReq()).compareTo(other.isSetProductStatusVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductStatusVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productStatusVoReq, other.productStatusVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductStatus_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productStatusVoReq:");
      if (this.productStatusVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productStatusVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (productStatusVoReq != null) {
        productStatusVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateProductStatus_argsStandardScheme getScheme() {
        return new updateProductStatus_argsStandardScheme();
      }
    }

    private static class updateProductStatus_argsStandardScheme extends StandardScheme<updateProductStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_STATUS_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productStatusVoReq = new com.froad.thrift.vo.ProductStatusVoReq();
                struct.productStatusVoReq.read(iprot);
                struct.setProductStatusVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productStatusVoReq != null) {
          oprot.writeFieldBegin(PRODUCT_STATUS_VO_REQ_FIELD_DESC);
          struct.productStatusVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateProductStatus_argsTupleScheme getScheme() {
        return new updateProductStatus_argsTupleScheme();
      }
    }

    private static class updateProductStatus_argsTupleScheme extends TupleScheme<updateProductStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductStatusVoReq()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductStatusVoReq()) {
          struct.productStatusVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productStatusVoReq = new com.froad.thrift.vo.ProductStatusVoReq();
          struct.productStatusVoReq.read(iprot);
          struct.setProductStatusVoReqIsSet(true);
        }
      }
    }

  }

  public static class updateProductStatus_result implements org.apache.thrift.TBase<updateProductStatus_result, updateProductStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductStatus_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductStatus_result.class, metaDataMap);
    }

    public updateProductStatus_result() {
    }

    public updateProductStatus_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductStatus_result(updateProductStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateProductStatus_result deepCopy() {
      return new updateProductStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateProductStatus_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductStatus_result)
        return this.equals((updateProductStatus_result)that);
      return false;
    }

    public boolean equals(updateProductStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateProductStatus_resultStandardScheme getScheme() {
        return new updateProductStatus_resultStandardScheme();
      }
    }

    private static class updateProductStatus_resultStandardScheme extends StandardScheme<updateProductStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateProductStatus_resultTupleScheme getScheme() {
        return new updateProductStatus_resultTupleScheme();
      }
    }

    private static class updateProductStatus_resultTupleScheme extends TupleScheme<updateProductStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateProductStatusBatch_args implements org.apache.thrift.TBase<updateProductStatusBatch_args, updateProductStatusBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductStatusBatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductStatusBatch_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_STATUS_BATCH_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productStatusBatchVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductStatusBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductStatusBatch_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_STATUS_BATCH_VO_REQ((short)2, "productStatusBatchVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_STATUS_BATCH_VO_REQ
            return PRODUCT_STATUS_BATCH_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_STATUS_BATCH_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("productStatusBatchVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductStatusBatchVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductStatusBatch_args.class, metaDataMap);
    }

    public updateProductStatusBatch_args() {
    }

    public updateProductStatusBatch_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq)
    {
      this();
      this.originVo = originVo;
      this.productStatusBatchVoReq = productStatusBatchVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductStatusBatch_args(updateProductStatusBatch_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductStatusBatchVoReq()) {
        this.productStatusBatchVoReq = new com.froad.thrift.vo.ProductStatusBatchVoReq(other.productStatusBatchVoReq);
      }
    }

    public updateProductStatusBatch_args deepCopy() {
      return new updateProductStatusBatch_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productStatusBatchVoReq = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateProductStatusBatch_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ProductStatusBatchVoReq getProductStatusBatchVoReq() {
      return this.productStatusBatchVoReq;
    }

    public updateProductStatusBatch_args setProductStatusBatchVoReq(com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq) {
      this.productStatusBatchVoReq = productStatusBatchVoReq;
      return this;
    }

    public void unsetProductStatusBatchVoReq() {
      this.productStatusBatchVoReq = null;
    }

    /** Returns true if field productStatusBatchVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductStatusBatchVoReq() {
      return this.productStatusBatchVoReq != null;
    }

    public void setProductStatusBatchVoReqIsSet(boolean value) {
      if (!value) {
        this.productStatusBatchVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_STATUS_BATCH_VO_REQ:
        if (value == null) {
          unsetProductStatusBatchVoReq();
        } else {
          setProductStatusBatchVoReq((com.froad.thrift.vo.ProductStatusBatchVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_STATUS_BATCH_VO_REQ:
        return getProductStatusBatchVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_STATUS_BATCH_VO_REQ:
        return isSetProductStatusBatchVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductStatusBatch_args)
        return this.equals((updateProductStatusBatch_args)that);
      return false;
    }

    public boolean equals(updateProductStatusBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productStatusBatchVoReq = true && this.isSetProductStatusBatchVoReq();
      boolean that_present_productStatusBatchVoReq = true && that.isSetProductStatusBatchVoReq();
      if (this_present_productStatusBatchVoReq || that_present_productStatusBatchVoReq) {
        if (!(this_present_productStatusBatchVoReq && that_present_productStatusBatchVoReq))
          return false;
        if (!this.productStatusBatchVoReq.equals(that.productStatusBatchVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productStatusBatchVoReq = true && (isSetProductStatusBatchVoReq());
      list.add(present_productStatusBatchVoReq);
      if (present_productStatusBatchVoReq)
        list.add(productStatusBatchVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductStatusBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductStatusBatchVoReq()).compareTo(other.isSetProductStatusBatchVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductStatusBatchVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productStatusBatchVoReq, other.productStatusBatchVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductStatusBatch_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productStatusBatchVoReq:");
      if (this.productStatusBatchVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productStatusBatchVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (productStatusBatchVoReq != null) {
        productStatusBatchVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductStatusBatch_argsStandardSchemeFactory implements SchemeFactory {
      public updateProductStatusBatch_argsStandardScheme getScheme() {
        return new updateProductStatusBatch_argsStandardScheme();
      }
    }

    private static class updateProductStatusBatch_argsStandardScheme extends StandardScheme<updateProductStatusBatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductStatusBatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_STATUS_BATCH_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productStatusBatchVoReq = new com.froad.thrift.vo.ProductStatusBatchVoReq();
                struct.productStatusBatchVoReq.read(iprot);
                struct.setProductStatusBatchVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductStatusBatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productStatusBatchVoReq != null) {
          oprot.writeFieldBegin(PRODUCT_STATUS_BATCH_VO_REQ_FIELD_DESC);
          struct.productStatusBatchVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductStatusBatch_argsTupleSchemeFactory implements SchemeFactory {
      public updateProductStatusBatch_argsTupleScheme getScheme() {
        return new updateProductStatusBatch_argsTupleScheme();
      }
    }

    private static class updateProductStatusBatch_argsTupleScheme extends TupleScheme<updateProductStatusBatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductStatusBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductStatusBatchVoReq()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductStatusBatchVoReq()) {
          struct.productStatusBatchVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductStatusBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productStatusBatchVoReq = new com.froad.thrift.vo.ProductStatusBatchVoReq();
          struct.productStatusBatchVoReq.read(iprot);
          struct.setProductStatusBatchVoReqIsSet(true);
        }
      }
    }

  }

  public static class updateProductStatusBatch_result implements org.apache.thrift.TBase<updateProductStatusBatch_result, updateProductStatusBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductStatusBatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductStatusBatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductStatusBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductStatusBatch_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductStatusBatch_result.class, metaDataMap);
    }

    public updateProductStatusBatch_result() {
    }

    public updateProductStatusBatch_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductStatusBatch_result(updateProductStatusBatch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateProductStatusBatch_result deepCopy() {
      return new updateProductStatusBatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateProductStatusBatch_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductStatusBatch_result)
        return this.equals((updateProductStatusBatch_result)that);
      return false;
    }

    public boolean equals(updateProductStatusBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductStatusBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductStatusBatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductStatusBatch_resultStandardSchemeFactory implements SchemeFactory {
      public updateProductStatusBatch_resultStandardScheme getScheme() {
        return new updateProductStatusBatch_resultStandardScheme();
      }
    }

    private static class updateProductStatusBatch_resultStandardScheme extends StandardScheme<updateProductStatusBatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductStatusBatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductStatusBatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductStatusBatch_resultTupleSchemeFactory implements SchemeFactory {
      public updateProductStatusBatch_resultTupleScheme getScheme() {
        return new updateProductStatusBatch_resultTupleScheme();
      }
    }

    private static class updateProductStatusBatch_resultTupleScheme extends TupleScheme<updateProductStatusBatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductStatusBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductStatusBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addOutletProduct_args implements org.apache.thrift.TBase<addOutletProduct_args, addOutletProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOutletProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOutletProduct_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_PRODUCT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletProductVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOutletProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOutletProduct_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.OutletProductVo outletProductVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      OUTLET_PRODUCT_VO((short)2, "outletProductVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // OUTLET_PRODUCT_VO
            return OUTLET_PRODUCT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.OUTLET_PRODUCT_VO, new org.apache.thrift.meta_data.FieldMetaData("outletProductVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletProductVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOutletProduct_args.class, metaDataMap);
    }

    public addOutletProduct_args() {
    }

    public addOutletProduct_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.OutletProductVo outletProductVo)
    {
      this();
      this.originVo = originVo;
      this.outletProductVo = outletProductVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOutletProduct_args(addOutletProduct_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOutletProductVo()) {
        this.outletProductVo = new com.froad.thrift.vo.OutletProductVo(other.outletProductVo);
      }
    }

    public addOutletProduct_args deepCopy() {
      return new addOutletProduct_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.outletProductVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addOutletProduct_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.OutletProductVo getOutletProductVo() {
      return this.outletProductVo;
    }

    public addOutletProduct_args setOutletProductVo(com.froad.thrift.vo.OutletProductVo outletProductVo) {
      this.outletProductVo = outletProductVo;
      return this;
    }

    public void unsetOutletProductVo() {
      this.outletProductVo = null;
    }

    /** Returns true if field outletProductVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletProductVo() {
      return this.outletProductVo != null;
    }

    public void setOutletProductVoIsSet(boolean value) {
      if (!value) {
        this.outletProductVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case OUTLET_PRODUCT_VO:
        if (value == null) {
          unsetOutletProductVo();
        } else {
          setOutletProductVo((com.froad.thrift.vo.OutletProductVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case OUTLET_PRODUCT_VO:
        return getOutletProductVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case OUTLET_PRODUCT_VO:
        return isSetOutletProductVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOutletProduct_args)
        return this.equals((addOutletProduct_args)that);
      return false;
    }

    public boolean equals(addOutletProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_outletProductVo = true && this.isSetOutletProductVo();
      boolean that_present_outletProductVo = true && that.isSetOutletProductVo();
      if (this_present_outletProductVo || that_present_outletProductVo) {
        if (!(this_present_outletProductVo && that_present_outletProductVo))
          return false;
        if (!this.outletProductVo.equals(that.outletProductVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_outletProductVo = true && (isSetOutletProductVo());
      list.add(present_outletProductVo);
      if (present_outletProductVo)
        list.add(outletProductVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOutletProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletProductVo()).compareTo(other.isSetOutletProductVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletProductVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletProductVo, other.outletProductVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOutletProduct_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletProductVo:");
      if (this.outletProductVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletProductVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (outletProductVo != null) {
        outletProductVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOutletProduct_argsStandardSchemeFactory implements SchemeFactory {
      public addOutletProduct_argsStandardScheme getScheme() {
        return new addOutletProduct_argsStandardScheme();
      }
    }

    private static class addOutletProduct_argsStandardScheme extends StandardScheme<addOutletProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOutletProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_PRODUCT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletProductVo = new com.froad.thrift.vo.OutletProductVo();
                struct.outletProductVo.read(iprot);
                struct.setOutletProductVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOutletProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletProductVo != null) {
          oprot.writeFieldBegin(OUTLET_PRODUCT_VO_FIELD_DESC);
          struct.outletProductVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOutletProduct_argsTupleSchemeFactory implements SchemeFactory {
      public addOutletProduct_argsTupleScheme getScheme() {
        return new addOutletProduct_argsTupleScheme();
      }
    }

    private static class addOutletProduct_argsTupleScheme extends TupleScheme<addOutletProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOutletProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOutletProductVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOutletProductVo()) {
          struct.outletProductVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOutletProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletProductVo = new com.froad.thrift.vo.OutletProductVo();
          struct.outletProductVo.read(iprot);
          struct.setOutletProductVoIsSet(true);
        }
      }
    }

  }

  public static class addOutletProduct_result implements org.apache.thrift.TBase<addOutletProduct_result, addOutletProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOutletProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOutletProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOutletProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOutletProduct_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AddOutletProductVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AddOutletProductVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOutletProduct_result.class, metaDataMap);
    }

    public addOutletProduct_result() {
    }

    public addOutletProduct_result(
      com.froad.thrift.vo.AddOutletProductVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOutletProduct_result(addOutletProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AddOutletProductVoRes(other.success);
      }
    }

    public addOutletProduct_result deepCopy() {
      return new addOutletProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AddOutletProductVoRes getSuccess() {
      return this.success;
    }

    public addOutletProduct_result setSuccess(com.froad.thrift.vo.AddOutletProductVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AddOutletProductVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOutletProduct_result)
        return this.equals((addOutletProduct_result)that);
      return false;
    }

    public boolean equals(addOutletProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOutletProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOutletProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOutletProduct_resultStandardSchemeFactory implements SchemeFactory {
      public addOutletProduct_resultStandardScheme getScheme() {
        return new addOutletProduct_resultStandardScheme();
      }
    }

    private static class addOutletProduct_resultStandardScheme extends StandardScheme<addOutletProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOutletProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AddOutletProductVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOutletProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOutletProduct_resultTupleSchemeFactory implements SchemeFactory {
      public addOutletProduct_resultTupleScheme getScheme() {
        return new addOutletProduct_resultTupleScheme();
      }
    }

    private static class addOutletProduct_resultTupleScheme extends TupleScheme<addOutletProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOutletProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOutletProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AddOutletProductVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addH5OutletProduct_args implements org.apache.thrift.TBase<addH5OutletProduct_args, addH5OutletProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<addH5OutletProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addH5OutletProduct_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_PRODUCT_DISCOUNT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletProductDiscountVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addH5OutletProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addH5OutletProduct_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.OutletProductDiscountVo outletProductDiscountVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      OUTLET_PRODUCT_DISCOUNT_VO((short)2, "outletProductDiscountVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // OUTLET_PRODUCT_DISCOUNT_VO
            return OUTLET_PRODUCT_DISCOUNT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.OUTLET_PRODUCT_DISCOUNT_VO, new org.apache.thrift.meta_data.FieldMetaData("outletProductDiscountVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletProductDiscountVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addH5OutletProduct_args.class, metaDataMap);
    }

    public addH5OutletProduct_args() {
    }

    public addH5OutletProduct_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.OutletProductDiscountVo outletProductDiscountVo)
    {
      this();
      this.originVo = originVo;
      this.outletProductDiscountVo = outletProductDiscountVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addH5OutletProduct_args(addH5OutletProduct_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOutletProductDiscountVo()) {
        this.outletProductDiscountVo = new com.froad.thrift.vo.OutletProductDiscountVo(other.outletProductDiscountVo);
      }
    }

    public addH5OutletProduct_args deepCopy() {
      return new addH5OutletProduct_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.outletProductDiscountVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addH5OutletProduct_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.OutletProductDiscountVo getOutletProductDiscountVo() {
      return this.outletProductDiscountVo;
    }

    public addH5OutletProduct_args setOutletProductDiscountVo(com.froad.thrift.vo.OutletProductDiscountVo outletProductDiscountVo) {
      this.outletProductDiscountVo = outletProductDiscountVo;
      return this;
    }

    public void unsetOutletProductDiscountVo() {
      this.outletProductDiscountVo = null;
    }

    /** Returns true if field outletProductDiscountVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletProductDiscountVo() {
      return this.outletProductDiscountVo != null;
    }

    public void setOutletProductDiscountVoIsSet(boolean value) {
      if (!value) {
        this.outletProductDiscountVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case OUTLET_PRODUCT_DISCOUNT_VO:
        if (value == null) {
          unsetOutletProductDiscountVo();
        } else {
          setOutletProductDiscountVo((com.froad.thrift.vo.OutletProductDiscountVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case OUTLET_PRODUCT_DISCOUNT_VO:
        return getOutletProductDiscountVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case OUTLET_PRODUCT_DISCOUNT_VO:
        return isSetOutletProductDiscountVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addH5OutletProduct_args)
        return this.equals((addH5OutletProduct_args)that);
      return false;
    }

    public boolean equals(addH5OutletProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_outletProductDiscountVo = true && this.isSetOutletProductDiscountVo();
      boolean that_present_outletProductDiscountVo = true && that.isSetOutletProductDiscountVo();
      if (this_present_outletProductDiscountVo || that_present_outletProductDiscountVo) {
        if (!(this_present_outletProductDiscountVo && that_present_outletProductDiscountVo))
          return false;
        if (!this.outletProductDiscountVo.equals(that.outletProductDiscountVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_outletProductDiscountVo = true && (isSetOutletProductDiscountVo());
      list.add(present_outletProductDiscountVo);
      if (present_outletProductDiscountVo)
        list.add(outletProductDiscountVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addH5OutletProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletProductDiscountVo()).compareTo(other.isSetOutletProductDiscountVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletProductDiscountVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletProductDiscountVo, other.outletProductDiscountVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addH5OutletProduct_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletProductDiscountVo:");
      if (this.outletProductDiscountVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletProductDiscountVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (outletProductDiscountVo != null) {
        outletProductDiscountVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addH5OutletProduct_argsStandardSchemeFactory implements SchemeFactory {
      public addH5OutletProduct_argsStandardScheme getScheme() {
        return new addH5OutletProduct_argsStandardScheme();
      }
    }

    private static class addH5OutletProduct_argsStandardScheme extends StandardScheme<addH5OutletProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addH5OutletProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_PRODUCT_DISCOUNT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletProductDiscountVo = new com.froad.thrift.vo.OutletProductDiscountVo();
                struct.outletProductDiscountVo.read(iprot);
                struct.setOutletProductDiscountVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addH5OutletProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletProductDiscountVo != null) {
          oprot.writeFieldBegin(OUTLET_PRODUCT_DISCOUNT_VO_FIELD_DESC);
          struct.outletProductDiscountVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addH5OutletProduct_argsTupleSchemeFactory implements SchemeFactory {
      public addH5OutletProduct_argsTupleScheme getScheme() {
        return new addH5OutletProduct_argsTupleScheme();
      }
    }

    private static class addH5OutletProduct_argsTupleScheme extends TupleScheme<addH5OutletProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addH5OutletProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOutletProductDiscountVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOutletProductDiscountVo()) {
          struct.outletProductDiscountVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addH5OutletProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletProductDiscountVo = new com.froad.thrift.vo.OutletProductDiscountVo();
          struct.outletProductDiscountVo.read(iprot);
          struct.setOutletProductDiscountVoIsSet(true);
        }
      }
    }

  }

  public static class addH5OutletProduct_result implements org.apache.thrift.TBase<addH5OutletProduct_result, addH5OutletProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<addH5OutletProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addH5OutletProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addH5OutletProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addH5OutletProduct_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AddOutletProductVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AddOutletProductVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addH5OutletProduct_result.class, metaDataMap);
    }

    public addH5OutletProduct_result() {
    }

    public addH5OutletProduct_result(
      com.froad.thrift.vo.AddOutletProductVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addH5OutletProduct_result(addH5OutletProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AddOutletProductVoRes(other.success);
      }
    }

    public addH5OutletProduct_result deepCopy() {
      return new addH5OutletProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AddOutletProductVoRes getSuccess() {
      return this.success;
    }

    public addH5OutletProduct_result setSuccess(com.froad.thrift.vo.AddOutletProductVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AddOutletProductVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addH5OutletProduct_result)
        return this.equals((addH5OutletProduct_result)that);
      return false;
    }

    public boolean equals(addH5OutletProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addH5OutletProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addH5OutletProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addH5OutletProduct_resultStandardSchemeFactory implements SchemeFactory {
      public addH5OutletProduct_resultStandardScheme getScheme() {
        return new addH5OutletProduct_resultStandardScheme();
      }
    }

    private static class addH5OutletProduct_resultStandardScheme extends StandardScheme<addH5OutletProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addH5OutletProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AddOutletProductVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addH5OutletProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addH5OutletProduct_resultTupleSchemeFactory implements SchemeFactory {
      public addH5OutletProduct_resultTupleScheme getScheme() {
        return new addH5OutletProduct_resultTupleScheme();
      }
    }

    private static class addH5OutletProduct_resultTupleScheme extends TupleScheme<addH5OutletProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addH5OutletProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addH5OutletProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AddOutletProductVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletProduct_args implements org.apache.thrift.TBase<getOutletProduct_args, getOutletProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletProduct_args");

    private static final org.apache.thrift.protocol.TField OUTLET_PRODUCT_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("outletProductVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletProduct_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletProductVoReq outletProductVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLET_PRODUCT_VO_REQ((short)1, "outletProductVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLET_PRODUCT_VO_REQ
            return OUTLET_PRODUCT_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLET_PRODUCT_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("outletProductVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletProductVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletProduct_args.class, metaDataMap);
    }

    public getOutletProduct_args() {
    }

    public getOutletProduct_args(
      com.froad.thrift.vo.OutletProductVoReq outletProductVoReq)
    {
      this();
      this.outletProductVoReq = outletProductVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletProduct_args(getOutletProduct_args other) {
      if (other.isSetOutletProductVoReq()) {
        this.outletProductVoReq = new com.froad.thrift.vo.OutletProductVoReq(other.outletProductVoReq);
      }
    }

    public getOutletProduct_args deepCopy() {
      return new getOutletProduct_args(this);
    }

    @Override
    public void clear() {
      this.outletProductVoReq = null;
    }

    public com.froad.thrift.vo.OutletProductVoReq getOutletProductVoReq() {
      return this.outletProductVoReq;
    }

    public getOutletProduct_args setOutletProductVoReq(com.froad.thrift.vo.OutletProductVoReq outletProductVoReq) {
      this.outletProductVoReq = outletProductVoReq;
      return this;
    }

    public void unsetOutletProductVoReq() {
      this.outletProductVoReq = null;
    }

    /** Returns true if field outletProductVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletProductVoReq() {
      return this.outletProductVoReq != null;
    }

    public void setOutletProductVoReqIsSet(boolean value) {
      if (!value) {
        this.outletProductVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLET_PRODUCT_VO_REQ:
        if (value == null) {
          unsetOutletProductVoReq();
        } else {
          setOutletProductVoReq((com.froad.thrift.vo.OutletProductVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLET_PRODUCT_VO_REQ:
        return getOutletProductVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLET_PRODUCT_VO_REQ:
        return isSetOutletProductVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletProduct_args)
        return this.equals((getOutletProduct_args)that);
      return false;
    }

    public boolean equals(getOutletProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_outletProductVoReq = true && this.isSetOutletProductVoReq();
      boolean that_present_outletProductVoReq = true && that.isSetOutletProductVoReq();
      if (this_present_outletProductVoReq || that_present_outletProductVoReq) {
        if (!(this_present_outletProductVoReq && that_present_outletProductVoReq))
          return false;
        if (!this.outletProductVoReq.equals(that.outletProductVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outletProductVoReq = true && (isSetOutletProductVoReq());
      list.add(present_outletProductVoReq);
      if (present_outletProductVoReq)
        list.add(outletProductVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletProductVoReq()).compareTo(other.isSetOutletProductVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletProductVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletProductVoReq, other.outletProductVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletProduct_args(");
      boolean first = true;

      sb.append("outletProductVoReq:");
      if (this.outletProductVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.outletProductVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (outletProductVoReq != null) {
        outletProductVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletProduct_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletProduct_argsStandardScheme getScheme() {
        return new getOutletProduct_argsStandardScheme();
      }
    }

    private static class getOutletProduct_argsStandardScheme extends StandardScheme<getOutletProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLET_PRODUCT_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletProductVoReq = new com.froad.thrift.vo.OutletProductVoReq();
                struct.outletProductVoReq.read(iprot);
                struct.setOutletProductVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletProductVoReq != null) {
          oprot.writeFieldBegin(OUTLET_PRODUCT_VO_REQ_FIELD_DESC);
          struct.outletProductVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletProduct_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletProduct_argsTupleScheme getScheme() {
        return new getOutletProduct_argsTupleScheme();
      }
    }

    private static class getOutletProduct_argsTupleScheme extends TupleScheme<getOutletProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletProductVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOutletProductVoReq()) {
          struct.outletProductVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.outletProductVoReq = new com.froad.thrift.vo.OutletProductVoReq();
          struct.outletProductVoReq.read(iprot);
          struct.setOutletProductVoReqIsSet(true);
        }
      }
    }

  }

  public static class getOutletProduct_result implements org.apache.thrift.TBase<getOutletProduct_result, getOutletProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletProduct_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletProductVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletProductVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletProduct_result.class, metaDataMap);
    }

    public getOutletProduct_result() {
    }

    public getOutletProduct_result(
      com.froad.thrift.vo.OutletProductVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletProduct_result(getOutletProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletProductVoRes(other.success);
      }
    }

    public getOutletProduct_result deepCopy() {
      return new getOutletProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletProductVoRes getSuccess() {
      return this.success;
    }

    public getOutletProduct_result setSuccess(com.froad.thrift.vo.OutletProductVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletProductVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletProduct_result)
        return this.equals((getOutletProduct_result)that);
      return false;
    }

    public boolean equals(getOutletProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletProduct_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletProduct_resultStandardScheme getScheme() {
        return new getOutletProduct_resultStandardScheme();
      }
    }

    private static class getOutletProduct_resultStandardScheme extends StandardScheme<getOutletProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletProductVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletProduct_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletProduct_resultTupleScheme getScheme() {
        return new getOutletProduct_resultTupleScheme();
      }
    }

    private static class getOutletProduct_resultTupleScheme extends TupleScheme<getOutletProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletProductVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteOutletProduct_args implements org.apache.thrift.TBase<deleteOutletProduct_args, deleteOutletProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOutletProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOutletProduct_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_PRODUCT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletProductVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOutletProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOutletProduct_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.OutletProductVo outletProductVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      OUTLET_PRODUCT_VO((short)2, "outletProductVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // OUTLET_PRODUCT_VO
            return OUTLET_PRODUCT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.OUTLET_PRODUCT_VO, new org.apache.thrift.meta_data.FieldMetaData("outletProductVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletProductVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOutletProduct_args.class, metaDataMap);
    }

    public deleteOutletProduct_args() {
    }

    public deleteOutletProduct_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.OutletProductVo outletProductVo)
    {
      this();
      this.originVo = originVo;
      this.outletProductVo = outletProductVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOutletProduct_args(deleteOutletProduct_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOutletProductVo()) {
        this.outletProductVo = new com.froad.thrift.vo.OutletProductVo(other.outletProductVo);
      }
    }

    public deleteOutletProduct_args deepCopy() {
      return new deleteOutletProduct_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.outletProductVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteOutletProduct_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.OutletProductVo getOutletProductVo() {
      return this.outletProductVo;
    }

    public deleteOutletProduct_args setOutletProductVo(com.froad.thrift.vo.OutletProductVo outletProductVo) {
      this.outletProductVo = outletProductVo;
      return this;
    }

    public void unsetOutletProductVo() {
      this.outletProductVo = null;
    }

    /** Returns true if field outletProductVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletProductVo() {
      return this.outletProductVo != null;
    }

    public void setOutletProductVoIsSet(boolean value) {
      if (!value) {
        this.outletProductVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case OUTLET_PRODUCT_VO:
        if (value == null) {
          unsetOutletProductVo();
        } else {
          setOutletProductVo((com.froad.thrift.vo.OutletProductVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case OUTLET_PRODUCT_VO:
        return getOutletProductVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case OUTLET_PRODUCT_VO:
        return isSetOutletProductVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOutletProduct_args)
        return this.equals((deleteOutletProduct_args)that);
      return false;
    }

    public boolean equals(deleteOutletProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_outletProductVo = true && this.isSetOutletProductVo();
      boolean that_present_outletProductVo = true && that.isSetOutletProductVo();
      if (this_present_outletProductVo || that_present_outletProductVo) {
        if (!(this_present_outletProductVo && that_present_outletProductVo))
          return false;
        if (!this.outletProductVo.equals(that.outletProductVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_outletProductVo = true && (isSetOutletProductVo());
      list.add(present_outletProductVo);
      if (present_outletProductVo)
        list.add(outletProductVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOutletProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletProductVo()).compareTo(other.isSetOutletProductVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletProductVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletProductVo, other.outletProductVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOutletProduct_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletProductVo:");
      if (this.outletProductVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletProductVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (outletProductVo != null) {
        outletProductVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOutletProduct_argsStandardSchemeFactory implements SchemeFactory {
      public deleteOutletProduct_argsStandardScheme getScheme() {
        return new deleteOutletProduct_argsStandardScheme();
      }
    }

    private static class deleteOutletProduct_argsStandardScheme extends StandardScheme<deleteOutletProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOutletProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_PRODUCT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletProductVo = new com.froad.thrift.vo.OutletProductVo();
                struct.outletProductVo.read(iprot);
                struct.setOutletProductVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOutletProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outletProductVo != null) {
          oprot.writeFieldBegin(OUTLET_PRODUCT_VO_FIELD_DESC);
          struct.outletProductVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOutletProduct_argsTupleSchemeFactory implements SchemeFactory {
      public deleteOutletProduct_argsTupleScheme getScheme() {
        return new deleteOutletProduct_argsTupleScheme();
      }
    }

    private static class deleteOutletProduct_argsTupleScheme extends TupleScheme<deleteOutletProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOutletProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOutletProductVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOutletProductVo()) {
          struct.outletProductVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOutletProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outletProductVo = new com.froad.thrift.vo.OutletProductVo();
          struct.outletProductVo.read(iprot);
          struct.setOutletProductVoIsSet(true);
        }
      }
    }

  }

  public static class deleteOutletProduct_result implements org.apache.thrift.TBase<deleteOutletProduct_result, deleteOutletProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOutletProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOutletProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOutletProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOutletProduct_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOutletProduct_result.class, metaDataMap);
    }

    public deleteOutletProduct_result() {
    }

    public deleteOutletProduct_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOutletProduct_result(deleteOutletProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteOutletProduct_result deepCopy() {
      return new deleteOutletProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteOutletProduct_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOutletProduct_result)
        return this.equals((deleteOutletProduct_result)that);
      return false;
    }

    public boolean equals(deleteOutletProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOutletProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOutletProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOutletProduct_resultStandardSchemeFactory implements SchemeFactory {
      public deleteOutletProduct_resultStandardScheme getScheme() {
        return new deleteOutletProduct_resultStandardScheme();
      }
    }

    private static class deleteOutletProduct_resultStandardScheme extends StandardScheme<deleteOutletProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOutletProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOutletProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOutletProduct_resultTupleSchemeFactory implements SchemeFactory {
      public deleteOutletProduct_resultTupleScheme getScheme() {
        return new deleteOutletProduct_resultTupleScheme();
      }
    }

    private static class deleteOutletProduct_resultTupleScheme extends TupleScheme<deleteOutletProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOutletProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOutletProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutletProductListByPage_args implements org.apache.thrift.TBase<getOutletProductListByPage_args, getOutletProductListByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletProductListByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletProductListByPage_args");

    private static final org.apache.thrift.protocol.TField OUTLET_PRODUCT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletProductVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletProductListByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletProductListByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletProductVo outletProductVo; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OUTLET_PRODUCT_VO((short)1, "outletProductVo"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OUTLET_PRODUCT_VO
            return OUTLET_PRODUCT_VO;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OUTLET_PRODUCT_VO, new org.apache.thrift.meta_data.FieldMetaData("outletProductVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletProductVo.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletProductListByPage_args.class, metaDataMap);
    }

    public getOutletProductListByPage_args() {
    }

    public getOutletProductListByPage_args(
      com.froad.thrift.vo.OutletProductVo outletProductVo,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.outletProductVo = outletProductVo;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletProductListByPage_args(getOutletProductListByPage_args other) {
      if (other.isSetOutletProductVo()) {
        this.outletProductVo = new com.froad.thrift.vo.OutletProductVo(other.outletProductVo);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public getOutletProductListByPage_args deepCopy() {
      return new getOutletProductListByPage_args(this);
    }

    @Override
    public void clear() {
      this.outletProductVo = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.OutletProductVo getOutletProductVo() {
      return this.outletProductVo;
    }

    public getOutletProductListByPage_args setOutletProductVo(com.froad.thrift.vo.OutletProductVo outletProductVo) {
      this.outletProductVo = outletProductVo;
      return this;
    }

    public void unsetOutletProductVo() {
      this.outletProductVo = null;
    }

    /** Returns true if field outletProductVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletProductVo() {
      return this.outletProductVo != null;
    }

    public void setOutletProductVoIsSet(boolean value) {
      if (!value) {
        this.outletProductVo = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public getOutletProductListByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OUTLET_PRODUCT_VO:
        if (value == null) {
          unsetOutletProductVo();
        } else {
          setOutletProductVo((com.froad.thrift.vo.OutletProductVo)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OUTLET_PRODUCT_VO:
        return getOutletProductVo();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OUTLET_PRODUCT_VO:
        return isSetOutletProductVo();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletProductListByPage_args)
        return this.equals((getOutletProductListByPage_args)that);
      return false;
    }

    public boolean equals(getOutletProductListByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_outletProductVo = true && this.isSetOutletProductVo();
      boolean that_present_outletProductVo = true && that.isSetOutletProductVo();
      if (this_present_outletProductVo || that_present_outletProductVo) {
        if (!(this_present_outletProductVo && that_present_outletProductVo))
          return false;
        if (!this.outletProductVo.equals(that.outletProductVo))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_outletProductVo = true && (isSetOutletProductVo());
      list.add(present_outletProductVo);
      if (present_outletProductVo)
        list.add(outletProductVo);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletProductListByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOutletProductVo()).compareTo(other.isSetOutletProductVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletProductVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletProductVo, other.outletProductVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletProductListByPage_args(");
      boolean first = true;

      sb.append("outletProductVo:");
      if (this.outletProductVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletProductVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (outletProductVo != null) {
        outletProductVo.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletProductListByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getOutletProductListByPage_argsStandardScheme getScheme() {
        return new getOutletProductListByPage_argsStandardScheme();
      }
    }

    private static class getOutletProductListByPage_argsStandardScheme extends StandardScheme<getOutletProductListByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletProductListByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OUTLET_PRODUCT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletProductVo = new com.froad.thrift.vo.OutletProductVo();
                struct.outletProductVo.read(iprot);
                struct.setOutletProductVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletProductListByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.outletProductVo != null) {
          oprot.writeFieldBegin(OUTLET_PRODUCT_VO_FIELD_DESC);
          struct.outletProductVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletProductListByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getOutletProductListByPage_argsTupleScheme getScheme() {
        return new getOutletProductListByPage_argsTupleScheme();
      }
    }

    private static class getOutletProductListByPage_argsTupleScheme extends TupleScheme<getOutletProductListByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletProductListByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOutletProductVo()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOutletProductVo()) {
          struct.outletProductVo.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletProductListByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.outletProductVo = new com.froad.thrift.vo.OutletProductVo();
          struct.outletProductVo.read(iprot);
          struct.setOutletProductVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class getOutletProductListByPage_result implements org.apache.thrift.TBase<getOutletProductListByPage_result, getOutletProductListByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutletProductListByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutletProductListByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutletProductListByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutletProductListByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OutletProductPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletProductPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutletProductListByPage_result.class, metaDataMap);
    }

    public getOutletProductListByPage_result() {
    }

    public getOutletProductListByPage_result(
      com.froad.thrift.vo.OutletProductPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutletProductListByPage_result(getOutletProductListByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.OutletProductPageVo(other.success);
      }
    }

    public getOutletProductListByPage_result deepCopy() {
      return new getOutletProductListByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.OutletProductPageVo getSuccess() {
      return this.success;
    }

    public getOutletProductListByPage_result setSuccess(com.froad.thrift.vo.OutletProductPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.OutletProductPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutletProductListByPage_result)
        return this.equals((getOutletProductListByPage_result)that);
      return false;
    }

    public boolean equals(getOutletProductListByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutletProductListByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutletProductListByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutletProductListByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getOutletProductListByPage_resultStandardScheme getScheme() {
        return new getOutletProductListByPage_resultStandardScheme();
      }
    }

    private static class getOutletProductListByPage_resultStandardScheme extends StandardScheme<getOutletProductListByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutletProductListByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.OutletProductPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutletProductListByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutletProductListByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getOutletProductListByPage_resultTupleScheme getScheme() {
        return new getOutletProductListByPage_resultTupleScheme();
      }
    }

    private static class getOutletProductListByPage_resultTupleScheme extends TupleScheme<getOutletProductListByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutletProductListByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutletProductListByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.OutletProductPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductCommentList_args implements org.apache.thrift.TBase<getProductCommentList_args, getProductCommentList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductCommentList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductCommentList_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_COMMENT_FILTER_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productCommentFilterReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductCommentList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductCommentList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_COMMENT_FILTER_REQ((short)1, "productCommentFilterReq"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_COMMENT_FILTER_REQ
            return PRODUCT_COMMENT_FILTER_REQ;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_COMMENT_FILTER_REQ, new org.apache.thrift.meta_data.FieldMetaData("productCommentFilterReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCommentFilterReq.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductCommentList_args.class, metaDataMap);
    }

    public getProductCommentList_args() {
    }

    public getProductCommentList_args(
      com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.productCommentFilterReq = productCommentFilterReq;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductCommentList_args(getProductCommentList_args other) {
      if (other.isSetProductCommentFilterReq()) {
        this.productCommentFilterReq = new com.froad.thrift.vo.ProductCommentFilterReq(other.productCommentFilterReq);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public getProductCommentList_args deepCopy() {
      return new getProductCommentList_args(this);
    }

    @Override
    public void clear() {
      this.productCommentFilterReq = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.ProductCommentFilterReq getProductCommentFilterReq() {
      return this.productCommentFilterReq;
    }

    public getProductCommentList_args setProductCommentFilterReq(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq) {
      this.productCommentFilterReq = productCommentFilterReq;
      return this;
    }

    public void unsetProductCommentFilterReq() {
      this.productCommentFilterReq = null;
    }

    /** Returns true if field productCommentFilterReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCommentFilterReq() {
      return this.productCommentFilterReq != null;
    }

    public void setProductCommentFilterReqIsSet(boolean value) {
      if (!value) {
        this.productCommentFilterReq = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public getProductCommentList_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_COMMENT_FILTER_REQ:
        if (value == null) {
          unsetProductCommentFilterReq();
        } else {
          setProductCommentFilterReq((com.froad.thrift.vo.ProductCommentFilterReq)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_COMMENT_FILTER_REQ:
        return getProductCommentFilterReq();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_COMMENT_FILTER_REQ:
        return isSetProductCommentFilterReq();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductCommentList_args)
        return this.equals((getProductCommentList_args)that);
      return false;
    }

    public boolean equals(getProductCommentList_args that) {
      if (that == null)
        return false;

      boolean this_present_productCommentFilterReq = true && this.isSetProductCommentFilterReq();
      boolean that_present_productCommentFilterReq = true && that.isSetProductCommentFilterReq();
      if (this_present_productCommentFilterReq || that_present_productCommentFilterReq) {
        if (!(this_present_productCommentFilterReq && that_present_productCommentFilterReq))
          return false;
        if (!this.productCommentFilterReq.equals(that.productCommentFilterReq))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCommentFilterReq = true && (isSetProductCommentFilterReq());
      list.add(present_productCommentFilterReq);
      if (present_productCommentFilterReq)
        list.add(productCommentFilterReq);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductCommentList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCommentFilterReq()).compareTo(other.isSetProductCommentFilterReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCommentFilterReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCommentFilterReq, other.productCommentFilterReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductCommentList_args(");
      boolean first = true;

      sb.append("productCommentFilterReq:");
      if (this.productCommentFilterReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productCommentFilterReq);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productCommentFilterReq != null) {
        productCommentFilterReq.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductCommentList_argsStandardSchemeFactory implements SchemeFactory {
      public getProductCommentList_argsStandardScheme getScheme() {
        return new getProductCommentList_argsStandardScheme();
      }
    }

    private static class getProductCommentList_argsStandardScheme extends StandardScheme<getProductCommentList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductCommentList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_COMMENT_FILTER_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCommentFilterReq = new com.froad.thrift.vo.ProductCommentFilterReq();
                struct.productCommentFilterReq.read(iprot);
                struct.setProductCommentFilterReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductCommentList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCommentFilterReq != null) {
          oprot.writeFieldBegin(PRODUCT_COMMENT_FILTER_REQ_FIELD_DESC);
          struct.productCommentFilterReq.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductCommentList_argsTupleSchemeFactory implements SchemeFactory {
      public getProductCommentList_argsTupleScheme getScheme() {
        return new getProductCommentList_argsTupleScheme();
      }
    }

    private static class getProductCommentList_argsTupleScheme extends TupleScheme<getProductCommentList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductCommentList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCommentFilterReq()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductCommentFilterReq()) {
          struct.productCommentFilterReq.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductCommentList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productCommentFilterReq = new com.froad.thrift.vo.ProductCommentFilterReq();
          struct.productCommentFilterReq.read(iprot);
          struct.setProductCommentFilterReqIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class getProductCommentList_result implements org.apache.thrift.TBase<getProductCommentList_result, getProductCommentList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductCommentList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductCommentList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductCommentList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductCommentList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCommentPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCommentPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductCommentList_result.class, metaDataMap);
    }

    public getProductCommentList_result() {
    }

    public getProductCommentList_result(
      com.froad.thrift.vo.ProductCommentPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductCommentList_result(getProductCommentList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductCommentPageVo(other.success);
      }
    }

    public getProductCommentList_result deepCopy() {
      return new getProductCommentList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductCommentPageVo getSuccess() {
      return this.success;
    }

    public getProductCommentList_result setSuccess(com.froad.thrift.vo.ProductCommentPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductCommentPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductCommentList_result)
        return this.equals((getProductCommentList_result)that);
      return false;
    }

    public boolean equals(getProductCommentList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductCommentList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductCommentList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductCommentList_resultStandardSchemeFactory implements SchemeFactory {
      public getProductCommentList_resultStandardScheme getScheme() {
        return new getProductCommentList_resultStandardScheme();
      }
    }

    private static class getProductCommentList_resultStandardScheme extends StandardScheme<getProductCommentList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductCommentList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductCommentPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductCommentList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductCommentList_resultTupleSchemeFactory implements SchemeFactory {
      public getProductCommentList_resultTupleScheme getScheme() {
        return new getProductCommentList_resultTupleScheme();
      }
    }

    private static class getProductCommentList_resultTupleScheme extends TupleScheme<getProductCommentList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductCommentList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductCommentList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductCommentPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductCommentDetail_args implements org.apache.thrift.TBase<getProductCommentDetail_args, getProductCommentDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductCommentDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductCommentDetail_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_COMMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productCommentVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductCommentDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductCommentDetail_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCommentVo productCommentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_COMMENT_VO((short)1, "productCommentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_COMMENT_VO
            return PRODUCT_COMMENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_COMMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("productCommentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductCommentDetail_args.class, metaDataMap);
    }

    public getProductCommentDetail_args() {
    }

    public getProductCommentDetail_args(
      com.froad.thrift.vo.ProductCommentVo productCommentVo)
    {
      this();
      this.productCommentVo = productCommentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductCommentDetail_args(getProductCommentDetail_args other) {
      if (other.isSetProductCommentVo()) {
        this.productCommentVo = new com.froad.thrift.vo.ProductCommentVo(other.productCommentVo);
      }
    }

    public getProductCommentDetail_args deepCopy() {
      return new getProductCommentDetail_args(this);
    }

    @Override
    public void clear() {
      this.productCommentVo = null;
    }

    public com.froad.thrift.vo.ProductCommentVo getProductCommentVo() {
      return this.productCommentVo;
    }

    public getProductCommentDetail_args setProductCommentVo(com.froad.thrift.vo.ProductCommentVo productCommentVo) {
      this.productCommentVo = productCommentVo;
      return this;
    }

    public void unsetProductCommentVo() {
      this.productCommentVo = null;
    }

    /** Returns true if field productCommentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCommentVo() {
      return this.productCommentVo != null;
    }

    public void setProductCommentVoIsSet(boolean value) {
      if (!value) {
        this.productCommentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_COMMENT_VO:
        if (value == null) {
          unsetProductCommentVo();
        } else {
          setProductCommentVo((com.froad.thrift.vo.ProductCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_COMMENT_VO:
        return getProductCommentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_COMMENT_VO:
        return isSetProductCommentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductCommentDetail_args)
        return this.equals((getProductCommentDetail_args)that);
      return false;
    }

    public boolean equals(getProductCommentDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_productCommentVo = true && this.isSetProductCommentVo();
      boolean that_present_productCommentVo = true && that.isSetProductCommentVo();
      if (this_present_productCommentVo || that_present_productCommentVo) {
        if (!(this_present_productCommentVo && that_present_productCommentVo))
          return false;
        if (!this.productCommentVo.equals(that.productCommentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCommentVo = true && (isSetProductCommentVo());
      list.add(present_productCommentVo);
      if (present_productCommentVo)
        list.add(productCommentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductCommentDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCommentVo()).compareTo(other.isSetProductCommentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCommentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCommentVo, other.productCommentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductCommentDetail_args(");
      boolean first = true;

      sb.append("productCommentVo:");
      if (this.productCommentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productCommentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productCommentVo != null) {
        productCommentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductCommentDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getProductCommentDetail_argsStandardScheme getScheme() {
        return new getProductCommentDetail_argsStandardScheme();
      }
    }

    private static class getProductCommentDetail_argsStandardScheme extends StandardScheme<getProductCommentDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductCommentDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_COMMENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCommentVo = new com.froad.thrift.vo.ProductCommentVo();
                struct.productCommentVo.read(iprot);
                struct.setProductCommentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductCommentDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCommentVo != null) {
          oprot.writeFieldBegin(PRODUCT_COMMENT_VO_FIELD_DESC);
          struct.productCommentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductCommentDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getProductCommentDetail_argsTupleScheme getScheme() {
        return new getProductCommentDetail_argsTupleScheme();
      }
    }

    private static class getProductCommentDetail_argsTupleScheme extends TupleScheme<getProductCommentDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductCommentDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCommentVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductCommentVo()) {
          struct.productCommentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductCommentDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productCommentVo = new com.froad.thrift.vo.ProductCommentVo();
          struct.productCommentVo.read(iprot);
          struct.setProductCommentVoIsSet(true);
        }
      }
    }

  }

  public static class getProductCommentDetail_result implements org.apache.thrift.TBase<getProductCommentDetail_result, getProductCommentDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductCommentDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductCommentDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductCommentDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductCommentDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCommentVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductCommentDetail_result.class, metaDataMap);
    }

    public getProductCommentDetail_result() {
    }

    public getProductCommentDetail_result(
      com.froad.thrift.vo.ProductCommentVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductCommentDetail_result(getProductCommentDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductCommentVo(other.success);
      }
    }

    public getProductCommentDetail_result deepCopy() {
      return new getProductCommentDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductCommentVo getSuccess() {
      return this.success;
    }

    public getProductCommentDetail_result setSuccess(com.froad.thrift.vo.ProductCommentVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductCommentDetail_result)
        return this.equals((getProductCommentDetail_result)that);
      return false;
    }

    public boolean equals(getProductCommentDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductCommentDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductCommentDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductCommentDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getProductCommentDetail_resultStandardScheme getScheme() {
        return new getProductCommentDetail_resultStandardScheme();
      }
    }

    private static class getProductCommentDetail_resultStandardScheme extends StandardScheme<getProductCommentDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductCommentDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductCommentVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductCommentDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductCommentDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getProductCommentDetail_resultTupleScheme getScheme() {
        return new getProductCommentDetail_resultTupleScheme();
      }
    }

    private static class getProductCommentDetail_resultTupleScheme extends TupleScheme<getProductCommentDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductCommentDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductCommentDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductCommentVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteProductComment_args implements org.apache.thrift.TBase<deleteProductComment_args, deleteProductComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProductComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProductComment_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_COMMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productCommentVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProductComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProductComment_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCommentVo productCommentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_COMMENT_VO((short)1, "productCommentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_COMMENT_VO
            return PRODUCT_COMMENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_COMMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("productCommentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProductComment_args.class, metaDataMap);
    }

    public deleteProductComment_args() {
    }

    public deleteProductComment_args(
      com.froad.thrift.vo.ProductCommentVo productCommentVo)
    {
      this();
      this.productCommentVo = productCommentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProductComment_args(deleteProductComment_args other) {
      if (other.isSetProductCommentVo()) {
        this.productCommentVo = new com.froad.thrift.vo.ProductCommentVo(other.productCommentVo);
      }
    }

    public deleteProductComment_args deepCopy() {
      return new deleteProductComment_args(this);
    }

    @Override
    public void clear() {
      this.productCommentVo = null;
    }

    public com.froad.thrift.vo.ProductCommentVo getProductCommentVo() {
      return this.productCommentVo;
    }

    public deleteProductComment_args setProductCommentVo(com.froad.thrift.vo.ProductCommentVo productCommentVo) {
      this.productCommentVo = productCommentVo;
      return this;
    }

    public void unsetProductCommentVo() {
      this.productCommentVo = null;
    }

    /** Returns true if field productCommentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCommentVo() {
      return this.productCommentVo != null;
    }

    public void setProductCommentVoIsSet(boolean value) {
      if (!value) {
        this.productCommentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_COMMENT_VO:
        if (value == null) {
          unsetProductCommentVo();
        } else {
          setProductCommentVo((com.froad.thrift.vo.ProductCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_COMMENT_VO:
        return getProductCommentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_COMMENT_VO:
        return isSetProductCommentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProductComment_args)
        return this.equals((deleteProductComment_args)that);
      return false;
    }

    public boolean equals(deleteProductComment_args that) {
      if (that == null)
        return false;

      boolean this_present_productCommentVo = true && this.isSetProductCommentVo();
      boolean that_present_productCommentVo = true && that.isSetProductCommentVo();
      if (this_present_productCommentVo || that_present_productCommentVo) {
        if (!(this_present_productCommentVo && that_present_productCommentVo))
          return false;
        if (!this.productCommentVo.equals(that.productCommentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCommentVo = true && (isSetProductCommentVo());
      list.add(present_productCommentVo);
      if (present_productCommentVo)
        list.add(productCommentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProductComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCommentVo()).compareTo(other.isSetProductCommentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCommentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCommentVo, other.productCommentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProductComment_args(");
      boolean first = true;

      sb.append("productCommentVo:");
      if (this.productCommentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productCommentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productCommentVo != null) {
        productCommentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProductComment_argsStandardSchemeFactory implements SchemeFactory {
      public deleteProductComment_argsStandardScheme getScheme() {
        return new deleteProductComment_argsStandardScheme();
      }
    }

    private static class deleteProductComment_argsStandardScheme extends StandardScheme<deleteProductComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProductComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_COMMENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCommentVo = new com.froad.thrift.vo.ProductCommentVo();
                struct.productCommentVo.read(iprot);
                struct.setProductCommentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProductComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCommentVo != null) {
          oprot.writeFieldBegin(PRODUCT_COMMENT_VO_FIELD_DESC);
          struct.productCommentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProductComment_argsTupleSchemeFactory implements SchemeFactory {
      public deleteProductComment_argsTupleScheme getScheme() {
        return new deleteProductComment_argsTupleScheme();
      }
    }

    private static class deleteProductComment_argsTupleScheme extends TupleScheme<deleteProductComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProductComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCommentVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductCommentVo()) {
          struct.productCommentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProductComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productCommentVo = new com.froad.thrift.vo.ProductCommentVo();
          struct.productCommentVo.read(iprot);
          struct.setProductCommentVoIsSet(true);
        }
      }
    }

  }

  public static class deleteProductComment_result implements org.apache.thrift.TBase<deleteProductComment_result, deleteProductComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProductComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProductComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProductComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProductComment_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProductComment_result.class, metaDataMap);
    }

    public deleteProductComment_result() {
    }

    public deleteProductComment_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProductComment_result(deleteProductComment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteProductComment_result deepCopy() {
      return new deleteProductComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteProductComment_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProductComment_result)
        return this.equals((deleteProductComment_result)that);
      return false;
    }

    public boolean equals(deleteProductComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProductComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProductComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProductComment_resultStandardSchemeFactory implements SchemeFactory {
      public deleteProductComment_resultStandardScheme getScheme() {
        return new deleteProductComment_resultStandardScheme();
      }
    }

    private static class deleteProductComment_resultStandardScheme extends StandardScheme<deleteProductComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProductComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProductComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProductComment_resultTupleSchemeFactory implements SchemeFactory {
      public deleteProductComment_resultTupleScheme getScheme() {
        return new deleteProductComment_resultTupleScheme();
      }
    }

    private static class deleteProductComment_resultTupleScheme extends TupleScheme<deleteProductComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProductComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProductComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class replayProductComment_args implements org.apache.thrift.TBase<replayProductComment_args, replayProductComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<replayProductComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replayProductComment_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_COMMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productCommentVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replayProductComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replayProductComment_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCommentVo productCommentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_COMMENT_VO((short)1, "productCommentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_COMMENT_VO
            return PRODUCT_COMMENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_COMMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("productCommentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replayProductComment_args.class, metaDataMap);
    }

    public replayProductComment_args() {
    }

    public replayProductComment_args(
      com.froad.thrift.vo.ProductCommentVo productCommentVo)
    {
      this();
      this.productCommentVo = productCommentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replayProductComment_args(replayProductComment_args other) {
      if (other.isSetProductCommentVo()) {
        this.productCommentVo = new com.froad.thrift.vo.ProductCommentVo(other.productCommentVo);
      }
    }

    public replayProductComment_args deepCopy() {
      return new replayProductComment_args(this);
    }

    @Override
    public void clear() {
      this.productCommentVo = null;
    }

    public com.froad.thrift.vo.ProductCommentVo getProductCommentVo() {
      return this.productCommentVo;
    }

    public replayProductComment_args setProductCommentVo(com.froad.thrift.vo.ProductCommentVo productCommentVo) {
      this.productCommentVo = productCommentVo;
      return this;
    }

    public void unsetProductCommentVo() {
      this.productCommentVo = null;
    }

    /** Returns true if field productCommentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCommentVo() {
      return this.productCommentVo != null;
    }

    public void setProductCommentVoIsSet(boolean value) {
      if (!value) {
        this.productCommentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_COMMENT_VO:
        if (value == null) {
          unsetProductCommentVo();
        } else {
          setProductCommentVo((com.froad.thrift.vo.ProductCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_COMMENT_VO:
        return getProductCommentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_COMMENT_VO:
        return isSetProductCommentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replayProductComment_args)
        return this.equals((replayProductComment_args)that);
      return false;
    }

    public boolean equals(replayProductComment_args that) {
      if (that == null)
        return false;

      boolean this_present_productCommentVo = true && this.isSetProductCommentVo();
      boolean that_present_productCommentVo = true && that.isSetProductCommentVo();
      if (this_present_productCommentVo || that_present_productCommentVo) {
        if (!(this_present_productCommentVo && that_present_productCommentVo))
          return false;
        if (!this.productCommentVo.equals(that.productCommentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCommentVo = true && (isSetProductCommentVo());
      list.add(present_productCommentVo);
      if (present_productCommentVo)
        list.add(productCommentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(replayProductComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCommentVo()).compareTo(other.isSetProductCommentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCommentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCommentVo, other.productCommentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replayProductComment_args(");
      boolean first = true;

      sb.append("productCommentVo:");
      if (this.productCommentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productCommentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productCommentVo != null) {
        productCommentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replayProductComment_argsStandardSchemeFactory implements SchemeFactory {
      public replayProductComment_argsStandardScheme getScheme() {
        return new replayProductComment_argsStandardScheme();
      }
    }

    private static class replayProductComment_argsStandardScheme extends StandardScheme<replayProductComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replayProductComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_COMMENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCommentVo = new com.froad.thrift.vo.ProductCommentVo();
                struct.productCommentVo.read(iprot);
                struct.setProductCommentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replayProductComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCommentVo != null) {
          oprot.writeFieldBegin(PRODUCT_COMMENT_VO_FIELD_DESC);
          struct.productCommentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replayProductComment_argsTupleSchemeFactory implements SchemeFactory {
      public replayProductComment_argsTupleScheme getScheme() {
        return new replayProductComment_argsTupleScheme();
      }
    }

    private static class replayProductComment_argsTupleScheme extends TupleScheme<replayProductComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replayProductComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCommentVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductCommentVo()) {
          struct.productCommentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replayProductComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productCommentVo = new com.froad.thrift.vo.ProductCommentVo();
          struct.productCommentVo.read(iprot);
          struct.setProductCommentVoIsSet(true);
        }
      }
    }

  }

  public static class replayProductComment_result implements org.apache.thrift.TBase<replayProductComment_result, replayProductComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<replayProductComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replayProductComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replayProductComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replayProductComment_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replayProductComment_result.class, metaDataMap);
    }

    public replayProductComment_result() {
    }

    public replayProductComment_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replayProductComment_result(replayProductComment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public replayProductComment_result deepCopy() {
      return new replayProductComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public replayProductComment_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replayProductComment_result)
        return this.equals((replayProductComment_result)that);
      return false;
    }

    public boolean equals(replayProductComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(replayProductComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replayProductComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replayProductComment_resultStandardSchemeFactory implements SchemeFactory {
      public replayProductComment_resultStandardScheme getScheme() {
        return new replayProductComment_resultStandardScheme();
      }
    }

    private static class replayProductComment_resultStandardScheme extends StandardScheme<replayProductComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replayProductComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replayProductComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replayProductComment_resultTupleSchemeFactory implements SchemeFactory {
      public replayProductComment_resultTupleScheme getScheme() {
        return new replayProductComment_resultTupleScheme();
      }
    }

    private static class replayProductComment_resultTupleScheme extends TupleScheme<replayProductComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replayProductComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replayProductComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class replayProductCommentBatch_args implements org.apache.thrift.TBase<replayProductCommentBatch_args, replayProductCommentBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<replayProductCommentBatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replayProductCommentBatch_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_COMMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productCommentVo", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replayProductCommentBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replayProductCommentBatch_argsTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ProductCommentVo> productCommentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_COMMENT_VO((short)1, "productCommentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_COMMENT_VO
            return PRODUCT_COMMENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_COMMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("productCommentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCommentVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replayProductCommentBatch_args.class, metaDataMap);
    }

    public replayProductCommentBatch_args() {
    }

    public replayProductCommentBatch_args(
      List<com.froad.thrift.vo.ProductCommentVo> productCommentVo)
    {
      this();
      this.productCommentVo = productCommentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replayProductCommentBatch_args(replayProductCommentBatch_args other) {
      if (other.isSetProductCommentVo()) {
        List<com.froad.thrift.vo.ProductCommentVo> __this__productCommentVo = new ArrayList<com.froad.thrift.vo.ProductCommentVo>(other.productCommentVo.size());
        for (com.froad.thrift.vo.ProductCommentVo other_element : other.productCommentVo) {
          __this__productCommentVo.add(new com.froad.thrift.vo.ProductCommentVo(other_element));
        }
        this.productCommentVo = __this__productCommentVo;
      }
    }

    public replayProductCommentBatch_args deepCopy() {
      return new replayProductCommentBatch_args(this);
    }

    @Override
    public void clear() {
      this.productCommentVo = null;
    }

    public int getProductCommentVoSize() {
      return (this.productCommentVo == null) ? 0 : this.productCommentVo.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductCommentVo> getProductCommentVoIterator() {
      return (this.productCommentVo == null) ? null : this.productCommentVo.iterator();
    }

    public void addToProductCommentVo(com.froad.thrift.vo.ProductCommentVo elem) {
      if (this.productCommentVo == null) {
        this.productCommentVo = new ArrayList<com.froad.thrift.vo.ProductCommentVo>();
      }
      this.productCommentVo.add(elem);
    }

    public List<com.froad.thrift.vo.ProductCommentVo> getProductCommentVo() {
      return this.productCommentVo;
    }

    public replayProductCommentBatch_args setProductCommentVo(List<com.froad.thrift.vo.ProductCommentVo> productCommentVo) {
      this.productCommentVo = productCommentVo;
      return this;
    }

    public void unsetProductCommentVo() {
      this.productCommentVo = null;
    }

    /** Returns true if field productCommentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCommentVo() {
      return this.productCommentVo != null;
    }

    public void setProductCommentVoIsSet(boolean value) {
      if (!value) {
        this.productCommentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_COMMENT_VO:
        if (value == null) {
          unsetProductCommentVo();
        } else {
          setProductCommentVo((List<com.froad.thrift.vo.ProductCommentVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_COMMENT_VO:
        return getProductCommentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_COMMENT_VO:
        return isSetProductCommentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replayProductCommentBatch_args)
        return this.equals((replayProductCommentBatch_args)that);
      return false;
    }

    public boolean equals(replayProductCommentBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_productCommentVo = true && this.isSetProductCommentVo();
      boolean that_present_productCommentVo = true && that.isSetProductCommentVo();
      if (this_present_productCommentVo || that_present_productCommentVo) {
        if (!(this_present_productCommentVo && that_present_productCommentVo))
          return false;
        if (!this.productCommentVo.equals(that.productCommentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCommentVo = true && (isSetProductCommentVo());
      list.add(present_productCommentVo);
      if (present_productCommentVo)
        list.add(productCommentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(replayProductCommentBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCommentVo()).compareTo(other.isSetProductCommentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCommentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCommentVo, other.productCommentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replayProductCommentBatch_args(");
      boolean first = true;

      sb.append("productCommentVo:");
      if (this.productCommentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productCommentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replayProductCommentBatch_argsStandardSchemeFactory implements SchemeFactory {
      public replayProductCommentBatch_argsStandardScheme getScheme() {
        return new replayProductCommentBatch_argsStandardScheme();
      }
    }

    private static class replayProductCommentBatch_argsStandardScheme extends StandardScheme<replayProductCommentBatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replayProductCommentBatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_COMMENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.productCommentVo = new ArrayList<com.froad.thrift.vo.ProductCommentVo>(_list72.size);
                  com.froad.thrift.vo.ProductCommentVo _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = new com.froad.thrift.vo.ProductCommentVo();
                    _elem73.read(iprot);
                    struct.productCommentVo.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setProductCommentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replayProductCommentBatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCommentVo != null) {
          oprot.writeFieldBegin(PRODUCT_COMMENT_VO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productCommentVo.size()));
            for (com.froad.thrift.vo.ProductCommentVo _iter75 : struct.productCommentVo)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replayProductCommentBatch_argsTupleSchemeFactory implements SchemeFactory {
      public replayProductCommentBatch_argsTupleScheme getScheme() {
        return new replayProductCommentBatch_argsTupleScheme();
      }
    }

    private static class replayProductCommentBatch_argsTupleScheme extends TupleScheme<replayProductCommentBatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replayProductCommentBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCommentVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductCommentVo()) {
          {
            oprot.writeI32(struct.productCommentVo.size());
            for (com.froad.thrift.vo.ProductCommentVo _iter76 : struct.productCommentVo)
            {
              _iter76.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replayProductCommentBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.productCommentVo = new ArrayList<com.froad.thrift.vo.ProductCommentVo>(_list77.size);
            com.froad.thrift.vo.ProductCommentVo _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new com.froad.thrift.vo.ProductCommentVo();
              _elem78.read(iprot);
              struct.productCommentVo.add(_elem78);
            }
          }
          struct.setProductCommentVoIsSet(true);
        }
      }
    }

  }

  public static class replayProductCommentBatch_result implements org.apache.thrift.TBase<replayProductCommentBatch_result, replayProductCommentBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<replayProductCommentBatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replayProductCommentBatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replayProductCommentBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replayProductCommentBatch_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replayProductCommentBatch_result.class, metaDataMap);
    }

    public replayProductCommentBatch_result() {
    }

    public replayProductCommentBatch_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replayProductCommentBatch_result(replayProductCommentBatch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public replayProductCommentBatch_result deepCopy() {
      return new replayProductCommentBatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public replayProductCommentBatch_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replayProductCommentBatch_result)
        return this.equals((replayProductCommentBatch_result)that);
      return false;
    }

    public boolean equals(replayProductCommentBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(replayProductCommentBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replayProductCommentBatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replayProductCommentBatch_resultStandardSchemeFactory implements SchemeFactory {
      public replayProductCommentBatch_resultStandardScheme getScheme() {
        return new replayProductCommentBatch_resultStandardScheme();
      }
    }

    private static class replayProductCommentBatch_resultStandardScheme extends StandardScheme<replayProductCommentBatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replayProductCommentBatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replayProductCommentBatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replayProductCommentBatch_resultTupleSchemeFactory implements SchemeFactory {
      public replayProductCommentBatch_resultTupleScheme getScheme() {
        return new replayProductCommentBatch_resultTupleScheme();
      }
    }

    private static class replayProductCommentBatch_resultTupleScheme extends TupleScheme<replayProductCommentBatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replayProductCommentBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replayProductCommentBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addProductComment_args implements org.apache.thrift.TBase<addProductComment_args, addProductComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<addProductComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductComment_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_COMMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productCommentVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductComment_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCommentVo productCommentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_COMMENT_VO((short)1, "productCommentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_COMMENT_VO
            return PRODUCT_COMMENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_COMMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("productCommentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductComment_args.class, metaDataMap);
    }

    public addProductComment_args() {
    }

    public addProductComment_args(
      com.froad.thrift.vo.ProductCommentVo productCommentVo)
    {
      this();
      this.productCommentVo = productCommentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductComment_args(addProductComment_args other) {
      if (other.isSetProductCommentVo()) {
        this.productCommentVo = new com.froad.thrift.vo.ProductCommentVo(other.productCommentVo);
      }
    }

    public addProductComment_args deepCopy() {
      return new addProductComment_args(this);
    }

    @Override
    public void clear() {
      this.productCommentVo = null;
    }

    public com.froad.thrift.vo.ProductCommentVo getProductCommentVo() {
      return this.productCommentVo;
    }

    public addProductComment_args setProductCommentVo(com.froad.thrift.vo.ProductCommentVo productCommentVo) {
      this.productCommentVo = productCommentVo;
      return this;
    }

    public void unsetProductCommentVo() {
      this.productCommentVo = null;
    }

    /** Returns true if field productCommentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCommentVo() {
      return this.productCommentVo != null;
    }

    public void setProductCommentVoIsSet(boolean value) {
      if (!value) {
        this.productCommentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_COMMENT_VO:
        if (value == null) {
          unsetProductCommentVo();
        } else {
          setProductCommentVo((com.froad.thrift.vo.ProductCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_COMMENT_VO:
        return getProductCommentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_COMMENT_VO:
        return isSetProductCommentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductComment_args)
        return this.equals((addProductComment_args)that);
      return false;
    }

    public boolean equals(addProductComment_args that) {
      if (that == null)
        return false;

      boolean this_present_productCommentVo = true && this.isSetProductCommentVo();
      boolean that_present_productCommentVo = true && that.isSetProductCommentVo();
      if (this_present_productCommentVo || that_present_productCommentVo) {
        if (!(this_present_productCommentVo && that_present_productCommentVo))
          return false;
        if (!this.productCommentVo.equals(that.productCommentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCommentVo = true && (isSetProductCommentVo());
      list.add(present_productCommentVo);
      if (present_productCommentVo)
        list.add(productCommentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCommentVo()).compareTo(other.isSetProductCommentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCommentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCommentVo, other.productCommentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductComment_args(");
      boolean first = true;

      sb.append("productCommentVo:");
      if (this.productCommentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productCommentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productCommentVo != null) {
        productCommentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductComment_argsStandardSchemeFactory implements SchemeFactory {
      public addProductComment_argsStandardScheme getScheme() {
        return new addProductComment_argsStandardScheme();
      }
    }

    private static class addProductComment_argsStandardScheme extends StandardScheme<addProductComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_COMMENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCommentVo = new com.froad.thrift.vo.ProductCommentVo();
                struct.productCommentVo.read(iprot);
                struct.setProductCommentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCommentVo != null) {
          oprot.writeFieldBegin(PRODUCT_COMMENT_VO_FIELD_DESC);
          struct.productCommentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductComment_argsTupleSchemeFactory implements SchemeFactory {
      public addProductComment_argsTupleScheme getScheme() {
        return new addProductComment_argsTupleScheme();
      }
    }

    private static class addProductComment_argsTupleScheme extends TupleScheme<addProductComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCommentVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductCommentVo()) {
          struct.productCommentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productCommentVo = new com.froad.thrift.vo.ProductCommentVo();
          struct.productCommentVo.read(iprot);
          struct.setProductCommentVoIsSet(true);
        }
      }
    }

  }

  public static class addProductComment_result implements org.apache.thrift.TBase<addProductComment_result, addProductComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<addProductComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductComment_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductComment_result.class, metaDataMap);
    }

    public addProductComment_result() {
    }

    public addProductComment_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductComment_result(addProductComment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public addProductComment_result deepCopy() {
      return new addProductComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public addProductComment_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductComment_result)
        return this.equals((addProductComment_result)that);
      return false;
    }

    public boolean equals(addProductComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductComment_resultStandardSchemeFactory implements SchemeFactory {
      public addProductComment_resultStandardScheme getScheme() {
        return new addProductComment_resultStandardScheme();
      }
    }

    private static class addProductComment_resultStandardScheme extends StandardScheme<addProductComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductComment_resultTupleSchemeFactory implements SchemeFactory {
      public addProductComment_resultTupleScheme getScheme() {
        return new addProductComment_resultTupleScheme();
      }
    }

    private static class addProductComment_resultTupleScheme extends TupleScheme<addProductComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateProductComment_args implements org.apache.thrift.TBase<updateProductComment_args, updateProductComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductComment_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_COMMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productCommentVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductComment_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCommentVo productCommentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_COMMENT_VO((short)1, "productCommentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_COMMENT_VO
            return PRODUCT_COMMENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_COMMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("productCommentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductComment_args.class, metaDataMap);
    }

    public updateProductComment_args() {
    }

    public updateProductComment_args(
      com.froad.thrift.vo.ProductCommentVo productCommentVo)
    {
      this();
      this.productCommentVo = productCommentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductComment_args(updateProductComment_args other) {
      if (other.isSetProductCommentVo()) {
        this.productCommentVo = new com.froad.thrift.vo.ProductCommentVo(other.productCommentVo);
      }
    }

    public updateProductComment_args deepCopy() {
      return new updateProductComment_args(this);
    }

    @Override
    public void clear() {
      this.productCommentVo = null;
    }

    public com.froad.thrift.vo.ProductCommentVo getProductCommentVo() {
      return this.productCommentVo;
    }

    public updateProductComment_args setProductCommentVo(com.froad.thrift.vo.ProductCommentVo productCommentVo) {
      this.productCommentVo = productCommentVo;
      return this;
    }

    public void unsetProductCommentVo() {
      this.productCommentVo = null;
    }

    /** Returns true if field productCommentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCommentVo() {
      return this.productCommentVo != null;
    }

    public void setProductCommentVoIsSet(boolean value) {
      if (!value) {
        this.productCommentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_COMMENT_VO:
        if (value == null) {
          unsetProductCommentVo();
        } else {
          setProductCommentVo((com.froad.thrift.vo.ProductCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_COMMENT_VO:
        return getProductCommentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_COMMENT_VO:
        return isSetProductCommentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductComment_args)
        return this.equals((updateProductComment_args)that);
      return false;
    }

    public boolean equals(updateProductComment_args that) {
      if (that == null)
        return false;

      boolean this_present_productCommentVo = true && this.isSetProductCommentVo();
      boolean that_present_productCommentVo = true && that.isSetProductCommentVo();
      if (this_present_productCommentVo || that_present_productCommentVo) {
        if (!(this_present_productCommentVo && that_present_productCommentVo))
          return false;
        if (!this.productCommentVo.equals(that.productCommentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCommentVo = true && (isSetProductCommentVo());
      list.add(present_productCommentVo);
      if (present_productCommentVo)
        list.add(productCommentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCommentVo()).compareTo(other.isSetProductCommentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCommentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCommentVo, other.productCommentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductComment_args(");
      boolean first = true;

      sb.append("productCommentVo:");
      if (this.productCommentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productCommentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productCommentVo != null) {
        productCommentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductComment_argsStandardSchemeFactory implements SchemeFactory {
      public updateProductComment_argsStandardScheme getScheme() {
        return new updateProductComment_argsStandardScheme();
      }
    }

    private static class updateProductComment_argsStandardScheme extends StandardScheme<updateProductComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_COMMENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCommentVo = new com.froad.thrift.vo.ProductCommentVo();
                struct.productCommentVo.read(iprot);
                struct.setProductCommentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCommentVo != null) {
          oprot.writeFieldBegin(PRODUCT_COMMENT_VO_FIELD_DESC);
          struct.productCommentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductComment_argsTupleSchemeFactory implements SchemeFactory {
      public updateProductComment_argsTupleScheme getScheme() {
        return new updateProductComment_argsTupleScheme();
      }
    }

    private static class updateProductComment_argsTupleScheme extends TupleScheme<updateProductComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCommentVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductCommentVo()) {
          struct.productCommentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productCommentVo = new com.froad.thrift.vo.ProductCommentVo();
          struct.productCommentVo.read(iprot);
          struct.setProductCommentVoIsSet(true);
        }
      }
    }

  }

  public static class updateProductComment_result implements org.apache.thrift.TBase<updateProductComment_result, updateProductComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductComment_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductComment_result.class, metaDataMap);
    }

    public updateProductComment_result() {
    }

    public updateProductComment_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductComment_result(updateProductComment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateProductComment_result deepCopy() {
      return new updateProductComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateProductComment_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductComment_result)
        return this.equals((updateProductComment_result)that);
      return false;
    }

    public boolean equals(updateProductComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductComment_resultStandardSchemeFactory implements SchemeFactory {
      public updateProductComment_resultStandardScheme getScheme() {
        return new updateProductComment_resultStandardScheme();
      }
    }

    private static class updateProductComment_resultStandardScheme extends StandardScheme<updateProductComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductComment_resultTupleSchemeFactory implements SchemeFactory {
      public updateProductComment_resultTupleScheme getScheme() {
        return new updateProductComment_resultTupleScheme();
      }
    }

    private static class updateProductComment_resultTupleScheme extends TupleScheme<updateProductComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryProductComment_args implements org.apache.thrift.TBase<queryProductComment_args, queryProductComment_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryProductComment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryProductComment_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_COMMENT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productCommentVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryProductComment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryProductComment_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCommentVo productCommentVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_COMMENT_VO((short)1, "productCommentVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_COMMENT_VO
            return PRODUCT_COMMENT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_COMMENT_VO, new org.apache.thrift.meta_data.FieldMetaData("productCommentVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryProductComment_args.class, metaDataMap);
    }

    public queryProductComment_args() {
    }

    public queryProductComment_args(
      com.froad.thrift.vo.ProductCommentVo productCommentVo)
    {
      this();
      this.productCommentVo = productCommentVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryProductComment_args(queryProductComment_args other) {
      if (other.isSetProductCommentVo()) {
        this.productCommentVo = new com.froad.thrift.vo.ProductCommentVo(other.productCommentVo);
      }
    }

    public queryProductComment_args deepCopy() {
      return new queryProductComment_args(this);
    }

    @Override
    public void clear() {
      this.productCommentVo = null;
    }

    public com.froad.thrift.vo.ProductCommentVo getProductCommentVo() {
      return this.productCommentVo;
    }

    public queryProductComment_args setProductCommentVo(com.froad.thrift.vo.ProductCommentVo productCommentVo) {
      this.productCommentVo = productCommentVo;
      return this;
    }

    public void unsetProductCommentVo() {
      this.productCommentVo = null;
    }

    /** Returns true if field productCommentVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCommentVo() {
      return this.productCommentVo != null;
    }

    public void setProductCommentVoIsSet(boolean value) {
      if (!value) {
        this.productCommentVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_COMMENT_VO:
        if (value == null) {
          unsetProductCommentVo();
        } else {
          setProductCommentVo((com.froad.thrift.vo.ProductCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_COMMENT_VO:
        return getProductCommentVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_COMMENT_VO:
        return isSetProductCommentVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryProductComment_args)
        return this.equals((queryProductComment_args)that);
      return false;
    }

    public boolean equals(queryProductComment_args that) {
      if (that == null)
        return false;

      boolean this_present_productCommentVo = true && this.isSetProductCommentVo();
      boolean that_present_productCommentVo = true && that.isSetProductCommentVo();
      if (this_present_productCommentVo || that_present_productCommentVo) {
        if (!(this_present_productCommentVo && that_present_productCommentVo))
          return false;
        if (!this.productCommentVo.equals(that.productCommentVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCommentVo = true && (isSetProductCommentVo());
      list.add(present_productCommentVo);
      if (present_productCommentVo)
        list.add(productCommentVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryProductComment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCommentVo()).compareTo(other.isSetProductCommentVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCommentVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCommentVo, other.productCommentVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryProductComment_args(");
      boolean first = true;

      sb.append("productCommentVo:");
      if (this.productCommentVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productCommentVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productCommentVo != null) {
        productCommentVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryProductComment_argsStandardSchemeFactory implements SchemeFactory {
      public queryProductComment_argsStandardScheme getScheme() {
        return new queryProductComment_argsStandardScheme();
      }
    }

    private static class queryProductComment_argsStandardScheme extends StandardScheme<queryProductComment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryProductComment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_COMMENT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCommentVo = new com.froad.thrift.vo.ProductCommentVo();
                struct.productCommentVo.read(iprot);
                struct.setProductCommentVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryProductComment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCommentVo != null) {
          oprot.writeFieldBegin(PRODUCT_COMMENT_VO_FIELD_DESC);
          struct.productCommentVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryProductComment_argsTupleSchemeFactory implements SchemeFactory {
      public queryProductComment_argsTupleScheme getScheme() {
        return new queryProductComment_argsTupleScheme();
      }
    }

    private static class queryProductComment_argsTupleScheme extends TupleScheme<queryProductComment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryProductComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCommentVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductCommentVo()) {
          struct.productCommentVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryProductComment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productCommentVo = new com.froad.thrift.vo.ProductCommentVo();
          struct.productCommentVo.read(iprot);
          struct.setProductCommentVoIsSet(true);
        }
      }
    }

  }

  public static class queryProductComment_result implements org.apache.thrift.TBase<queryProductComment_result, queryProductComment_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryProductComment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryProductComment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryProductComment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryProductComment_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCommentVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCommentVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryProductComment_result.class, metaDataMap);
    }

    public queryProductComment_result() {
    }

    public queryProductComment_result(
      com.froad.thrift.vo.ProductCommentVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryProductComment_result(queryProductComment_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductCommentVo(other.success);
      }
    }

    public queryProductComment_result deepCopy() {
      return new queryProductComment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductCommentVo getSuccess() {
      return this.success;
    }

    public queryProductComment_result setSuccess(com.froad.thrift.vo.ProductCommentVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductCommentVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryProductComment_result)
        return this.equals((queryProductComment_result)that);
      return false;
    }

    public boolean equals(queryProductComment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryProductComment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryProductComment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryProductComment_resultStandardSchemeFactory implements SchemeFactory {
      public queryProductComment_resultStandardScheme getScheme() {
        return new queryProductComment_resultStandardScheme();
      }
    }

    private static class queryProductComment_resultStandardScheme extends StandardScheme<queryProductComment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryProductComment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductCommentVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryProductComment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryProductComment_resultTupleSchemeFactory implements SchemeFactory {
      public queryProductComment_resultTupleScheme getScheme() {
        return new queryProductComment_resultTupleScheme();
      }
    }

    private static class queryProductComment_resultTupleScheme extends TupleScheme<queryProductComment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryProductComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryProductComment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductCommentVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryProductComments_args implements org.apache.thrift.TBase<queryProductComments_args, queryProductComments_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryProductComments_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryProductComments_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_COMMENT_FILTER_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productCommentFilterReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryProductComments_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryProductComments_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_COMMENT_FILTER_REQ((short)1, "productCommentFilterReq"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_COMMENT_FILTER_REQ
            return PRODUCT_COMMENT_FILTER_REQ;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_COMMENT_FILTER_REQ, new org.apache.thrift.meta_data.FieldMetaData("productCommentFilterReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCommentFilterReq.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryProductComments_args.class, metaDataMap);
    }

    public queryProductComments_args() {
    }

    public queryProductComments_args(
      com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.productCommentFilterReq = productCommentFilterReq;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryProductComments_args(queryProductComments_args other) {
      if (other.isSetProductCommentFilterReq()) {
        this.productCommentFilterReq = new com.froad.thrift.vo.ProductCommentFilterReq(other.productCommentFilterReq);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public queryProductComments_args deepCopy() {
      return new queryProductComments_args(this);
    }

    @Override
    public void clear() {
      this.productCommentFilterReq = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.ProductCommentFilterReq getProductCommentFilterReq() {
      return this.productCommentFilterReq;
    }

    public queryProductComments_args setProductCommentFilterReq(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq) {
      this.productCommentFilterReq = productCommentFilterReq;
      return this;
    }

    public void unsetProductCommentFilterReq() {
      this.productCommentFilterReq = null;
    }

    /** Returns true if field productCommentFilterReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCommentFilterReq() {
      return this.productCommentFilterReq != null;
    }

    public void setProductCommentFilterReqIsSet(boolean value) {
      if (!value) {
        this.productCommentFilterReq = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public queryProductComments_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_COMMENT_FILTER_REQ:
        if (value == null) {
          unsetProductCommentFilterReq();
        } else {
          setProductCommentFilterReq((com.froad.thrift.vo.ProductCommentFilterReq)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_COMMENT_FILTER_REQ:
        return getProductCommentFilterReq();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_COMMENT_FILTER_REQ:
        return isSetProductCommentFilterReq();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryProductComments_args)
        return this.equals((queryProductComments_args)that);
      return false;
    }

    public boolean equals(queryProductComments_args that) {
      if (that == null)
        return false;

      boolean this_present_productCommentFilterReq = true && this.isSetProductCommentFilterReq();
      boolean that_present_productCommentFilterReq = true && that.isSetProductCommentFilterReq();
      if (this_present_productCommentFilterReq || that_present_productCommentFilterReq) {
        if (!(this_present_productCommentFilterReq && that_present_productCommentFilterReq))
          return false;
        if (!this.productCommentFilterReq.equals(that.productCommentFilterReq))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCommentFilterReq = true && (isSetProductCommentFilterReq());
      list.add(present_productCommentFilterReq);
      if (present_productCommentFilterReq)
        list.add(productCommentFilterReq);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryProductComments_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCommentFilterReq()).compareTo(other.isSetProductCommentFilterReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCommentFilterReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCommentFilterReq, other.productCommentFilterReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryProductComments_args(");
      boolean first = true;

      sb.append("productCommentFilterReq:");
      if (this.productCommentFilterReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productCommentFilterReq);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productCommentFilterReq != null) {
        productCommentFilterReq.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryProductComments_argsStandardSchemeFactory implements SchemeFactory {
      public queryProductComments_argsStandardScheme getScheme() {
        return new queryProductComments_argsStandardScheme();
      }
    }

    private static class queryProductComments_argsStandardScheme extends StandardScheme<queryProductComments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryProductComments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_COMMENT_FILTER_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCommentFilterReq = new com.froad.thrift.vo.ProductCommentFilterReq();
                struct.productCommentFilterReq.read(iprot);
                struct.setProductCommentFilterReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryProductComments_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCommentFilterReq != null) {
          oprot.writeFieldBegin(PRODUCT_COMMENT_FILTER_REQ_FIELD_DESC);
          struct.productCommentFilterReq.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryProductComments_argsTupleSchemeFactory implements SchemeFactory {
      public queryProductComments_argsTupleScheme getScheme() {
        return new queryProductComments_argsTupleScheme();
      }
    }

    private static class queryProductComments_argsTupleScheme extends TupleScheme<queryProductComments_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryProductComments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCommentFilterReq()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductCommentFilterReq()) {
          struct.productCommentFilterReq.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryProductComments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productCommentFilterReq = new com.froad.thrift.vo.ProductCommentFilterReq();
          struct.productCommentFilterReq.read(iprot);
          struct.setProductCommentFilterReqIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class queryProductComments_result implements org.apache.thrift.TBase<queryProductComments_result, queryProductComments_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryProductComments_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryProductComments_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryProductComments_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryProductComments_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCommentPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCommentPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryProductComments_result.class, metaDataMap);
    }

    public queryProductComments_result() {
    }

    public queryProductComments_result(
      com.froad.thrift.vo.ProductCommentPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryProductComments_result(queryProductComments_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductCommentPageVo(other.success);
      }
    }

    public queryProductComments_result deepCopy() {
      return new queryProductComments_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductCommentPageVo getSuccess() {
      return this.success;
    }

    public queryProductComments_result setSuccess(com.froad.thrift.vo.ProductCommentPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductCommentPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryProductComments_result)
        return this.equals((queryProductComments_result)that);
      return false;
    }

    public boolean equals(queryProductComments_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryProductComments_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryProductComments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryProductComments_resultStandardSchemeFactory implements SchemeFactory {
      public queryProductComments_resultStandardScheme getScheme() {
        return new queryProductComments_resultStandardScheme();
      }
    }

    private static class queryProductComments_resultStandardScheme extends StandardScheme<queryProductComments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryProductComments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductCommentPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryProductComments_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryProductComments_resultTupleSchemeFactory implements SchemeFactory {
      public queryProductComments_resultTupleScheme getScheme() {
        return new queryProductComments_resultTupleScheme();
      }
    }

    private static class queryProductComments_resultTupleScheme extends TupleScheme<queryProductComments_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryProductComments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryProductComments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductCommentPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addProductActivties_args implements org.apache.thrift.TBase<addProductActivties_args, addProductActivties_args._Fields>, java.io.Serializable, Cloneable, Comparable<addProductActivties_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductActivties_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RELATE_ACTIVITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("relateActivities", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductActivties_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductActivties_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ProductRelateActivitiesVo relateActivities; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      RELATE_ACTIVITIES((short)2, "relateActivities");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // RELATE_ACTIVITIES
            return RELATE_ACTIVITIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.RELATE_ACTIVITIES, new org.apache.thrift.meta_data.FieldMetaData("relateActivities", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductRelateActivitiesVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductActivties_args.class, metaDataMap);
    }

    public addProductActivties_args() {
    }

    public addProductActivties_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ProductRelateActivitiesVo relateActivities)
    {
      this();
      this.originVo = originVo;
      this.relateActivities = relateActivities;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductActivties_args(addProductActivties_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetRelateActivities()) {
        this.relateActivities = new com.froad.thrift.vo.ProductRelateActivitiesVo(other.relateActivities);
      }
    }

    public addProductActivties_args deepCopy() {
      return new addProductActivties_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.relateActivities = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addProductActivties_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ProductRelateActivitiesVo getRelateActivities() {
      return this.relateActivities;
    }

    public addProductActivties_args setRelateActivities(com.froad.thrift.vo.ProductRelateActivitiesVo relateActivities) {
      this.relateActivities = relateActivities;
      return this;
    }

    public void unsetRelateActivities() {
      this.relateActivities = null;
    }

    /** Returns true if field relateActivities is set (has been assigned a value) and false otherwise */
    public boolean isSetRelateActivities() {
      return this.relateActivities != null;
    }

    public void setRelateActivitiesIsSet(boolean value) {
      if (!value) {
        this.relateActivities = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case RELATE_ACTIVITIES:
        if (value == null) {
          unsetRelateActivities();
        } else {
          setRelateActivities((com.froad.thrift.vo.ProductRelateActivitiesVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case RELATE_ACTIVITIES:
        return getRelateActivities();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case RELATE_ACTIVITIES:
        return isSetRelateActivities();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductActivties_args)
        return this.equals((addProductActivties_args)that);
      return false;
    }

    public boolean equals(addProductActivties_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_relateActivities = true && this.isSetRelateActivities();
      boolean that_present_relateActivities = true && that.isSetRelateActivities();
      if (this_present_relateActivities || that_present_relateActivities) {
        if (!(this_present_relateActivities && that_present_relateActivities))
          return false;
        if (!this.relateActivities.equals(that.relateActivities))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_relateActivities = true && (isSetRelateActivities());
      list.add(present_relateActivities);
      if (present_relateActivities)
        list.add(relateActivities);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductActivties_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRelateActivities()).compareTo(other.isSetRelateActivities());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRelateActivities()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relateActivities, other.relateActivities);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductActivties_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("relateActivities:");
      if (this.relateActivities == null) {
        sb.append("null");
      } else {
        sb.append(this.relateActivities);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (relateActivities != null) {
        relateActivities.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductActivties_argsStandardSchemeFactory implements SchemeFactory {
      public addProductActivties_argsStandardScheme getScheme() {
        return new addProductActivties_argsStandardScheme();
      }
    }

    private static class addProductActivties_argsStandardScheme extends StandardScheme<addProductActivties_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductActivties_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RELATE_ACTIVITIES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.relateActivities = new com.froad.thrift.vo.ProductRelateActivitiesVo();
                struct.relateActivities.read(iprot);
                struct.setRelateActivitiesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductActivties_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.relateActivities != null) {
          oprot.writeFieldBegin(RELATE_ACTIVITIES_FIELD_DESC);
          struct.relateActivities.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductActivties_argsTupleSchemeFactory implements SchemeFactory {
      public addProductActivties_argsTupleScheme getScheme() {
        return new addProductActivties_argsTupleScheme();
      }
    }

    private static class addProductActivties_argsTupleScheme extends TupleScheme<addProductActivties_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductActivties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetRelateActivities()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetRelateActivities()) {
          struct.relateActivities.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductActivties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.relateActivities = new com.froad.thrift.vo.ProductRelateActivitiesVo();
          struct.relateActivities.read(iprot);
          struct.setRelateActivitiesIsSet(true);
        }
      }
    }

  }

  public static class addProductActivties_result implements org.apache.thrift.TBase<addProductActivties_result, addProductActivties_result._Fields>, java.io.Serializable, Cloneable, Comparable<addProductActivties_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductActivties_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductActivties_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductActivties_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductActivties_result.class, metaDataMap);
    }

    public addProductActivties_result() {
    }

    public addProductActivties_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductActivties_result(addProductActivties_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public addProductActivties_result deepCopy() {
      return new addProductActivties_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public addProductActivties_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductActivties_result)
        return this.equals((addProductActivties_result)that);
      return false;
    }

    public boolean equals(addProductActivties_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductActivties_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductActivties_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductActivties_resultStandardSchemeFactory implements SchemeFactory {
      public addProductActivties_resultStandardScheme getScheme() {
        return new addProductActivties_resultStandardScheme();
      }
    }

    private static class addProductActivties_resultStandardScheme extends StandardScheme<addProductActivties_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductActivties_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductActivties_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductActivties_resultTupleSchemeFactory implements SchemeFactory {
      public addProductActivties_resultTupleScheme getScheme() {
        return new addProductActivties_resultTupleScheme();
      }
    }

    private static class addProductActivties_resultTupleScheme extends TupleScheme<addProductActivties_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductActivties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductActivties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addProductOutlets_args implements org.apache.thrift.TBase<addProductOutlets_args, addProductOutlets_args._Fields>, java.io.Serializable, Cloneable, Comparable<addProductOutlets_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductOutlets_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLETS_FIELD_DESC = new org.apache.thrift.protocol.TField("outlets", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductOutlets_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductOutlets_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ProductRelateOutletVo outlets; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      OUTLETS((short)2, "outlets");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // OUTLETS
            return OUTLETS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.OUTLETS, new org.apache.thrift.meta_data.FieldMetaData("outlets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductRelateOutletVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductOutlets_args.class, metaDataMap);
    }

    public addProductOutlets_args() {
    }

    public addProductOutlets_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ProductRelateOutletVo outlets)
    {
      this();
      this.originVo = originVo;
      this.outlets = outlets;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductOutlets_args(addProductOutlets_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetOutlets()) {
        this.outlets = new com.froad.thrift.vo.ProductRelateOutletVo(other.outlets);
      }
    }

    public addProductOutlets_args deepCopy() {
      return new addProductOutlets_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.outlets = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addProductOutlets_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ProductRelateOutletVo getOutlets() {
      return this.outlets;
    }

    public addProductOutlets_args setOutlets(com.froad.thrift.vo.ProductRelateOutletVo outlets) {
      this.outlets = outlets;
      return this;
    }

    public void unsetOutlets() {
      this.outlets = null;
    }

    /** Returns true if field outlets is set (has been assigned a value) and false otherwise */
    public boolean isSetOutlets() {
      return this.outlets != null;
    }

    public void setOutletsIsSet(boolean value) {
      if (!value) {
        this.outlets = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case OUTLETS:
        if (value == null) {
          unsetOutlets();
        } else {
          setOutlets((com.froad.thrift.vo.ProductRelateOutletVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case OUTLETS:
        return getOutlets();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case OUTLETS:
        return isSetOutlets();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductOutlets_args)
        return this.equals((addProductOutlets_args)that);
      return false;
    }

    public boolean equals(addProductOutlets_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_outlets = true && this.isSetOutlets();
      boolean that_present_outlets = true && that.isSetOutlets();
      if (this_present_outlets || that_present_outlets) {
        if (!(this_present_outlets && that_present_outlets))
          return false;
        if (!this.outlets.equals(that.outlets))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_outlets = true && (isSetOutlets());
      list.add(present_outlets);
      if (present_outlets)
        list.add(outlets);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductOutlets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutlets()).compareTo(other.isSetOutlets());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutlets()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outlets, other.outlets);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductOutlets_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outlets:");
      if (this.outlets == null) {
        sb.append("null");
      } else {
        sb.append(this.outlets);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (outlets != null) {
        outlets.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductOutlets_argsStandardSchemeFactory implements SchemeFactory {
      public addProductOutlets_argsStandardScheme getScheme() {
        return new addProductOutlets_argsStandardScheme();
      }
    }

    private static class addProductOutlets_argsStandardScheme extends StandardScheme<addProductOutlets_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductOutlets_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLETS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outlets = new com.froad.thrift.vo.ProductRelateOutletVo();
                struct.outlets.read(iprot);
                struct.setOutletsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductOutlets_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.outlets != null) {
          oprot.writeFieldBegin(OUTLETS_FIELD_DESC);
          struct.outlets.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductOutlets_argsTupleSchemeFactory implements SchemeFactory {
      public addProductOutlets_argsTupleScheme getScheme() {
        return new addProductOutlets_argsTupleScheme();
      }
    }

    private static class addProductOutlets_argsTupleScheme extends TupleScheme<addProductOutlets_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductOutlets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetOutlets()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetOutlets()) {
          struct.outlets.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductOutlets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outlets = new com.froad.thrift.vo.ProductRelateOutletVo();
          struct.outlets.read(iprot);
          struct.setOutletsIsSet(true);
        }
      }
    }

  }

  public static class addProductOutlets_result implements org.apache.thrift.TBase<addProductOutlets_result, addProductOutlets_result._Fields>, java.io.Serializable, Cloneable, Comparable<addProductOutlets_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductOutlets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductOutlets_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductOutlets_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductOutlets_result.class, metaDataMap);
    }

    public addProductOutlets_result() {
    }

    public addProductOutlets_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductOutlets_result(addProductOutlets_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public addProductOutlets_result deepCopy() {
      return new addProductOutlets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public addProductOutlets_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductOutlets_result)
        return this.equals((addProductOutlets_result)that);
      return false;
    }

    public boolean equals(addProductOutlets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductOutlets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductOutlets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductOutlets_resultStandardSchemeFactory implements SchemeFactory {
      public addProductOutlets_resultStandardScheme getScheme() {
        return new addProductOutlets_resultStandardScheme();
      }
    }

    private static class addProductOutlets_resultStandardScheme extends StandardScheme<addProductOutlets_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductOutlets_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductOutlets_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductOutlets_resultTupleSchemeFactory implements SchemeFactory {
      public addProductOutlets_resultTupleScheme getScheme() {
        return new addProductOutlets_resultTupleScheme();
      }
    }

    private static class addProductOutlets_resultTupleScheme extends TupleScheme<addProductOutlets_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductOutlets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductOutlets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductAreaOutlets_args implements org.apache.thrift.TBase<getProductAreaOutlets_args, getProductAreaOutlets_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductAreaOutlets_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductAreaOutlets_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_AREA_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productAreaVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductAreaOutlets_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductAreaOutlets_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductAreaVo productAreaVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_AREA_VO((short)1, "productAreaVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_AREA_VO
            return PRODUCT_AREA_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_AREA_VO, new org.apache.thrift.meta_data.FieldMetaData("productAreaVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductAreaVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductAreaOutlets_args.class, metaDataMap);
    }

    public getProductAreaOutlets_args() {
    }

    public getProductAreaOutlets_args(
      com.froad.thrift.vo.ProductAreaVo productAreaVo)
    {
      this();
      this.productAreaVo = productAreaVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductAreaOutlets_args(getProductAreaOutlets_args other) {
      if (other.isSetProductAreaVo()) {
        this.productAreaVo = new com.froad.thrift.vo.ProductAreaVo(other.productAreaVo);
      }
    }

    public getProductAreaOutlets_args deepCopy() {
      return new getProductAreaOutlets_args(this);
    }

    @Override
    public void clear() {
      this.productAreaVo = null;
    }

    public com.froad.thrift.vo.ProductAreaVo getProductAreaVo() {
      return this.productAreaVo;
    }

    public getProductAreaOutlets_args setProductAreaVo(com.froad.thrift.vo.ProductAreaVo productAreaVo) {
      this.productAreaVo = productAreaVo;
      return this;
    }

    public void unsetProductAreaVo() {
      this.productAreaVo = null;
    }

    /** Returns true if field productAreaVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductAreaVo() {
      return this.productAreaVo != null;
    }

    public void setProductAreaVoIsSet(boolean value) {
      if (!value) {
        this.productAreaVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_AREA_VO:
        if (value == null) {
          unsetProductAreaVo();
        } else {
          setProductAreaVo((com.froad.thrift.vo.ProductAreaVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_AREA_VO:
        return getProductAreaVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_AREA_VO:
        return isSetProductAreaVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductAreaOutlets_args)
        return this.equals((getProductAreaOutlets_args)that);
      return false;
    }

    public boolean equals(getProductAreaOutlets_args that) {
      if (that == null)
        return false;

      boolean this_present_productAreaVo = true && this.isSetProductAreaVo();
      boolean that_present_productAreaVo = true && that.isSetProductAreaVo();
      if (this_present_productAreaVo || that_present_productAreaVo) {
        if (!(this_present_productAreaVo && that_present_productAreaVo))
          return false;
        if (!this.productAreaVo.equals(that.productAreaVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productAreaVo = true && (isSetProductAreaVo());
      list.add(present_productAreaVo);
      if (present_productAreaVo)
        list.add(productAreaVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductAreaOutlets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductAreaVo()).compareTo(other.isSetProductAreaVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductAreaVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productAreaVo, other.productAreaVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductAreaOutlets_args(");
      boolean first = true;

      sb.append("productAreaVo:");
      if (this.productAreaVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productAreaVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productAreaVo != null) {
        productAreaVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductAreaOutlets_argsStandardSchemeFactory implements SchemeFactory {
      public getProductAreaOutlets_argsStandardScheme getScheme() {
        return new getProductAreaOutlets_argsStandardScheme();
      }
    }

    private static class getProductAreaOutlets_argsStandardScheme extends StandardScheme<getProductAreaOutlets_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductAreaOutlets_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_AREA_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productAreaVo = new com.froad.thrift.vo.ProductAreaVo();
                struct.productAreaVo.read(iprot);
                struct.setProductAreaVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductAreaOutlets_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productAreaVo != null) {
          oprot.writeFieldBegin(PRODUCT_AREA_VO_FIELD_DESC);
          struct.productAreaVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductAreaOutlets_argsTupleSchemeFactory implements SchemeFactory {
      public getProductAreaOutlets_argsTupleScheme getScheme() {
        return new getProductAreaOutlets_argsTupleScheme();
      }
    }

    private static class getProductAreaOutlets_argsTupleScheme extends TupleScheme<getProductAreaOutlets_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductAreaOutlets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductAreaVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductAreaVo()) {
          struct.productAreaVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductAreaOutlets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productAreaVo = new com.froad.thrift.vo.ProductAreaVo();
          struct.productAreaVo.read(iprot);
          struct.setProductAreaVoIsSet(true);
        }
      }
    }

  }

  public static class getProductAreaOutlets_result implements org.apache.thrift.TBase<getProductAreaOutlets_result, getProductAreaOutlets_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductAreaOutlets_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductAreaOutlets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductAreaOutlets_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductAreaOutlets_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ProductAreaVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductAreaVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductAreaOutlets_result.class, metaDataMap);
    }

    public getProductAreaOutlets_result() {
    }

    public getProductAreaOutlets_result(
      List<com.froad.thrift.vo.ProductAreaVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductAreaOutlets_result(getProductAreaOutlets_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.ProductAreaVo> __this__success = new ArrayList<com.froad.thrift.vo.ProductAreaVo>(other.success.size());
        for (com.froad.thrift.vo.ProductAreaVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.ProductAreaVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getProductAreaOutlets_result deepCopy() {
      return new getProductAreaOutlets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductAreaVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.ProductAreaVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.ProductAreaVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.ProductAreaVo> getSuccess() {
      return this.success;
    }

    public getProductAreaOutlets_result setSuccess(List<com.froad.thrift.vo.ProductAreaVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.ProductAreaVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductAreaOutlets_result)
        return this.equals((getProductAreaOutlets_result)that);
      return false;
    }

    public boolean equals(getProductAreaOutlets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductAreaOutlets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductAreaOutlets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductAreaOutlets_resultStandardSchemeFactory implements SchemeFactory {
      public getProductAreaOutlets_resultStandardScheme getScheme() {
        return new getProductAreaOutlets_resultStandardScheme();
      }
    }

    private static class getProductAreaOutlets_resultStandardScheme extends StandardScheme<getProductAreaOutlets_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductAreaOutlets_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.ProductAreaVo>(_list80.size);
                  com.froad.thrift.vo.ProductAreaVo _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = new com.froad.thrift.vo.ProductAreaVo();
                    _elem81.read(iprot);
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductAreaOutlets_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.ProductAreaVo _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductAreaOutlets_resultTupleSchemeFactory implements SchemeFactory {
      public getProductAreaOutlets_resultTupleScheme getScheme() {
        return new getProductAreaOutlets_resultTupleScheme();
      }
    }

    private static class getProductAreaOutlets_resultTupleScheme extends TupleScheme<getProductAreaOutlets_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductAreaOutlets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.ProductAreaVo _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductAreaOutlets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.ProductAreaVo>(_list85.size);
            com.froad.thrift.vo.ProductAreaVo _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = new com.froad.thrift.vo.ProductAreaVo();
              _elem86.read(iprot);
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class invalidProductBatch_args implements org.apache.thrift.TBase<invalidProductBatch_args, invalidProductBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<invalidProductBatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("invalidProductBatch_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INVALID_PRODUCT_BATCH_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidProductBatchVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new invalidProductBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new invalidProductBatch_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      INVALID_PRODUCT_BATCH_VO((short)2, "invalidProductBatchVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // INVALID_PRODUCT_BATCH_VO
            return INVALID_PRODUCT_BATCH_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.INVALID_PRODUCT_BATCH_VO, new org.apache.thrift.meta_data.FieldMetaData("invalidProductBatchVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.InvalidProductBatchVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(invalidProductBatch_args.class, metaDataMap);
    }

    public invalidProductBatch_args() {
    }

    public invalidProductBatch_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo)
    {
      this();
      this.originVo = originVo;
      this.invalidProductBatchVo = invalidProductBatchVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invalidProductBatch_args(invalidProductBatch_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetInvalidProductBatchVo()) {
        this.invalidProductBatchVo = new com.froad.thrift.vo.InvalidProductBatchVo(other.invalidProductBatchVo);
      }
    }

    public invalidProductBatch_args deepCopy() {
      return new invalidProductBatch_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.invalidProductBatchVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public invalidProductBatch_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.InvalidProductBatchVo getInvalidProductBatchVo() {
      return this.invalidProductBatchVo;
    }

    public invalidProductBatch_args setInvalidProductBatchVo(com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo) {
      this.invalidProductBatchVo = invalidProductBatchVo;
      return this;
    }

    public void unsetInvalidProductBatchVo() {
      this.invalidProductBatchVo = null;
    }

    /** Returns true if field invalidProductBatchVo is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalidProductBatchVo() {
      return this.invalidProductBatchVo != null;
    }

    public void setInvalidProductBatchVoIsSet(boolean value) {
      if (!value) {
        this.invalidProductBatchVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case INVALID_PRODUCT_BATCH_VO:
        if (value == null) {
          unsetInvalidProductBatchVo();
        } else {
          setInvalidProductBatchVo((com.froad.thrift.vo.InvalidProductBatchVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case INVALID_PRODUCT_BATCH_VO:
        return getInvalidProductBatchVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case INVALID_PRODUCT_BATCH_VO:
        return isSetInvalidProductBatchVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof invalidProductBatch_args)
        return this.equals((invalidProductBatch_args)that);
      return false;
    }

    public boolean equals(invalidProductBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_invalidProductBatchVo = true && this.isSetInvalidProductBatchVo();
      boolean that_present_invalidProductBatchVo = true && that.isSetInvalidProductBatchVo();
      if (this_present_invalidProductBatchVo || that_present_invalidProductBatchVo) {
        if (!(this_present_invalidProductBatchVo && that_present_invalidProductBatchVo))
          return false;
        if (!this.invalidProductBatchVo.equals(that.invalidProductBatchVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_invalidProductBatchVo = true && (isSetInvalidProductBatchVo());
      list.add(present_invalidProductBatchVo);
      if (present_invalidProductBatchVo)
        list.add(invalidProductBatchVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(invalidProductBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvalidProductBatchVo()).compareTo(other.isSetInvalidProductBatchVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalidProductBatchVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidProductBatchVo, other.invalidProductBatchVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("invalidProductBatch_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invalidProductBatchVo:");
      if (this.invalidProductBatchVo == null) {
        sb.append("null");
      } else {
        sb.append(this.invalidProductBatchVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (invalidProductBatchVo != null) {
        invalidProductBatchVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class invalidProductBatch_argsStandardSchemeFactory implements SchemeFactory {
      public invalidProductBatch_argsStandardScheme getScheme() {
        return new invalidProductBatch_argsStandardScheme();
      }
    }

    private static class invalidProductBatch_argsStandardScheme extends StandardScheme<invalidProductBatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, invalidProductBatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INVALID_PRODUCT_BATCH_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalidProductBatchVo = new com.froad.thrift.vo.InvalidProductBatchVo();
                struct.invalidProductBatchVo.read(iprot);
                struct.setInvalidProductBatchVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, invalidProductBatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.invalidProductBatchVo != null) {
          oprot.writeFieldBegin(INVALID_PRODUCT_BATCH_VO_FIELD_DESC);
          struct.invalidProductBatchVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class invalidProductBatch_argsTupleSchemeFactory implements SchemeFactory {
      public invalidProductBatch_argsTupleScheme getScheme() {
        return new invalidProductBatch_argsTupleScheme();
      }
    }

    private static class invalidProductBatch_argsTupleScheme extends TupleScheme<invalidProductBatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, invalidProductBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetInvalidProductBatchVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetInvalidProductBatchVo()) {
          struct.invalidProductBatchVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, invalidProductBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invalidProductBatchVo = new com.froad.thrift.vo.InvalidProductBatchVo();
          struct.invalidProductBatchVo.read(iprot);
          struct.setInvalidProductBatchVoIsSet(true);
        }
      }
    }

  }

  public static class invalidProductBatch_result implements org.apache.thrift.TBase<invalidProductBatch_result, invalidProductBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<invalidProductBatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("invalidProductBatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new invalidProductBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new invalidProductBatch_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(invalidProductBatch_result.class, metaDataMap);
    }

    public invalidProductBatch_result() {
    }

    public invalidProductBatch_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invalidProductBatch_result(invalidProductBatch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public invalidProductBatch_result deepCopy() {
      return new invalidProductBatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public invalidProductBatch_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof invalidProductBatch_result)
        return this.equals((invalidProductBatch_result)that);
      return false;
    }

    public boolean equals(invalidProductBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(invalidProductBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("invalidProductBatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class invalidProductBatch_resultStandardSchemeFactory implements SchemeFactory {
      public invalidProductBatch_resultStandardScheme getScheme() {
        return new invalidProductBatch_resultStandardScheme();
      }
    }

    private static class invalidProductBatch_resultStandardScheme extends StandardScheme<invalidProductBatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, invalidProductBatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, invalidProductBatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class invalidProductBatch_resultTupleSchemeFactory implements SchemeFactory {
      public invalidProductBatch_resultTupleScheme getScheme() {
        return new invalidProductBatch_resultTupleScheme();
      }
    }

    private static class invalidProductBatch_resultTupleScheme extends TupleScheme<invalidProductBatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, invalidProductBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, invalidProductBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class validMerchantProductBatch_args implements org.apache.thrift.TBase<validMerchantProductBatch_args, validMerchantProductBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<validMerchantProductBatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validMerchantProductBatch_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validMerchantProductBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validMerchantProductBatch_argsTupleSchemeFactory());
    }

    public String merchantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validMerchantProductBatch_args.class, metaDataMap);
    }

    public validMerchantProductBatch_args() {
    }

    public validMerchantProductBatch_args(
      String merchantId)
    {
      this();
      this.merchantId = merchantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validMerchantProductBatch_args(validMerchantProductBatch_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
    }

    public validMerchantProductBatch_args deepCopy() {
      return new validMerchantProductBatch_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public validMerchantProductBatch_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validMerchantProductBatch_args)
        return this.equals((validMerchantProductBatch_args)that);
      return false;
    }

    public boolean equals(validMerchantProductBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      return list.hashCode();
    }

    @Override
    public int compareTo(validMerchantProductBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validMerchantProductBatch_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validMerchantProductBatch_argsStandardSchemeFactory implements SchemeFactory {
      public validMerchantProductBatch_argsStandardScheme getScheme() {
        return new validMerchantProductBatch_argsStandardScheme();
      }
    }

    private static class validMerchantProductBatch_argsStandardScheme extends StandardScheme<validMerchantProductBatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validMerchantProductBatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validMerchantProductBatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validMerchantProductBatch_argsTupleSchemeFactory implements SchemeFactory {
      public validMerchantProductBatch_argsTupleScheme getScheme() {
        return new validMerchantProductBatch_argsTupleScheme();
      }
    }

    private static class validMerchantProductBatch_argsTupleScheme extends TupleScheme<validMerchantProductBatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validMerchantProductBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validMerchantProductBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
      }
    }

  }

  public static class validMerchantProductBatch_result implements org.apache.thrift.TBase<validMerchantProductBatch_result, validMerchantProductBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<validMerchantProductBatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("validMerchantProductBatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new validMerchantProductBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new validMerchantProductBatch_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(validMerchantProductBatch_result.class, metaDataMap);
    }

    public validMerchantProductBatch_result() {
    }

    public validMerchantProductBatch_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validMerchantProductBatch_result(validMerchantProductBatch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public validMerchantProductBatch_result deepCopy() {
      return new validMerchantProductBatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public validMerchantProductBatch_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validMerchantProductBatch_result)
        return this.equals((validMerchantProductBatch_result)that);
      return false;
    }

    public boolean equals(validMerchantProductBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(validMerchantProductBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("validMerchantProductBatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class validMerchantProductBatch_resultStandardSchemeFactory implements SchemeFactory {
      public validMerchantProductBatch_resultStandardScheme getScheme() {
        return new validMerchantProductBatch_resultStandardScheme();
      }
    }

    private static class validMerchantProductBatch_resultStandardScheme extends StandardScheme<validMerchantProductBatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, validMerchantProductBatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, validMerchantProductBatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class validMerchantProductBatch_resultTupleSchemeFactory implements SchemeFactory {
      public validMerchantProductBatch_resultTupleScheme getScheme() {
        return new validMerchantProductBatch_resultTupleScheme();
      }
    }

    private static class validMerchantProductBatch_resultTupleScheme extends TupleScheme<validMerchantProductBatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, validMerchantProductBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, validMerchantProductBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class endisableProductBatch_args implements org.apache.thrift.TBase<endisableProductBatch_args, endisableProductBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<endisableProductBatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("endisableProductBatch_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INVALID_PRODUCT_BATCH_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidProductBatchVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new endisableProductBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new endisableProductBatch_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo; // required
    public String flag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      INVALID_PRODUCT_BATCH_VO((short)2, "invalidProductBatchVo"),
      FLAG((short)3, "flag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // INVALID_PRODUCT_BATCH_VO
            return INVALID_PRODUCT_BATCH_VO;
          case 3: // FLAG
            return FLAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.INVALID_PRODUCT_BATCH_VO, new org.apache.thrift.meta_data.FieldMetaData("invalidProductBatchVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.InvalidProductBatchVo.class)));
      tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(endisableProductBatch_args.class, metaDataMap);
    }

    public endisableProductBatch_args() {
    }

    public endisableProductBatch_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo,
      String flag)
    {
      this();
      this.originVo = originVo;
      this.invalidProductBatchVo = invalidProductBatchVo;
      this.flag = flag;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public endisableProductBatch_args(endisableProductBatch_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetInvalidProductBatchVo()) {
        this.invalidProductBatchVo = new com.froad.thrift.vo.InvalidProductBatchVo(other.invalidProductBatchVo);
      }
      if (other.isSetFlag()) {
        this.flag = other.flag;
      }
    }

    public endisableProductBatch_args deepCopy() {
      return new endisableProductBatch_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.invalidProductBatchVo = null;
      this.flag = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public endisableProductBatch_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.InvalidProductBatchVo getInvalidProductBatchVo() {
      return this.invalidProductBatchVo;
    }

    public endisableProductBatch_args setInvalidProductBatchVo(com.froad.thrift.vo.InvalidProductBatchVo invalidProductBatchVo) {
      this.invalidProductBatchVo = invalidProductBatchVo;
      return this;
    }

    public void unsetInvalidProductBatchVo() {
      this.invalidProductBatchVo = null;
    }

    /** Returns true if field invalidProductBatchVo is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalidProductBatchVo() {
      return this.invalidProductBatchVo != null;
    }

    public void setInvalidProductBatchVoIsSet(boolean value) {
      if (!value) {
        this.invalidProductBatchVo = null;
      }
    }

    public String getFlag() {
      return this.flag;
    }

    public endisableProductBatch_args setFlag(String flag) {
      this.flag = flag;
      return this;
    }

    public void unsetFlag() {
      this.flag = null;
    }

    /** Returns true if field flag is set (has been assigned a value) and false otherwise */
    public boolean isSetFlag() {
      return this.flag != null;
    }

    public void setFlagIsSet(boolean value) {
      if (!value) {
        this.flag = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case INVALID_PRODUCT_BATCH_VO:
        if (value == null) {
          unsetInvalidProductBatchVo();
        } else {
          setInvalidProductBatchVo((com.froad.thrift.vo.InvalidProductBatchVo)value);
        }
        break;

      case FLAG:
        if (value == null) {
          unsetFlag();
        } else {
          setFlag((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case INVALID_PRODUCT_BATCH_VO:
        return getInvalidProductBatchVo();

      case FLAG:
        return getFlag();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case INVALID_PRODUCT_BATCH_VO:
        return isSetInvalidProductBatchVo();
      case FLAG:
        return isSetFlag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof endisableProductBatch_args)
        return this.equals((endisableProductBatch_args)that);
      return false;
    }

    public boolean equals(endisableProductBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_invalidProductBatchVo = true && this.isSetInvalidProductBatchVo();
      boolean that_present_invalidProductBatchVo = true && that.isSetInvalidProductBatchVo();
      if (this_present_invalidProductBatchVo || that_present_invalidProductBatchVo) {
        if (!(this_present_invalidProductBatchVo && that_present_invalidProductBatchVo))
          return false;
        if (!this.invalidProductBatchVo.equals(that.invalidProductBatchVo))
          return false;
      }

      boolean this_present_flag = true && this.isSetFlag();
      boolean that_present_flag = true && that.isSetFlag();
      if (this_present_flag || that_present_flag) {
        if (!(this_present_flag && that_present_flag))
          return false;
        if (!this.flag.equals(that.flag))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_invalidProductBatchVo = true && (isSetInvalidProductBatchVo());
      list.add(present_invalidProductBatchVo);
      if (present_invalidProductBatchVo)
        list.add(invalidProductBatchVo);

      boolean present_flag = true && (isSetFlag());
      list.add(present_flag);
      if (present_flag)
        list.add(flag);

      return list.hashCode();
    }

    @Override
    public int compareTo(endisableProductBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvalidProductBatchVo()).compareTo(other.isSetInvalidProductBatchVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalidProductBatchVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidProductBatchVo, other.invalidProductBatchVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("endisableProductBatch_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invalidProductBatchVo:");
      if (this.invalidProductBatchVo == null) {
        sb.append("null");
      } else {
        sb.append(this.invalidProductBatchVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flag:");
      if (this.flag == null) {
        sb.append("null");
      } else {
        sb.append(this.flag);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (invalidProductBatchVo != null) {
        invalidProductBatchVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class endisableProductBatch_argsStandardSchemeFactory implements SchemeFactory {
      public endisableProductBatch_argsStandardScheme getScheme() {
        return new endisableProductBatch_argsStandardScheme();
      }
    }

    private static class endisableProductBatch_argsStandardScheme extends StandardScheme<endisableProductBatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, endisableProductBatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INVALID_PRODUCT_BATCH_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalidProductBatchVo = new com.froad.thrift.vo.InvalidProductBatchVo();
                struct.invalidProductBatchVo.read(iprot);
                struct.setInvalidProductBatchVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.flag = iprot.readString();
                struct.setFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, endisableProductBatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.invalidProductBatchVo != null) {
          oprot.writeFieldBegin(INVALID_PRODUCT_BATCH_VO_FIELD_DESC);
          struct.invalidProductBatchVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.flag != null) {
          oprot.writeFieldBegin(FLAG_FIELD_DESC);
          oprot.writeString(struct.flag);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class endisableProductBatch_argsTupleSchemeFactory implements SchemeFactory {
      public endisableProductBatch_argsTupleScheme getScheme() {
        return new endisableProductBatch_argsTupleScheme();
      }
    }

    private static class endisableProductBatch_argsTupleScheme extends TupleScheme<endisableProductBatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, endisableProductBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetInvalidProductBatchVo()) {
          optionals.set(1);
        }
        if (struct.isSetFlag()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetInvalidProductBatchVo()) {
          struct.invalidProductBatchVo.write(oprot);
        }
        if (struct.isSetFlag()) {
          oprot.writeString(struct.flag);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, endisableProductBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.invalidProductBatchVo = new com.froad.thrift.vo.InvalidProductBatchVo();
          struct.invalidProductBatchVo.read(iprot);
          struct.setInvalidProductBatchVoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.flag = iprot.readString();
          struct.setFlagIsSet(true);
        }
      }
    }

  }

  public static class endisableProductBatch_result implements org.apache.thrift.TBase<endisableProductBatch_result, endisableProductBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<endisableProductBatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("endisableProductBatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new endisableProductBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new endisableProductBatch_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(endisableProductBatch_result.class, metaDataMap);
    }

    public endisableProductBatch_result() {
    }

    public endisableProductBatch_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public endisableProductBatch_result(endisableProductBatch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public endisableProductBatch_result deepCopy() {
      return new endisableProductBatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public endisableProductBatch_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof endisableProductBatch_result)
        return this.equals((endisableProductBatch_result)that);
      return false;
    }

    public boolean equals(endisableProductBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(endisableProductBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("endisableProductBatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class endisableProductBatch_resultStandardSchemeFactory implements SchemeFactory {
      public endisableProductBatch_resultStandardScheme getScheme() {
        return new endisableProductBatch_resultStandardScheme();
      }
    }

    private static class endisableProductBatch_resultStandardScheme extends StandardScheme<endisableProductBatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, endisableProductBatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, endisableProductBatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class endisableProductBatch_resultTupleSchemeFactory implements SchemeFactory {
      public endisableProductBatch_resultTupleScheme getScheme() {
        return new endisableProductBatch_resultTupleScheme();
      }
    }

    private static class endisableProductBatch_resultTupleScheme extends TupleScheme<endisableProductBatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, endisableProductBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, endisableProductBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryProductCommentCount_args implements org.apache.thrift.TBase<queryProductCommentCount_args, queryProductCommentCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryProductCommentCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryProductCommentCount_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_COMMENT_FILTER_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productCommentFilterReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryProductCommentCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryProductCommentCount_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_COMMENT_FILTER_REQ((short)1, "productCommentFilterReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_COMMENT_FILTER_REQ
            return PRODUCT_COMMENT_FILTER_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_COMMENT_FILTER_REQ, new org.apache.thrift.meta_data.FieldMetaData("productCommentFilterReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductCommentFilterReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryProductCommentCount_args.class, metaDataMap);
    }

    public queryProductCommentCount_args() {
    }

    public queryProductCommentCount_args(
      com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq)
    {
      this();
      this.productCommentFilterReq = productCommentFilterReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryProductCommentCount_args(queryProductCommentCount_args other) {
      if (other.isSetProductCommentFilterReq()) {
        this.productCommentFilterReq = new com.froad.thrift.vo.ProductCommentFilterReq(other.productCommentFilterReq);
      }
    }

    public queryProductCommentCount_args deepCopy() {
      return new queryProductCommentCount_args(this);
    }

    @Override
    public void clear() {
      this.productCommentFilterReq = null;
    }

    public com.froad.thrift.vo.ProductCommentFilterReq getProductCommentFilterReq() {
      return this.productCommentFilterReq;
    }

    public queryProductCommentCount_args setProductCommentFilterReq(com.froad.thrift.vo.ProductCommentFilterReq productCommentFilterReq) {
      this.productCommentFilterReq = productCommentFilterReq;
      return this;
    }

    public void unsetProductCommentFilterReq() {
      this.productCommentFilterReq = null;
    }

    /** Returns true if field productCommentFilterReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCommentFilterReq() {
      return this.productCommentFilterReq != null;
    }

    public void setProductCommentFilterReqIsSet(boolean value) {
      if (!value) {
        this.productCommentFilterReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_COMMENT_FILTER_REQ:
        if (value == null) {
          unsetProductCommentFilterReq();
        } else {
          setProductCommentFilterReq((com.froad.thrift.vo.ProductCommentFilterReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_COMMENT_FILTER_REQ:
        return getProductCommentFilterReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_COMMENT_FILTER_REQ:
        return isSetProductCommentFilterReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryProductCommentCount_args)
        return this.equals((queryProductCommentCount_args)that);
      return false;
    }

    public boolean equals(queryProductCommentCount_args that) {
      if (that == null)
        return false;

      boolean this_present_productCommentFilterReq = true && this.isSetProductCommentFilterReq();
      boolean that_present_productCommentFilterReq = true && that.isSetProductCommentFilterReq();
      if (this_present_productCommentFilterReq || that_present_productCommentFilterReq) {
        if (!(this_present_productCommentFilterReq && that_present_productCommentFilterReq))
          return false;
        if (!this.productCommentFilterReq.equals(that.productCommentFilterReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productCommentFilterReq = true && (isSetProductCommentFilterReq());
      list.add(present_productCommentFilterReq);
      if (present_productCommentFilterReq)
        list.add(productCommentFilterReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryProductCommentCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCommentFilterReq()).compareTo(other.isSetProductCommentFilterReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCommentFilterReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCommentFilterReq, other.productCommentFilterReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryProductCommentCount_args(");
      boolean first = true;

      sb.append("productCommentFilterReq:");
      if (this.productCommentFilterReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productCommentFilterReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productCommentFilterReq != null) {
        productCommentFilterReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryProductCommentCount_argsStandardSchemeFactory implements SchemeFactory {
      public queryProductCommentCount_argsStandardScheme getScheme() {
        return new queryProductCommentCount_argsStandardScheme();
      }
    }

    private static class queryProductCommentCount_argsStandardScheme extends StandardScheme<queryProductCommentCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryProductCommentCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_COMMENT_FILTER_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCommentFilterReq = new com.froad.thrift.vo.ProductCommentFilterReq();
                struct.productCommentFilterReq.read(iprot);
                struct.setProductCommentFilterReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryProductCommentCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCommentFilterReq != null) {
          oprot.writeFieldBegin(PRODUCT_COMMENT_FILTER_REQ_FIELD_DESC);
          struct.productCommentFilterReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryProductCommentCount_argsTupleSchemeFactory implements SchemeFactory {
      public queryProductCommentCount_argsTupleScheme getScheme() {
        return new queryProductCommentCount_argsTupleScheme();
      }
    }

    private static class queryProductCommentCount_argsTupleScheme extends TupleScheme<queryProductCommentCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryProductCommentCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCommentFilterReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductCommentFilterReq()) {
          struct.productCommentFilterReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryProductCommentCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productCommentFilterReq = new com.froad.thrift.vo.ProductCommentFilterReq();
          struct.productCommentFilterReq.read(iprot);
          struct.setProductCommentFilterReqIsSet(true);
        }
      }
    }

  }

  public static class queryProductCommentCount_result implements org.apache.thrift.TBase<queryProductCommentCount_result, queryProductCommentCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryProductCommentCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryProductCommentCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryProductCommentCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryProductCommentCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryProductCommentCount_result.class, metaDataMap);
    }

    public queryProductCommentCount_result() {
    }

    public queryProductCommentCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryProductCommentCount_result(queryProductCommentCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public queryProductCommentCount_result deepCopy() {
      return new queryProductCommentCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public queryProductCommentCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryProductCommentCount_result)
        return this.equals((queryProductCommentCount_result)that);
      return false;
    }

    public boolean equals(queryProductCommentCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryProductCommentCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryProductCommentCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryProductCommentCount_resultStandardSchemeFactory implements SchemeFactory {
      public queryProductCommentCount_resultStandardScheme getScheme() {
        return new queryProductCommentCount_resultStandardScheme();
      }
    }

    private static class queryProductCommentCount_resultStandardScheme extends StandardScheme<queryProductCommentCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryProductCommentCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryProductCommentCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryProductCommentCount_resultTupleSchemeFactory implements SchemeFactory {
      public queryProductCommentCount_resultTupleScheme getScheme() {
        return new queryProductCommentCount_resultTupleScheme();
      }
    }

    private static class queryProductCommentCount_resultTupleScheme extends TupleScheme<queryProductCommentCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryProductCommentCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryProductCommentCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteProductBatch_args implements org.apache.thrift.TBase<deleteProductBatch_args, deleteProductBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProductBatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProductBatch_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_STATUS_BATCH_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productStatusBatchVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProductBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProductBatch_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_STATUS_BATCH_VO_REQ((short)2, "productStatusBatchVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_STATUS_BATCH_VO_REQ
            return PRODUCT_STATUS_BATCH_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_STATUS_BATCH_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("productStatusBatchVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductStatusBatchVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProductBatch_args.class, metaDataMap);
    }

    public deleteProductBatch_args() {
    }

    public deleteProductBatch_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq)
    {
      this();
      this.originVo = originVo;
      this.productStatusBatchVoReq = productStatusBatchVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProductBatch_args(deleteProductBatch_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductStatusBatchVoReq()) {
        this.productStatusBatchVoReq = new com.froad.thrift.vo.ProductStatusBatchVoReq(other.productStatusBatchVoReq);
      }
    }

    public deleteProductBatch_args deepCopy() {
      return new deleteProductBatch_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productStatusBatchVoReq = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteProductBatch_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ProductStatusBatchVoReq getProductStatusBatchVoReq() {
      return this.productStatusBatchVoReq;
    }

    public deleteProductBatch_args setProductStatusBatchVoReq(com.froad.thrift.vo.ProductStatusBatchVoReq productStatusBatchVoReq) {
      this.productStatusBatchVoReq = productStatusBatchVoReq;
      return this;
    }

    public void unsetProductStatusBatchVoReq() {
      this.productStatusBatchVoReq = null;
    }

    /** Returns true if field productStatusBatchVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductStatusBatchVoReq() {
      return this.productStatusBatchVoReq != null;
    }

    public void setProductStatusBatchVoReqIsSet(boolean value) {
      if (!value) {
        this.productStatusBatchVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_STATUS_BATCH_VO_REQ:
        if (value == null) {
          unsetProductStatusBatchVoReq();
        } else {
          setProductStatusBatchVoReq((com.froad.thrift.vo.ProductStatusBatchVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_STATUS_BATCH_VO_REQ:
        return getProductStatusBatchVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_STATUS_BATCH_VO_REQ:
        return isSetProductStatusBatchVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProductBatch_args)
        return this.equals((deleteProductBatch_args)that);
      return false;
    }

    public boolean equals(deleteProductBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productStatusBatchVoReq = true && this.isSetProductStatusBatchVoReq();
      boolean that_present_productStatusBatchVoReq = true && that.isSetProductStatusBatchVoReq();
      if (this_present_productStatusBatchVoReq || that_present_productStatusBatchVoReq) {
        if (!(this_present_productStatusBatchVoReq && that_present_productStatusBatchVoReq))
          return false;
        if (!this.productStatusBatchVoReq.equals(that.productStatusBatchVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productStatusBatchVoReq = true && (isSetProductStatusBatchVoReq());
      list.add(present_productStatusBatchVoReq);
      if (present_productStatusBatchVoReq)
        list.add(productStatusBatchVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProductBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductStatusBatchVoReq()).compareTo(other.isSetProductStatusBatchVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductStatusBatchVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productStatusBatchVoReq, other.productStatusBatchVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProductBatch_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productStatusBatchVoReq:");
      if (this.productStatusBatchVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productStatusBatchVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (productStatusBatchVoReq != null) {
        productStatusBatchVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProductBatch_argsStandardSchemeFactory implements SchemeFactory {
      public deleteProductBatch_argsStandardScheme getScheme() {
        return new deleteProductBatch_argsStandardScheme();
      }
    }

    private static class deleteProductBatch_argsStandardScheme extends StandardScheme<deleteProductBatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProductBatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_STATUS_BATCH_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productStatusBatchVoReq = new com.froad.thrift.vo.ProductStatusBatchVoReq();
                struct.productStatusBatchVoReq.read(iprot);
                struct.setProductStatusBatchVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProductBatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productStatusBatchVoReq != null) {
          oprot.writeFieldBegin(PRODUCT_STATUS_BATCH_VO_REQ_FIELD_DESC);
          struct.productStatusBatchVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProductBatch_argsTupleSchemeFactory implements SchemeFactory {
      public deleteProductBatch_argsTupleScheme getScheme() {
        return new deleteProductBatch_argsTupleScheme();
      }
    }

    private static class deleteProductBatch_argsTupleScheme extends TupleScheme<deleteProductBatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProductBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductStatusBatchVoReq()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductStatusBatchVoReq()) {
          struct.productStatusBatchVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProductBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productStatusBatchVoReq = new com.froad.thrift.vo.ProductStatusBatchVoReq();
          struct.productStatusBatchVoReq.read(iprot);
          struct.setProductStatusBatchVoReqIsSet(true);
        }
      }
    }

  }

  public static class deleteProductBatch_result implements org.apache.thrift.TBase<deleteProductBatch_result, deleteProductBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProductBatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProductBatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteProductBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteProductBatch_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProductBatch_result.class, metaDataMap);
    }

    public deleteProductBatch_result() {
    }

    public deleteProductBatch_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProductBatch_result(deleteProductBatch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteProductBatch_result deepCopy() {
      return new deleteProductBatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteProductBatch_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProductBatch_result)
        return this.equals((deleteProductBatch_result)that);
      return false;
    }

    public boolean equals(deleteProductBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteProductBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteProductBatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProductBatch_resultStandardSchemeFactory implements SchemeFactory {
      public deleteProductBatch_resultStandardScheme getScheme() {
        return new deleteProductBatch_resultStandardScheme();
      }
    }

    private static class deleteProductBatch_resultStandardScheme extends StandardScheme<deleteProductBatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProductBatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProductBatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProductBatch_resultTupleSchemeFactory implements SchemeFactory {
      public deleteProductBatch_resultTupleScheme getScheme() {
        return new deleteProductBatch_resultTupleScheme();
      }
    }

    private static class deleteProductBatch_resultTupleScheme extends TupleScheme<deleteProductBatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProductBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProductBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductStatus_args implements org.apache.thrift.TBase<getProductStatus_args, getProductStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductStatus_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductStatus_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductStatus_args.class, metaDataMap);
    }

    public getProductStatus_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductStatus_args(getProductStatus_args other) {
    }

    public getProductStatus_args deepCopy() {
      return new getProductStatus_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductStatus_args)
        return this.equals((getProductStatus_args)that);
      return false;
    }

    public boolean equals(getProductStatus_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductStatus_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getProductStatus_argsStandardScheme getScheme() {
        return new getProductStatus_argsStandardScheme();
      }
    }

    private static class getProductStatus_argsStandardScheme extends StandardScheme<getProductStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getProductStatus_argsTupleScheme getScheme() {
        return new getProductStatus_argsTupleScheme();
      }
    }

    private static class getProductStatus_argsTupleScheme extends TupleScheme<getProductStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getProductStatus_result implements org.apache.thrift.TBase<getProductStatus_result, getProductStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductStatus_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ProductStatusVoReq> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductStatusVoReq.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductStatus_result.class, metaDataMap);
    }

    public getProductStatus_result() {
    }

    public getProductStatus_result(
      List<com.froad.thrift.vo.ProductStatusVoReq> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductStatus_result(getProductStatus_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.ProductStatusVoReq> __this__success = new ArrayList<com.froad.thrift.vo.ProductStatusVoReq>(other.success.size());
        for (com.froad.thrift.vo.ProductStatusVoReq other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.ProductStatusVoReq(other_element));
        }
        this.success = __this__success;
      }
    }

    public getProductStatus_result deepCopy() {
      return new getProductStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductStatusVoReq> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.ProductStatusVoReq elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.ProductStatusVoReq>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.ProductStatusVoReq> getSuccess() {
      return this.success;
    }

    public getProductStatus_result setSuccess(List<com.froad.thrift.vo.ProductStatusVoReq> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.ProductStatusVoReq>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductStatus_result)
        return this.equals((getProductStatus_result)that);
      return false;
    }

    public boolean equals(getProductStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getProductStatus_resultStandardScheme getScheme() {
        return new getProductStatus_resultStandardScheme();
      }
    }

    private static class getProductStatus_resultStandardScheme extends StandardScheme<getProductStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.ProductStatusVoReq>(_list88.size);
                  com.froad.thrift.vo.ProductStatusVoReq _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = new com.froad.thrift.vo.ProductStatusVoReq();
                    _elem89.read(iprot);
                    struct.success.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.ProductStatusVoReq _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getProductStatus_resultTupleScheme getScheme() {
        return new getProductStatus_resultTupleScheme();
      }
    }

    private static class getProductStatus_resultTupleScheme extends TupleScheme<getProductStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.ProductStatusVoReq _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.ProductStatusVoReq>(_list93.size);
            com.froad.thrift.vo.ProductStatusVoReq _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = new com.froad.thrift.vo.ProductStatusVoReq();
              _elem94.read(iprot);
              struct.success.add(_elem94);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateAuditProductBatch_args implements org.apache.thrift.TBase<updateAuditProductBatch_args, updateAuditProductBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAuditProductBatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAuditProductBatch_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_AUDIT_VO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("productAuditVoList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAuditProductBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAuditProductBatch_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public List<com.froad.thrift.vo.ProductAuditVo> productAuditVoList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_AUDIT_VO_LIST((short)2, "productAuditVoList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_AUDIT_VO_LIST
            return PRODUCT_AUDIT_VO_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_AUDIT_VO_LIST, new org.apache.thrift.meta_data.FieldMetaData("productAuditVoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductAuditVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAuditProductBatch_args.class, metaDataMap);
    }

    public updateAuditProductBatch_args() {
    }

    public updateAuditProductBatch_args(
      com.froad.thrift.vo.OriginVo originVo,
      List<com.froad.thrift.vo.ProductAuditVo> productAuditVoList)
    {
      this();
      this.originVo = originVo;
      this.productAuditVoList = productAuditVoList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAuditProductBatch_args(updateAuditProductBatch_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductAuditVoList()) {
        List<com.froad.thrift.vo.ProductAuditVo> __this__productAuditVoList = new ArrayList<com.froad.thrift.vo.ProductAuditVo>(other.productAuditVoList.size());
        for (com.froad.thrift.vo.ProductAuditVo other_element : other.productAuditVoList) {
          __this__productAuditVoList.add(new com.froad.thrift.vo.ProductAuditVo(other_element));
        }
        this.productAuditVoList = __this__productAuditVoList;
      }
    }

    public updateAuditProductBatch_args deepCopy() {
      return new updateAuditProductBatch_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productAuditVoList = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateAuditProductBatch_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public int getProductAuditVoListSize() {
      return (this.productAuditVoList == null) ? 0 : this.productAuditVoList.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductAuditVo> getProductAuditVoListIterator() {
      return (this.productAuditVoList == null) ? null : this.productAuditVoList.iterator();
    }

    public void addToProductAuditVoList(com.froad.thrift.vo.ProductAuditVo elem) {
      if (this.productAuditVoList == null) {
        this.productAuditVoList = new ArrayList<com.froad.thrift.vo.ProductAuditVo>();
      }
      this.productAuditVoList.add(elem);
    }

    public List<com.froad.thrift.vo.ProductAuditVo> getProductAuditVoList() {
      return this.productAuditVoList;
    }

    public updateAuditProductBatch_args setProductAuditVoList(List<com.froad.thrift.vo.ProductAuditVo> productAuditVoList) {
      this.productAuditVoList = productAuditVoList;
      return this;
    }

    public void unsetProductAuditVoList() {
      this.productAuditVoList = null;
    }

    /** Returns true if field productAuditVoList is set (has been assigned a value) and false otherwise */
    public boolean isSetProductAuditVoList() {
      return this.productAuditVoList != null;
    }

    public void setProductAuditVoListIsSet(boolean value) {
      if (!value) {
        this.productAuditVoList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_AUDIT_VO_LIST:
        if (value == null) {
          unsetProductAuditVoList();
        } else {
          setProductAuditVoList((List<com.froad.thrift.vo.ProductAuditVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_AUDIT_VO_LIST:
        return getProductAuditVoList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_AUDIT_VO_LIST:
        return isSetProductAuditVoList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAuditProductBatch_args)
        return this.equals((updateAuditProductBatch_args)that);
      return false;
    }

    public boolean equals(updateAuditProductBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productAuditVoList = true && this.isSetProductAuditVoList();
      boolean that_present_productAuditVoList = true && that.isSetProductAuditVoList();
      if (this_present_productAuditVoList || that_present_productAuditVoList) {
        if (!(this_present_productAuditVoList && that_present_productAuditVoList))
          return false;
        if (!this.productAuditVoList.equals(that.productAuditVoList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productAuditVoList = true && (isSetProductAuditVoList());
      list.add(present_productAuditVoList);
      if (present_productAuditVoList)
        list.add(productAuditVoList);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateAuditProductBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductAuditVoList()).compareTo(other.isSetProductAuditVoList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductAuditVoList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productAuditVoList, other.productAuditVoList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAuditProductBatch_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productAuditVoList:");
      if (this.productAuditVoList == null) {
        sb.append("null");
      } else {
        sb.append(this.productAuditVoList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAuditProductBatch_argsStandardSchemeFactory implements SchemeFactory {
      public updateAuditProductBatch_argsStandardScheme getScheme() {
        return new updateAuditProductBatch_argsStandardScheme();
      }
    }

    private static class updateAuditProductBatch_argsStandardScheme extends StandardScheme<updateAuditProductBatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAuditProductBatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_AUDIT_VO_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.productAuditVoList = new ArrayList<com.froad.thrift.vo.ProductAuditVo>(_list96.size);
                  com.froad.thrift.vo.ProductAuditVo _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = new com.froad.thrift.vo.ProductAuditVo();
                    _elem97.read(iprot);
                    struct.productAuditVoList.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setProductAuditVoListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAuditProductBatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productAuditVoList != null) {
          oprot.writeFieldBegin(PRODUCT_AUDIT_VO_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productAuditVoList.size()));
            for (com.froad.thrift.vo.ProductAuditVo _iter99 : struct.productAuditVoList)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAuditProductBatch_argsTupleSchemeFactory implements SchemeFactory {
      public updateAuditProductBatch_argsTupleScheme getScheme() {
        return new updateAuditProductBatch_argsTupleScheme();
      }
    }

    private static class updateAuditProductBatch_argsTupleScheme extends TupleScheme<updateAuditProductBatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAuditProductBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductAuditVoList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductAuditVoList()) {
          {
            oprot.writeI32(struct.productAuditVoList.size());
            for (com.froad.thrift.vo.ProductAuditVo _iter100 : struct.productAuditVoList)
            {
              _iter100.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAuditProductBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.productAuditVoList = new ArrayList<com.froad.thrift.vo.ProductAuditVo>(_list101.size);
            com.froad.thrift.vo.ProductAuditVo _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new com.froad.thrift.vo.ProductAuditVo();
              _elem102.read(iprot);
              struct.productAuditVoList.add(_elem102);
            }
          }
          struct.setProductAuditVoListIsSet(true);
        }
      }
    }

  }

  public static class updateAuditProductBatch_result implements org.apache.thrift.TBase<updateAuditProductBatch_result, updateAuditProductBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAuditProductBatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAuditProductBatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAuditProductBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAuditProductBatch_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAuditProductBatch_result.class, metaDataMap);
    }

    public updateAuditProductBatch_result() {
    }

    public updateAuditProductBatch_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAuditProductBatch_result(updateAuditProductBatch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateAuditProductBatch_result deepCopy() {
      return new updateAuditProductBatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateAuditProductBatch_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAuditProductBatch_result)
        return this.equals((updateAuditProductBatch_result)that);
      return false;
    }

    public boolean equals(updateAuditProductBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateAuditProductBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAuditProductBatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAuditProductBatch_resultStandardSchemeFactory implements SchemeFactory {
      public updateAuditProductBatch_resultStandardScheme getScheme() {
        return new updateAuditProductBatch_resultStandardScheme();
      }
    }

    private static class updateAuditProductBatch_resultStandardScheme extends StandardScheme<updateAuditProductBatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAuditProductBatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAuditProductBatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAuditProductBatch_resultTupleSchemeFactory implements SchemeFactory {
      public updateAuditProductBatch_resultTupleScheme getScheme() {
        return new updateAuditProductBatch_resultTupleScheme();
      }
    }

    private static class updateAuditProductBatch_resultTupleScheme extends TupleScheme<updateAuditProductBatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAuditProductBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAuditProductBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductBaseInfo_args implements org.apache.thrift.TBase<getProductBaseInfo_args, getProductBaseInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductBaseInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductBaseInfo_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("products", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductBaseInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductBaseInfo_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public List<com.froad.thrift.vo.ProductStoreFilterVo> products; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      PRODUCTS((short)2, "products");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // PRODUCTS
            return PRODUCTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRODUCTS, new org.apache.thrift.meta_data.FieldMetaData("products", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductStoreFilterVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductBaseInfo_args.class, metaDataMap);
    }

    public getProductBaseInfo_args() {
    }

    public getProductBaseInfo_args(
      String clientId,
      List<com.froad.thrift.vo.ProductStoreFilterVo> products)
    {
      this();
      this.clientId = clientId;
      this.products = products;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductBaseInfo_args(getProductBaseInfo_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetProducts()) {
        List<com.froad.thrift.vo.ProductStoreFilterVo> __this__products = new ArrayList<com.froad.thrift.vo.ProductStoreFilterVo>(other.products.size());
        for (com.froad.thrift.vo.ProductStoreFilterVo other_element : other.products) {
          __this__products.add(new com.froad.thrift.vo.ProductStoreFilterVo(other_element));
        }
        this.products = __this__products;
      }
    }

    public getProductBaseInfo_args deepCopy() {
      return new getProductBaseInfo_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.products = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getProductBaseInfo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public int getProductsSize() {
      return (this.products == null) ? 0 : this.products.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductStoreFilterVo> getProductsIterator() {
      return (this.products == null) ? null : this.products.iterator();
    }

    public void addToProducts(com.froad.thrift.vo.ProductStoreFilterVo elem) {
      if (this.products == null) {
        this.products = new ArrayList<com.froad.thrift.vo.ProductStoreFilterVo>();
      }
      this.products.add(elem);
    }

    public List<com.froad.thrift.vo.ProductStoreFilterVo> getProducts() {
      return this.products;
    }

    public getProductBaseInfo_args setProducts(List<com.froad.thrift.vo.ProductStoreFilterVo> products) {
      this.products = products;
      return this;
    }

    public void unsetProducts() {
      this.products = null;
    }

    /** Returns true if field products is set (has been assigned a value) and false otherwise */
    public boolean isSetProducts() {
      return this.products != null;
    }

    public void setProductsIsSet(boolean value) {
      if (!value) {
        this.products = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case PRODUCTS:
        if (value == null) {
          unsetProducts();
        } else {
          setProducts((List<com.froad.thrift.vo.ProductStoreFilterVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case PRODUCTS:
        return getProducts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case PRODUCTS:
        return isSetProducts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductBaseInfo_args)
        return this.equals((getProductBaseInfo_args)that);
      return false;
    }

    public boolean equals(getProductBaseInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_products = true && this.isSetProducts();
      boolean that_present_products = true && that.isSetProducts();
      if (this_present_products || that_present_products) {
        if (!(this_present_products && that_present_products))
          return false;
        if (!this.products.equals(that.products))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_products = true && (isSetProducts());
      list.add(present_products);
      if (present_products)
        list.add(products);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductBaseInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProducts()).compareTo(other.isSetProducts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProducts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.products, other.products);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductBaseInfo_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("products:");
      if (this.products == null) {
        sb.append("null");
      } else {
        sb.append(this.products);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductBaseInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getProductBaseInfo_argsStandardScheme getScheme() {
        return new getProductBaseInfo_argsStandardScheme();
      }
    }

    private static class getProductBaseInfo_argsStandardScheme extends StandardScheme<getProductBaseInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductBaseInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.products = new ArrayList<com.froad.thrift.vo.ProductStoreFilterVo>(_list104.size);
                  com.froad.thrift.vo.ProductStoreFilterVo _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = new com.froad.thrift.vo.ProductStoreFilterVo();
                    _elem105.read(iprot);
                    struct.products.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setProductsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductBaseInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.products != null) {
          oprot.writeFieldBegin(PRODUCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.products.size()));
            for (com.froad.thrift.vo.ProductStoreFilterVo _iter107 : struct.products)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductBaseInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getProductBaseInfo_argsTupleScheme getScheme() {
        return new getProductBaseInfo_argsTupleScheme();
      }
    }

    private static class getProductBaseInfo_argsTupleScheme extends TupleScheme<getProductBaseInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductBaseInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetProducts()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetProducts()) {
          {
            oprot.writeI32(struct.products.size());
            for (com.froad.thrift.vo.ProductStoreFilterVo _iter108 : struct.products)
            {
              _iter108.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductBaseInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.products = new ArrayList<com.froad.thrift.vo.ProductStoreFilterVo>(_list109.size);
            com.froad.thrift.vo.ProductStoreFilterVo _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new com.froad.thrift.vo.ProductStoreFilterVo();
              _elem110.read(iprot);
              struct.products.add(_elem110);
            }
          }
          struct.setProductsIsSet(true);
        }
      }
    }

  }

  public static class getProductBaseInfo_result implements org.apache.thrift.TBase<getProductBaseInfo_result, getProductBaseInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductBaseInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductBaseInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductBaseInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductBaseInfo_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ProductBaseInfoVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductBaseInfoVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductBaseInfo_result.class, metaDataMap);
    }

    public getProductBaseInfo_result() {
    }

    public getProductBaseInfo_result(
      List<com.froad.thrift.vo.ProductBaseInfoVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductBaseInfo_result(getProductBaseInfo_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.ProductBaseInfoVo> __this__success = new ArrayList<com.froad.thrift.vo.ProductBaseInfoVo>(other.success.size());
        for (com.froad.thrift.vo.ProductBaseInfoVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.ProductBaseInfoVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getProductBaseInfo_result deepCopy() {
      return new getProductBaseInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductBaseInfoVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.ProductBaseInfoVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.ProductBaseInfoVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.ProductBaseInfoVo> getSuccess() {
      return this.success;
    }

    public getProductBaseInfo_result setSuccess(List<com.froad.thrift.vo.ProductBaseInfoVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.ProductBaseInfoVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductBaseInfo_result)
        return this.equals((getProductBaseInfo_result)that);
      return false;
    }

    public boolean equals(getProductBaseInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductBaseInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductBaseInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductBaseInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getProductBaseInfo_resultStandardScheme getScheme() {
        return new getProductBaseInfo_resultStandardScheme();
      }
    }

    private static class getProductBaseInfo_resultStandardScheme extends StandardScheme<getProductBaseInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductBaseInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.ProductBaseInfoVo>(_list112.size);
                  com.froad.thrift.vo.ProductBaseInfoVo _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new com.froad.thrift.vo.ProductBaseInfoVo();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductBaseInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.ProductBaseInfoVo _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductBaseInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getProductBaseInfo_resultTupleScheme getScheme() {
        return new getProductBaseInfo_resultTupleScheme();
      }
    }

    private static class getProductBaseInfo_resultTupleScheme extends TupleScheme<getProductBaseInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductBaseInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.ProductBaseInfoVo _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductBaseInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.ProductBaseInfoVo>(_list117.size);
            com.froad.thrift.vo.ProductBaseInfoVo _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new com.froad.thrift.vo.ProductBaseInfoVo();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isExitsStoreProductInfo_args implements org.apache.thrift.TBase<isExitsStoreProductInfo_args, isExitsStoreProductInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<isExitsStoreProductInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isExitsStoreProductInfo_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isExitsStoreProductInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isExitsStoreProductInfo_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public long memberCode; // required
    public String productId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      MEMBER_CODE((short)2, "memberCode"),
      PRODUCT_ID((short)3, "productId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // MEMBER_CODE
            return MEMBER_CODE;
          case 3: // PRODUCT_ID
            return PRODUCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isExitsStoreProductInfo_args.class, metaDataMap);
    }

    public isExitsStoreProductInfo_args() {
    }

    public isExitsStoreProductInfo_args(
      String clientId,
      long memberCode,
      String productId)
    {
      this();
      this.clientId = clientId;
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.productId = productId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isExitsStoreProductInfo_args(isExitsStoreProductInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.memberCode = other.memberCode;
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
    }

    public isExitsStoreProductInfo_args deepCopy() {
      return new isExitsStoreProductInfo_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.productId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public isExitsStoreProductInfo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public isExitsStoreProductInfo_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getProductId() {
      return this.productId;
    }

    public isExitsStoreProductInfo_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case PRODUCT_ID:
        return getProductId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case MEMBER_CODE:
        return isSetMemberCode();
      case PRODUCT_ID:
        return isSetProductId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isExitsStoreProductInfo_args)
        return this.equals((isExitsStoreProductInfo_args)that);
      return false;
    }

    public boolean equals(isExitsStoreProductInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      return list.hashCode();
    }

    @Override
    public int compareTo(isExitsStoreProductInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isExitsStoreProductInfo_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isExitsStoreProductInfo_argsStandardSchemeFactory implements SchemeFactory {
      public isExitsStoreProductInfo_argsStandardScheme getScheme() {
        return new isExitsStoreProductInfo_argsStandardScheme();
      }
    }

    private static class isExitsStoreProductInfo_argsStandardScheme extends StandardScheme<isExitsStoreProductInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isExitsStoreProductInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isExitsStoreProductInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isExitsStoreProductInfo_argsTupleSchemeFactory implements SchemeFactory {
      public isExitsStoreProductInfo_argsTupleScheme getScheme() {
        return new isExitsStoreProductInfo_argsTupleScheme();
      }
    }

    private static class isExitsStoreProductInfo_argsTupleScheme extends TupleScheme<isExitsStoreProductInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isExitsStoreProductInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetMemberCode()) {
          optionals.set(1);
        }
        if (struct.isSetProductId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isExitsStoreProductInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
      }
    }

  }

  public static class isExitsStoreProductInfo_result implements org.apache.thrift.TBase<isExitsStoreProductInfo_result, isExitsStoreProductInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<isExitsStoreProductInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isExitsStoreProductInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isExitsStoreProductInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isExitsStoreProductInfo_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isExitsStoreProductInfo_result.class, metaDataMap);
    }

    public isExitsStoreProductInfo_result() {
    }

    public isExitsStoreProductInfo_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isExitsStoreProductInfo_result(isExitsStoreProductInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isExitsStoreProductInfo_result deepCopy() {
      return new isExitsStoreProductInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isExitsStoreProductInfo_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isExitsStoreProductInfo_result)
        return this.equals((isExitsStoreProductInfo_result)that);
      return false;
    }

    public boolean equals(isExitsStoreProductInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isExitsStoreProductInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isExitsStoreProductInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isExitsStoreProductInfo_resultStandardSchemeFactory implements SchemeFactory {
      public isExitsStoreProductInfo_resultStandardScheme getScheme() {
        return new isExitsStoreProductInfo_resultStandardScheme();
      }
    }

    private static class isExitsStoreProductInfo_resultStandardScheme extends StandardScheme<isExitsStoreProductInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isExitsStoreProductInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isExitsStoreProductInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isExitsStoreProductInfo_resultTupleSchemeFactory implements SchemeFactory {
      public isExitsStoreProductInfo_resultTupleScheme getScheme() {
        return new isExitsStoreProductInfo_resultTupleScheme();
      }
    }

    private static class isExitsStoreProductInfo_resultTupleScheme extends TupleScheme<isExitsStoreProductInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isExitsStoreProductInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isExitsStoreProductInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addStoreProductInfoVo_args implements org.apache.thrift.TBase<addStoreProductInfoVo_args, addStoreProductInfoVo_args._Fields>, java.io.Serializable, Cloneable, Comparable<addStoreProductInfoVo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStoreProductInfoVo_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField STORE_PRODUCT_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("storeProductInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStoreProductInfoVo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addStoreProductInfoVo_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public long memberCode; // required
    public com.froad.thrift.vo.StoreProductInfoVo storeProductInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      MEMBER_CODE((short)2, "memberCode"),
      STORE_PRODUCT_INFO_VO((short)3, "storeProductInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // MEMBER_CODE
            return MEMBER_CODE;
          case 3: // STORE_PRODUCT_INFO_VO
            return STORE_PRODUCT_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.STORE_PRODUCT_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("storeProductInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.StoreProductInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStoreProductInfoVo_args.class, metaDataMap);
    }

    public addStoreProductInfoVo_args() {
    }

    public addStoreProductInfoVo_args(
      String clientId,
      long memberCode,
      com.froad.thrift.vo.StoreProductInfoVo storeProductInfoVo)
    {
      this();
      this.clientId = clientId;
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.storeProductInfoVo = storeProductInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStoreProductInfoVo_args(addStoreProductInfoVo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.memberCode = other.memberCode;
      if (other.isSetStoreProductInfoVo()) {
        this.storeProductInfoVo = new com.froad.thrift.vo.StoreProductInfoVo(other.storeProductInfoVo);
      }
    }

    public addStoreProductInfoVo_args deepCopy() {
      return new addStoreProductInfoVo_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.storeProductInfoVo = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public addStoreProductInfoVo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public addStoreProductInfoVo_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public com.froad.thrift.vo.StoreProductInfoVo getStoreProductInfoVo() {
      return this.storeProductInfoVo;
    }

    public addStoreProductInfoVo_args setStoreProductInfoVo(com.froad.thrift.vo.StoreProductInfoVo storeProductInfoVo) {
      this.storeProductInfoVo = storeProductInfoVo;
      return this;
    }

    public void unsetStoreProductInfoVo() {
      this.storeProductInfoVo = null;
    }

    /** Returns true if field storeProductInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetStoreProductInfoVo() {
      return this.storeProductInfoVo != null;
    }

    public void setStoreProductInfoVoIsSet(boolean value) {
      if (!value) {
        this.storeProductInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case STORE_PRODUCT_INFO_VO:
        if (value == null) {
          unsetStoreProductInfoVo();
        } else {
          setStoreProductInfoVo((com.froad.thrift.vo.StoreProductInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case STORE_PRODUCT_INFO_VO:
        return getStoreProductInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case MEMBER_CODE:
        return isSetMemberCode();
      case STORE_PRODUCT_INFO_VO:
        return isSetStoreProductInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStoreProductInfoVo_args)
        return this.equals((addStoreProductInfoVo_args)that);
      return false;
    }

    public boolean equals(addStoreProductInfoVo_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_storeProductInfoVo = true && this.isSetStoreProductInfoVo();
      boolean that_present_storeProductInfoVo = true && that.isSetStoreProductInfoVo();
      if (this_present_storeProductInfoVo || that_present_storeProductInfoVo) {
        if (!(this_present_storeProductInfoVo && that_present_storeProductInfoVo))
          return false;
        if (!this.storeProductInfoVo.equals(that.storeProductInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_storeProductInfoVo = true && (isSetStoreProductInfoVo());
      list.add(present_storeProductInfoVo);
      if (present_storeProductInfoVo)
        list.add(storeProductInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addStoreProductInfoVo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStoreProductInfoVo()).compareTo(other.isSetStoreProductInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStoreProductInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeProductInfoVo, other.storeProductInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStoreProductInfoVo_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("storeProductInfoVo:");
      if (this.storeProductInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.storeProductInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (storeProductInfoVo != null) {
        storeProductInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStoreProductInfoVo_argsStandardSchemeFactory implements SchemeFactory {
      public addStoreProductInfoVo_argsStandardScheme getScheme() {
        return new addStoreProductInfoVo_argsStandardScheme();
      }
    }

    private static class addStoreProductInfoVo_argsStandardScheme extends StandardScheme<addStoreProductInfoVo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStoreProductInfoVo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STORE_PRODUCT_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.storeProductInfoVo = new com.froad.thrift.vo.StoreProductInfoVo();
                struct.storeProductInfoVo.read(iprot);
                struct.setStoreProductInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStoreProductInfoVo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.storeProductInfoVo != null) {
          oprot.writeFieldBegin(STORE_PRODUCT_INFO_VO_FIELD_DESC);
          struct.storeProductInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addStoreProductInfoVo_argsTupleSchemeFactory implements SchemeFactory {
      public addStoreProductInfoVo_argsTupleScheme getScheme() {
        return new addStoreProductInfoVo_argsTupleScheme();
      }
    }

    private static class addStoreProductInfoVo_argsTupleScheme extends TupleScheme<addStoreProductInfoVo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addStoreProductInfoVo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetMemberCode()) {
          optionals.set(1);
        }
        if (struct.isSetStoreProductInfoVo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetStoreProductInfoVo()) {
          struct.storeProductInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addStoreProductInfoVo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.storeProductInfoVo = new com.froad.thrift.vo.StoreProductInfoVo();
          struct.storeProductInfoVo.read(iprot);
          struct.setStoreProductInfoVoIsSet(true);
        }
      }
    }

  }

  public static class addStoreProductInfoVo_result implements org.apache.thrift.TBase<addStoreProductInfoVo_result, addStoreProductInfoVo_result._Fields>, java.io.Serializable, Cloneable, Comparable<addStoreProductInfoVo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addStoreProductInfoVo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addStoreProductInfoVo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addStoreProductInfoVo_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addStoreProductInfoVo_result.class, metaDataMap);
    }

    public addStoreProductInfoVo_result() {
    }

    public addStoreProductInfoVo_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addStoreProductInfoVo_result(addStoreProductInfoVo_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public addStoreProductInfoVo_result deepCopy() {
      return new addStoreProductInfoVo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public addStoreProductInfoVo_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addStoreProductInfoVo_result)
        return this.equals((addStoreProductInfoVo_result)that);
      return false;
    }

    public boolean equals(addStoreProductInfoVo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addStoreProductInfoVo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addStoreProductInfoVo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addStoreProductInfoVo_resultStandardSchemeFactory implements SchemeFactory {
      public addStoreProductInfoVo_resultStandardScheme getScheme() {
        return new addStoreProductInfoVo_resultStandardScheme();
      }
    }

    private static class addStoreProductInfoVo_resultStandardScheme extends StandardScheme<addStoreProductInfoVo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addStoreProductInfoVo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addStoreProductInfoVo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addStoreProductInfoVo_resultTupleSchemeFactory implements SchemeFactory {
      public addStoreProductInfoVo_resultTupleScheme getScheme() {
        return new addStoreProductInfoVo_resultTupleScheme();
      }
    }

    private static class addStoreProductInfoVo_resultTupleScheme extends TupleScheme<addStoreProductInfoVo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addStoreProductInfoVo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addStoreProductInfoVo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteStoreProductInfoVo_args implements org.apache.thrift.TBase<deleteStoreProductInfoVo_args, deleteStoreProductInfoVo_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteStoreProductInfoVo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteStoreProductInfoVo_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteStoreProductInfoVo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteStoreProductInfoVo_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public long memberCode; // required
    public String productId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      MEMBER_CODE((short)2, "memberCode"),
      PRODUCT_ID((short)3, "productId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // MEMBER_CODE
            return MEMBER_CODE;
          case 3: // PRODUCT_ID
            return PRODUCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteStoreProductInfoVo_args.class, metaDataMap);
    }

    public deleteStoreProductInfoVo_args() {
    }

    public deleteStoreProductInfoVo_args(
      String clientId,
      long memberCode,
      String productId)
    {
      this();
      this.clientId = clientId;
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.productId = productId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteStoreProductInfoVo_args(deleteStoreProductInfoVo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.memberCode = other.memberCode;
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
    }

    public deleteStoreProductInfoVo_args deepCopy() {
      return new deleteStoreProductInfoVo_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.productId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public deleteStoreProductInfoVo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public deleteStoreProductInfoVo_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getProductId() {
      return this.productId;
    }

    public deleteStoreProductInfoVo_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case PRODUCT_ID:
        return getProductId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case MEMBER_CODE:
        return isSetMemberCode();
      case PRODUCT_ID:
        return isSetProductId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteStoreProductInfoVo_args)
        return this.equals((deleteStoreProductInfoVo_args)that);
      return false;
    }

    public boolean equals(deleteStoreProductInfoVo_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteStoreProductInfoVo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteStoreProductInfoVo_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteStoreProductInfoVo_argsStandardSchemeFactory implements SchemeFactory {
      public deleteStoreProductInfoVo_argsStandardScheme getScheme() {
        return new deleteStoreProductInfoVo_argsStandardScheme();
      }
    }

    private static class deleteStoreProductInfoVo_argsStandardScheme extends StandardScheme<deleteStoreProductInfoVo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteStoreProductInfoVo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteStoreProductInfoVo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteStoreProductInfoVo_argsTupleSchemeFactory implements SchemeFactory {
      public deleteStoreProductInfoVo_argsTupleScheme getScheme() {
        return new deleteStoreProductInfoVo_argsTupleScheme();
      }
    }

    private static class deleteStoreProductInfoVo_argsTupleScheme extends TupleScheme<deleteStoreProductInfoVo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteStoreProductInfoVo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetMemberCode()) {
          optionals.set(1);
        }
        if (struct.isSetProductId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteStoreProductInfoVo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
      }
    }

  }

  public static class deleteStoreProductInfoVo_result implements org.apache.thrift.TBase<deleteStoreProductInfoVo_result, deleteStoreProductInfoVo_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteStoreProductInfoVo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteStoreProductInfoVo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteStoreProductInfoVo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteStoreProductInfoVo_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteStoreProductInfoVo_result.class, metaDataMap);
    }

    public deleteStoreProductInfoVo_result() {
    }

    public deleteStoreProductInfoVo_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteStoreProductInfoVo_result(deleteStoreProductInfoVo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteStoreProductInfoVo_result deepCopy() {
      return new deleteStoreProductInfoVo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteStoreProductInfoVo_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteStoreProductInfoVo_result)
        return this.equals((deleteStoreProductInfoVo_result)that);
      return false;
    }

    public boolean equals(deleteStoreProductInfoVo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteStoreProductInfoVo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteStoreProductInfoVo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteStoreProductInfoVo_resultStandardSchemeFactory implements SchemeFactory {
      public deleteStoreProductInfoVo_resultStandardScheme getScheme() {
        return new deleteStoreProductInfoVo_resultStandardScheme();
      }
    }

    private static class deleteStoreProductInfoVo_resultStandardScheme extends StandardScheme<deleteStoreProductInfoVo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteStoreProductInfoVo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteStoreProductInfoVo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteStoreProductInfoVo_resultTupleSchemeFactory implements SchemeFactory {
      public deleteStoreProductInfoVo_resultTupleScheme getScheme() {
        return new deleteStoreProductInfoVo_resultTupleScheme();
      }
    }

    private static class deleteStoreProductInfoVo_resultTupleScheme extends TupleScheme<deleteStoreProductInfoVo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteStoreProductInfoVo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteStoreProductInfoVo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStoreProductInfoVo_args implements org.apache.thrift.TBase<getStoreProductInfoVo_args, getStoreProductInfoVo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStoreProductInfoVo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStoreProductInfoVo_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStoreProductInfoVo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStoreProductInfoVo_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public long memberCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      MEMBER_CODE((short)2, "memberCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // MEMBER_CODE
            return MEMBER_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStoreProductInfoVo_args.class, metaDataMap);
    }

    public getStoreProductInfoVo_args() {
    }

    public getStoreProductInfoVo_args(
      String clientId,
      long memberCode)
    {
      this();
      this.clientId = clientId;
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStoreProductInfoVo_args(getStoreProductInfoVo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.memberCode = other.memberCode;
    }

    public getStoreProductInfoVo_args deepCopy() {
      return new getStoreProductInfoVo_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setMemberCodeIsSet(false);
      this.memberCode = 0;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getStoreProductInfoVo_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public getStoreProductInfoVo_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case MEMBER_CODE:
        return isSetMemberCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStoreProductInfoVo_args)
        return this.equals((getStoreProductInfoVo_args)that);
      return false;
    }

    public boolean equals(getStoreProductInfoVo_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStoreProductInfoVo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStoreProductInfoVo_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStoreProductInfoVo_argsStandardSchemeFactory implements SchemeFactory {
      public getStoreProductInfoVo_argsStandardScheme getScheme() {
        return new getStoreProductInfoVo_argsStandardScheme();
      }
    }

    private static class getStoreProductInfoVo_argsStandardScheme extends StandardScheme<getStoreProductInfoVo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStoreProductInfoVo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStoreProductInfoVo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStoreProductInfoVo_argsTupleSchemeFactory implements SchemeFactory {
      public getStoreProductInfoVo_argsTupleScheme getScheme() {
        return new getStoreProductInfoVo_argsTupleScheme();
      }
    }

    private static class getStoreProductInfoVo_argsTupleScheme extends TupleScheme<getStoreProductInfoVo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStoreProductInfoVo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetMemberCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStoreProductInfoVo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
      }
    }

  }

  public static class getStoreProductInfoVo_result implements org.apache.thrift.TBase<getStoreProductInfoVo_result, getStoreProductInfoVo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStoreProductInfoVo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStoreProductInfoVo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStoreProductInfoVo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStoreProductInfoVo_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.StoreProductInfoVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.StoreProductInfoVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStoreProductInfoVo_result.class, metaDataMap);
    }

    public getStoreProductInfoVo_result() {
    }

    public getStoreProductInfoVo_result(
      List<com.froad.thrift.vo.StoreProductInfoVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStoreProductInfoVo_result(getStoreProductInfoVo_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.StoreProductInfoVo> __this__success = new ArrayList<com.froad.thrift.vo.StoreProductInfoVo>(other.success.size());
        for (com.froad.thrift.vo.StoreProductInfoVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.StoreProductInfoVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getStoreProductInfoVo_result deepCopy() {
      return new getStoreProductInfoVo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.StoreProductInfoVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.StoreProductInfoVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.StoreProductInfoVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.StoreProductInfoVo> getSuccess() {
      return this.success;
    }

    public getStoreProductInfoVo_result setSuccess(List<com.froad.thrift.vo.StoreProductInfoVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.StoreProductInfoVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStoreProductInfoVo_result)
        return this.equals((getStoreProductInfoVo_result)that);
      return false;
    }

    public boolean equals(getStoreProductInfoVo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStoreProductInfoVo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStoreProductInfoVo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStoreProductInfoVo_resultStandardSchemeFactory implements SchemeFactory {
      public getStoreProductInfoVo_resultStandardScheme getScheme() {
        return new getStoreProductInfoVo_resultStandardScheme();
      }
    }

    private static class getStoreProductInfoVo_resultStandardScheme extends StandardScheme<getStoreProductInfoVo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStoreProductInfoVo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.StoreProductInfoVo>(_list120.size);
                  com.froad.thrift.vo.StoreProductInfoVo _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = new com.froad.thrift.vo.StoreProductInfoVo();
                    _elem121.read(iprot);
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStoreProductInfoVo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.StoreProductInfoVo _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStoreProductInfoVo_resultTupleSchemeFactory implements SchemeFactory {
      public getStoreProductInfoVo_resultTupleScheme getScheme() {
        return new getStoreProductInfoVo_resultTupleScheme();
      }
    }

    private static class getStoreProductInfoVo_resultTupleScheme extends TupleScheme<getStoreProductInfoVo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStoreProductInfoVo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.StoreProductInfoVo _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStoreProductInfoVo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.StoreProductInfoVo>(_list125.size);
            com.froad.thrift.vo.StoreProductInfoVo _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = new com.froad.thrift.vo.StoreProductInfoVo();
              _elem126.read(iprot);
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStoreProductInfoByPage_args implements org.apache.thrift.TBase<getStoreProductInfoByPage_args, getStoreProductInfoByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStoreProductInfoByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStoreProductInfoByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStoreProductInfoByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStoreProductInfoByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public String clientId; // required
    public long memberCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      CLIENT_ID((short)2, "clientId"),
      MEMBER_CODE((short)3, "memberCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // MEMBER_CODE
            return MEMBER_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStoreProductInfoByPage_args.class, metaDataMap);
    }

    public getStoreProductInfoByPage_args() {
    }

    public getStoreProductInfoByPage_args(
      com.froad.thrift.vo.PageVo page,
      String clientId,
      long memberCode)
    {
      this();
      this.page = page;
      this.clientId = clientId;
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStoreProductInfoByPage_args(getStoreProductInfoByPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.memberCode = other.memberCode;
    }

    public getStoreProductInfoByPage_args deepCopy() {
      return new getStoreProductInfoByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.clientId = null;
      setMemberCodeIsSet(false);
      this.memberCode = 0;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getStoreProductInfoByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public getStoreProductInfoByPage_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public getStoreProductInfoByPage_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case CLIENT_ID:
        return getClientId();

      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case CLIENT_ID:
        return isSetClientId();
      case MEMBER_CODE:
        return isSetMemberCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStoreProductInfoByPage_args)
        return this.equals((getStoreProductInfoByPage_args)that);
      return false;
    }

    public boolean equals(getStoreProductInfoByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStoreProductInfoByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStoreProductInfoByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStoreProductInfoByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getStoreProductInfoByPage_argsStandardScheme getScheme() {
        return new getStoreProductInfoByPage_argsStandardScheme();
      }
    }

    private static class getStoreProductInfoByPage_argsStandardScheme extends StandardScheme<getStoreProductInfoByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStoreProductInfoByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStoreProductInfoByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStoreProductInfoByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getStoreProductInfoByPage_argsTupleScheme getScheme() {
        return new getStoreProductInfoByPage_argsTupleScheme();
      }
    }

    private static class getStoreProductInfoByPage_argsTupleScheme extends TupleScheme<getStoreProductInfoByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStoreProductInfoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetMemberCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStoreProductInfoByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
      }
    }

  }

  public static class getStoreProductInfoByPage_result implements org.apache.thrift.TBase<getStoreProductInfoByPage_result, getStoreProductInfoByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStoreProductInfoByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStoreProductInfoByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStoreProductInfoByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStoreProductInfoByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.StoreProductInfoPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.StoreProductInfoPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStoreProductInfoByPage_result.class, metaDataMap);
    }

    public getStoreProductInfoByPage_result() {
    }

    public getStoreProductInfoByPage_result(
      com.froad.thrift.vo.StoreProductInfoPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStoreProductInfoByPage_result(getStoreProductInfoByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.StoreProductInfoPageVoRes(other.success);
      }
    }

    public getStoreProductInfoByPage_result deepCopy() {
      return new getStoreProductInfoByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.StoreProductInfoPageVoRes getSuccess() {
      return this.success;
    }

    public getStoreProductInfoByPage_result setSuccess(com.froad.thrift.vo.StoreProductInfoPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.StoreProductInfoPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStoreProductInfoByPage_result)
        return this.equals((getStoreProductInfoByPage_result)that);
      return false;
    }

    public boolean equals(getStoreProductInfoByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStoreProductInfoByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStoreProductInfoByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStoreProductInfoByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getStoreProductInfoByPage_resultStandardScheme getScheme() {
        return new getStoreProductInfoByPage_resultStandardScheme();
      }
    }

    private static class getStoreProductInfoByPage_resultStandardScheme extends StandardScheme<getStoreProductInfoByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStoreProductInfoByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.StoreProductInfoPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStoreProductInfoByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStoreProductInfoByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getStoreProductInfoByPage_resultTupleScheme getScheme() {
        return new getStoreProductInfoByPage_resultTupleScheme();
      }
    }

    private static class getStoreProductInfoByPage_resultTupleScheme extends TupleScheme<getStoreProductInfoByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStoreProductInfoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStoreProductInfoByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.StoreProductInfoPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addProductBatch_args implements org.apache.thrift.TBase<addProductBatch_args, addProductBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<addProductBatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductBatch_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_INFO_VOS_FIELD_DESC = new org.apache.thrift.protocol.TField("productInfoVos", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductBatch_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public List<com.froad.thrift.vo.ProductInfoVo> productInfoVos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_INFO_VOS((short)2, "productInfoVos");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_INFO_VOS
            return PRODUCT_INFO_VOS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_INFO_VOS, new org.apache.thrift.meta_data.FieldMetaData("productInfoVos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductInfoVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductBatch_args.class, metaDataMap);
    }

    public addProductBatch_args() {
    }

    public addProductBatch_args(
      com.froad.thrift.vo.OriginVo originVo,
      List<com.froad.thrift.vo.ProductInfoVo> productInfoVos)
    {
      this();
      this.originVo = originVo;
      this.productInfoVos = productInfoVos;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductBatch_args(addProductBatch_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductInfoVos()) {
        List<com.froad.thrift.vo.ProductInfoVo> __this__productInfoVos = new ArrayList<com.froad.thrift.vo.ProductInfoVo>(other.productInfoVos.size());
        for (com.froad.thrift.vo.ProductInfoVo other_element : other.productInfoVos) {
          __this__productInfoVos.add(new com.froad.thrift.vo.ProductInfoVo(other_element));
        }
        this.productInfoVos = __this__productInfoVos;
      }
    }

    public addProductBatch_args deepCopy() {
      return new addProductBatch_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productInfoVos = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addProductBatch_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public int getProductInfoVosSize() {
      return (this.productInfoVos == null) ? 0 : this.productInfoVos.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductInfoVo> getProductInfoVosIterator() {
      return (this.productInfoVos == null) ? null : this.productInfoVos.iterator();
    }

    public void addToProductInfoVos(com.froad.thrift.vo.ProductInfoVo elem) {
      if (this.productInfoVos == null) {
        this.productInfoVos = new ArrayList<com.froad.thrift.vo.ProductInfoVo>();
      }
      this.productInfoVos.add(elem);
    }

    public List<com.froad.thrift.vo.ProductInfoVo> getProductInfoVos() {
      return this.productInfoVos;
    }

    public addProductBatch_args setProductInfoVos(List<com.froad.thrift.vo.ProductInfoVo> productInfoVos) {
      this.productInfoVos = productInfoVos;
      return this;
    }

    public void unsetProductInfoVos() {
      this.productInfoVos = null;
    }

    /** Returns true if field productInfoVos is set (has been assigned a value) and false otherwise */
    public boolean isSetProductInfoVos() {
      return this.productInfoVos != null;
    }

    public void setProductInfoVosIsSet(boolean value) {
      if (!value) {
        this.productInfoVos = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_INFO_VOS:
        if (value == null) {
          unsetProductInfoVos();
        } else {
          setProductInfoVos((List<com.froad.thrift.vo.ProductInfoVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_INFO_VOS:
        return getProductInfoVos();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_INFO_VOS:
        return isSetProductInfoVos();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductBatch_args)
        return this.equals((addProductBatch_args)that);
      return false;
    }

    public boolean equals(addProductBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productInfoVos = true && this.isSetProductInfoVos();
      boolean that_present_productInfoVos = true && that.isSetProductInfoVos();
      if (this_present_productInfoVos || that_present_productInfoVos) {
        if (!(this_present_productInfoVos && that_present_productInfoVos))
          return false;
        if (!this.productInfoVos.equals(that.productInfoVos))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productInfoVos = true && (isSetProductInfoVos());
      list.add(present_productInfoVos);
      if (present_productInfoVos)
        list.add(productInfoVos);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductInfoVos()).compareTo(other.isSetProductInfoVos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductInfoVos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productInfoVos, other.productInfoVos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductBatch_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productInfoVos:");
      if (this.productInfoVos == null) {
        sb.append("null");
      } else {
        sb.append(this.productInfoVos);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductBatch_argsStandardSchemeFactory implements SchemeFactory {
      public addProductBatch_argsStandardScheme getScheme() {
        return new addProductBatch_argsStandardScheme();
      }
    }

    private static class addProductBatch_argsStandardScheme extends StandardScheme<addProductBatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductBatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_INFO_VOS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.productInfoVos = new ArrayList<com.froad.thrift.vo.ProductInfoVo>(_list128.size);
                  com.froad.thrift.vo.ProductInfoVo _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = new com.froad.thrift.vo.ProductInfoVo();
                    _elem129.read(iprot);
                    struct.productInfoVos.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setProductInfoVosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductBatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productInfoVos != null) {
          oprot.writeFieldBegin(PRODUCT_INFO_VOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productInfoVos.size()));
            for (com.froad.thrift.vo.ProductInfoVo _iter131 : struct.productInfoVos)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductBatch_argsTupleSchemeFactory implements SchemeFactory {
      public addProductBatch_argsTupleScheme getScheme() {
        return new addProductBatch_argsTupleScheme();
      }
    }

    private static class addProductBatch_argsTupleScheme extends TupleScheme<addProductBatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductInfoVos()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductInfoVos()) {
          {
            oprot.writeI32(struct.productInfoVos.size());
            for (com.froad.thrift.vo.ProductInfoVo _iter132 : struct.productInfoVos)
            {
              _iter132.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.productInfoVos = new ArrayList<com.froad.thrift.vo.ProductInfoVo>(_list133.size);
            com.froad.thrift.vo.ProductInfoVo _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = new com.froad.thrift.vo.ProductInfoVo();
              _elem134.read(iprot);
              struct.productInfoVos.add(_elem134);
            }
          }
          struct.setProductInfoVosIsSet(true);
        }
      }
    }

  }

  public static class addProductBatch_result implements org.apache.thrift.TBase<addProductBatch_result, addProductBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<addProductBatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductBatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductBatch_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.AddProductVoRes> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AddProductVoRes.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductBatch_result.class, metaDataMap);
    }

    public addProductBatch_result() {
    }

    public addProductBatch_result(
      List<com.froad.thrift.vo.AddProductVoRes> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductBatch_result(addProductBatch_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.AddProductVoRes> __this__success = new ArrayList<com.froad.thrift.vo.AddProductVoRes>(other.success.size());
        for (com.froad.thrift.vo.AddProductVoRes other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.AddProductVoRes(other_element));
        }
        this.success = __this__success;
      }
    }

    public addProductBatch_result deepCopy() {
      return new addProductBatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.AddProductVoRes> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.AddProductVoRes elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.AddProductVoRes>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.AddProductVoRes> getSuccess() {
      return this.success;
    }

    public addProductBatch_result setSuccess(List<com.froad.thrift.vo.AddProductVoRes> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.AddProductVoRes>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductBatch_result)
        return this.equals((addProductBatch_result)that);
      return false;
    }

    public boolean equals(addProductBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductBatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductBatch_resultStandardSchemeFactory implements SchemeFactory {
      public addProductBatch_resultStandardScheme getScheme() {
        return new addProductBatch_resultStandardScheme();
      }
    }

    private static class addProductBatch_resultStandardScheme extends StandardScheme<addProductBatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductBatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.AddProductVoRes>(_list136.size);
                  com.froad.thrift.vo.AddProductVoRes _elem137;
                  for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                  {
                    _elem137 = new com.froad.thrift.vo.AddProductVoRes();
                    _elem137.read(iprot);
                    struct.success.add(_elem137);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductBatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.AddProductVoRes _iter139 : struct.success)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductBatch_resultTupleSchemeFactory implements SchemeFactory {
      public addProductBatch_resultTupleScheme getScheme() {
        return new addProductBatch_resultTupleScheme();
      }
    }

    private static class addProductBatch_resultTupleScheme extends TupleScheme<addProductBatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.AddProductVoRes _iter140 : struct.success)
            {
              _iter140.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.AddProductVoRes>(_list141.size);
            com.froad.thrift.vo.AddProductVoRes _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = new com.froad.thrift.vo.AddProductVoRes();
              _elem142.read(iprot);
              struct.success.add(_elem142);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class modifySenseWord_args implements org.apache.thrift.TBase<modifySenseWord_args, modifySenseWord_args._Fields>, java.io.Serializable, Cloneable, Comparable<modifySenseWord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifySenseWord_args");

    private static final org.apache.thrift.protocol.TField OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("opt", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("word", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifySenseWord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifySenseWord_argsTupleSchemeFactory());
    }

    public int opt; // required
    public String word; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPT((short)1, "opt"),
      WORD((short)2, "word");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPT
            return OPT;
          case 2: // WORD
            return WORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OPT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPT, new org.apache.thrift.meta_data.FieldMetaData("opt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.WORD, new org.apache.thrift.meta_data.FieldMetaData("word", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifySenseWord_args.class, metaDataMap);
    }

    public modifySenseWord_args() {
    }

    public modifySenseWord_args(
      int opt,
      String word)
    {
      this();
      this.opt = opt;
      setOptIsSet(true);
      this.word = word;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifySenseWord_args(modifySenseWord_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.opt = other.opt;
      if (other.isSetWord()) {
        this.word = other.word;
      }
    }

    public modifySenseWord_args deepCopy() {
      return new modifySenseWord_args(this);
    }

    @Override
    public void clear() {
      setOptIsSet(false);
      this.opt = 0;
      this.word = null;
    }

    public int getOpt() {
      return this.opt;
    }

    public modifySenseWord_args setOpt(int opt) {
      this.opt = opt;
      setOptIsSet(true);
      return this;
    }

    public void unsetOpt() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPT_ISSET_ID);
    }

    /** Returns true if field opt is set (has been assigned a value) and false otherwise */
    public boolean isSetOpt() {
      return EncodingUtils.testBit(__isset_bitfield, __OPT_ISSET_ID);
    }

    public void setOptIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPT_ISSET_ID, value);
    }

    public String getWord() {
      return this.word;
    }

    public modifySenseWord_args setWord(String word) {
      this.word = word;
      return this;
    }

    public void unsetWord() {
      this.word = null;
    }

    /** Returns true if field word is set (has been assigned a value) and false otherwise */
    public boolean isSetWord() {
      return this.word != null;
    }

    public void setWordIsSet(boolean value) {
      if (!value) {
        this.word = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPT:
        if (value == null) {
          unsetOpt();
        } else {
          setOpt((Integer)value);
        }
        break;

      case WORD:
        if (value == null) {
          unsetWord();
        } else {
          setWord((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPT:
        return Integer.valueOf(getOpt());

      case WORD:
        return getWord();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPT:
        return isSetOpt();
      case WORD:
        return isSetWord();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifySenseWord_args)
        return this.equals((modifySenseWord_args)that);
      return false;
    }

    public boolean equals(modifySenseWord_args that) {
      if (that == null)
        return false;

      boolean this_present_opt = true;
      boolean that_present_opt = true;
      if (this_present_opt || that_present_opt) {
        if (!(this_present_opt && that_present_opt))
          return false;
        if (this.opt != that.opt)
          return false;
      }

      boolean this_present_word = true && this.isSetWord();
      boolean that_present_word = true && that.isSetWord();
      if (this_present_word || that_present_word) {
        if (!(this_present_word && that_present_word))
          return false;
        if (!this.word.equals(that.word))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_opt = true;
      list.add(present_opt);
      if (present_opt)
        list.add(opt);

      boolean present_word = true && (isSetWord());
      list.add(present_word);
      if (present_word)
        list.add(word);

      return list.hashCode();
    }

    @Override
    public int compareTo(modifySenseWord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOpt()).compareTo(other.isSetOpt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opt, other.opt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWord()).compareTo(other.isSetWord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.word, other.word);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifySenseWord_args(");
      boolean first = true;

      sb.append("opt:");
      sb.append(this.opt);
      first = false;
      if (!first) sb.append(", ");
      sb.append("word:");
      if (this.word == null) {
        sb.append("null");
      } else {
        sb.append(this.word);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifySenseWord_argsStandardSchemeFactory implements SchemeFactory {
      public modifySenseWord_argsStandardScheme getScheme() {
        return new modifySenseWord_argsStandardScheme();
      }
    }

    private static class modifySenseWord_argsStandardScheme extends StandardScheme<modifySenseWord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifySenseWord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.opt = iprot.readI32();
                struct.setOptIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.word = iprot.readString();
                struct.setWordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifySenseWord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(OPT_FIELD_DESC);
        oprot.writeI32(struct.opt);
        oprot.writeFieldEnd();
        if (struct.word != null) {
          oprot.writeFieldBegin(WORD_FIELD_DESC);
          oprot.writeString(struct.word);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifySenseWord_argsTupleSchemeFactory implements SchemeFactory {
      public modifySenseWord_argsTupleScheme getScheme() {
        return new modifySenseWord_argsTupleScheme();
      }
    }

    private static class modifySenseWord_argsTupleScheme extends TupleScheme<modifySenseWord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifySenseWord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOpt()) {
          optionals.set(0);
        }
        if (struct.isSetWord()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOpt()) {
          oprot.writeI32(struct.opt);
        }
        if (struct.isSetWord()) {
          oprot.writeString(struct.word);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifySenseWord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.opt = iprot.readI32();
          struct.setOptIsSet(true);
        }
        if (incoming.get(1)) {
          struct.word = iprot.readString();
          struct.setWordIsSet(true);
        }
      }
    }

  }

  public static class modifySenseWord_result implements org.apache.thrift.TBase<modifySenseWord_result, modifySenseWord_result._Fields>, java.io.Serializable, Cloneable, Comparable<modifySenseWord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifySenseWord_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifySenseWord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifySenseWord_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifySenseWord_result.class, metaDataMap);
    }

    public modifySenseWord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifySenseWord_result(modifySenseWord_result other) {
    }

    public modifySenseWord_result deepCopy() {
      return new modifySenseWord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifySenseWord_result)
        return this.equals((modifySenseWord_result)that);
      return false;
    }

    public boolean equals(modifySenseWord_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(modifySenseWord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifySenseWord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifySenseWord_resultStandardSchemeFactory implements SchemeFactory {
      public modifySenseWord_resultStandardScheme getScheme() {
        return new modifySenseWord_resultStandardScheme();
      }
    }

    private static class modifySenseWord_resultStandardScheme extends StandardScheme<modifySenseWord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifySenseWord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifySenseWord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifySenseWord_resultTupleSchemeFactory implements SchemeFactory {
      public modifySenseWord_resultTupleScheme getScheme() {
        return new modifySenseWord_resultTupleScheme();
      }
    }

    private static class modifySenseWord_resultTupleScheme extends TupleScheme<modifySenseWord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifySenseWord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifySenseWord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addActivtyToProducts_args implements org.apache.thrift.TBase<addActivtyToProducts_args, addActivtyToProducts_args._Fields>, java.io.Serializable, Cloneable, Comparable<addActivtyToProducts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addActivtyToProducts_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activityId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField PRODUCT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("productIds", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addActivtyToProducts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addActivtyToProducts_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public long activityId; // required
    public List<String> productIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      ACTIVITY_ID((short)2, "activityId"),
      PRODUCT_IDS((short)3, "productIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // ACTIVITY_ID
            return ACTIVITY_ID;
          case 3: // PRODUCT_IDS
            return PRODUCT_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ACTIVITYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.ACTIVITY_ID, new org.apache.thrift.meta_data.FieldMetaData("activityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PRODUCT_IDS, new org.apache.thrift.meta_data.FieldMetaData("productIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addActivtyToProducts_args.class, metaDataMap);
    }

    public addActivtyToProducts_args() {
    }

    public addActivtyToProducts_args(
      com.froad.thrift.vo.OriginVo originVo,
      long activityId,
      List<String> productIds)
    {
      this();
      this.originVo = originVo;
      this.activityId = activityId;
      setActivityIdIsSet(true);
      this.productIds = productIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addActivtyToProducts_args(addActivtyToProducts_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      this.activityId = other.activityId;
      if (other.isSetProductIds()) {
        List<String> __this__productIds = new ArrayList<String>(other.productIds);
        this.productIds = __this__productIds;
      }
    }

    public addActivtyToProducts_args deepCopy() {
      return new addActivtyToProducts_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      setActivityIdIsSet(false);
      this.activityId = 0;
      this.productIds = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addActivtyToProducts_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public long getActivityId() {
      return this.activityId;
    }

    public addActivtyToProducts_args setActivityId(long activityId) {
      this.activityId = activityId;
      setActivityIdIsSet(true);
      return this;
    }

    public void unsetActivityId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
    }

    /** Returns true if field activityId is set (has been assigned a value) and false otherwise */
    public boolean isSetActivityId() {
      return EncodingUtils.testBit(__isset_bitfield, __ACTIVITYID_ISSET_ID);
    }

    public void setActivityIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVITYID_ISSET_ID, value);
    }

    public int getProductIdsSize() {
      return (this.productIds == null) ? 0 : this.productIds.size();
    }

    public java.util.Iterator<String> getProductIdsIterator() {
      return (this.productIds == null) ? null : this.productIds.iterator();
    }

    public void addToProductIds(String elem) {
      if (this.productIds == null) {
        this.productIds = new ArrayList<String>();
      }
      this.productIds.add(elem);
    }

    public List<String> getProductIds() {
      return this.productIds;
    }

    public addActivtyToProducts_args setProductIds(List<String> productIds) {
      this.productIds = productIds;
      return this;
    }

    public void unsetProductIds() {
      this.productIds = null;
    }

    /** Returns true if field productIds is set (has been assigned a value) and false otherwise */
    public boolean isSetProductIds() {
      return this.productIds != null;
    }

    public void setProductIdsIsSet(boolean value) {
      if (!value) {
        this.productIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case ACTIVITY_ID:
        if (value == null) {
          unsetActivityId();
        } else {
          setActivityId((Long)value);
        }
        break;

      case PRODUCT_IDS:
        if (value == null) {
          unsetProductIds();
        } else {
          setProductIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case ACTIVITY_ID:
        return Long.valueOf(getActivityId());

      case PRODUCT_IDS:
        return getProductIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case ACTIVITY_ID:
        return isSetActivityId();
      case PRODUCT_IDS:
        return isSetProductIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addActivtyToProducts_args)
        return this.equals((addActivtyToProducts_args)that);
      return false;
    }

    public boolean equals(addActivtyToProducts_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_activityId = true;
      boolean that_present_activityId = true;
      if (this_present_activityId || that_present_activityId) {
        if (!(this_present_activityId && that_present_activityId))
          return false;
        if (this.activityId != that.activityId)
          return false;
      }

      boolean this_present_productIds = true && this.isSetProductIds();
      boolean that_present_productIds = true && that.isSetProductIds();
      if (this_present_productIds || that_present_productIds) {
        if (!(this_present_productIds && that_present_productIds))
          return false;
        if (!this.productIds.equals(that.productIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_activityId = true;
      list.add(present_activityId);
      if (present_activityId)
        list.add(activityId);

      boolean present_productIds = true && (isSetProductIds());
      list.add(present_productIds);
      if (present_productIds)
        list.add(productIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(addActivtyToProducts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActivityId()).compareTo(other.isSetActivityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActivityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityId, other.activityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductIds()).compareTo(other.isSetProductIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productIds, other.productIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addActivtyToProducts_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activityId:");
      sb.append(this.activityId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("productIds:");
      if (this.productIds == null) {
        sb.append("null");
      } else {
        sb.append(this.productIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addActivtyToProducts_argsStandardSchemeFactory implements SchemeFactory {
      public addActivtyToProducts_argsStandardScheme getScheme() {
        return new addActivtyToProducts_argsStandardScheme();
      }
    }

    private static class addActivtyToProducts_argsStandardScheme extends StandardScheme<addActivtyToProducts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addActivtyToProducts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.activityId = iprot.readI64();
                struct.setActivityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PRODUCT_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.productIds = new ArrayList<String>(_list144.size);
                  String _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = iprot.readString();
                    struct.productIds.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setProductIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addActivtyToProducts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ACTIVITY_ID_FIELD_DESC);
        oprot.writeI64(struct.activityId);
        oprot.writeFieldEnd();
        if (struct.productIds != null) {
          oprot.writeFieldBegin(PRODUCT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.productIds.size()));
            for (String _iter147 : struct.productIds)
            {
              oprot.writeString(_iter147);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addActivtyToProducts_argsTupleSchemeFactory implements SchemeFactory {
      public addActivtyToProducts_argsTupleScheme getScheme() {
        return new addActivtyToProducts_argsTupleScheme();
      }
    }

    private static class addActivtyToProducts_argsTupleScheme extends TupleScheme<addActivtyToProducts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addActivtyToProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetActivityId()) {
          optionals.set(1);
        }
        if (struct.isSetProductIds()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetActivityId()) {
          oprot.writeI64(struct.activityId);
        }
        if (struct.isSetProductIds()) {
          {
            oprot.writeI32(struct.productIds.size());
            for (String _iter148 : struct.productIds)
            {
              oprot.writeString(_iter148);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addActivtyToProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activityId = iprot.readI64();
          struct.setActivityIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.productIds = new ArrayList<String>(_list149.size);
            String _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = iprot.readString();
              struct.productIds.add(_elem150);
            }
          }
          struct.setProductIdsIsSet(true);
        }
      }
    }

  }

  public static class addActivtyToProducts_result implements org.apache.thrift.TBase<addActivtyToProducts_result, addActivtyToProducts_result._Fields>, java.io.Serializable, Cloneable, Comparable<addActivtyToProducts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addActivtyToProducts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addActivtyToProducts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addActivtyToProducts_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addActivtyToProducts_result.class, metaDataMap);
    }

    public addActivtyToProducts_result() {
    }

    public addActivtyToProducts_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addActivtyToProducts_result(addActivtyToProducts_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public addActivtyToProducts_result deepCopy() {
      return new addActivtyToProducts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public addActivtyToProducts_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addActivtyToProducts_result)
        return this.equals((addActivtyToProducts_result)that);
      return false;
    }

    public boolean equals(addActivtyToProducts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addActivtyToProducts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addActivtyToProducts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addActivtyToProducts_resultStandardSchemeFactory implements SchemeFactory {
      public addActivtyToProducts_resultStandardScheme getScheme() {
        return new addActivtyToProducts_resultStandardScheme();
      }
    }

    private static class addActivtyToProducts_resultStandardScheme extends StandardScheme<addActivtyToProducts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addActivtyToProducts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addActivtyToProducts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addActivtyToProducts_resultTupleSchemeFactory implements SchemeFactory {
      public addActivtyToProducts_resultTupleScheme getScheme() {
        return new addActivtyToProducts_resultTupleScheme();
      }
    }

    private static class addActivtyToProducts_resultTupleScheme extends TupleScheme<addActivtyToProducts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addActivtyToProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addActivtyToProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeActivtyFromProducts_args implements org.apache.thrift.TBase<removeActivtyFromProducts_args, removeActivtyFromProducts_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeActivtyFromProducts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeActivtyFromProducts_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVTY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activtyId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeActivtyFromProducts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeActivtyFromProducts_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public long activtyId; // required
    public String productId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      ACTIVTY_ID((short)2, "activtyId"),
      PRODUCT_ID((short)3, "productId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // ACTIVTY_ID
            return ACTIVTY_ID;
          case 3: // PRODUCT_ID
            return PRODUCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ACTIVTYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.ACTIVTY_ID, new org.apache.thrift.meta_data.FieldMetaData("activtyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeActivtyFromProducts_args.class, metaDataMap);
    }

    public removeActivtyFromProducts_args() {
    }

    public removeActivtyFromProducts_args(
      com.froad.thrift.vo.OriginVo originVo,
      long activtyId,
      String productId)
    {
      this();
      this.originVo = originVo;
      this.activtyId = activtyId;
      setActivtyIdIsSet(true);
      this.productId = productId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeActivtyFromProducts_args(removeActivtyFromProducts_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      this.activtyId = other.activtyId;
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
    }

    public removeActivtyFromProducts_args deepCopy() {
      return new removeActivtyFromProducts_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      setActivtyIdIsSet(false);
      this.activtyId = 0;
      this.productId = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public removeActivtyFromProducts_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public long getActivtyId() {
      return this.activtyId;
    }

    public removeActivtyFromProducts_args setActivtyId(long activtyId) {
      this.activtyId = activtyId;
      setActivtyIdIsSet(true);
      return this;
    }

    public void unsetActivtyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVTYID_ISSET_ID);
    }

    /** Returns true if field activtyId is set (has been assigned a value) and false otherwise */
    public boolean isSetActivtyId() {
      return EncodingUtils.testBit(__isset_bitfield, __ACTIVTYID_ISSET_ID);
    }

    public void setActivtyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVTYID_ISSET_ID, value);
    }

    public String getProductId() {
      return this.productId;
    }

    public removeActivtyFromProducts_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case ACTIVTY_ID:
        if (value == null) {
          unsetActivtyId();
        } else {
          setActivtyId((Long)value);
        }
        break;

      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case ACTIVTY_ID:
        return Long.valueOf(getActivtyId());

      case PRODUCT_ID:
        return getProductId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case ACTIVTY_ID:
        return isSetActivtyId();
      case PRODUCT_ID:
        return isSetProductId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeActivtyFromProducts_args)
        return this.equals((removeActivtyFromProducts_args)that);
      return false;
    }

    public boolean equals(removeActivtyFromProducts_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_activtyId = true;
      boolean that_present_activtyId = true;
      if (this_present_activtyId || that_present_activtyId) {
        if (!(this_present_activtyId && that_present_activtyId))
          return false;
        if (this.activtyId != that.activtyId)
          return false;
      }

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_activtyId = true;
      list.add(present_activtyId);
      if (present_activtyId)
        list.add(activtyId);

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeActivtyFromProducts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActivtyId()).compareTo(other.isSetActivtyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActivtyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activtyId, other.activtyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeActivtyFromProducts_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activtyId:");
      sb.append(this.activtyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeActivtyFromProducts_argsStandardSchemeFactory implements SchemeFactory {
      public removeActivtyFromProducts_argsStandardScheme getScheme() {
        return new removeActivtyFromProducts_argsStandardScheme();
      }
    }

    private static class removeActivtyFromProducts_argsStandardScheme extends StandardScheme<removeActivtyFromProducts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeActivtyFromProducts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVTY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.activtyId = iprot.readI64();
                struct.setActivtyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeActivtyFromProducts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ACTIVTY_ID_FIELD_DESC);
        oprot.writeI64(struct.activtyId);
        oprot.writeFieldEnd();
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeActivtyFromProducts_argsTupleSchemeFactory implements SchemeFactory {
      public removeActivtyFromProducts_argsTupleScheme getScheme() {
        return new removeActivtyFromProducts_argsTupleScheme();
      }
    }

    private static class removeActivtyFromProducts_argsTupleScheme extends TupleScheme<removeActivtyFromProducts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeActivtyFromProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetActivtyId()) {
          optionals.set(1);
        }
        if (struct.isSetProductId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetActivtyId()) {
          oprot.writeI64(struct.activtyId);
        }
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeActivtyFromProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activtyId = iprot.readI64();
          struct.setActivtyIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
      }
    }

  }

  public static class removeActivtyFromProducts_result implements org.apache.thrift.TBase<removeActivtyFromProducts_result, removeActivtyFromProducts_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeActivtyFromProducts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeActivtyFromProducts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeActivtyFromProducts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeActivtyFromProducts_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeActivtyFromProducts_result.class, metaDataMap);
    }

    public removeActivtyFromProducts_result() {
    }

    public removeActivtyFromProducts_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeActivtyFromProducts_result(removeActivtyFromProducts_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public removeActivtyFromProducts_result deepCopy() {
      return new removeActivtyFromProducts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public removeActivtyFromProducts_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeActivtyFromProducts_result)
        return this.equals((removeActivtyFromProducts_result)that);
      return false;
    }

    public boolean equals(removeActivtyFromProducts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeActivtyFromProducts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeActivtyFromProducts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeActivtyFromProducts_resultStandardSchemeFactory implements SchemeFactory {
      public removeActivtyFromProducts_resultStandardScheme getScheme() {
        return new removeActivtyFromProducts_resultStandardScheme();
      }
    }

    private static class removeActivtyFromProducts_resultStandardScheme extends StandardScheme<removeActivtyFromProducts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeActivtyFromProducts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeActivtyFromProducts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeActivtyFromProducts_resultTupleSchemeFactory implements SchemeFactory {
      public removeActivtyFromProducts_resultTupleScheme getScheme() {
        return new removeActivtyFromProducts_resultTupleScheme();
      }
    }

    private static class removeActivtyFromProducts_resultTupleScheme extends TupleScheme<removeActivtyFromProducts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeActivtyFromProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeActivtyFromProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findActivtyProductsByPage_args implements org.apache.thrift.TBase<findActivtyProductsByPage_args, findActivtyProductsByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findActivtyProductsByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findActivtyProductsByPage_args");

    private static final org.apache.thrift.protocol.TField ACTIVTY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activtyId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findActivtyProductsByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findActivtyProductsByPage_argsTupleSchemeFactory());
    }

    public long activtyId; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTIVTY_ID((short)1, "activtyId"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTIVTY_ID
            return ACTIVTY_ID;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ACTIVTYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTIVTY_ID, new org.apache.thrift.meta_data.FieldMetaData("activtyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findActivtyProductsByPage_args.class, metaDataMap);
    }

    public findActivtyProductsByPage_args() {
    }

    public findActivtyProductsByPage_args(
      long activtyId,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.activtyId = activtyId;
      setActivtyIdIsSet(true);
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findActivtyProductsByPage_args(findActivtyProductsByPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.activtyId = other.activtyId;
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public findActivtyProductsByPage_args deepCopy() {
      return new findActivtyProductsByPage_args(this);
    }

    @Override
    public void clear() {
      setActivtyIdIsSet(false);
      this.activtyId = 0;
      this.pageVo = null;
    }

    public long getActivtyId() {
      return this.activtyId;
    }

    public findActivtyProductsByPage_args setActivtyId(long activtyId) {
      this.activtyId = activtyId;
      setActivtyIdIsSet(true);
      return this;
    }

    public void unsetActivtyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVTYID_ISSET_ID);
    }

    /** Returns true if field activtyId is set (has been assigned a value) and false otherwise */
    public boolean isSetActivtyId() {
      return EncodingUtils.testBit(__isset_bitfield, __ACTIVTYID_ISSET_ID);
    }

    public void setActivtyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVTYID_ISSET_ID, value);
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public findActivtyProductsByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTIVTY_ID:
        if (value == null) {
          unsetActivtyId();
        } else {
          setActivtyId((Long)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTIVTY_ID:
        return Long.valueOf(getActivtyId());

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTIVTY_ID:
        return isSetActivtyId();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findActivtyProductsByPage_args)
        return this.equals((findActivtyProductsByPage_args)that);
      return false;
    }

    public boolean equals(findActivtyProductsByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_activtyId = true;
      boolean that_present_activtyId = true;
      if (this_present_activtyId || that_present_activtyId) {
        if (!(this_present_activtyId && that_present_activtyId))
          return false;
        if (this.activtyId != that.activtyId)
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_activtyId = true;
      list.add(present_activtyId);
      if (present_activtyId)
        list.add(activtyId);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findActivtyProductsByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetActivtyId()).compareTo(other.isSetActivtyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActivtyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activtyId, other.activtyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findActivtyProductsByPage_args(");
      boolean first = true;

      sb.append("activtyId:");
      sb.append(this.activtyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findActivtyProductsByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findActivtyProductsByPage_argsStandardScheme getScheme() {
        return new findActivtyProductsByPage_argsStandardScheme();
      }
    }

    private static class findActivtyProductsByPage_argsStandardScheme extends StandardScheme<findActivtyProductsByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findActivtyProductsByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTIVTY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.activtyId = iprot.readI64();
                struct.setActivtyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findActivtyProductsByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ACTIVTY_ID_FIELD_DESC);
        oprot.writeI64(struct.activtyId);
        oprot.writeFieldEnd();
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findActivtyProductsByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findActivtyProductsByPage_argsTupleScheme getScheme() {
        return new findActivtyProductsByPage_argsTupleScheme();
      }
    }

    private static class findActivtyProductsByPage_argsTupleScheme extends TupleScheme<findActivtyProductsByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findActivtyProductsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetActivtyId()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetActivtyId()) {
          oprot.writeI64(struct.activtyId);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findActivtyProductsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.activtyId = iprot.readI64();
          struct.setActivtyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class findActivtyProductsByPage_result implements org.apache.thrift.TBase<findActivtyProductsByPage_result, findActivtyProductsByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findActivtyProductsByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findActivtyProductsByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findActivtyProductsByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findActivtyProductsByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ActivityProductPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ActivityProductPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findActivtyProductsByPage_result.class, metaDataMap);
    }

    public findActivtyProductsByPage_result() {
    }

    public findActivtyProductsByPage_result(
      com.froad.thrift.vo.ActivityProductPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findActivtyProductsByPage_result(findActivtyProductsByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ActivityProductPageVo(other.success);
      }
    }

    public findActivtyProductsByPage_result deepCopy() {
      return new findActivtyProductsByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ActivityProductPageVo getSuccess() {
      return this.success;
    }

    public findActivtyProductsByPage_result setSuccess(com.froad.thrift.vo.ActivityProductPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ActivityProductPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findActivtyProductsByPage_result)
        return this.equals((findActivtyProductsByPage_result)that);
      return false;
    }

    public boolean equals(findActivtyProductsByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findActivtyProductsByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findActivtyProductsByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findActivtyProductsByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findActivtyProductsByPage_resultStandardScheme getScheme() {
        return new findActivtyProductsByPage_resultStandardScheme();
      }
    }

    private static class findActivtyProductsByPage_resultStandardScheme extends StandardScheme<findActivtyProductsByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findActivtyProductsByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ActivityProductPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findActivtyProductsByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findActivtyProductsByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findActivtyProductsByPage_resultTupleScheme getScheme() {
        return new findActivtyProductsByPage_resultTupleScheme();
      }
    }

    private static class findActivtyProductsByPage_resultTupleScheme extends TupleScheme<findActivtyProductsByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findActivtyProductsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findActivtyProductsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ActivityProductPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findProductsForActivtyByPage_args implements org.apache.thrift.TBase<findProductsForActivtyByPage_args, findProductsForActivtyByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findProductsForActivtyByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProductsForActivtyByPage_args");

    private static final org.apache.thrift.protocol.TField ACTIVTY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activtyId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProductsForActivtyByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProductsForActivtyByPage_argsTupleSchemeFactory());
    }

    public long activtyId; // required
    public String name; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTIVTY_ID((short)1, "activtyId"),
      NAME((short)2, "name"),
      PAGE_VO((short)3, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTIVTY_ID
            return ACTIVTY_ID;
          case 2: // NAME
            return NAME;
          case 3: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ACTIVTYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTIVTY_ID, new org.apache.thrift.meta_data.FieldMetaData("activtyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProductsForActivtyByPage_args.class, metaDataMap);
    }

    public findProductsForActivtyByPage_args() {
    }

    public findProductsForActivtyByPage_args(
      long activtyId,
      String name,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.activtyId = activtyId;
      setActivtyIdIsSet(true);
      this.name = name;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProductsForActivtyByPage_args(findProductsForActivtyByPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.activtyId = other.activtyId;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public findProductsForActivtyByPage_args deepCopy() {
      return new findProductsForActivtyByPage_args(this);
    }

    @Override
    public void clear() {
      setActivtyIdIsSet(false);
      this.activtyId = 0;
      this.name = null;
      this.pageVo = null;
    }

    public long getActivtyId() {
      return this.activtyId;
    }

    public findProductsForActivtyByPage_args setActivtyId(long activtyId) {
      this.activtyId = activtyId;
      setActivtyIdIsSet(true);
      return this;
    }

    public void unsetActivtyId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVTYID_ISSET_ID);
    }

    /** Returns true if field activtyId is set (has been assigned a value) and false otherwise */
    public boolean isSetActivtyId() {
      return EncodingUtils.testBit(__isset_bitfield, __ACTIVTYID_ISSET_ID);
    }

    public void setActivtyIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVTYID_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public findProductsForActivtyByPage_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public findProductsForActivtyByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACTIVTY_ID:
        if (value == null) {
          unsetActivtyId();
        } else {
          setActivtyId((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTIVTY_ID:
        return Long.valueOf(getActivtyId());

      case NAME:
        return getName();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACTIVTY_ID:
        return isSetActivtyId();
      case NAME:
        return isSetName();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProductsForActivtyByPage_args)
        return this.equals((findProductsForActivtyByPage_args)that);
      return false;
    }

    public boolean equals(findProductsForActivtyByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_activtyId = true;
      boolean that_present_activtyId = true;
      if (this_present_activtyId || that_present_activtyId) {
        if (!(this_present_activtyId && that_present_activtyId))
          return false;
        if (this.activtyId != that.activtyId)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_activtyId = true;
      list.add(present_activtyId);
      if (present_activtyId)
        list.add(activtyId);

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProductsForActivtyByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetActivtyId()).compareTo(other.isSetActivtyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActivtyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activtyId, other.activtyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProductsForActivtyByPage_args(");
      boolean first = true;

      sb.append("activtyId:");
      sb.append(this.activtyId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProductsForActivtyByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findProductsForActivtyByPage_argsStandardScheme getScheme() {
        return new findProductsForActivtyByPage_argsStandardScheme();
      }
    }

    private static class findProductsForActivtyByPage_argsStandardScheme extends StandardScheme<findProductsForActivtyByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProductsForActivtyByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTIVTY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.activtyId = iprot.readI64();
                struct.setActivtyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProductsForActivtyByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ACTIVTY_ID_FIELD_DESC);
        oprot.writeI64(struct.activtyId);
        oprot.writeFieldEnd();
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProductsForActivtyByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findProductsForActivtyByPage_argsTupleScheme getScheme() {
        return new findProductsForActivtyByPage_argsTupleScheme();
      }
    }

    private static class findProductsForActivtyByPage_argsTupleScheme extends TupleScheme<findProductsForActivtyByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProductsForActivtyByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetActivtyId()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetPageVo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetActivtyId()) {
          oprot.writeI64(struct.activtyId);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProductsForActivtyByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.activtyId = iprot.readI64();
          struct.setActivtyIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class findProductsForActivtyByPage_result implements org.apache.thrift.TBase<findProductsForActivtyByPage_result, findProductsForActivtyByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findProductsForActivtyByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProductsForActivtyByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProductsForActivtyByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProductsForActivtyByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ActivityProductPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ActivityProductPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProductsForActivtyByPage_result.class, metaDataMap);
    }

    public findProductsForActivtyByPage_result() {
    }

    public findProductsForActivtyByPage_result(
      com.froad.thrift.vo.ActivityProductPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProductsForActivtyByPage_result(findProductsForActivtyByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ActivityProductPageVo(other.success);
      }
    }

    public findProductsForActivtyByPage_result deepCopy() {
      return new findProductsForActivtyByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ActivityProductPageVo getSuccess() {
      return this.success;
    }

    public findProductsForActivtyByPage_result setSuccess(com.froad.thrift.vo.ActivityProductPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ActivityProductPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProductsForActivtyByPage_result)
        return this.equals((findProductsForActivtyByPage_result)that);
      return false;
    }

    public boolean equals(findProductsForActivtyByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProductsForActivtyByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProductsForActivtyByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProductsForActivtyByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findProductsForActivtyByPage_resultStandardScheme getScheme() {
        return new findProductsForActivtyByPage_resultStandardScheme();
      }
    }

    private static class findProductsForActivtyByPage_resultStandardScheme extends StandardScheme<findProductsForActivtyByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProductsForActivtyByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ActivityProductPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProductsForActivtyByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProductsForActivtyByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findProductsForActivtyByPage_resultTupleScheme getScheme() {
        return new findProductsForActivtyByPage_resultTupleScheme();
      }
    }

    private static class findProductsForActivtyByPage_resultTupleScheme extends TupleScheme<findProductsForActivtyByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProductsForActivtyByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProductsForActivtyByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ActivityProductPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findProductsForAreaByPage_args implements org.apache.thrift.TBase<findProductsForAreaByPage_args, findProductsForAreaByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findProductsForAreaByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProductsForAreaByPage_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cityId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProductsForAreaByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProductsForAreaByPage_argsTupleSchemeFactory());
    }

    public String productId; // required
    public long cityId; // required
    public String clientId; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ID((short)1, "productId"),
      CITY_ID((short)2, "cityId"),
      CLIENT_ID((short)3, "clientId"),
      PAGE_VO((short)4, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ID
            return PRODUCT_ID;
          case 2: // CITY_ID
            return CITY_ID;
          case 3: // CLIENT_ID
            return CLIENT_ID;
          case 4: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CITYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("cityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProductsForAreaByPage_args.class, metaDataMap);
    }

    public findProductsForAreaByPage_args() {
    }

    public findProductsForAreaByPage_args(
      String productId,
      long cityId,
      String clientId,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.productId = productId;
      this.cityId = cityId;
      setCityIdIsSet(true);
      this.clientId = clientId;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProductsForAreaByPage_args(findProductsForAreaByPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
      this.cityId = other.cityId;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public findProductsForAreaByPage_args deepCopy() {
      return new findProductsForAreaByPage_args(this);
    }

    @Override
    public void clear() {
      this.productId = null;
      setCityIdIsSet(false);
      this.cityId = 0;
      this.clientId = null;
      this.pageVo = null;
    }

    public String getProductId() {
      return this.productId;
    }

    public findProductsForAreaByPage_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public long getCityId() {
      return this.cityId;
    }

    public findProductsForAreaByPage_args setCityId(long cityId) {
      this.cityId = cityId;
      setCityIdIsSet(true);
      return this;
    }

    public void unsetCityId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CITYID_ISSET_ID);
    }

    /** Returns true if field cityId is set (has been assigned a value) and false otherwise */
    public boolean isSetCityId() {
      return EncodingUtils.testBit(__isset_bitfield, __CITYID_ISSET_ID);
    }

    public void setCityIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CITYID_ISSET_ID, value);
    }

    public String getClientId() {
      return this.clientId;
    }

    public findProductsForAreaByPage_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public findProductsForAreaByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      case CITY_ID:
        if (value == null) {
          unsetCityId();
        } else {
          setCityId((Long)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ID:
        return getProductId();

      case CITY_ID:
        return Long.valueOf(getCityId());

      case CLIENT_ID:
        return getClientId();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ID:
        return isSetProductId();
      case CITY_ID:
        return isSetCityId();
      case CLIENT_ID:
        return isSetClientId();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProductsForAreaByPage_args)
        return this.equals((findProductsForAreaByPage_args)that);
      return false;
    }

    public boolean equals(findProductsForAreaByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      boolean this_present_cityId = true;
      boolean that_present_cityId = true;
      if (this_present_cityId || that_present_cityId) {
        if (!(this_present_cityId && that_present_cityId))
          return false;
        if (this.cityId != that.cityId)
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      boolean present_cityId = true;
      list.add(present_cityId);
      if (present_cityId)
        list.add(cityId);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProductsForAreaByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCityId()).compareTo(other.isSetCityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityId, other.cityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProductsForAreaByPage_args(");
      boolean first = true;

      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cityId:");
      sb.append(this.cityId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProductsForAreaByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findProductsForAreaByPage_argsStandardScheme getScheme() {
        return new findProductsForAreaByPage_argsStandardScheme();
      }
    }

    private static class findProductsForAreaByPage_argsStandardScheme extends StandardScheme<findProductsForAreaByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProductsForAreaByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.cityId = iprot.readI64();
                struct.setCityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProductsForAreaByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CITY_ID_FIELD_DESC);
        oprot.writeI64(struct.cityId);
        oprot.writeFieldEnd();
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProductsForAreaByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findProductsForAreaByPage_argsTupleScheme getScheme() {
        return new findProductsForAreaByPage_argsTupleScheme();
      }
    }

    private static class findProductsForAreaByPage_argsTupleScheme extends TupleScheme<findProductsForAreaByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProductsForAreaByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductId()) {
          optionals.set(0);
        }
        if (struct.isSetCityId()) {
          optionals.set(1);
        }
        if (struct.isSetClientId()) {
          optionals.set(2);
        }
        if (struct.isSetPageVo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
        if (struct.isSetCityId()) {
          oprot.writeI64(struct.cityId);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProductsForAreaByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cityId = iprot.readI64();
          struct.setCityIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class findProductsForAreaByPage_result implements org.apache.thrift.TBase<findProductsForAreaByPage_result, findProductsForAreaByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findProductsForAreaByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProductsForAreaByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProductsForAreaByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProductsForAreaByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductOutletPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductOutletPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProductsForAreaByPage_result.class, metaDataMap);
    }

    public findProductsForAreaByPage_result() {
    }

    public findProductsForAreaByPage_result(
      com.froad.thrift.vo.ProductOutletPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProductsForAreaByPage_result(findProductsForAreaByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductOutletPageVo(other.success);
      }
    }

    public findProductsForAreaByPage_result deepCopy() {
      return new findProductsForAreaByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductOutletPageVo getSuccess() {
      return this.success;
    }

    public findProductsForAreaByPage_result setSuccess(com.froad.thrift.vo.ProductOutletPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductOutletPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProductsForAreaByPage_result)
        return this.equals((findProductsForAreaByPage_result)that);
      return false;
    }

    public boolean equals(findProductsForAreaByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProductsForAreaByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProductsForAreaByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProductsForAreaByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findProductsForAreaByPage_resultStandardScheme getScheme() {
        return new findProductsForAreaByPage_resultStandardScheme();
      }
    }

    private static class findProductsForAreaByPage_resultStandardScheme extends StandardScheme<findProductsForAreaByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProductsForAreaByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductOutletPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProductsForAreaByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProductsForAreaByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findProductsForAreaByPage_resultTupleScheme getScheme() {
        return new findProductsForAreaByPage_resultTupleScheme();
      }
    }

    private static class findProductsForAreaByPage_resultTupleScheme extends TupleScheme<findProductsForAreaByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProductsForAreaByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProductsForAreaByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductOutletPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAreaForCityByList_args implements org.apache.thrift.TBase<findAreaForCityByList_args, findAreaForCityByList_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAreaForCityByList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAreaForCityByList_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cityId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAreaForCityByList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAreaForCityByList_argsTupleSchemeFactory());
    }

    public String productId; // required
    public long cityId; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ID((short)1, "productId"),
      CITY_ID((short)2, "cityId"),
      CLIENT_ID((short)3, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ID
            return PRODUCT_ID;
          case 2: // CITY_ID
            return CITY_ID;
          case 3: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CITYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("cityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAreaForCityByList_args.class, metaDataMap);
    }

    public findAreaForCityByList_args() {
    }

    public findAreaForCityByList_args(
      String productId,
      long cityId,
      String clientId)
    {
      this();
      this.productId = productId;
      this.cityId = cityId;
      setCityIdIsSet(true);
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAreaForCityByList_args(findAreaForCityByList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
      this.cityId = other.cityId;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public findAreaForCityByList_args deepCopy() {
      return new findAreaForCityByList_args(this);
    }

    @Override
    public void clear() {
      this.productId = null;
      setCityIdIsSet(false);
      this.cityId = 0;
      this.clientId = null;
    }

    public String getProductId() {
      return this.productId;
    }

    public findAreaForCityByList_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public long getCityId() {
      return this.cityId;
    }

    public findAreaForCityByList_args setCityId(long cityId) {
      this.cityId = cityId;
      setCityIdIsSet(true);
      return this;
    }

    public void unsetCityId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CITYID_ISSET_ID);
    }

    /** Returns true if field cityId is set (has been assigned a value) and false otherwise */
    public boolean isSetCityId() {
      return EncodingUtils.testBit(__isset_bitfield, __CITYID_ISSET_ID);
    }

    public void setCityIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CITYID_ISSET_ID, value);
    }

    public String getClientId() {
      return this.clientId;
    }

    public findAreaForCityByList_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      case CITY_ID:
        if (value == null) {
          unsetCityId();
        } else {
          setCityId((Long)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ID:
        return getProductId();

      case CITY_ID:
        return Long.valueOf(getCityId());

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ID:
        return isSetProductId();
      case CITY_ID:
        return isSetCityId();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAreaForCityByList_args)
        return this.equals((findAreaForCityByList_args)that);
      return false;
    }

    public boolean equals(findAreaForCityByList_args that) {
      if (that == null)
        return false;

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      boolean this_present_cityId = true;
      boolean that_present_cityId = true;
      if (this_present_cityId || that_present_cityId) {
        if (!(this_present_cityId && that_present_cityId))
          return false;
        if (this.cityId != that.cityId)
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      boolean present_cityId = true;
      list.add(present_cityId);
      if (present_cityId)
        list.add(cityId);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAreaForCityByList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCityId()).compareTo(other.isSetCityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityId, other.cityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAreaForCityByList_args(");
      boolean first = true;

      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cityId:");
      sb.append(this.cityId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAreaForCityByList_argsStandardSchemeFactory implements SchemeFactory {
      public findAreaForCityByList_argsStandardScheme getScheme() {
        return new findAreaForCityByList_argsStandardScheme();
      }
    }

    private static class findAreaForCityByList_argsStandardScheme extends StandardScheme<findAreaForCityByList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAreaForCityByList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.cityId = iprot.readI64();
                struct.setCityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAreaForCityByList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CITY_ID_FIELD_DESC);
        oprot.writeI64(struct.cityId);
        oprot.writeFieldEnd();
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAreaForCityByList_argsTupleSchemeFactory implements SchemeFactory {
      public findAreaForCityByList_argsTupleScheme getScheme() {
        return new findAreaForCityByList_argsTupleScheme();
      }
    }

    private static class findAreaForCityByList_argsTupleScheme extends TupleScheme<findAreaForCityByList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAreaForCityByList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductId()) {
          optionals.set(0);
        }
        if (struct.isSetCityId()) {
          optionals.set(1);
        }
        if (struct.isSetClientId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
        if (struct.isSetCityId()) {
          oprot.writeI64(struct.cityId);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAreaForCityByList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cityId = iprot.readI64();
          struct.setCityIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class findAreaForCityByList_result implements org.apache.thrift.TBase<findAreaForCityByList_result, findAreaForCityByList_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAreaForCityByList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAreaForCityByList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAreaForCityByList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAreaForCityByList_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.AreaVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AreaVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAreaForCityByList_result.class, metaDataMap);
    }

    public findAreaForCityByList_result() {
    }

    public findAreaForCityByList_result(
      List<com.froad.thrift.vo.AreaVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAreaForCityByList_result(findAreaForCityByList_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.AreaVo> __this__success = new ArrayList<com.froad.thrift.vo.AreaVo>(other.success.size());
        for (com.froad.thrift.vo.AreaVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.AreaVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAreaForCityByList_result deepCopy() {
      return new findAreaForCityByList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.AreaVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.AreaVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.AreaVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.AreaVo> getSuccess() {
      return this.success;
    }

    public findAreaForCityByList_result setSuccess(List<com.froad.thrift.vo.AreaVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.AreaVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAreaForCityByList_result)
        return this.equals((findAreaForCityByList_result)that);
      return false;
    }

    public boolean equals(findAreaForCityByList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAreaForCityByList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAreaForCityByList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAreaForCityByList_resultStandardSchemeFactory implements SchemeFactory {
      public findAreaForCityByList_resultStandardScheme getScheme() {
        return new findAreaForCityByList_resultStandardScheme();
      }
    }

    private static class findAreaForCityByList_resultStandardScheme extends StandardScheme<findAreaForCityByList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAreaForCityByList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.AreaVo>(_list152.size);
                  com.froad.thrift.vo.AreaVo _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = new com.froad.thrift.vo.AreaVo();
                    _elem153.read(iprot);
                    struct.success.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAreaForCityByList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.AreaVo _iter155 : struct.success)
            {
              _iter155.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAreaForCityByList_resultTupleSchemeFactory implements SchemeFactory {
      public findAreaForCityByList_resultTupleScheme getScheme() {
        return new findAreaForCityByList_resultTupleScheme();
      }
    }

    private static class findAreaForCityByList_resultTupleScheme extends TupleScheme<findAreaForCityByList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAreaForCityByList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.AreaVo _iter156 : struct.success)
            {
              _iter156.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAreaForCityByList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.AreaVo>(_list157.size);
            com.froad.thrift.vo.AreaVo _elem158;
            for (int _i159 = 0; _i159 < _list157.size; ++_i159)
            {
              _elem158 = new com.froad.thrift.vo.AreaVo();
              _elem158.read(iprot);
              struct.success.add(_elem158);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryVipPresellProducts_args implements org.apache.thrift.TBase<queryVipPresellProducts_args, queryVipPresellProducts_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryVipPresellProducts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVipPresellProducts_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_FILTER_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("productFilterVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVipPresellProducts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVipPresellProducts_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_FILTER_VO_REQ((short)1, "productFilterVoReq"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_FILTER_VO_REQ
            return PRODUCT_FILTER_VO_REQ;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_FILTER_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("productFilterVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductFilterVoReq.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVipPresellProducts_args.class, metaDataMap);
    }

    public queryVipPresellProducts_args() {
    }

    public queryVipPresellProducts_args(
      com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.productFilterVoReq = productFilterVoReq;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVipPresellProducts_args(queryVipPresellProducts_args other) {
      if (other.isSetProductFilterVoReq()) {
        this.productFilterVoReq = new com.froad.thrift.vo.ProductFilterVoReq(other.productFilterVoReq);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public queryVipPresellProducts_args deepCopy() {
      return new queryVipPresellProducts_args(this);
    }

    @Override
    public void clear() {
      this.productFilterVoReq = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.ProductFilterVoReq getProductFilterVoReq() {
      return this.productFilterVoReq;
    }

    public queryVipPresellProducts_args setProductFilterVoReq(com.froad.thrift.vo.ProductFilterVoReq productFilterVoReq) {
      this.productFilterVoReq = productFilterVoReq;
      return this;
    }

    public void unsetProductFilterVoReq() {
      this.productFilterVoReq = null;
    }

    /** Returns true if field productFilterVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetProductFilterVoReq() {
      return this.productFilterVoReq != null;
    }

    public void setProductFilterVoReqIsSet(boolean value) {
      if (!value) {
        this.productFilterVoReq = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public queryVipPresellProducts_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_FILTER_VO_REQ:
        if (value == null) {
          unsetProductFilterVoReq();
        } else {
          setProductFilterVoReq((com.froad.thrift.vo.ProductFilterVoReq)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_FILTER_VO_REQ:
        return getProductFilterVoReq();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_FILTER_VO_REQ:
        return isSetProductFilterVoReq();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVipPresellProducts_args)
        return this.equals((queryVipPresellProducts_args)that);
      return false;
    }

    public boolean equals(queryVipPresellProducts_args that) {
      if (that == null)
        return false;

      boolean this_present_productFilterVoReq = true && this.isSetProductFilterVoReq();
      boolean that_present_productFilterVoReq = true && that.isSetProductFilterVoReq();
      if (this_present_productFilterVoReq || that_present_productFilterVoReq) {
        if (!(this_present_productFilterVoReq && that_present_productFilterVoReq))
          return false;
        if (!this.productFilterVoReq.equals(that.productFilterVoReq))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productFilterVoReq = true && (isSetProductFilterVoReq());
      list.add(present_productFilterVoReq);
      if (present_productFilterVoReq)
        list.add(productFilterVoReq);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVipPresellProducts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductFilterVoReq()).compareTo(other.isSetProductFilterVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductFilterVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productFilterVoReq, other.productFilterVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVipPresellProducts_args(");
      boolean first = true;

      sb.append("productFilterVoReq:");
      if (this.productFilterVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.productFilterVoReq);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productFilterVoReq != null) {
        productFilterVoReq.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVipPresellProducts_argsStandardSchemeFactory implements SchemeFactory {
      public queryVipPresellProducts_argsStandardScheme getScheme() {
        return new queryVipPresellProducts_argsStandardScheme();
      }
    }

    private static class queryVipPresellProducts_argsStandardScheme extends StandardScheme<queryVipPresellProducts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVipPresellProducts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_FILTER_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productFilterVoReq = new com.froad.thrift.vo.ProductFilterVoReq();
                struct.productFilterVoReq.read(iprot);
                struct.setProductFilterVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVipPresellProducts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productFilterVoReq != null) {
          oprot.writeFieldBegin(PRODUCT_FILTER_VO_REQ_FIELD_DESC);
          struct.productFilterVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVipPresellProducts_argsTupleSchemeFactory implements SchemeFactory {
      public queryVipPresellProducts_argsTupleScheme getScheme() {
        return new queryVipPresellProducts_argsTupleScheme();
      }
    }

    private static class queryVipPresellProducts_argsTupleScheme extends TupleScheme<queryVipPresellProducts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVipPresellProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductFilterVoReq()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductFilterVoReq()) {
          struct.productFilterVoReq.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVipPresellProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productFilterVoReq = new com.froad.thrift.vo.ProductFilterVoReq();
          struct.productFilterVoReq.read(iprot);
          struct.setProductFilterVoReqIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class queryVipPresellProducts_result implements org.apache.thrift.TBase<queryVipPresellProducts_result, queryVipPresellProducts_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryVipPresellProducts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryVipPresellProducts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryVipPresellProducts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryVipPresellProducts_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductBriefPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductBriefPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryVipPresellProducts_result.class, metaDataMap);
    }

    public queryVipPresellProducts_result() {
    }

    public queryVipPresellProducts_result(
      com.froad.thrift.vo.ProductBriefPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryVipPresellProducts_result(queryVipPresellProducts_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductBriefPageVoRes(other.success);
      }
    }

    public queryVipPresellProducts_result deepCopy() {
      return new queryVipPresellProducts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductBriefPageVoRes getSuccess() {
      return this.success;
    }

    public queryVipPresellProducts_result setSuccess(com.froad.thrift.vo.ProductBriefPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductBriefPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryVipPresellProducts_result)
        return this.equals((queryVipPresellProducts_result)that);
      return false;
    }

    public boolean equals(queryVipPresellProducts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryVipPresellProducts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryVipPresellProducts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryVipPresellProducts_resultStandardSchemeFactory implements SchemeFactory {
      public queryVipPresellProducts_resultStandardScheme getScheme() {
        return new queryVipPresellProducts_resultStandardScheme();
      }
    }

    private static class queryVipPresellProducts_resultStandardScheme extends StandardScheme<queryVipPresellProducts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryVipPresellProducts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductBriefPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryVipPresellProducts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryVipPresellProducts_resultTupleSchemeFactory implements SchemeFactory {
      public queryVipPresellProducts_resultTupleScheme getScheme() {
        return new queryVipPresellProducts_resultTupleScheme();
      }
    }

    private static class queryVipPresellProducts_resultTupleScheme extends TupleScheme<queryVipPresellProducts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryVipPresellProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryVipPresellProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductBriefPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryGroupProducts_args implements org.apache.thrift.TBase<queryGroupProducts_args, queryGroupProducts_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryGroupProducts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryGroupProducts_args");

    private static final org.apache.thrift.protocol.TField FILTER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("filterVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FILED_SORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("filedSorts", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryGroupProducts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryGroupProducts_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.QueryProductFilterVo filterVo; // required
    public List<com.froad.thrift.vo.FiledSort> filedSorts; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILTER_VO((short)1, "filterVo"),
      FILED_SORTS((short)2, "filedSorts"),
      PAGE_VO((short)3, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILTER_VO
            return FILTER_VO;
          case 2: // FILED_SORTS
            return FILED_SORTS;
          case 3: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILTER_VO, new org.apache.thrift.meta_data.FieldMetaData("filterVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.QueryProductFilterVo.class)));
      tmpMap.put(_Fields.FILED_SORTS, new org.apache.thrift.meta_data.FieldMetaData("filedSorts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.FiledSort.class))));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryGroupProducts_args.class, metaDataMap);
    }

    public queryGroupProducts_args() {
    }

    public queryGroupProducts_args(
      com.froad.thrift.vo.QueryProductFilterVo filterVo,
      List<com.froad.thrift.vo.FiledSort> filedSorts,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.filterVo = filterVo;
      this.filedSorts = filedSorts;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryGroupProducts_args(queryGroupProducts_args other) {
      if (other.isSetFilterVo()) {
        this.filterVo = new com.froad.thrift.vo.QueryProductFilterVo(other.filterVo);
      }
      if (other.isSetFiledSorts()) {
        List<com.froad.thrift.vo.FiledSort> __this__filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>(other.filedSorts.size());
        for (com.froad.thrift.vo.FiledSort other_element : other.filedSorts) {
          __this__filedSorts.add(new com.froad.thrift.vo.FiledSort(other_element));
        }
        this.filedSorts = __this__filedSorts;
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public queryGroupProducts_args deepCopy() {
      return new queryGroupProducts_args(this);
    }

    @Override
    public void clear() {
      this.filterVo = null;
      this.filedSorts = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.QueryProductFilterVo getFilterVo() {
      return this.filterVo;
    }

    public queryGroupProducts_args setFilterVo(com.froad.thrift.vo.QueryProductFilterVo filterVo) {
      this.filterVo = filterVo;
      return this;
    }

    public void unsetFilterVo() {
      this.filterVo = null;
    }

    /** Returns true if field filterVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFilterVo() {
      return this.filterVo != null;
    }

    public void setFilterVoIsSet(boolean value) {
      if (!value) {
        this.filterVo = null;
      }
    }

    public int getFiledSortsSize() {
      return (this.filedSorts == null) ? 0 : this.filedSorts.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.FiledSort> getFiledSortsIterator() {
      return (this.filedSorts == null) ? null : this.filedSorts.iterator();
    }

    public void addToFiledSorts(com.froad.thrift.vo.FiledSort elem) {
      if (this.filedSorts == null) {
        this.filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>();
      }
      this.filedSorts.add(elem);
    }

    public List<com.froad.thrift.vo.FiledSort> getFiledSorts() {
      return this.filedSorts;
    }

    public queryGroupProducts_args setFiledSorts(List<com.froad.thrift.vo.FiledSort> filedSorts) {
      this.filedSorts = filedSorts;
      return this;
    }

    public void unsetFiledSorts() {
      this.filedSorts = null;
    }

    /** Returns true if field filedSorts is set (has been assigned a value) and false otherwise */
    public boolean isSetFiledSorts() {
      return this.filedSorts != null;
    }

    public void setFiledSortsIsSet(boolean value) {
      if (!value) {
        this.filedSorts = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public queryGroupProducts_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILTER_VO:
        if (value == null) {
          unsetFilterVo();
        } else {
          setFilterVo((com.froad.thrift.vo.QueryProductFilterVo)value);
        }
        break;

      case FILED_SORTS:
        if (value == null) {
          unsetFiledSorts();
        } else {
          setFiledSorts((List<com.froad.thrift.vo.FiledSort>)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILTER_VO:
        return getFilterVo();

      case FILED_SORTS:
        return getFiledSorts();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILTER_VO:
        return isSetFilterVo();
      case FILED_SORTS:
        return isSetFiledSorts();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryGroupProducts_args)
        return this.equals((queryGroupProducts_args)that);
      return false;
    }

    public boolean equals(queryGroupProducts_args that) {
      if (that == null)
        return false;

      boolean this_present_filterVo = true && this.isSetFilterVo();
      boolean that_present_filterVo = true && that.isSetFilterVo();
      if (this_present_filterVo || that_present_filterVo) {
        if (!(this_present_filterVo && that_present_filterVo))
          return false;
        if (!this.filterVo.equals(that.filterVo))
          return false;
      }

      boolean this_present_filedSorts = true && this.isSetFiledSorts();
      boolean that_present_filedSorts = true && that.isSetFiledSorts();
      if (this_present_filedSorts || that_present_filedSorts) {
        if (!(this_present_filedSorts && that_present_filedSorts))
          return false;
        if (!this.filedSorts.equals(that.filedSorts))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_filterVo = true && (isSetFilterVo());
      list.add(present_filterVo);
      if (present_filterVo)
        list.add(filterVo);

      boolean present_filedSorts = true && (isSetFiledSorts());
      list.add(present_filedSorts);
      if (present_filedSorts)
        list.add(filedSorts);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryGroupProducts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFilterVo()).compareTo(other.isSetFilterVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilterVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterVo, other.filterVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFiledSorts()).compareTo(other.isSetFiledSorts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFiledSorts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filedSorts, other.filedSorts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryGroupProducts_args(");
      boolean first = true;

      sb.append("filterVo:");
      if (this.filterVo == null) {
        sb.append("null");
      } else {
        sb.append(this.filterVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filedSorts:");
      if (this.filedSorts == null) {
        sb.append("null");
      } else {
        sb.append(this.filedSorts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (filterVo != null) {
        filterVo.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryGroupProducts_argsStandardSchemeFactory implements SchemeFactory {
      public queryGroupProducts_argsStandardScheme getScheme() {
        return new queryGroupProducts_argsStandardScheme();
      }
    }

    private static class queryGroupProducts_argsStandardScheme extends StandardScheme<queryGroupProducts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryGroupProducts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILTER_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.filterVo = new com.froad.thrift.vo.QueryProductFilterVo();
                struct.filterVo.read(iprot);
                struct.setFilterVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILED_SORTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>(_list160.size);
                  com.froad.thrift.vo.FiledSort _elem161;
                  for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                  {
                    _elem161 = new com.froad.thrift.vo.FiledSort();
                    _elem161.read(iprot);
                    struct.filedSorts.add(_elem161);
                  }
                  iprot.readListEnd();
                }
                struct.setFiledSortsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryGroupProducts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filterVo != null) {
          oprot.writeFieldBegin(FILTER_VO_FIELD_DESC);
          struct.filterVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.filedSorts != null) {
          oprot.writeFieldBegin(FILED_SORTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.filedSorts.size()));
            for (com.froad.thrift.vo.FiledSort _iter163 : struct.filedSorts)
            {
              _iter163.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryGroupProducts_argsTupleSchemeFactory implements SchemeFactory {
      public queryGroupProducts_argsTupleScheme getScheme() {
        return new queryGroupProducts_argsTupleScheme();
      }
    }

    private static class queryGroupProducts_argsTupleScheme extends TupleScheme<queryGroupProducts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryGroupProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilterVo()) {
          optionals.set(0);
        }
        if (struct.isSetFiledSorts()) {
          optionals.set(1);
        }
        if (struct.isSetPageVo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFilterVo()) {
          struct.filterVo.write(oprot);
        }
        if (struct.isSetFiledSorts()) {
          {
            oprot.writeI32(struct.filedSorts.size());
            for (com.froad.thrift.vo.FiledSort _iter164 : struct.filedSorts)
            {
              _iter164.write(oprot);
            }
          }
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryGroupProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.filterVo = new com.froad.thrift.vo.QueryProductFilterVo();
          struct.filterVo.read(iprot);
          struct.setFilterVoIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>(_list165.size);
            com.froad.thrift.vo.FiledSort _elem166;
            for (int _i167 = 0; _i167 < _list165.size; ++_i167)
            {
              _elem166 = new com.froad.thrift.vo.FiledSort();
              _elem166.read(iprot);
              struct.filedSorts.add(_elem166);
            }
          }
          struct.setFiledSortsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class queryGroupProducts_result implements org.apache.thrift.TBase<queryGroupProducts_result, queryGroupProducts_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryGroupProducts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryGroupProducts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryGroupProducts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryGroupProducts_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.GroupProductPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.GroupProductPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryGroupProducts_result.class, metaDataMap);
    }

    public queryGroupProducts_result() {
    }

    public queryGroupProducts_result(
      com.froad.thrift.vo.GroupProductPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryGroupProducts_result(queryGroupProducts_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.GroupProductPageVoRes(other.success);
      }
    }

    public queryGroupProducts_result deepCopy() {
      return new queryGroupProducts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.GroupProductPageVoRes getSuccess() {
      return this.success;
    }

    public queryGroupProducts_result setSuccess(com.froad.thrift.vo.GroupProductPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.GroupProductPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryGroupProducts_result)
        return this.equals((queryGroupProducts_result)that);
      return false;
    }

    public boolean equals(queryGroupProducts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryGroupProducts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryGroupProducts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryGroupProducts_resultStandardSchemeFactory implements SchemeFactory {
      public queryGroupProducts_resultStandardScheme getScheme() {
        return new queryGroupProducts_resultStandardScheme();
      }
    }

    private static class queryGroupProducts_resultStandardScheme extends StandardScheme<queryGroupProducts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryGroupProducts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.GroupProductPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryGroupProducts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryGroupProducts_resultTupleSchemeFactory implements SchemeFactory {
      public queryGroupProducts_resultTupleScheme getScheme() {
        return new queryGroupProducts_resultTupleScheme();
      }
    }

    private static class queryGroupProducts_resultTupleScheme extends TupleScheme<queryGroupProducts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryGroupProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryGroupProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.GroupProductPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryMerchantProducts_args implements org.apache.thrift.TBase<queryMerchantProducts_args, queryMerchantProducts_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryMerchantProducts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMerchantProducts_args");

    private static final org.apache.thrift.protocol.TField FILTER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("filterVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FILED_SORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("filedSorts", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMerchantProducts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMerchantProducts_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.QueryProductFilterVo filterVo; // required
    public List<com.froad.thrift.vo.FiledSort> filedSorts; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILTER_VO((short)1, "filterVo"),
      FILED_SORTS((short)2, "filedSorts"),
      PAGE_VO((short)3, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILTER_VO
            return FILTER_VO;
          case 2: // FILED_SORTS
            return FILED_SORTS;
          case 3: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILTER_VO, new org.apache.thrift.meta_data.FieldMetaData("filterVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.QueryProductFilterVo.class)));
      tmpMap.put(_Fields.FILED_SORTS, new org.apache.thrift.meta_data.FieldMetaData("filedSorts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.FiledSort.class))));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMerchantProducts_args.class, metaDataMap);
    }

    public queryMerchantProducts_args() {
    }

    public queryMerchantProducts_args(
      com.froad.thrift.vo.QueryProductFilterVo filterVo,
      List<com.froad.thrift.vo.FiledSort> filedSorts,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.filterVo = filterVo;
      this.filedSorts = filedSorts;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMerchantProducts_args(queryMerchantProducts_args other) {
      if (other.isSetFilterVo()) {
        this.filterVo = new com.froad.thrift.vo.QueryProductFilterVo(other.filterVo);
      }
      if (other.isSetFiledSorts()) {
        List<com.froad.thrift.vo.FiledSort> __this__filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>(other.filedSorts.size());
        for (com.froad.thrift.vo.FiledSort other_element : other.filedSorts) {
          __this__filedSorts.add(new com.froad.thrift.vo.FiledSort(other_element));
        }
        this.filedSorts = __this__filedSorts;
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public queryMerchantProducts_args deepCopy() {
      return new queryMerchantProducts_args(this);
    }

    @Override
    public void clear() {
      this.filterVo = null;
      this.filedSorts = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.QueryProductFilterVo getFilterVo() {
      return this.filterVo;
    }

    public queryMerchantProducts_args setFilterVo(com.froad.thrift.vo.QueryProductFilterVo filterVo) {
      this.filterVo = filterVo;
      return this;
    }

    public void unsetFilterVo() {
      this.filterVo = null;
    }

    /** Returns true if field filterVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFilterVo() {
      return this.filterVo != null;
    }

    public void setFilterVoIsSet(boolean value) {
      if (!value) {
        this.filterVo = null;
      }
    }

    public int getFiledSortsSize() {
      return (this.filedSorts == null) ? 0 : this.filedSorts.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.FiledSort> getFiledSortsIterator() {
      return (this.filedSorts == null) ? null : this.filedSorts.iterator();
    }

    public void addToFiledSorts(com.froad.thrift.vo.FiledSort elem) {
      if (this.filedSorts == null) {
        this.filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>();
      }
      this.filedSorts.add(elem);
    }

    public List<com.froad.thrift.vo.FiledSort> getFiledSorts() {
      return this.filedSorts;
    }

    public queryMerchantProducts_args setFiledSorts(List<com.froad.thrift.vo.FiledSort> filedSorts) {
      this.filedSorts = filedSorts;
      return this;
    }

    public void unsetFiledSorts() {
      this.filedSorts = null;
    }

    /** Returns true if field filedSorts is set (has been assigned a value) and false otherwise */
    public boolean isSetFiledSorts() {
      return this.filedSorts != null;
    }

    public void setFiledSortsIsSet(boolean value) {
      if (!value) {
        this.filedSorts = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public queryMerchantProducts_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILTER_VO:
        if (value == null) {
          unsetFilterVo();
        } else {
          setFilterVo((com.froad.thrift.vo.QueryProductFilterVo)value);
        }
        break;

      case FILED_SORTS:
        if (value == null) {
          unsetFiledSorts();
        } else {
          setFiledSorts((List<com.froad.thrift.vo.FiledSort>)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILTER_VO:
        return getFilterVo();

      case FILED_SORTS:
        return getFiledSorts();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILTER_VO:
        return isSetFilterVo();
      case FILED_SORTS:
        return isSetFiledSorts();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMerchantProducts_args)
        return this.equals((queryMerchantProducts_args)that);
      return false;
    }

    public boolean equals(queryMerchantProducts_args that) {
      if (that == null)
        return false;

      boolean this_present_filterVo = true && this.isSetFilterVo();
      boolean that_present_filterVo = true && that.isSetFilterVo();
      if (this_present_filterVo || that_present_filterVo) {
        if (!(this_present_filterVo && that_present_filterVo))
          return false;
        if (!this.filterVo.equals(that.filterVo))
          return false;
      }

      boolean this_present_filedSorts = true && this.isSetFiledSorts();
      boolean that_present_filedSorts = true && that.isSetFiledSorts();
      if (this_present_filedSorts || that_present_filedSorts) {
        if (!(this_present_filedSorts && that_present_filedSorts))
          return false;
        if (!this.filedSorts.equals(that.filedSorts))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_filterVo = true && (isSetFilterVo());
      list.add(present_filterVo);
      if (present_filterVo)
        list.add(filterVo);

      boolean present_filedSorts = true && (isSetFiledSorts());
      list.add(present_filedSorts);
      if (present_filedSorts)
        list.add(filedSorts);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMerchantProducts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFilterVo()).compareTo(other.isSetFilterVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilterVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterVo, other.filterVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFiledSorts()).compareTo(other.isSetFiledSorts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFiledSorts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filedSorts, other.filedSorts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMerchantProducts_args(");
      boolean first = true;

      sb.append("filterVo:");
      if (this.filterVo == null) {
        sb.append("null");
      } else {
        sb.append(this.filterVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filedSorts:");
      if (this.filedSorts == null) {
        sb.append("null");
      } else {
        sb.append(this.filedSorts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (filterVo != null) {
        filterVo.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMerchantProducts_argsStandardSchemeFactory implements SchemeFactory {
      public queryMerchantProducts_argsStandardScheme getScheme() {
        return new queryMerchantProducts_argsStandardScheme();
      }
    }

    private static class queryMerchantProducts_argsStandardScheme extends StandardScheme<queryMerchantProducts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMerchantProducts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILTER_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.filterVo = new com.froad.thrift.vo.QueryProductFilterVo();
                struct.filterVo.read(iprot);
                struct.setFilterVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILED_SORTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>(_list168.size);
                  com.froad.thrift.vo.FiledSort _elem169;
                  for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                  {
                    _elem169 = new com.froad.thrift.vo.FiledSort();
                    _elem169.read(iprot);
                    struct.filedSorts.add(_elem169);
                  }
                  iprot.readListEnd();
                }
                struct.setFiledSortsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMerchantProducts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filterVo != null) {
          oprot.writeFieldBegin(FILTER_VO_FIELD_DESC);
          struct.filterVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.filedSorts != null) {
          oprot.writeFieldBegin(FILED_SORTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.filedSorts.size()));
            for (com.froad.thrift.vo.FiledSort _iter171 : struct.filedSorts)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMerchantProducts_argsTupleSchemeFactory implements SchemeFactory {
      public queryMerchantProducts_argsTupleScheme getScheme() {
        return new queryMerchantProducts_argsTupleScheme();
      }
    }

    private static class queryMerchantProducts_argsTupleScheme extends TupleScheme<queryMerchantProducts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMerchantProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilterVo()) {
          optionals.set(0);
        }
        if (struct.isSetFiledSorts()) {
          optionals.set(1);
        }
        if (struct.isSetPageVo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFilterVo()) {
          struct.filterVo.write(oprot);
        }
        if (struct.isSetFiledSorts()) {
          {
            oprot.writeI32(struct.filedSorts.size());
            for (com.froad.thrift.vo.FiledSort _iter172 : struct.filedSorts)
            {
              _iter172.write(oprot);
            }
          }
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMerchantProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.filterVo = new com.froad.thrift.vo.QueryProductFilterVo();
          struct.filterVo.read(iprot);
          struct.setFilterVoIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>(_list173.size);
            com.froad.thrift.vo.FiledSort _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = new com.froad.thrift.vo.FiledSort();
              _elem174.read(iprot);
              struct.filedSorts.add(_elem174);
            }
          }
          struct.setFiledSortsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class queryMerchantProducts_result implements org.apache.thrift.TBase<queryMerchantProducts_result, queryMerchantProducts_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryMerchantProducts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMerchantProducts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMerchantProducts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMerchantProducts_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantProductPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantProductPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMerchantProducts_result.class, metaDataMap);
    }

    public queryMerchantProducts_result() {
    }

    public queryMerchantProducts_result(
      com.froad.thrift.vo.MerchantProductPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMerchantProducts_result(queryMerchantProducts_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantProductPageVoRes(other.success);
      }
    }

    public queryMerchantProducts_result deepCopy() {
      return new queryMerchantProducts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantProductPageVoRes getSuccess() {
      return this.success;
    }

    public queryMerchantProducts_result setSuccess(com.froad.thrift.vo.MerchantProductPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantProductPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMerchantProducts_result)
        return this.equals((queryMerchantProducts_result)that);
      return false;
    }

    public boolean equals(queryMerchantProducts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMerchantProducts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMerchantProducts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMerchantProducts_resultStandardSchemeFactory implements SchemeFactory {
      public queryMerchantProducts_resultStandardScheme getScheme() {
        return new queryMerchantProducts_resultStandardScheme();
      }
    }

    private static class queryMerchantProducts_resultStandardScheme extends StandardScheme<queryMerchantProducts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMerchantProducts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantProductPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMerchantProducts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMerchantProducts_resultTupleSchemeFactory implements SchemeFactory {
      public queryMerchantProducts_resultTupleScheme getScheme() {
        return new queryMerchantProducts_resultTupleScheme();
      }
    }

    private static class queryMerchantProducts_resultTupleScheme extends TupleScheme<queryMerchantProducts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMerchantProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMerchantProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantProductPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findUrlCodeByList_args implements org.apache.thrift.TBase<findUrlCodeByList_args, findUrlCodeByList_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUrlCodeByList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUrlCodeByList_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("productList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUrlCodeByList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUrlCodeByList_argsTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ProductVo> productList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_LIST((short)1, "productList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_LIST
            return PRODUCT_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_LIST, new org.apache.thrift.meta_data.FieldMetaData("productList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUrlCodeByList_args.class, metaDataMap);
    }

    public findUrlCodeByList_args() {
    }

    public findUrlCodeByList_args(
      List<com.froad.thrift.vo.ProductVo> productList)
    {
      this();
      this.productList = productList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUrlCodeByList_args(findUrlCodeByList_args other) {
      if (other.isSetProductList()) {
        List<com.froad.thrift.vo.ProductVo> __this__productList = new ArrayList<com.froad.thrift.vo.ProductVo>(other.productList.size());
        for (com.froad.thrift.vo.ProductVo other_element : other.productList) {
          __this__productList.add(new com.froad.thrift.vo.ProductVo(other_element));
        }
        this.productList = __this__productList;
      }
    }

    public findUrlCodeByList_args deepCopy() {
      return new findUrlCodeByList_args(this);
    }

    @Override
    public void clear() {
      this.productList = null;
    }

    public int getProductListSize() {
      return (this.productList == null) ? 0 : this.productList.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductVo> getProductListIterator() {
      return (this.productList == null) ? null : this.productList.iterator();
    }

    public void addToProductList(com.froad.thrift.vo.ProductVo elem) {
      if (this.productList == null) {
        this.productList = new ArrayList<com.froad.thrift.vo.ProductVo>();
      }
      this.productList.add(elem);
    }

    public List<com.froad.thrift.vo.ProductVo> getProductList() {
      return this.productList;
    }

    public findUrlCodeByList_args setProductList(List<com.froad.thrift.vo.ProductVo> productList) {
      this.productList = productList;
      return this;
    }

    public void unsetProductList() {
      this.productList = null;
    }

    /** Returns true if field productList is set (has been assigned a value) and false otherwise */
    public boolean isSetProductList() {
      return this.productList != null;
    }

    public void setProductListIsSet(boolean value) {
      if (!value) {
        this.productList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_LIST:
        if (value == null) {
          unsetProductList();
        } else {
          setProductList((List<com.froad.thrift.vo.ProductVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_LIST:
        return getProductList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_LIST:
        return isSetProductList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUrlCodeByList_args)
        return this.equals((findUrlCodeByList_args)that);
      return false;
    }

    public boolean equals(findUrlCodeByList_args that) {
      if (that == null)
        return false;

      boolean this_present_productList = true && this.isSetProductList();
      boolean that_present_productList = true && that.isSetProductList();
      if (this_present_productList || that_present_productList) {
        if (!(this_present_productList && that_present_productList))
          return false;
        if (!this.productList.equals(that.productList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productList = true && (isSetProductList());
      list.add(present_productList);
      if (present_productList)
        list.add(productList);

      return list.hashCode();
    }

    @Override
    public int compareTo(findUrlCodeByList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductList()).compareTo(other.isSetProductList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productList, other.productList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUrlCodeByList_args(");
      boolean first = true;

      sb.append("productList:");
      if (this.productList == null) {
        sb.append("null");
      } else {
        sb.append(this.productList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUrlCodeByList_argsStandardSchemeFactory implements SchemeFactory {
      public findUrlCodeByList_argsStandardScheme getScheme() {
        return new findUrlCodeByList_argsStandardScheme();
      }
    }

    private static class findUrlCodeByList_argsStandardScheme extends StandardScheme<findUrlCodeByList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUrlCodeByList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.productList = new ArrayList<com.froad.thrift.vo.ProductVo>(_list176.size);
                  com.froad.thrift.vo.ProductVo _elem177;
                  for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                  {
                    _elem177 = new com.froad.thrift.vo.ProductVo();
                    _elem177.read(iprot);
                    struct.productList.add(_elem177);
                  }
                  iprot.readListEnd();
                }
                struct.setProductListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUrlCodeByList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productList != null) {
          oprot.writeFieldBegin(PRODUCT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productList.size()));
            for (com.froad.thrift.vo.ProductVo _iter179 : struct.productList)
            {
              _iter179.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUrlCodeByList_argsTupleSchemeFactory implements SchemeFactory {
      public findUrlCodeByList_argsTupleScheme getScheme() {
        return new findUrlCodeByList_argsTupleScheme();
      }
    }

    private static class findUrlCodeByList_argsTupleScheme extends TupleScheme<findUrlCodeByList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUrlCodeByList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductList()) {
          {
            oprot.writeI32(struct.productList.size());
            for (com.froad.thrift.vo.ProductVo _iter180 : struct.productList)
            {
              _iter180.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUrlCodeByList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.productList = new ArrayList<com.froad.thrift.vo.ProductVo>(_list181.size);
            com.froad.thrift.vo.ProductVo _elem182;
            for (int _i183 = 0; _i183 < _list181.size; ++_i183)
            {
              _elem182 = new com.froad.thrift.vo.ProductVo();
              _elem182.read(iprot);
              struct.productList.add(_elem182);
            }
          }
          struct.setProductListIsSet(true);
        }
      }
    }

  }

  public static class findUrlCodeByList_result implements org.apache.thrift.TBase<findUrlCodeByList_result, findUrlCodeByList_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUrlCodeByList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUrlCodeByList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUrlCodeByList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUrlCodeByList_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ProductVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUrlCodeByList_result.class, metaDataMap);
    }

    public findUrlCodeByList_result() {
    }

    public findUrlCodeByList_result(
      List<com.froad.thrift.vo.ProductVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUrlCodeByList_result(findUrlCodeByList_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.ProductVo> __this__success = new ArrayList<com.froad.thrift.vo.ProductVo>(other.success.size());
        for (com.froad.thrift.vo.ProductVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.ProductVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public findUrlCodeByList_result deepCopy() {
      return new findUrlCodeByList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ProductVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.ProductVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.ProductVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.ProductVo> getSuccess() {
      return this.success;
    }

    public findUrlCodeByList_result setSuccess(List<com.froad.thrift.vo.ProductVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.ProductVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUrlCodeByList_result)
        return this.equals((findUrlCodeByList_result)that);
      return false;
    }

    public boolean equals(findUrlCodeByList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findUrlCodeByList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUrlCodeByList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUrlCodeByList_resultStandardSchemeFactory implements SchemeFactory {
      public findUrlCodeByList_resultStandardScheme getScheme() {
        return new findUrlCodeByList_resultStandardScheme();
      }
    }

    private static class findUrlCodeByList_resultStandardScheme extends StandardScheme<findUrlCodeByList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUrlCodeByList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.ProductVo>(_list184.size);
                  com.froad.thrift.vo.ProductVo _elem185;
                  for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                  {
                    _elem185 = new com.froad.thrift.vo.ProductVo();
                    _elem185.read(iprot);
                    struct.success.add(_elem185);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUrlCodeByList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.ProductVo _iter187 : struct.success)
            {
              _iter187.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUrlCodeByList_resultTupleSchemeFactory implements SchemeFactory {
      public findUrlCodeByList_resultTupleScheme getScheme() {
        return new findUrlCodeByList_resultTupleScheme();
      }
    }

    private static class findUrlCodeByList_resultTupleScheme extends TupleScheme<findUrlCodeByList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUrlCodeByList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.ProductVo _iter188 : struct.success)
            {
              _iter188.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUrlCodeByList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.ProductVo>(_list189.size);
            com.froad.thrift.vo.ProductVo _elem190;
            for (int _i191 = 0; _i191 < _list189.size; ++_i191)
            {
              _elem190 = new com.froad.thrift.vo.ProductVo();
              _elem190.read(iprot);
              struct.success.add(_elem190);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class downProducts_args implements org.apache.thrift.TBase<downProducts_args, downProducts_args._Fields>, java.io.Serializable, Cloneable, Comparable<downProducts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("downProducts_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_SEARCH_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productSearchVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new downProducts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new downProducts_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductSearchVo productSearchVo; // required
    public String type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_SEARCH_VO((short)1, "productSearchVo"),
      TYPE((short)2, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_SEARCH_VO
            return PRODUCT_SEARCH_VO;
          case 2: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_SEARCH_VO, new org.apache.thrift.meta_data.FieldMetaData("productSearchVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductSearchVo.class)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(downProducts_args.class, metaDataMap);
    }

    public downProducts_args() {
    }

    public downProducts_args(
      com.froad.thrift.vo.ProductSearchVo productSearchVo,
      String type)
    {
      this();
      this.productSearchVo = productSearchVo;
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public downProducts_args(downProducts_args other) {
      if (other.isSetProductSearchVo()) {
        this.productSearchVo = new com.froad.thrift.vo.ProductSearchVo(other.productSearchVo);
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
    }

    public downProducts_args deepCopy() {
      return new downProducts_args(this);
    }

    @Override
    public void clear() {
      this.productSearchVo = null;
      this.type = null;
    }

    public com.froad.thrift.vo.ProductSearchVo getProductSearchVo() {
      return this.productSearchVo;
    }

    public downProducts_args setProductSearchVo(com.froad.thrift.vo.ProductSearchVo productSearchVo) {
      this.productSearchVo = productSearchVo;
      return this;
    }

    public void unsetProductSearchVo() {
      this.productSearchVo = null;
    }

    /** Returns true if field productSearchVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductSearchVo() {
      return this.productSearchVo != null;
    }

    public void setProductSearchVoIsSet(boolean value) {
      if (!value) {
        this.productSearchVo = null;
      }
    }

    public String getType() {
      return this.type;
    }

    public downProducts_args setType(String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_SEARCH_VO:
        if (value == null) {
          unsetProductSearchVo();
        } else {
          setProductSearchVo((com.froad.thrift.vo.ProductSearchVo)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_SEARCH_VO:
        return getProductSearchVo();

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_SEARCH_VO:
        return isSetProductSearchVo();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof downProducts_args)
        return this.equals((downProducts_args)that);
      return false;
    }

    public boolean equals(downProducts_args that) {
      if (that == null)
        return false;

      boolean this_present_productSearchVo = true && this.isSetProductSearchVo();
      boolean that_present_productSearchVo = true && that.isSetProductSearchVo();
      if (this_present_productSearchVo || that_present_productSearchVo) {
        if (!(this_present_productSearchVo && that_present_productSearchVo))
          return false;
        if (!this.productSearchVo.equals(that.productSearchVo))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productSearchVo = true && (isSetProductSearchVo());
      list.add(present_productSearchVo);
      if (present_productSearchVo)
        list.add(productSearchVo);

      boolean present_type = true && (isSetType());
      list.add(present_type);
      if (present_type)
        list.add(type);

      return list.hashCode();
    }

    @Override
    public int compareTo(downProducts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductSearchVo()).compareTo(other.isSetProductSearchVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductSearchVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productSearchVo, other.productSearchVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("downProducts_args(");
      boolean first = true;

      sb.append("productSearchVo:");
      if (this.productSearchVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productSearchVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productSearchVo != null) {
        productSearchVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class downProducts_argsStandardSchemeFactory implements SchemeFactory {
      public downProducts_argsStandardScheme getScheme() {
        return new downProducts_argsStandardScheme();
      }
    }

    private static class downProducts_argsStandardScheme extends StandardScheme<downProducts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, downProducts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_SEARCH_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productSearchVo = new com.froad.thrift.vo.ProductSearchVo();
                struct.productSearchVo.read(iprot);
                struct.setProductSearchVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, downProducts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productSearchVo != null) {
          oprot.writeFieldBegin(PRODUCT_SEARCH_VO_FIELD_DESC);
          struct.productSearchVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class downProducts_argsTupleSchemeFactory implements SchemeFactory {
      public downProducts_argsTupleScheme getScheme() {
        return new downProducts_argsTupleScheme();
      }
    }

    private static class downProducts_argsTupleScheme extends TupleScheme<downProducts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, downProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductSearchVo()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductSearchVo()) {
          struct.productSearchVo.write(oprot);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, downProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productSearchVo = new com.froad.thrift.vo.ProductSearchVo();
          struct.productSearchVo.read(iprot);
          struct.setProductSearchVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class downProducts_result implements org.apache.thrift.TBase<downProducts_result, downProducts_result._Fields>, java.io.Serializable, Cloneable, Comparable<downProducts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("downProducts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new downProducts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new downProducts_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ExportResultRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ExportResultRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(downProducts_result.class, metaDataMap);
    }

    public downProducts_result() {
    }

    public downProducts_result(
      com.froad.thrift.vo.ExportResultRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public downProducts_result(downProducts_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ExportResultRes(other.success);
      }
    }

    public downProducts_result deepCopy() {
      return new downProducts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ExportResultRes getSuccess() {
      return this.success;
    }

    public downProducts_result setSuccess(com.froad.thrift.vo.ExportResultRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ExportResultRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof downProducts_result)
        return this.equals((downProducts_result)that);
      return false;
    }

    public boolean equals(downProducts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(downProducts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("downProducts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class downProducts_resultStandardSchemeFactory implements SchemeFactory {
      public downProducts_resultStandardScheme getScheme() {
        return new downProducts_resultStandardScheme();
      }
    }

    private static class downProducts_resultStandardScheme extends StandardScheme<downProducts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, downProducts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ExportResultRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, downProducts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class downProducts_resultTupleSchemeFactory implements SchemeFactory {
      public downProducts_resultTupleScheme getScheme() {
        return new downProducts_resultTupleScheme();
      }
    }

    private static class downProducts_resultTupleScheme extends TupleScheme<downProducts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, downProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, downProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ExportResultRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchProductByType_args implements org.apache.thrift.TBase<searchProductByType_args, searchProductByType_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchProductByType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchProductByType_args");

    private static final org.apache.thrift.protocol.TField FILTER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("filterVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FILED_SORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("filedSorts", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchProductByType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchProductByType_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.QueryProductFilterVo filterVo; // required
    public List<com.froad.thrift.vo.FiledSort> filedSorts; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILTER_VO((short)1, "filterVo"),
      FILED_SORTS((short)2, "filedSorts"),
      PAGE_VO((short)3, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILTER_VO
            return FILTER_VO;
          case 2: // FILED_SORTS
            return FILED_SORTS;
          case 3: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILTER_VO, new org.apache.thrift.meta_data.FieldMetaData("filterVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.QueryProductFilterVo.class)));
      tmpMap.put(_Fields.FILED_SORTS, new org.apache.thrift.meta_data.FieldMetaData("filedSorts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.FiledSort.class))));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchProductByType_args.class, metaDataMap);
    }

    public searchProductByType_args() {
    }

    public searchProductByType_args(
      com.froad.thrift.vo.QueryProductFilterVo filterVo,
      List<com.froad.thrift.vo.FiledSort> filedSorts,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.filterVo = filterVo;
      this.filedSorts = filedSorts;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchProductByType_args(searchProductByType_args other) {
      if (other.isSetFilterVo()) {
        this.filterVo = new com.froad.thrift.vo.QueryProductFilterVo(other.filterVo);
      }
      if (other.isSetFiledSorts()) {
        List<com.froad.thrift.vo.FiledSort> __this__filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>(other.filedSorts.size());
        for (com.froad.thrift.vo.FiledSort other_element : other.filedSorts) {
          __this__filedSorts.add(new com.froad.thrift.vo.FiledSort(other_element));
        }
        this.filedSorts = __this__filedSorts;
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public searchProductByType_args deepCopy() {
      return new searchProductByType_args(this);
    }

    @Override
    public void clear() {
      this.filterVo = null;
      this.filedSorts = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.QueryProductFilterVo getFilterVo() {
      return this.filterVo;
    }

    public searchProductByType_args setFilterVo(com.froad.thrift.vo.QueryProductFilterVo filterVo) {
      this.filterVo = filterVo;
      return this;
    }

    public void unsetFilterVo() {
      this.filterVo = null;
    }

    /** Returns true if field filterVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFilterVo() {
      return this.filterVo != null;
    }

    public void setFilterVoIsSet(boolean value) {
      if (!value) {
        this.filterVo = null;
      }
    }

    public int getFiledSortsSize() {
      return (this.filedSorts == null) ? 0 : this.filedSorts.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.FiledSort> getFiledSortsIterator() {
      return (this.filedSorts == null) ? null : this.filedSorts.iterator();
    }

    public void addToFiledSorts(com.froad.thrift.vo.FiledSort elem) {
      if (this.filedSorts == null) {
        this.filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>();
      }
      this.filedSorts.add(elem);
    }

    public List<com.froad.thrift.vo.FiledSort> getFiledSorts() {
      return this.filedSorts;
    }

    public searchProductByType_args setFiledSorts(List<com.froad.thrift.vo.FiledSort> filedSorts) {
      this.filedSorts = filedSorts;
      return this;
    }

    public void unsetFiledSorts() {
      this.filedSorts = null;
    }

    /** Returns true if field filedSorts is set (has been assigned a value) and false otherwise */
    public boolean isSetFiledSorts() {
      return this.filedSorts != null;
    }

    public void setFiledSortsIsSet(boolean value) {
      if (!value) {
        this.filedSorts = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public searchProductByType_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILTER_VO:
        if (value == null) {
          unsetFilterVo();
        } else {
          setFilterVo((com.froad.thrift.vo.QueryProductFilterVo)value);
        }
        break;

      case FILED_SORTS:
        if (value == null) {
          unsetFiledSorts();
        } else {
          setFiledSorts((List<com.froad.thrift.vo.FiledSort>)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILTER_VO:
        return getFilterVo();

      case FILED_SORTS:
        return getFiledSorts();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILTER_VO:
        return isSetFilterVo();
      case FILED_SORTS:
        return isSetFiledSorts();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchProductByType_args)
        return this.equals((searchProductByType_args)that);
      return false;
    }

    public boolean equals(searchProductByType_args that) {
      if (that == null)
        return false;

      boolean this_present_filterVo = true && this.isSetFilterVo();
      boolean that_present_filterVo = true && that.isSetFilterVo();
      if (this_present_filterVo || that_present_filterVo) {
        if (!(this_present_filterVo && that_present_filterVo))
          return false;
        if (!this.filterVo.equals(that.filterVo))
          return false;
      }

      boolean this_present_filedSorts = true && this.isSetFiledSorts();
      boolean that_present_filedSorts = true && that.isSetFiledSorts();
      if (this_present_filedSorts || that_present_filedSorts) {
        if (!(this_present_filedSorts && that_present_filedSorts))
          return false;
        if (!this.filedSorts.equals(that.filedSorts))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_filterVo = true && (isSetFilterVo());
      list.add(present_filterVo);
      if (present_filterVo)
        list.add(filterVo);

      boolean present_filedSorts = true && (isSetFiledSorts());
      list.add(present_filedSorts);
      if (present_filedSorts)
        list.add(filedSorts);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchProductByType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFilterVo()).compareTo(other.isSetFilterVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilterVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterVo, other.filterVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFiledSorts()).compareTo(other.isSetFiledSorts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFiledSorts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filedSorts, other.filedSorts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchProductByType_args(");
      boolean first = true;

      sb.append("filterVo:");
      if (this.filterVo == null) {
        sb.append("null");
      } else {
        sb.append(this.filterVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filedSorts:");
      if (this.filedSorts == null) {
        sb.append("null");
      } else {
        sb.append(this.filedSorts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (filterVo != null) {
        filterVo.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchProductByType_argsStandardSchemeFactory implements SchemeFactory {
      public searchProductByType_argsStandardScheme getScheme() {
        return new searchProductByType_argsStandardScheme();
      }
    }

    private static class searchProductByType_argsStandardScheme extends StandardScheme<searchProductByType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchProductByType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILTER_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.filterVo = new com.froad.thrift.vo.QueryProductFilterVo();
                struct.filterVo.read(iprot);
                struct.setFilterVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILED_SORTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>(_list192.size);
                  com.froad.thrift.vo.FiledSort _elem193;
                  for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                  {
                    _elem193 = new com.froad.thrift.vo.FiledSort();
                    _elem193.read(iprot);
                    struct.filedSorts.add(_elem193);
                  }
                  iprot.readListEnd();
                }
                struct.setFiledSortsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchProductByType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filterVo != null) {
          oprot.writeFieldBegin(FILTER_VO_FIELD_DESC);
          struct.filterVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.filedSorts != null) {
          oprot.writeFieldBegin(FILED_SORTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.filedSorts.size()));
            for (com.froad.thrift.vo.FiledSort _iter195 : struct.filedSorts)
            {
              _iter195.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchProductByType_argsTupleSchemeFactory implements SchemeFactory {
      public searchProductByType_argsTupleScheme getScheme() {
        return new searchProductByType_argsTupleScheme();
      }
    }

    private static class searchProductByType_argsTupleScheme extends TupleScheme<searchProductByType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchProductByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilterVo()) {
          optionals.set(0);
        }
        if (struct.isSetFiledSorts()) {
          optionals.set(1);
        }
        if (struct.isSetPageVo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFilterVo()) {
          struct.filterVo.write(oprot);
        }
        if (struct.isSetFiledSorts()) {
          {
            oprot.writeI32(struct.filedSorts.size());
            for (com.froad.thrift.vo.FiledSort _iter196 : struct.filedSorts)
            {
              _iter196.write(oprot);
            }
          }
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchProductByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.filterVo = new com.froad.thrift.vo.QueryProductFilterVo();
          struct.filterVo.read(iprot);
          struct.setFilterVoIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>(_list197.size);
            com.froad.thrift.vo.FiledSort _elem198;
            for (int _i199 = 0; _i199 < _list197.size; ++_i199)
            {
              _elem198 = new com.froad.thrift.vo.FiledSort();
              _elem198.read(iprot);
              struct.filedSorts.add(_elem198);
            }
          }
          struct.setFiledSortsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class searchProductByType_result implements org.apache.thrift.TBase<searchProductByType_result, searchProductByType_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchProductByType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchProductByType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchProductByType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchProductByType_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchProductByType_result.class, metaDataMap);
    }

    public searchProductByType_result() {
    }

    public searchProductByType_result(
      com.froad.thrift.vo.ProductPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchProductByType_result(searchProductByType_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductPageVoRes(other.success);
      }
    }

    public searchProductByType_result deepCopy() {
      return new searchProductByType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductPageVoRes getSuccess() {
      return this.success;
    }

    public searchProductByType_result setSuccess(com.froad.thrift.vo.ProductPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchProductByType_result)
        return this.equals((searchProductByType_result)that);
      return false;
    }

    public boolean equals(searchProductByType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchProductByType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchProductByType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchProductByType_resultStandardSchemeFactory implements SchemeFactory {
      public searchProductByType_resultStandardScheme getScheme() {
        return new searchProductByType_resultStandardScheme();
      }
    }

    private static class searchProductByType_resultStandardScheme extends StandardScheme<searchProductByType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchProductByType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchProductByType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchProductByType_resultTupleSchemeFactory implements SchemeFactory {
      public searchProductByType_resultTupleScheme getScheme() {
        return new searchProductByType_resultTupleScheme();
      }
    }

    private static class searchProductByType_resultTupleScheme extends TupleScheme<searchProductByType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchProductByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchProductByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateGroupProductByOutlet_args implements org.apache.thrift.TBase<updateGroupProductByOutlet_args, updateGroupProductByOutlet_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateGroupProductByOutlet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGroupProductByOutlet_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUTLET_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("outletVo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGroupProductByOutlet_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGroupProductByOutlet_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String type; // required
    public com.froad.thrift.vo.OutletVo outletVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      TYPE((short)2, "type"),
      OUTLET_VO((short)3, "outletVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // TYPE
            return TYPE;
          case 3: // OUTLET_VO
            return OUTLET_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTLET_VO, new org.apache.thrift.meta_data.FieldMetaData("outletVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OutletVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGroupProductByOutlet_args.class, metaDataMap);
    }

    public updateGroupProductByOutlet_args() {
    }

    public updateGroupProductByOutlet_args(
      String clientId,
      String type,
      com.froad.thrift.vo.OutletVo outletVo)
    {
      this();
      this.clientId = clientId;
      this.type = type;
      this.outletVo = outletVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGroupProductByOutlet_args(updateGroupProductByOutlet_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetOutletVo()) {
        this.outletVo = new com.froad.thrift.vo.OutletVo(other.outletVo);
      }
    }

    public updateGroupProductByOutlet_args deepCopy() {
      return new updateGroupProductByOutlet_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.type = null;
      this.outletVo = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public updateGroupProductByOutlet_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getType() {
      return this.type;
    }

    public updateGroupProductByOutlet_args setType(String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public com.froad.thrift.vo.OutletVo getOutletVo() {
      return this.outletVo;
    }

    public updateGroupProductByOutlet_args setOutletVo(com.froad.thrift.vo.OutletVo outletVo) {
      this.outletVo = outletVo;
      return this;
    }

    public void unsetOutletVo() {
      this.outletVo = null;
    }

    /** Returns true if field outletVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletVo() {
      return this.outletVo != null;
    }

    public void setOutletVoIsSet(boolean value) {
      if (!value) {
        this.outletVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      case OUTLET_VO:
        if (value == null) {
          unsetOutletVo();
        } else {
          setOutletVo((com.froad.thrift.vo.OutletVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case TYPE:
        return getType();

      case OUTLET_VO:
        return getOutletVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case TYPE:
        return isSetType();
      case OUTLET_VO:
        return isSetOutletVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGroupProductByOutlet_args)
        return this.equals((updateGroupProductByOutlet_args)that);
      return false;
    }

    public boolean equals(updateGroupProductByOutlet_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_outletVo = true && this.isSetOutletVo();
      boolean that_present_outletVo = true && that.isSetOutletVo();
      if (this_present_outletVo || that_present_outletVo) {
        if (!(this_present_outletVo && that_present_outletVo))
          return false;
        if (!this.outletVo.equals(that.outletVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_type = true && (isSetType());
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_outletVo = true && (isSetOutletVo());
      list.add(present_outletVo);
      if (present_outletVo)
        list.add(outletVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateGroupProductByOutlet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOutletVo()).compareTo(other.isSetOutletVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletVo, other.outletVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGroupProductByOutlet_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletVo:");
      if (this.outletVo == null) {
        sb.append("null");
      } else {
        sb.append(this.outletVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (outletVo != null) {
        outletVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGroupProductByOutlet_argsStandardSchemeFactory implements SchemeFactory {
      public updateGroupProductByOutlet_argsStandardScheme getScheme() {
        return new updateGroupProductByOutlet_argsStandardScheme();
      }
    }

    private static class updateGroupProductByOutlet_argsStandardScheme extends StandardScheme<updateGroupProductByOutlet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGroupProductByOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTLET_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.outletVo = new com.froad.thrift.vo.OutletVo();
                struct.outletVo.read(iprot);
                struct.setOutletVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGroupProductByOutlet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        if (struct.outletVo != null) {
          oprot.writeFieldBegin(OUTLET_VO_FIELD_DESC);
          struct.outletVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGroupProductByOutlet_argsTupleSchemeFactory implements SchemeFactory {
      public updateGroupProductByOutlet_argsTupleScheme getScheme() {
        return new updateGroupProductByOutlet_argsTupleScheme();
      }
    }

    private static class updateGroupProductByOutlet_argsTupleScheme extends TupleScheme<updateGroupProductByOutlet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGroupProductByOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        if (struct.isSetOutletVo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
        if (struct.isSetOutletVo()) {
          struct.outletVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGroupProductByOutlet_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outletVo = new com.froad.thrift.vo.OutletVo();
          struct.outletVo.read(iprot);
          struct.setOutletVoIsSet(true);
        }
      }
    }

  }

  public static class updateGroupProductByOutlet_result implements org.apache.thrift.TBase<updateGroupProductByOutlet_result, updateGroupProductByOutlet_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateGroupProductByOutlet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGroupProductByOutlet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGroupProductByOutlet_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGroupProductByOutlet_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGroupProductByOutlet_result.class, metaDataMap);
    }

    public updateGroupProductByOutlet_result() {
    }

    public updateGroupProductByOutlet_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGroupProductByOutlet_result(updateGroupProductByOutlet_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateGroupProductByOutlet_result deepCopy() {
      return new updateGroupProductByOutlet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateGroupProductByOutlet_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGroupProductByOutlet_result)
        return this.equals((updateGroupProductByOutlet_result)that);
      return false;
    }

    public boolean equals(updateGroupProductByOutlet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateGroupProductByOutlet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGroupProductByOutlet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGroupProductByOutlet_resultStandardSchemeFactory implements SchemeFactory {
      public updateGroupProductByOutlet_resultStandardScheme getScheme() {
        return new updateGroupProductByOutlet_resultStandardScheme();
      }
    }

    private static class updateGroupProductByOutlet_resultStandardScheme extends StandardScheme<updateGroupProductByOutlet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGroupProductByOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGroupProductByOutlet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGroupProductByOutlet_resultTupleSchemeFactory implements SchemeFactory {
      public updateGroupProductByOutlet_resultTupleScheme getScheme() {
        return new updateGroupProductByOutlet_resultTupleScheme();
      }
    }

    private static class updateGroupProductByOutlet_resultTupleScheme extends TupleScheme<updateGroupProductByOutlet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGroupProductByOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGroupProductByOutlet_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateHisGroupGoodsOutlets_args implements org.apache.thrift.TBase<updateHisGroupGoodsOutlets_args, updateHisGroupGoodsOutlets_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateHisGroupGoodsOutlets_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHisGroupGoodsOutlets_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHisGroupGoodsOutlets_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHisGroupGoodsOutlets_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHisGroupGoodsOutlets_args.class, metaDataMap);
    }

    public updateHisGroupGoodsOutlets_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHisGroupGoodsOutlets_args(updateHisGroupGoodsOutlets_args other) {
    }

    public updateHisGroupGoodsOutlets_args deepCopy() {
      return new updateHisGroupGoodsOutlets_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHisGroupGoodsOutlets_args)
        return this.equals((updateHisGroupGoodsOutlets_args)that);
      return false;
    }

    public boolean equals(updateHisGroupGoodsOutlets_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHisGroupGoodsOutlets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHisGroupGoodsOutlets_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHisGroupGoodsOutlets_argsStandardSchemeFactory implements SchemeFactory {
      public updateHisGroupGoodsOutlets_argsStandardScheme getScheme() {
        return new updateHisGroupGoodsOutlets_argsStandardScheme();
      }
    }

    private static class updateHisGroupGoodsOutlets_argsStandardScheme extends StandardScheme<updateHisGroupGoodsOutlets_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHisGroupGoodsOutlets_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHisGroupGoodsOutlets_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHisGroupGoodsOutlets_argsTupleSchemeFactory implements SchemeFactory {
      public updateHisGroupGoodsOutlets_argsTupleScheme getScheme() {
        return new updateHisGroupGoodsOutlets_argsTupleScheme();
      }
    }

    private static class updateHisGroupGoodsOutlets_argsTupleScheme extends TupleScheme<updateHisGroupGoodsOutlets_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHisGroupGoodsOutlets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHisGroupGoodsOutlets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateHisGroupGoodsOutlets_result implements org.apache.thrift.TBase<updateHisGroupGoodsOutlets_result, updateHisGroupGoodsOutlets_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateHisGroupGoodsOutlets_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateHisGroupGoodsOutlets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHisGroupGoodsOutlets_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHisGroupGoodsOutlets_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHisGroupGoodsOutlets_result.class, metaDataMap);
    }

    public updateHisGroupGoodsOutlets_result() {
    }

    public updateHisGroupGoodsOutlets_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHisGroupGoodsOutlets_result(updateHisGroupGoodsOutlets_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateHisGroupGoodsOutlets_result deepCopy() {
      return new updateHisGroupGoodsOutlets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateHisGroupGoodsOutlets_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHisGroupGoodsOutlets_result)
        return this.equals((updateHisGroupGoodsOutlets_result)that);
      return false;
    }

    public boolean equals(updateHisGroupGoodsOutlets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateHisGroupGoodsOutlets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHisGroupGoodsOutlets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHisGroupGoodsOutlets_resultStandardSchemeFactory implements SchemeFactory {
      public updateHisGroupGoodsOutlets_resultStandardScheme getScheme() {
        return new updateHisGroupGoodsOutlets_resultStandardScheme();
      }
    }

    private static class updateHisGroupGoodsOutlets_resultStandardScheme extends StandardScheme<updateHisGroupGoodsOutlets_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateHisGroupGoodsOutlets_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateHisGroupGoodsOutlets_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHisGroupGoodsOutlets_resultTupleSchemeFactory implements SchemeFactory {
      public updateHisGroupGoodsOutlets_resultTupleScheme getScheme() {
        return new updateHisGroupGoodsOutlets_resultTupleScheme();
      }
    }

    private static class updateHisGroupGoodsOutlets_resultTupleScheme extends TupleScheme<updateHisGroupGoodsOutlets_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateHisGroupGoodsOutlets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateHisGroupGoodsOutlets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class autoOffShelfProductSaleEnd_args implements org.apache.thrift.TBase<autoOffShelfProductSaleEnd_args, autoOffShelfProductSaleEnd_args._Fields>, java.io.Serializable, Cloneable, Comparable<autoOffShelfProductSaleEnd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("autoOffShelfProductSaleEnd_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new autoOffShelfProductSaleEnd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new autoOffShelfProductSaleEnd_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(autoOffShelfProductSaleEnd_args.class, metaDataMap);
    }

    public autoOffShelfProductSaleEnd_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public autoOffShelfProductSaleEnd_args(autoOffShelfProductSaleEnd_args other) {
    }

    public autoOffShelfProductSaleEnd_args deepCopy() {
      return new autoOffShelfProductSaleEnd_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof autoOffShelfProductSaleEnd_args)
        return this.equals((autoOffShelfProductSaleEnd_args)that);
      return false;
    }

    public boolean equals(autoOffShelfProductSaleEnd_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(autoOffShelfProductSaleEnd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("autoOffShelfProductSaleEnd_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class autoOffShelfProductSaleEnd_argsStandardSchemeFactory implements SchemeFactory {
      public autoOffShelfProductSaleEnd_argsStandardScheme getScheme() {
        return new autoOffShelfProductSaleEnd_argsStandardScheme();
      }
    }

    private static class autoOffShelfProductSaleEnd_argsStandardScheme extends StandardScheme<autoOffShelfProductSaleEnd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, autoOffShelfProductSaleEnd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, autoOffShelfProductSaleEnd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class autoOffShelfProductSaleEnd_argsTupleSchemeFactory implements SchemeFactory {
      public autoOffShelfProductSaleEnd_argsTupleScheme getScheme() {
        return new autoOffShelfProductSaleEnd_argsTupleScheme();
      }
    }

    private static class autoOffShelfProductSaleEnd_argsTupleScheme extends TupleScheme<autoOffShelfProductSaleEnd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, autoOffShelfProductSaleEnd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, autoOffShelfProductSaleEnd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class autoOffShelfProductSaleEnd_result implements org.apache.thrift.TBase<autoOffShelfProductSaleEnd_result, autoOffShelfProductSaleEnd_result._Fields>, java.io.Serializable, Cloneable, Comparable<autoOffShelfProductSaleEnd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("autoOffShelfProductSaleEnd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new autoOffShelfProductSaleEnd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new autoOffShelfProductSaleEnd_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(autoOffShelfProductSaleEnd_result.class, metaDataMap);
    }

    public autoOffShelfProductSaleEnd_result() {
    }

    public autoOffShelfProductSaleEnd_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public autoOffShelfProductSaleEnd_result(autoOffShelfProductSaleEnd_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public autoOffShelfProductSaleEnd_result deepCopy() {
      return new autoOffShelfProductSaleEnd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public autoOffShelfProductSaleEnd_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof autoOffShelfProductSaleEnd_result)
        return this.equals((autoOffShelfProductSaleEnd_result)that);
      return false;
    }

    public boolean equals(autoOffShelfProductSaleEnd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(autoOffShelfProductSaleEnd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("autoOffShelfProductSaleEnd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class autoOffShelfProductSaleEnd_resultStandardSchemeFactory implements SchemeFactory {
      public autoOffShelfProductSaleEnd_resultStandardScheme getScheme() {
        return new autoOffShelfProductSaleEnd_resultStandardScheme();
      }
    }

    private static class autoOffShelfProductSaleEnd_resultStandardScheme extends StandardScheme<autoOffShelfProductSaleEnd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, autoOffShelfProductSaleEnd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, autoOffShelfProductSaleEnd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class autoOffShelfProductSaleEnd_resultTupleSchemeFactory implements SchemeFactory {
      public autoOffShelfProductSaleEnd_resultTupleScheme getScheme() {
        return new autoOffShelfProductSaleEnd_resultTupleScheme();
      }
    }

    private static class autoOffShelfProductSaleEnd_resultTupleScheme extends TupleScheme<autoOffShelfProductSaleEnd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, autoOffShelfProductSaleEnd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, autoOffShelfProductSaleEnd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findGoodsByPage_args implements org.apache.thrift.TBase<findGoodsByPage_args, findGoodsByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findGoodsByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGoodsByPage_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_FILTER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productFilterVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGoodsByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGoodsByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductFilterVo productFilterVo; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_FILTER_VO((short)1, "productFilterVo"),
      PAGE_VO((short)2, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_FILTER_VO
            return PRODUCT_FILTER_VO;
          case 2: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_FILTER_VO, new org.apache.thrift.meta_data.FieldMetaData("productFilterVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductFilterVo.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGoodsByPage_args.class, metaDataMap);
    }

    public findGoodsByPage_args() {
    }

    public findGoodsByPage_args(
      com.froad.thrift.vo.ProductFilterVo productFilterVo,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.productFilterVo = productFilterVo;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGoodsByPage_args(findGoodsByPage_args other) {
      if (other.isSetProductFilterVo()) {
        this.productFilterVo = new com.froad.thrift.vo.ProductFilterVo(other.productFilterVo);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public findGoodsByPage_args deepCopy() {
      return new findGoodsByPage_args(this);
    }

    @Override
    public void clear() {
      this.productFilterVo = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.ProductFilterVo getProductFilterVo() {
      return this.productFilterVo;
    }

    public findGoodsByPage_args setProductFilterVo(com.froad.thrift.vo.ProductFilterVo productFilterVo) {
      this.productFilterVo = productFilterVo;
      return this;
    }

    public void unsetProductFilterVo() {
      this.productFilterVo = null;
    }

    /** Returns true if field productFilterVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductFilterVo() {
      return this.productFilterVo != null;
    }

    public void setProductFilterVoIsSet(boolean value) {
      if (!value) {
        this.productFilterVo = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public findGoodsByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_FILTER_VO:
        if (value == null) {
          unsetProductFilterVo();
        } else {
          setProductFilterVo((com.froad.thrift.vo.ProductFilterVo)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_FILTER_VO:
        return getProductFilterVo();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_FILTER_VO:
        return isSetProductFilterVo();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGoodsByPage_args)
        return this.equals((findGoodsByPage_args)that);
      return false;
    }

    public boolean equals(findGoodsByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_productFilterVo = true && this.isSetProductFilterVo();
      boolean that_present_productFilterVo = true && that.isSetProductFilterVo();
      if (this_present_productFilterVo || that_present_productFilterVo) {
        if (!(this_present_productFilterVo && that_present_productFilterVo))
          return false;
        if (!this.productFilterVo.equals(that.productFilterVo))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productFilterVo = true && (isSetProductFilterVo());
      list.add(present_productFilterVo);
      if (present_productFilterVo)
        list.add(productFilterVo);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findGoodsByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductFilterVo()).compareTo(other.isSetProductFilterVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductFilterVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productFilterVo, other.productFilterVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGoodsByPage_args(");
      boolean first = true;

      sb.append("productFilterVo:");
      if (this.productFilterVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productFilterVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productFilterVo != null) {
        productFilterVo.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGoodsByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findGoodsByPage_argsStandardScheme getScheme() {
        return new findGoodsByPage_argsStandardScheme();
      }
    }

    private static class findGoodsByPage_argsStandardScheme extends StandardScheme<findGoodsByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGoodsByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_FILTER_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productFilterVo = new com.froad.thrift.vo.ProductFilterVo();
                struct.productFilterVo.read(iprot);
                struct.setProductFilterVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGoodsByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productFilterVo != null) {
          oprot.writeFieldBegin(PRODUCT_FILTER_VO_FIELD_DESC);
          struct.productFilterVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGoodsByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findGoodsByPage_argsTupleScheme getScheme() {
        return new findGoodsByPage_argsTupleScheme();
      }
    }

    private static class findGoodsByPage_argsTupleScheme extends TupleScheme<findGoodsByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGoodsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductFilterVo()) {
          optionals.set(0);
        }
        if (struct.isSetPageVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductFilterVo()) {
          struct.productFilterVo.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGoodsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productFilterVo = new com.froad.thrift.vo.ProductFilterVo();
          struct.productFilterVo.read(iprot);
          struct.setProductFilterVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class findGoodsByPage_result implements org.apache.thrift.TBase<findGoodsByPage_result, findGoodsByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findGoodsByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGoodsByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGoodsByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGoodsByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductListPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductListPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGoodsByPage_result.class, metaDataMap);
    }

    public findGoodsByPage_result() {
    }

    public findGoodsByPage_result(
      com.froad.thrift.vo.ProductListPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGoodsByPage_result(findGoodsByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductListPageVo(other.success);
      }
    }

    public findGoodsByPage_result deepCopy() {
      return new findGoodsByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductListPageVo getSuccess() {
      return this.success;
    }

    public findGoodsByPage_result setSuccess(com.froad.thrift.vo.ProductListPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductListPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGoodsByPage_result)
        return this.equals((findGoodsByPage_result)that);
      return false;
    }

    public boolean equals(findGoodsByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findGoodsByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGoodsByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGoodsByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findGoodsByPage_resultStandardScheme getScheme() {
        return new findGoodsByPage_resultStandardScheme();
      }
    }

    private static class findGoodsByPage_resultStandardScheme extends StandardScheme<findGoodsByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGoodsByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductListPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGoodsByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGoodsByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findGoodsByPage_resultTupleScheme getScheme() {
        return new findGoodsByPage_resultTupleScheme();
      }
    }

    private static class findGoodsByPage_resultTupleScheme extends TupleScheme<findGoodsByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGoodsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGoodsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductListPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addGoods_args implements org.apache.thrift.TBase<addGoods_args, addGoods_args._Fields>, java.io.Serializable, Cloneable, Comparable<addGoods_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGoods_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addGoods_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addGoods_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.GoodsInfoVo productInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_INFO_VO((short)2, "productInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_INFO_VO
            return PRODUCT_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("productInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.GoodsInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGoods_args.class, metaDataMap);
    }

    public addGoods_args() {
    }

    public addGoods_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.GoodsInfoVo productInfoVo)
    {
      this();
      this.originVo = originVo;
      this.productInfoVo = productInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGoods_args(addGoods_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductInfoVo()) {
        this.productInfoVo = new com.froad.thrift.vo.GoodsInfoVo(other.productInfoVo);
      }
    }

    public addGoods_args deepCopy() {
      return new addGoods_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productInfoVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addGoods_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.GoodsInfoVo getProductInfoVo() {
      return this.productInfoVo;
    }

    public addGoods_args setProductInfoVo(com.froad.thrift.vo.GoodsInfoVo productInfoVo) {
      this.productInfoVo = productInfoVo;
      return this;
    }

    public void unsetProductInfoVo() {
      this.productInfoVo = null;
    }

    /** Returns true if field productInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductInfoVo() {
      return this.productInfoVo != null;
    }

    public void setProductInfoVoIsSet(boolean value) {
      if (!value) {
        this.productInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_INFO_VO:
        if (value == null) {
          unsetProductInfoVo();
        } else {
          setProductInfoVo((com.froad.thrift.vo.GoodsInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_INFO_VO:
        return getProductInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_INFO_VO:
        return isSetProductInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGoods_args)
        return this.equals((addGoods_args)that);
      return false;
    }

    public boolean equals(addGoods_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productInfoVo = true && this.isSetProductInfoVo();
      boolean that_present_productInfoVo = true && that.isSetProductInfoVo();
      if (this_present_productInfoVo || that_present_productInfoVo) {
        if (!(this_present_productInfoVo && that_present_productInfoVo))
          return false;
        if (!this.productInfoVo.equals(that.productInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productInfoVo = true && (isSetProductInfoVo());
      list.add(present_productInfoVo);
      if (present_productInfoVo)
        list.add(productInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addGoods_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductInfoVo()).compareTo(other.isSetProductInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productInfoVo, other.productInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGoods_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productInfoVo:");
      if (this.productInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (productInfoVo != null) {
        productInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGoods_argsStandardSchemeFactory implements SchemeFactory {
      public addGoods_argsStandardScheme getScheme() {
        return new addGoods_argsStandardScheme();
      }
    }

    private static class addGoods_argsStandardScheme extends StandardScheme<addGoods_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addGoods_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productInfoVo = new com.froad.thrift.vo.GoodsInfoVo();
                struct.productInfoVo.read(iprot);
                struct.setProductInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addGoods_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productInfoVo != null) {
          oprot.writeFieldBegin(PRODUCT_INFO_VO_FIELD_DESC);
          struct.productInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGoods_argsTupleSchemeFactory implements SchemeFactory {
      public addGoods_argsTupleScheme getScheme() {
        return new addGoods_argsTupleScheme();
      }
    }

    private static class addGoods_argsTupleScheme extends TupleScheme<addGoods_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGoods_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductInfoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductInfoVo()) {
          struct.productInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGoods_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productInfoVo = new com.froad.thrift.vo.GoodsInfoVo();
          struct.productInfoVo.read(iprot);
          struct.setProductInfoVoIsSet(true);
        }
      }
    }

  }

  public static class addGoods_result implements org.apache.thrift.TBase<addGoods_result, addGoods_result._Fields>, java.io.Serializable, Cloneable, Comparable<addGoods_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGoods_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addGoods_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addGoods_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AddProductVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AddProductVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGoods_result.class, metaDataMap);
    }

    public addGoods_result() {
    }

    public addGoods_result(
      com.froad.thrift.vo.AddProductVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGoods_result(addGoods_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AddProductVoRes(other.success);
      }
    }

    public addGoods_result deepCopy() {
      return new addGoods_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AddProductVoRes getSuccess() {
      return this.success;
    }

    public addGoods_result setSuccess(com.froad.thrift.vo.AddProductVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AddProductVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGoods_result)
        return this.equals((addGoods_result)that);
      return false;
    }

    public boolean equals(addGoods_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addGoods_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGoods_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGoods_resultStandardSchemeFactory implements SchemeFactory {
      public addGoods_resultStandardScheme getScheme() {
        return new addGoods_resultStandardScheme();
      }
    }

    private static class addGoods_resultStandardScheme extends StandardScheme<addGoods_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addGoods_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AddProductVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addGoods_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGoods_resultTupleSchemeFactory implements SchemeFactory {
      public addGoods_resultTupleScheme getScheme() {
        return new addGoods_resultTupleScheme();
      }
    }

    private static class addGoods_resultTupleScheme extends TupleScheme<addGoods_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGoods_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGoods_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AddProductVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateGoods_args implements org.apache.thrift.TBase<updateGoods_args, updateGoods_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateGoods_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGoods_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_INFO_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("productInfoVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGoods_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGoods_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.GoodsInfoVo productInfoVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_INFO_VO((short)2, "productInfoVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_INFO_VO
            return PRODUCT_INFO_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_INFO_VO, new org.apache.thrift.meta_data.FieldMetaData("productInfoVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.GoodsInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGoods_args.class, metaDataMap);
    }

    public updateGoods_args() {
    }

    public updateGoods_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.GoodsInfoVo productInfoVo)
    {
      this();
      this.originVo = originVo;
      this.productInfoVo = productInfoVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGoods_args(updateGoods_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductInfoVo()) {
        this.productInfoVo = new com.froad.thrift.vo.GoodsInfoVo(other.productInfoVo);
      }
    }

    public updateGoods_args deepCopy() {
      return new updateGoods_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productInfoVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateGoods_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.GoodsInfoVo getProductInfoVo() {
      return this.productInfoVo;
    }

    public updateGoods_args setProductInfoVo(com.froad.thrift.vo.GoodsInfoVo productInfoVo) {
      this.productInfoVo = productInfoVo;
      return this;
    }

    public void unsetProductInfoVo() {
      this.productInfoVo = null;
    }

    /** Returns true if field productInfoVo is set (has been assigned a value) and false otherwise */
    public boolean isSetProductInfoVo() {
      return this.productInfoVo != null;
    }

    public void setProductInfoVoIsSet(boolean value) {
      if (!value) {
        this.productInfoVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_INFO_VO:
        if (value == null) {
          unsetProductInfoVo();
        } else {
          setProductInfoVo((com.froad.thrift.vo.GoodsInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_INFO_VO:
        return getProductInfoVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_INFO_VO:
        return isSetProductInfoVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGoods_args)
        return this.equals((updateGoods_args)that);
      return false;
    }

    public boolean equals(updateGoods_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productInfoVo = true && this.isSetProductInfoVo();
      boolean that_present_productInfoVo = true && that.isSetProductInfoVo();
      if (this_present_productInfoVo || that_present_productInfoVo) {
        if (!(this_present_productInfoVo && that_present_productInfoVo))
          return false;
        if (!this.productInfoVo.equals(that.productInfoVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productInfoVo = true && (isSetProductInfoVo());
      list.add(present_productInfoVo);
      if (present_productInfoVo)
        list.add(productInfoVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateGoods_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductInfoVo()).compareTo(other.isSetProductInfoVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductInfoVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productInfoVo, other.productInfoVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGoods_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productInfoVo:");
      if (this.productInfoVo == null) {
        sb.append("null");
      } else {
        sb.append(this.productInfoVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (productInfoVo != null) {
        productInfoVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGoods_argsStandardSchemeFactory implements SchemeFactory {
      public updateGoods_argsStandardScheme getScheme() {
        return new updateGoods_argsStandardScheme();
      }
    }

    private static class updateGoods_argsStandardScheme extends StandardScheme<updateGoods_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGoods_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_INFO_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productInfoVo = new com.froad.thrift.vo.GoodsInfoVo();
                struct.productInfoVo.read(iprot);
                struct.setProductInfoVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGoods_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productInfoVo != null) {
          oprot.writeFieldBegin(PRODUCT_INFO_VO_FIELD_DESC);
          struct.productInfoVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGoods_argsTupleSchemeFactory implements SchemeFactory {
      public updateGoods_argsTupleScheme getScheme() {
        return new updateGoods_argsTupleScheme();
      }
    }

    private static class updateGoods_argsTupleScheme extends TupleScheme<updateGoods_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGoods_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductInfoVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductInfoVo()) {
          struct.productInfoVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGoods_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productInfoVo = new com.froad.thrift.vo.GoodsInfoVo();
          struct.productInfoVo.read(iprot);
          struct.setProductInfoVoIsSet(true);
        }
      }
    }

  }

  public static class updateGoods_result implements org.apache.thrift.TBase<updateGoods_result, updateGoods_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateGoods_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGoods_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGoods_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGoods_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGoods_result.class, metaDataMap);
    }

    public updateGoods_result() {
    }

    public updateGoods_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGoods_result(updateGoods_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateGoods_result deepCopy() {
      return new updateGoods_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateGoods_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGoods_result)
        return this.equals((updateGoods_result)that);
      return false;
    }

    public boolean equals(updateGoods_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateGoods_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGoods_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGoods_resultStandardSchemeFactory implements SchemeFactory {
      public updateGoods_resultStandardScheme getScheme() {
        return new updateGoods_resultStandardScheme();
      }
    }

    private static class updateGoods_resultStandardScheme extends StandardScheme<updateGoods_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGoods_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGoods_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGoods_resultTupleSchemeFactory implements SchemeFactory {
      public updateGoods_resultTupleScheme getScheme() {
        return new updateGoods_resultTupleScheme();
      }
    }

    private static class updateGoods_resultTupleScheme extends TupleScheme<updateGoods_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGoods_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGoods_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getGoodsDetail_args implements org.apache.thrift.TBase<getGoodsDetail_args, getGoodsDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getGoodsDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGoodsDetail_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGoodsDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGoodsDetail_argsTupleSchemeFactory());
    }

    public String productId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ID((short)1, "productId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ID
            return PRODUCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodsDetail_args.class, metaDataMap);
    }

    public getGoodsDetail_args() {
    }

    public getGoodsDetail_args(
      String productId)
    {
      this();
      this.productId = productId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGoodsDetail_args(getGoodsDetail_args other) {
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
    }

    public getGoodsDetail_args deepCopy() {
      return new getGoodsDetail_args(this);
    }

    @Override
    public void clear() {
      this.productId = null;
    }

    public String getProductId() {
      return this.productId;
    }

    public getGoodsDetail_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ID:
        return getProductId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ID:
        return isSetProductId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGoodsDetail_args)
        return this.equals((getGoodsDetail_args)that);
      return false;
    }

    public boolean equals(getGoodsDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getGoodsDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGoodsDetail_args(");
      boolean first = true;

      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGoodsDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getGoodsDetail_argsStandardScheme getScheme() {
        return new getGoodsDetail_argsStandardScheme();
      }
    }

    private static class getGoodsDetail_argsStandardScheme extends StandardScheme<getGoodsDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodsDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodsDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGoodsDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getGoodsDetail_argsTupleScheme getScheme() {
        return new getGoodsDetail_argsTupleScheme();
      }
    }

    private static class getGoodsDetail_argsTupleScheme extends TupleScheme<getGoodsDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGoodsDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGoodsDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
      }
    }

  }

  public static class getGoodsDetail_result implements org.apache.thrift.TBase<getGoodsDetail_result, getGoodsDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getGoodsDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGoodsDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGoodsDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGoodsDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.GoodsInfoVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.GoodsInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodsDetail_result.class, metaDataMap);
    }

    public getGoodsDetail_result() {
    }

    public getGoodsDetail_result(
      com.froad.thrift.vo.GoodsInfoVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGoodsDetail_result(getGoodsDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.GoodsInfoVo(other.success);
      }
    }

    public getGoodsDetail_result deepCopy() {
      return new getGoodsDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.GoodsInfoVo getSuccess() {
      return this.success;
    }

    public getGoodsDetail_result setSuccess(com.froad.thrift.vo.GoodsInfoVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.GoodsInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGoodsDetail_result)
        return this.equals((getGoodsDetail_result)that);
      return false;
    }

    public boolean equals(getGoodsDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getGoodsDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGoodsDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGoodsDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getGoodsDetail_resultStandardScheme getScheme() {
        return new getGoodsDetail_resultStandardScheme();
      }
    }

    private static class getGoodsDetail_resultStandardScheme extends StandardScheme<getGoodsDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodsDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.GoodsInfoVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodsDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGoodsDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getGoodsDetail_resultTupleScheme getScheme() {
        return new getGoodsDetail_resultTupleScheme();
      }
    }

    private static class getGoodsDetail_resultTupleScheme extends TupleScheme<getGoodsDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGoodsDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGoodsDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.GoodsInfoVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateGoodsStatusOn_args implements org.apache.thrift.TBase<updateGoodsStatusOn_args, updateGoodsStatusOn_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateGoodsStatusOn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGoodsStatusOn_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGoodsStatusOn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGoodsStatusOn_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String productId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_ID((short)2, "productId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_ID
            return PRODUCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGoodsStatusOn_args.class, metaDataMap);
    }

    public updateGoodsStatusOn_args() {
    }

    public updateGoodsStatusOn_args(
      com.froad.thrift.vo.OriginVo originVo,
      String productId)
    {
      this();
      this.originVo = originVo;
      this.productId = productId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGoodsStatusOn_args(updateGoodsStatusOn_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
    }

    public updateGoodsStatusOn_args deepCopy() {
      return new updateGoodsStatusOn_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productId = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateGoodsStatusOn_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getProductId() {
      return this.productId;
    }

    public updateGoodsStatusOn_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_ID:
        return getProductId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_ID:
        return isSetProductId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGoodsStatusOn_args)
        return this.equals((updateGoodsStatusOn_args)that);
      return false;
    }

    public boolean equals(updateGoodsStatusOn_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateGoodsStatusOn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGoodsStatusOn_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGoodsStatusOn_argsStandardSchemeFactory implements SchemeFactory {
      public updateGoodsStatusOn_argsStandardScheme getScheme() {
        return new updateGoodsStatusOn_argsStandardScheme();
      }
    }

    private static class updateGoodsStatusOn_argsStandardScheme extends StandardScheme<updateGoodsStatusOn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGoodsStatusOn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGoodsStatusOn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGoodsStatusOn_argsTupleSchemeFactory implements SchemeFactory {
      public updateGoodsStatusOn_argsTupleScheme getScheme() {
        return new updateGoodsStatusOn_argsTupleScheme();
      }
    }

    private static class updateGoodsStatusOn_argsTupleScheme extends TupleScheme<updateGoodsStatusOn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGoodsStatusOn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGoodsStatusOn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
      }
    }

  }

  public static class updateGoodsStatusOn_result implements org.apache.thrift.TBase<updateGoodsStatusOn_result, updateGoodsStatusOn_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateGoodsStatusOn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGoodsStatusOn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGoodsStatusOn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGoodsStatusOn_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGoodsStatusOn_result.class, metaDataMap);
    }

    public updateGoodsStatusOn_result() {
    }

    public updateGoodsStatusOn_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGoodsStatusOn_result(updateGoodsStatusOn_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateGoodsStatusOn_result deepCopy() {
      return new updateGoodsStatusOn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateGoodsStatusOn_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGoodsStatusOn_result)
        return this.equals((updateGoodsStatusOn_result)that);
      return false;
    }

    public boolean equals(updateGoodsStatusOn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateGoodsStatusOn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGoodsStatusOn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGoodsStatusOn_resultStandardSchemeFactory implements SchemeFactory {
      public updateGoodsStatusOn_resultStandardScheme getScheme() {
        return new updateGoodsStatusOn_resultStandardScheme();
      }
    }

    private static class updateGoodsStatusOn_resultStandardScheme extends StandardScheme<updateGoodsStatusOn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGoodsStatusOn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGoodsStatusOn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGoodsStatusOn_resultTupleSchemeFactory implements SchemeFactory {
      public updateGoodsStatusOn_resultTupleScheme getScheme() {
        return new updateGoodsStatusOn_resultTupleScheme();
      }
    }

    private static class updateGoodsStatusOn_resultTupleScheme extends TupleScheme<updateGoodsStatusOn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGoodsStatusOn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGoodsStatusOn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateGoodsStatusOff_args implements org.apache.thrift.TBase<updateGoodsStatusOff_args, updateGoodsStatusOff_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateGoodsStatusOff_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGoodsStatusOff_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGoodsStatusOff_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGoodsStatusOff_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String productId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      PRODUCT_ID((short)2, "productId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // PRODUCT_ID
            return PRODUCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGoodsStatusOff_args.class, metaDataMap);
    }

    public updateGoodsStatusOff_args() {
    }

    public updateGoodsStatusOff_args(
      com.froad.thrift.vo.OriginVo originVo,
      String productId)
    {
      this();
      this.originVo = originVo;
      this.productId = productId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGoodsStatusOff_args(updateGoodsStatusOff_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
    }

    public updateGoodsStatusOff_args deepCopy() {
      return new updateGoodsStatusOff_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.productId = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateGoodsStatusOff_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getProductId() {
      return this.productId;
    }

    public updateGoodsStatusOff_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case PRODUCT_ID:
        return getProductId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case PRODUCT_ID:
        return isSetProductId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGoodsStatusOff_args)
        return this.equals((updateGoodsStatusOff_args)that);
      return false;
    }

    public boolean equals(updateGoodsStatusOff_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateGoodsStatusOff_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGoodsStatusOff_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGoodsStatusOff_argsStandardSchemeFactory implements SchemeFactory {
      public updateGoodsStatusOff_argsStandardScheme getScheme() {
        return new updateGoodsStatusOff_argsStandardScheme();
      }
    }

    private static class updateGoodsStatusOff_argsStandardScheme extends StandardScheme<updateGoodsStatusOff_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGoodsStatusOff_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGoodsStatusOff_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGoodsStatusOff_argsTupleSchemeFactory implements SchemeFactory {
      public updateGoodsStatusOff_argsTupleScheme getScheme() {
        return new updateGoodsStatusOff_argsTupleScheme();
      }
    }

    private static class updateGoodsStatusOff_argsTupleScheme extends TupleScheme<updateGoodsStatusOff_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGoodsStatusOff_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetProductId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGoodsStatusOff_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
      }
    }

  }

  public static class updateGoodsStatusOff_result implements org.apache.thrift.TBase<updateGoodsStatusOff_result, updateGoodsStatusOff_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateGoodsStatusOff_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateGoodsStatusOff_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateGoodsStatusOff_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateGoodsStatusOff_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateGoodsStatusOff_result.class, metaDataMap);
    }

    public updateGoodsStatusOff_result() {
    }

    public updateGoodsStatusOff_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGoodsStatusOff_result(updateGoodsStatusOff_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateGoodsStatusOff_result deepCopy() {
      return new updateGoodsStatusOff_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateGoodsStatusOff_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGoodsStatusOff_result)
        return this.equals((updateGoodsStatusOff_result)that);
      return false;
    }

    public boolean equals(updateGoodsStatusOff_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateGoodsStatusOff_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateGoodsStatusOff_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateGoodsStatusOff_resultStandardSchemeFactory implements SchemeFactory {
      public updateGoodsStatusOff_resultStandardScheme getScheme() {
        return new updateGoodsStatusOff_resultStandardScheme();
      }
    }

    private static class updateGoodsStatusOff_resultStandardScheme extends StandardScheme<updateGoodsStatusOff_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateGoodsStatusOff_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateGoodsStatusOff_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateGoodsStatusOff_resultTupleSchemeFactory implements SchemeFactory {
      public updateGoodsStatusOff_resultTupleScheme getScheme() {
        return new updateGoodsStatusOff_resultTupleScheme();
      }
    }

    private static class updateGoodsStatusOff_resultTupleScheme extends TupleScheme<updateGoodsStatusOff_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateGoodsStatusOff_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateGoodsStatusOff_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryBoutiqueGoods_args implements org.apache.thrift.TBase<queryBoutiqueGoods_args, queryBoutiqueGoods_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBoutiqueGoods_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBoutiqueGoods_args");

    private static final org.apache.thrift.protocol.TField FILTER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("filterVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FILED_SORT_FIELD_DESC = new org.apache.thrift.protocol.TField("filedSort", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBoutiqueGoods_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBoutiqueGoods_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo filterVo; // required
    public com.froad.thrift.vo.FiledSort filedSort; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILTER_VO((short)1, "filterVo"),
      FILED_SORT((short)2, "filedSort"),
      PAGE_VO((short)3, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILTER_VO
            return FILTER_VO;
          case 2: // FILED_SORT
            return FILED_SORT;
          case 3: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILTER_VO, new org.apache.thrift.meta_data.FieldMetaData("filterVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo.class)));
      tmpMap.put(_Fields.FILED_SORT, new org.apache.thrift.meta_data.FieldMetaData("filedSort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.FiledSort.class)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBoutiqueGoods_args.class, metaDataMap);
    }

    public queryBoutiqueGoods_args() {
    }

    public queryBoutiqueGoods_args(
      com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo filterVo,
      com.froad.thrift.vo.FiledSort filedSort,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.filterVo = filterVo;
      this.filedSort = filedSort;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBoutiqueGoods_args(queryBoutiqueGoods_args other) {
      if (other.isSetFilterVo()) {
        this.filterVo = new com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo(other.filterVo);
      }
      if (other.isSetFiledSort()) {
        this.filedSort = new com.froad.thrift.vo.FiledSort(other.filedSort);
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public queryBoutiqueGoods_args deepCopy() {
      return new queryBoutiqueGoods_args(this);
    }

    @Override
    public void clear() {
      this.filterVo = null;
      this.filedSort = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo getFilterVo() {
      return this.filterVo;
    }

    public queryBoutiqueGoods_args setFilterVo(com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo filterVo) {
      this.filterVo = filterVo;
      return this;
    }

    public void unsetFilterVo() {
      this.filterVo = null;
    }

    /** Returns true if field filterVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFilterVo() {
      return this.filterVo != null;
    }

    public void setFilterVoIsSet(boolean value) {
      if (!value) {
        this.filterVo = null;
      }
    }

    public com.froad.thrift.vo.FiledSort getFiledSort() {
      return this.filedSort;
    }

    public queryBoutiqueGoods_args setFiledSort(com.froad.thrift.vo.FiledSort filedSort) {
      this.filedSort = filedSort;
      return this;
    }

    public void unsetFiledSort() {
      this.filedSort = null;
    }

    /** Returns true if field filedSort is set (has been assigned a value) and false otherwise */
    public boolean isSetFiledSort() {
      return this.filedSort != null;
    }

    public void setFiledSortIsSet(boolean value) {
      if (!value) {
        this.filedSort = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public queryBoutiqueGoods_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILTER_VO:
        if (value == null) {
          unsetFilterVo();
        } else {
          setFilterVo((com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo)value);
        }
        break;

      case FILED_SORT:
        if (value == null) {
          unsetFiledSort();
        } else {
          setFiledSort((com.froad.thrift.vo.FiledSort)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILTER_VO:
        return getFilterVo();

      case FILED_SORT:
        return getFiledSort();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILTER_VO:
        return isSetFilterVo();
      case FILED_SORT:
        return isSetFiledSort();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBoutiqueGoods_args)
        return this.equals((queryBoutiqueGoods_args)that);
      return false;
    }

    public boolean equals(queryBoutiqueGoods_args that) {
      if (that == null)
        return false;

      boolean this_present_filterVo = true && this.isSetFilterVo();
      boolean that_present_filterVo = true && that.isSetFilterVo();
      if (this_present_filterVo || that_present_filterVo) {
        if (!(this_present_filterVo && that_present_filterVo))
          return false;
        if (!this.filterVo.equals(that.filterVo))
          return false;
      }

      boolean this_present_filedSort = true && this.isSetFiledSort();
      boolean that_present_filedSort = true && that.isSetFiledSort();
      if (this_present_filedSort || that_present_filedSort) {
        if (!(this_present_filedSort && that_present_filedSort))
          return false;
        if (!this.filedSort.equals(that.filedSort))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_filterVo = true && (isSetFilterVo());
      list.add(present_filterVo);
      if (present_filterVo)
        list.add(filterVo);

      boolean present_filedSort = true && (isSetFiledSort());
      list.add(present_filedSort);
      if (present_filedSort)
        list.add(filedSort);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBoutiqueGoods_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFilterVo()).compareTo(other.isSetFilterVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilterVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterVo, other.filterVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFiledSort()).compareTo(other.isSetFiledSort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFiledSort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filedSort, other.filedSort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBoutiqueGoods_args(");
      boolean first = true;

      sb.append("filterVo:");
      if (this.filterVo == null) {
        sb.append("null");
      } else {
        sb.append(this.filterVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filedSort:");
      if (this.filedSort == null) {
        sb.append("null");
      } else {
        sb.append(this.filedSort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (filterVo != null) {
        filterVo.validate();
      }
      if (filedSort != null) {
        filedSort.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBoutiqueGoods_argsStandardSchemeFactory implements SchemeFactory {
      public queryBoutiqueGoods_argsStandardScheme getScheme() {
        return new queryBoutiqueGoods_argsStandardScheme();
      }
    }

    private static class queryBoutiqueGoods_argsStandardScheme extends StandardScheme<queryBoutiqueGoods_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBoutiqueGoods_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILTER_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.filterVo = new com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo();
                struct.filterVo.read(iprot);
                struct.setFilterVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILED_SORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.filedSort = new com.froad.thrift.vo.FiledSort();
                struct.filedSort.read(iprot);
                struct.setFiledSortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBoutiqueGoods_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filterVo != null) {
          oprot.writeFieldBegin(FILTER_VO_FIELD_DESC);
          struct.filterVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.filedSort != null) {
          oprot.writeFieldBegin(FILED_SORT_FIELD_DESC);
          struct.filedSort.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBoutiqueGoods_argsTupleSchemeFactory implements SchemeFactory {
      public queryBoutiqueGoods_argsTupleScheme getScheme() {
        return new queryBoutiqueGoods_argsTupleScheme();
      }
    }

    private static class queryBoutiqueGoods_argsTupleScheme extends TupleScheme<queryBoutiqueGoods_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBoutiqueGoods_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilterVo()) {
          optionals.set(0);
        }
        if (struct.isSetFiledSort()) {
          optionals.set(1);
        }
        if (struct.isSetPageVo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFilterVo()) {
          struct.filterVo.write(oprot);
        }
        if (struct.isSetFiledSort()) {
          struct.filedSort.write(oprot);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBoutiqueGoods_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.filterVo = new com.froad.thrift.vo.QueryBoutiqueGoodsFilterVo();
          struct.filterVo.read(iprot);
          struct.setFilterVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.filedSort = new com.froad.thrift.vo.FiledSort();
          struct.filedSort.read(iprot);
          struct.setFiledSortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class queryBoutiqueGoods_result implements org.apache.thrift.TBase<queryBoutiqueGoods_result, queryBoutiqueGoods_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBoutiqueGoods_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBoutiqueGoods_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBoutiqueGoods_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBoutiqueGoods_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BoutiqueProductPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BoutiqueProductPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBoutiqueGoods_result.class, metaDataMap);
    }

    public queryBoutiqueGoods_result() {
    }

    public queryBoutiqueGoods_result(
      com.froad.thrift.vo.BoutiqueProductPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBoutiqueGoods_result(queryBoutiqueGoods_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.BoutiqueProductPageVoRes(other.success);
      }
    }

    public queryBoutiqueGoods_result deepCopy() {
      return new queryBoutiqueGoods_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.BoutiqueProductPageVoRes getSuccess() {
      return this.success;
    }

    public queryBoutiqueGoods_result setSuccess(com.froad.thrift.vo.BoutiqueProductPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.BoutiqueProductPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBoutiqueGoods_result)
        return this.equals((queryBoutiqueGoods_result)that);
      return false;
    }

    public boolean equals(queryBoutiqueGoods_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBoutiqueGoods_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBoutiqueGoods_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBoutiqueGoods_resultStandardSchemeFactory implements SchemeFactory {
      public queryBoutiqueGoods_resultStandardScheme getScheme() {
        return new queryBoutiqueGoods_resultStandardScheme();
      }
    }

    private static class queryBoutiqueGoods_resultStandardScheme extends StandardScheme<queryBoutiqueGoods_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBoutiqueGoods_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.BoutiqueProductPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBoutiqueGoods_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBoutiqueGoods_resultTupleSchemeFactory implements SchemeFactory {
      public queryBoutiqueGoods_resultTupleScheme getScheme() {
        return new queryBoutiqueGoods_resultTupleScheme();
      }
    }

    private static class queryBoutiqueGoods_resultTupleScheme extends TupleScheme<queryBoutiqueGoods_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBoutiqueGoods_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBoutiqueGoods_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.BoutiqueProductPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryBoutiqueGoodsDetail_args implements org.apache.thrift.TBase<queryBoutiqueGoodsDetail_args, queryBoutiqueGoodsDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBoutiqueGoodsDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBoutiqueGoodsDetail_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBoutiqueGoodsDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBoutiqueGoodsDetail_argsTupleSchemeFactory());
    }

    public String productId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ID((short)1, "productId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ID
            return PRODUCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBoutiqueGoodsDetail_args.class, metaDataMap);
    }

    public queryBoutiqueGoodsDetail_args() {
    }

    public queryBoutiqueGoodsDetail_args(
      String productId)
    {
      this();
      this.productId = productId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBoutiqueGoodsDetail_args(queryBoutiqueGoodsDetail_args other) {
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
    }

    public queryBoutiqueGoodsDetail_args deepCopy() {
      return new queryBoutiqueGoodsDetail_args(this);
    }

    @Override
    public void clear() {
      this.productId = null;
    }

    public String getProductId() {
      return this.productId;
    }

    public queryBoutiqueGoodsDetail_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ID:
        return getProductId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ID:
        return isSetProductId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBoutiqueGoodsDetail_args)
        return this.equals((queryBoutiqueGoodsDetail_args)that);
      return false;
    }

    public boolean equals(queryBoutiqueGoodsDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBoutiqueGoodsDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBoutiqueGoodsDetail_args(");
      boolean first = true;

      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBoutiqueGoodsDetail_argsStandardSchemeFactory implements SchemeFactory {
      public queryBoutiqueGoodsDetail_argsStandardScheme getScheme() {
        return new queryBoutiqueGoodsDetail_argsStandardScheme();
      }
    }

    private static class queryBoutiqueGoodsDetail_argsStandardScheme extends StandardScheme<queryBoutiqueGoodsDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBoutiqueGoodsDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBoutiqueGoodsDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBoutiqueGoodsDetail_argsTupleSchemeFactory implements SchemeFactory {
      public queryBoutiqueGoodsDetail_argsTupleScheme getScheme() {
        return new queryBoutiqueGoodsDetail_argsTupleScheme();
      }
    }

    private static class queryBoutiqueGoodsDetail_argsTupleScheme extends TupleScheme<queryBoutiqueGoodsDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBoutiqueGoodsDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBoutiqueGoodsDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
      }
    }

  }

  public static class queryBoutiqueGoodsDetail_result implements org.apache.thrift.TBase<queryBoutiqueGoodsDetail_result, queryBoutiqueGoodsDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBoutiqueGoodsDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBoutiqueGoodsDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBoutiqueGoodsDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBoutiqueGoodsDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BoutiqueGoodsInfoVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BoutiqueGoodsInfoVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBoutiqueGoodsDetail_result.class, metaDataMap);
    }

    public queryBoutiqueGoodsDetail_result() {
    }

    public queryBoutiqueGoodsDetail_result(
      com.froad.thrift.vo.BoutiqueGoodsInfoVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBoutiqueGoodsDetail_result(queryBoutiqueGoodsDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.BoutiqueGoodsInfoVo(other.success);
      }
    }

    public queryBoutiqueGoodsDetail_result deepCopy() {
      return new queryBoutiqueGoodsDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.BoutiqueGoodsInfoVo getSuccess() {
      return this.success;
    }

    public queryBoutiqueGoodsDetail_result setSuccess(com.froad.thrift.vo.BoutiqueGoodsInfoVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.BoutiqueGoodsInfoVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBoutiqueGoodsDetail_result)
        return this.equals((queryBoutiqueGoodsDetail_result)that);
      return false;
    }

    public boolean equals(queryBoutiqueGoodsDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBoutiqueGoodsDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBoutiqueGoodsDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBoutiqueGoodsDetail_resultStandardSchemeFactory implements SchemeFactory {
      public queryBoutiqueGoodsDetail_resultStandardScheme getScheme() {
        return new queryBoutiqueGoodsDetail_resultStandardScheme();
      }
    }

    private static class queryBoutiqueGoodsDetail_resultStandardScheme extends StandardScheme<queryBoutiqueGoodsDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBoutiqueGoodsDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.BoutiqueGoodsInfoVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBoutiqueGoodsDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBoutiqueGoodsDetail_resultTupleSchemeFactory implements SchemeFactory {
      public queryBoutiqueGoodsDetail_resultTupleScheme getScheme() {
        return new queryBoutiqueGoodsDetail_resultTupleScheme();
      }
    }

    private static class queryBoutiqueGoodsDetail_resultTupleScheme extends TupleScheme<queryBoutiqueGoodsDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBoutiqueGoodsDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBoutiqueGoodsDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.BoutiqueGoodsInfoVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductDetail_args implements org.apache.thrift.TBase<getProductDetail_args, getProductDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductDetail_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductDetail_argsTupleSchemeFactory());
    }

    public String productId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ID((short)1, "productId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ID
            return PRODUCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductDetail_args.class, metaDataMap);
    }

    public getProductDetail_args() {
    }

    public getProductDetail_args(
      String productId)
    {
      this();
      this.productId = productId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductDetail_args(getProductDetail_args other) {
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
    }

    public getProductDetail_args deepCopy() {
      return new getProductDetail_args(this);
    }

    @Override
    public void clear() {
      this.productId = null;
    }

    public String getProductId() {
      return this.productId;
    }

    public getProductDetail_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ID:
        return getProductId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ID:
        return isSetProductId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductDetail_args)
        return this.equals((getProductDetail_args)that);
      return false;
    }

    public boolean equals(getProductDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductDetail_args(");
      boolean first = true;

      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getProductDetail_argsStandardScheme getScheme() {
        return new getProductDetail_argsStandardScheme();
      }
    }

    private static class getProductDetail_argsStandardScheme extends StandardScheme<getProductDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getProductDetail_argsTupleScheme getScheme() {
        return new getProductDetail_argsTupleScheme();
      }
    }

    private static class getProductDetail_argsTupleScheme extends TupleScheme<getProductDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
      }
    }

  }

  public static class getProductDetail_result implements org.apache.thrift.TBase<getProductDetail_result, getProductDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductDetailInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductDetailInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductDetail_result.class, metaDataMap);
    }

    public getProductDetail_result() {
    }

    public getProductDetail_result(
      com.froad.thrift.vo.ProductDetailInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductDetail_result(getProductDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductDetailInfo(other.success);
      }
    }

    public getProductDetail_result deepCopy() {
      return new getProductDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductDetailInfo getSuccess() {
      return this.success;
    }

    public getProductDetail_result setSuccess(com.froad.thrift.vo.ProductDetailInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductDetailInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductDetail_result)
        return this.equals((getProductDetail_result)that);
      return false;
    }

    public boolean equals(getProductDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getProductDetail_resultStandardScheme getScheme() {
        return new getProductDetail_resultStandardScheme();
      }
    }

    private static class getProductDetail_resultStandardScheme extends StandardScheme<getProductDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductDetailInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getProductDetail_resultTupleScheme getScheme() {
        return new getProductDetail_resultTupleScheme();
      }
    }

    private static class getProductDetail_resultTupleScheme extends TupleScheme<getProductDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductDetailInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findProductsByPage_args implements org.apache.thrift.TBase<findProductsByPage_args, findProductsByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findProductsByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProductsByPage_args");

    private static final org.apache.thrift.protocol.TField FILTER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("filterVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FILED_SORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("filedSorts", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProductsByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProductsByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductFilterReqVo filterVo; // required
    public List<com.froad.thrift.vo.FiledSort> filedSorts; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILTER_VO((short)1, "filterVo"),
      FILED_SORTS((short)2, "filedSorts"),
      PAGE_VO((short)3, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILTER_VO
            return FILTER_VO;
          case 2: // FILED_SORTS
            return FILED_SORTS;
          case 3: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILTER_VO, new org.apache.thrift.meta_data.FieldMetaData("filterVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductFilterReqVo.class)));
      tmpMap.put(_Fields.FILED_SORTS, new org.apache.thrift.meta_data.FieldMetaData("filedSorts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.FiledSort.class))));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProductsByPage_args.class, metaDataMap);
    }

    public findProductsByPage_args() {
    }

    public findProductsByPage_args(
      com.froad.thrift.vo.ProductFilterReqVo filterVo,
      List<com.froad.thrift.vo.FiledSort> filedSorts,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.filterVo = filterVo;
      this.filedSorts = filedSorts;
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProductsByPage_args(findProductsByPage_args other) {
      if (other.isSetFilterVo()) {
        this.filterVo = new com.froad.thrift.vo.ProductFilterReqVo(other.filterVo);
      }
      if (other.isSetFiledSorts()) {
        List<com.froad.thrift.vo.FiledSort> __this__filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>(other.filedSorts.size());
        for (com.froad.thrift.vo.FiledSort other_element : other.filedSorts) {
          __this__filedSorts.add(new com.froad.thrift.vo.FiledSort(other_element));
        }
        this.filedSorts = __this__filedSorts;
      }
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public findProductsByPage_args deepCopy() {
      return new findProductsByPage_args(this);
    }

    @Override
    public void clear() {
      this.filterVo = null;
      this.filedSorts = null;
      this.pageVo = null;
    }

    public com.froad.thrift.vo.ProductFilterReqVo getFilterVo() {
      return this.filterVo;
    }

    public findProductsByPage_args setFilterVo(com.froad.thrift.vo.ProductFilterReqVo filterVo) {
      this.filterVo = filterVo;
      return this;
    }

    public void unsetFilterVo() {
      this.filterVo = null;
    }

    /** Returns true if field filterVo is set (has been assigned a value) and false otherwise */
    public boolean isSetFilterVo() {
      return this.filterVo != null;
    }

    public void setFilterVoIsSet(boolean value) {
      if (!value) {
        this.filterVo = null;
      }
    }

    public int getFiledSortsSize() {
      return (this.filedSorts == null) ? 0 : this.filedSorts.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.FiledSort> getFiledSortsIterator() {
      return (this.filedSorts == null) ? null : this.filedSorts.iterator();
    }

    public void addToFiledSorts(com.froad.thrift.vo.FiledSort elem) {
      if (this.filedSorts == null) {
        this.filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>();
      }
      this.filedSorts.add(elem);
    }

    public List<com.froad.thrift.vo.FiledSort> getFiledSorts() {
      return this.filedSorts;
    }

    public findProductsByPage_args setFiledSorts(List<com.froad.thrift.vo.FiledSort> filedSorts) {
      this.filedSorts = filedSorts;
      return this;
    }

    public void unsetFiledSorts() {
      this.filedSorts = null;
    }

    /** Returns true if field filedSorts is set (has been assigned a value) and false otherwise */
    public boolean isSetFiledSorts() {
      return this.filedSorts != null;
    }

    public void setFiledSortsIsSet(boolean value) {
      if (!value) {
        this.filedSorts = null;
      }
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public findProductsByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILTER_VO:
        if (value == null) {
          unsetFilterVo();
        } else {
          setFilterVo((com.froad.thrift.vo.ProductFilterReqVo)value);
        }
        break;

      case FILED_SORTS:
        if (value == null) {
          unsetFiledSorts();
        } else {
          setFiledSorts((List<com.froad.thrift.vo.FiledSort>)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILTER_VO:
        return getFilterVo();

      case FILED_SORTS:
        return getFiledSorts();

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILTER_VO:
        return isSetFilterVo();
      case FILED_SORTS:
        return isSetFiledSorts();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProductsByPage_args)
        return this.equals((findProductsByPage_args)that);
      return false;
    }

    public boolean equals(findProductsByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_filterVo = true && this.isSetFilterVo();
      boolean that_present_filterVo = true && that.isSetFilterVo();
      if (this_present_filterVo || that_present_filterVo) {
        if (!(this_present_filterVo && that_present_filterVo))
          return false;
        if (!this.filterVo.equals(that.filterVo))
          return false;
      }

      boolean this_present_filedSorts = true && this.isSetFiledSorts();
      boolean that_present_filedSorts = true && that.isSetFiledSorts();
      if (this_present_filedSorts || that_present_filedSorts) {
        if (!(this_present_filedSorts && that_present_filedSorts))
          return false;
        if (!this.filedSorts.equals(that.filedSorts))
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_filterVo = true && (isSetFilterVo());
      list.add(present_filterVo);
      if (present_filterVo)
        list.add(filterVo);

      boolean present_filedSorts = true && (isSetFiledSorts());
      list.add(present_filedSorts);
      if (present_filedSorts)
        list.add(filedSorts);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProductsByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFilterVo()).compareTo(other.isSetFilterVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilterVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterVo, other.filterVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFiledSorts()).compareTo(other.isSetFiledSorts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFiledSorts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filedSorts, other.filedSorts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProductsByPage_args(");
      boolean first = true;

      sb.append("filterVo:");
      if (this.filterVo == null) {
        sb.append("null");
      } else {
        sb.append(this.filterVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filedSorts:");
      if (this.filedSorts == null) {
        sb.append("null");
      } else {
        sb.append(this.filedSorts);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (filterVo != null) {
        filterVo.validate();
      }
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProductsByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findProductsByPage_argsStandardScheme getScheme() {
        return new findProductsByPage_argsStandardScheme();
      }
    }

    private static class findProductsByPage_argsStandardScheme extends StandardScheme<findProductsByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProductsByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILTER_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.filterVo = new com.froad.thrift.vo.ProductFilterReqVo();
                struct.filterVo.read(iprot);
                struct.setFilterVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILED_SORTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                  struct.filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>(_list200.size);
                  com.froad.thrift.vo.FiledSort _elem201;
                  for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                  {
                    _elem201 = new com.froad.thrift.vo.FiledSort();
                    _elem201.read(iprot);
                    struct.filedSorts.add(_elem201);
                  }
                  iprot.readListEnd();
                }
                struct.setFiledSortsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProductsByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filterVo != null) {
          oprot.writeFieldBegin(FILTER_VO_FIELD_DESC);
          struct.filterVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.filedSorts != null) {
          oprot.writeFieldBegin(FILED_SORTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.filedSorts.size()));
            for (com.froad.thrift.vo.FiledSort _iter203 : struct.filedSorts)
            {
              _iter203.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProductsByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findProductsByPage_argsTupleScheme getScheme() {
        return new findProductsByPage_argsTupleScheme();
      }
    }

    private static class findProductsByPage_argsTupleScheme extends TupleScheme<findProductsByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProductsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilterVo()) {
          optionals.set(0);
        }
        if (struct.isSetFiledSorts()) {
          optionals.set(1);
        }
        if (struct.isSetPageVo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFilterVo()) {
          struct.filterVo.write(oprot);
        }
        if (struct.isSetFiledSorts()) {
          {
            oprot.writeI32(struct.filedSorts.size());
            for (com.froad.thrift.vo.FiledSort _iter204 : struct.filedSorts)
            {
              _iter204.write(oprot);
            }
          }
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProductsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.filterVo = new com.froad.thrift.vo.ProductFilterReqVo();
          struct.filterVo.read(iprot);
          struct.setFilterVoIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.filedSorts = new ArrayList<com.froad.thrift.vo.FiledSort>(_list205.size);
            com.froad.thrift.vo.FiledSort _elem206;
            for (int _i207 = 0; _i207 < _list205.size; ++_i207)
            {
              _elem206 = new com.froad.thrift.vo.FiledSort();
              _elem206.read(iprot);
              struct.filedSorts.add(_elem206);
            }
          }
          struct.setFiledSortsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class findProductsByPage_result implements org.apache.thrift.TBase<findProductsByPage_result, findProductsByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findProductsByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProductsByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProductsByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProductsByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProductsByPage_result.class, metaDataMap);
    }

    public findProductsByPage_result() {
    }

    public findProductsByPage_result(
      com.froad.thrift.vo.ProductPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProductsByPage_result(findProductsByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductPageVo(other.success);
      }
    }

    public findProductsByPage_result deepCopy() {
      return new findProductsByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductPageVo getSuccess() {
      return this.success;
    }

    public findProductsByPage_result setSuccess(com.froad.thrift.vo.ProductPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProductsByPage_result)
        return this.equals((findProductsByPage_result)that);
      return false;
    }

    public boolean equals(findProductsByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProductsByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProductsByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProductsByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findProductsByPage_resultStandardScheme getScheme() {
        return new findProductsByPage_resultStandardScheme();
      }
    }

    private static class findProductsByPage_resultStandardScheme extends StandardScheme<findProductsByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProductsByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProductsByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProductsByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findProductsByPage_resultTupleScheme getScheme() {
        return new findProductsByPage_resultTupleScheme();
      }
    }

    private static class findProductsByPage_resultTupleScheme extends TupleScheme<findProductsByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProductsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProductsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateProductAuditState_args implements org.apache.thrift.TBase<updateProductAuditState_args, updateProductAuditState_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductAuditState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductAuditState_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_AUDIT_STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("productAuditStates", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductAuditState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductAuditState_argsTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.EditProductAuditStateVo> productAuditStates; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_AUDIT_STATES((short)1, "productAuditStates");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_AUDIT_STATES
            return PRODUCT_AUDIT_STATES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_AUDIT_STATES, new org.apache.thrift.meta_data.FieldMetaData("productAuditStates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.EditProductAuditStateVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductAuditState_args.class, metaDataMap);
    }

    public updateProductAuditState_args() {
    }

    public updateProductAuditState_args(
      List<com.froad.thrift.vo.EditProductAuditStateVo> productAuditStates)
    {
      this();
      this.productAuditStates = productAuditStates;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductAuditState_args(updateProductAuditState_args other) {
      if (other.isSetProductAuditStates()) {
        List<com.froad.thrift.vo.EditProductAuditStateVo> __this__productAuditStates = new ArrayList<com.froad.thrift.vo.EditProductAuditStateVo>(other.productAuditStates.size());
        for (com.froad.thrift.vo.EditProductAuditStateVo other_element : other.productAuditStates) {
          __this__productAuditStates.add(new com.froad.thrift.vo.EditProductAuditStateVo(other_element));
        }
        this.productAuditStates = __this__productAuditStates;
      }
    }

    public updateProductAuditState_args deepCopy() {
      return new updateProductAuditState_args(this);
    }

    @Override
    public void clear() {
      this.productAuditStates = null;
    }

    public int getProductAuditStatesSize() {
      return (this.productAuditStates == null) ? 0 : this.productAuditStates.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.EditProductAuditStateVo> getProductAuditStatesIterator() {
      return (this.productAuditStates == null) ? null : this.productAuditStates.iterator();
    }

    public void addToProductAuditStates(com.froad.thrift.vo.EditProductAuditStateVo elem) {
      if (this.productAuditStates == null) {
        this.productAuditStates = new ArrayList<com.froad.thrift.vo.EditProductAuditStateVo>();
      }
      this.productAuditStates.add(elem);
    }

    public List<com.froad.thrift.vo.EditProductAuditStateVo> getProductAuditStates() {
      return this.productAuditStates;
    }

    public updateProductAuditState_args setProductAuditStates(List<com.froad.thrift.vo.EditProductAuditStateVo> productAuditStates) {
      this.productAuditStates = productAuditStates;
      return this;
    }

    public void unsetProductAuditStates() {
      this.productAuditStates = null;
    }

    /** Returns true if field productAuditStates is set (has been assigned a value) and false otherwise */
    public boolean isSetProductAuditStates() {
      return this.productAuditStates != null;
    }

    public void setProductAuditStatesIsSet(boolean value) {
      if (!value) {
        this.productAuditStates = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_AUDIT_STATES:
        if (value == null) {
          unsetProductAuditStates();
        } else {
          setProductAuditStates((List<com.froad.thrift.vo.EditProductAuditStateVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_AUDIT_STATES:
        return getProductAuditStates();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_AUDIT_STATES:
        return isSetProductAuditStates();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductAuditState_args)
        return this.equals((updateProductAuditState_args)that);
      return false;
    }

    public boolean equals(updateProductAuditState_args that) {
      if (that == null)
        return false;

      boolean this_present_productAuditStates = true && this.isSetProductAuditStates();
      boolean that_present_productAuditStates = true && that.isSetProductAuditStates();
      if (this_present_productAuditStates || that_present_productAuditStates) {
        if (!(this_present_productAuditStates && that_present_productAuditStates))
          return false;
        if (!this.productAuditStates.equals(that.productAuditStates))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productAuditStates = true && (isSetProductAuditStates());
      list.add(present_productAuditStates);
      if (present_productAuditStates)
        list.add(productAuditStates);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductAuditState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductAuditStates()).compareTo(other.isSetProductAuditStates());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductAuditStates()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productAuditStates, other.productAuditStates);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductAuditState_args(");
      boolean first = true;

      sb.append("productAuditStates:");
      if (this.productAuditStates == null) {
        sb.append("null");
      } else {
        sb.append(this.productAuditStates);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductAuditState_argsStandardSchemeFactory implements SchemeFactory {
      public updateProductAuditState_argsStandardScheme getScheme() {
        return new updateProductAuditState_argsStandardScheme();
      }
    }

    private static class updateProductAuditState_argsStandardScheme extends StandardScheme<updateProductAuditState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductAuditState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_AUDIT_STATES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                  struct.productAuditStates = new ArrayList<com.froad.thrift.vo.EditProductAuditStateVo>(_list208.size);
                  com.froad.thrift.vo.EditProductAuditStateVo _elem209;
                  for (int _i210 = 0; _i210 < _list208.size; ++_i210)
                  {
                    _elem209 = new com.froad.thrift.vo.EditProductAuditStateVo();
                    _elem209.read(iprot);
                    struct.productAuditStates.add(_elem209);
                  }
                  iprot.readListEnd();
                }
                struct.setProductAuditStatesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductAuditState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productAuditStates != null) {
          oprot.writeFieldBegin(PRODUCT_AUDIT_STATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productAuditStates.size()));
            for (com.froad.thrift.vo.EditProductAuditStateVo _iter211 : struct.productAuditStates)
            {
              _iter211.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductAuditState_argsTupleSchemeFactory implements SchemeFactory {
      public updateProductAuditState_argsTupleScheme getScheme() {
        return new updateProductAuditState_argsTupleScheme();
      }
    }

    private static class updateProductAuditState_argsTupleScheme extends TupleScheme<updateProductAuditState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductAuditState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductAuditStates()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductAuditStates()) {
          {
            oprot.writeI32(struct.productAuditStates.size());
            for (com.froad.thrift.vo.EditProductAuditStateVo _iter212 : struct.productAuditStates)
            {
              _iter212.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductAuditState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.productAuditStates = new ArrayList<com.froad.thrift.vo.EditProductAuditStateVo>(_list213.size);
            com.froad.thrift.vo.EditProductAuditStateVo _elem214;
            for (int _i215 = 0; _i215 < _list213.size; ++_i215)
            {
              _elem214 = new com.froad.thrift.vo.EditProductAuditStateVo();
              _elem214.read(iprot);
              struct.productAuditStates.add(_elem214);
            }
          }
          struct.setProductAuditStatesIsSet(true);
        }
      }
    }

  }

  public static class updateProductAuditState_result implements org.apache.thrift.TBase<updateProductAuditState_result, updateProductAuditState_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProductAuditState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProductAuditState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateProductAuditState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateProductAuditState_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProductAuditState_result.class, metaDataMap);
    }

    public updateProductAuditState_result() {
    }

    public updateProductAuditState_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProductAuditState_result(updateProductAuditState_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateProductAuditState_result deepCopy() {
      return new updateProductAuditState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateProductAuditState_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProductAuditState_result)
        return this.equals((updateProductAuditState_result)that);
      return false;
    }

    public boolean equals(updateProductAuditState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateProductAuditState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateProductAuditState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProductAuditState_resultStandardSchemeFactory implements SchemeFactory {
      public updateProductAuditState_resultStandardScheme getScheme() {
        return new updateProductAuditState_resultStandardScheme();
      }
    }

    private static class updateProductAuditState_resultStandardScheme extends StandardScheme<updateProductAuditState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProductAuditState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProductAuditState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProductAuditState_resultTupleSchemeFactory implements SchemeFactory {
      public updateProductAuditState_resultTupleScheme getScheme() {
        return new updateProductAuditState_resultTupleScheme();
      }
    }

    private static class updateProductAuditState_resultTupleScheme extends TupleScheme<updateProductAuditState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProductAuditState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProductAuditState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
