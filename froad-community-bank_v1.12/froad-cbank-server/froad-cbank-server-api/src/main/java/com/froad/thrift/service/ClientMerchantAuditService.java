/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ClientMerchantAuditService {

  /**
   * 商户审核配置服务
   * ClientMerchantAuditService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 ClientMerchantAudit
     * @param clientMerchantAudit
     * @return long    主键ID
     * 
     * @param originVo
     * @param clientMerchantAuditVo
     */
    public com.froad.thrift.vo.CommonAddVoRes addClientMerchantAudit(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) throws org.apache.thrift.TException;

    /**
     * 删除 ClientMerchantAudit
     * @param clientMerchantAudit
     * @return boolean
     * 
     * @param originVo
     * @param clientMerchantAuditVo
     */
    public com.froad.thrift.vo.ResultVo deleteClientMerchantAudit(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) throws org.apache.thrift.TException;

    /**
     * 修改 ClientMerchantAudit
     * @param clientMerchantAudit
     * @return boolean
     * 
     * @param originVo
     * @param clientMerchantAuditVo
     */
    public com.froad.thrift.vo.ResultVo updateClientMerchantAudit(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) throws org.apache.thrift.TException;

    /**
     * 根据clientId+orgCode查询商户审核配置信息
     * @param clientId
     * @param orgCode
     * @param type 1-审核 2-商户重置密码
     * @return ClientMerchantAuditOrgCodeVo
     * 
     * @param clientId
     * @param orgCode
     * @param type
     */
    public com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo getClientMerchantAuditByOrgCode(String clientId, String orgCode, String type) throws org.apache.thrift.TException;

    /**
     * 查询 ClientMerchantAudit
     * @param clientMerchantAudit
     * @return List<ClientMerchantAuditVo>
     * 
     * @param clientMerchantAuditVo
     */
    public List<com.froad.thrift.vo.ClientMerchantAuditVo> getClientMerchantAudit(com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 ClientMerchantAudit
     * @param clientMerchantAudit
     * @return ClientMerchantAuditPageVoRes
     * 
     * @param page
     * @param clientMerchantAuditVo
     */
    public com.froad.thrift.vo.ClientMerchantAuditPageVoRes getClientMerchantAuditByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addClientMerchantAudit(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteClientMerchantAudit(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateClientMerchantAudit(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getClientMerchantAuditByOrgCode(String clientId, String orgCode, String type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getClientMerchantAudit(com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getClientMerchantAuditByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.CommonAddVoRes addClientMerchantAudit(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) throws org.apache.thrift.TException
    {
      send_addClientMerchantAudit(originVo, clientMerchantAuditVo);
      return recv_addClientMerchantAudit();
    }

    public void send_addClientMerchantAudit(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) throws org.apache.thrift.TException
    {
      addClientMerchantAudit_args args = new addClientMerchantAudit_args();
      args.setOriginVo(originVo);
      args.setClientMerchantAuditVo(clientMerchantAuditVo);
      sendBase("addClientMerchantAudit", args);
    }

    public com.froad.thrift.vo.CommonAddVoRes recv_addClientMerchantAudit() throws org.apache.thrift.TException
    {
      addClientMerchantAudit_result result = new addClientMerchantAudit_result();
      receiveBase(result, "addClientMerchantAudit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addClientMerchantAudit failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteClientMerchantAudit(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) throws org.apache.thrift.TException
    {
      send_deleteClientMerchantAudit(originVo, clientMerchantAuditVo);
      return recv_deleteClientMerchantAudit();
    }

    public void send_deleteClientMerchantAudit(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) throws org.apache.thrift.TException
    {
      deleteClientMerchantAudit_args args = new deleteClientMerchantAudit_args();
      args.setOriginVo(originVo);
      args.setClientMerchantAuditVo(clientMerchantAuditVo);
      sendBase("deleteClientMerchantAudit", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteClientMerchantAudit() throws org.apache.thrift.TException
    {
      deleteClientMerchantAudit_result result = new deleteClientMerchantAudit_result();
      receiveBase(result, "deleteClientMerchantAudit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteClientMerchantAudit failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateClientMerchantAudit(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) throws org.apache.thrift.TException
    {
      send_updateClientMerchantAudit(originVo, clientMerchantAuditVo);
      return recv_updateClientMerchantAudit();
    }

    public void send_updateClientMerchantAudit(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) throws org.apache.thrift.TException
    {
      updateClientMerchantAudit_args args = new updateClientMerchantAudit_args();
      args.setOriginVo(originVo);
      args.setClientMerchantAuditVo(clientMerchantAuditVo);
      sendBase("updateClientMerchantAudit", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateClientMerchantAudit() throws org.apache.thrift.TException
    {
      updateClientMerchantAudit_result result = new updateClientMerchantAudit_result();
      receiveBase(result, "updateClientMerchantAudit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateClientMerchantAudit failed: unknown result");
    }

    public com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo getClientMerchantAuditByOrgCode(String clientId, String orgCode, String type) throws org.apache.thrift.TException
    {
      send_getClientMerchantAuditByOrgCode(clientId, orgCode, type);
      return recv_getClientMerchantAuditByOrgCode();
    }

    public void send_getClientMerchantAuditByOrgCode(String clientId, String orgCode, String type) throws org.apache.thrift.TException
    {
      getClientMerchantAuditByOrgCode_args args = new getClientMerchantAuditByOrgCode_args();
      args.setClientId(clientId);
      args.setOrgCode(orgCode);
      args.setType(type);
      sendBase("getClientMerchantAuditByOrgCode", args);
    }

    public com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo recv_getClientMerchantAuditByOrgCode() throws org.apache.thrift.TException
    {
      getClientMerchantAuditByOrgCode_result result = new getClientMerchantAuditByOrgCode_result();
      receiveBase(result, "getClientMerchantAuditByOrgCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getClientMerchantAuditByOrgCode failed: unknown result");
    }

    public List<com.froad.thrift.vo.ClientMerchantAuditVo> getClientMerchantAudit(com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) throws org.apache.thrift.TException
    {
      send_getClientMerchantAudit(clientMerchantAuditVo);
      return recv_getClientMerchantAudit();
    }

    public void send_getClientMerchantAudit(com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) throws org.apache.thrift.TException
    {
      getClientMerchantAudit_args args = new getClientMerchantAudit_args();
      args.setClientMerchantAuditVo(clientMerchantAuditVo);
      sendBase("getClientMerchantAudit", args);
    }

    public List<com.froad.thrift.vo.ClientMerchantAuditVo> recv_getClientMerchantAudit() throws org.apache.thrift.TException
    {
      getClientMerchantAudit_result result = new getClientMerchantAudit_result();
      receiveBase(result, "getClientMerchantAudit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getClientMerchantAudit failed: unknown result");
    }

    public com.froad.thrift.vo.ClientMerchantAuditPageVoRes getClientMerchantAuditByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) throws org.apache.thrift.TException
    {
      send_getClientMerchantAuditByPage(page, clientMerchantAuditVo);
      return recv_getClientMerchantAuditByPage();
    }

    public void send_getClientMerchantAuditByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) throws org.apache.thrift.TException
    {
      getClientMerchantAuditByPage_args args = new getClientMerchantAuditByPage_args();
      args.setPage(page);
      args.setClientMerchantAuditVo(clientMerchantAuditVo);
      sendBase("getClientMerchantAuditByPage", args);
    }

    public com.froad.thrift.vo.ClientMerchantAuditPageVoRes recv_getClientMerchantAuditByPage() throws org.apache.thrift.TException
    {
      getClientMerchantAuditByPage_result result = new getClientMerchantAuditByPage_result();
      receiveBase(result, "getClientMerchantAuditByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getClientMerchantAuditByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addClientMerchantAudit(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addClientMerchantAudit_call method_call = new addClientMerchantAudit_call(originVo, clientMerchantAuditVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addClientMerchantAudit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo;
      public addClientMerchantAudit_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.clientMerchantAuditVo = clientMerchantAuditVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addClientMerchantAudit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addClientMerchantAudit_args args = new addClientMerchantAudit_args();
        args.setOriginVo(originVo);
        args.setClientMerchantAuditVo(clientMerchantAuditVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.CommonAddVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addClientMerchantAudit();
      }
    }

    public void deleteClientMerchantAudit(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteClientMerchantAudit_call method_call = new deleteClientMerchantAudit_call(originVo, clientMerchantAuditVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteClientMerchantAudit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo;
      public deleteClientMerchantAudit_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.clientMerchantAuditVo = clientMerchantAuditVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteClientMerchantAudit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteClientMerchantAudit_args args = new deleteClientMerchantAudit_args();
        args.setOriginVo(originVo);
        args.setClientMerchantAuditVo(clientMerchantAuditVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteClientMerchantAudit();
      }
    }

    public void updateClientMerchantAudit(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateClientMerchantAudit_call method_call = new updateClientMerchantAudit_call(originVo, clientMerchantAuditVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateClientMerchantAudit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo;
      public updateClientMerchantAudit_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.clientMerchantAuditVo = clientMerchantAuditVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateClientMerchantAudit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateClientMerchantAudit_args args = new updateClientMerchantAudit_args();
        args.setOriginVo(originVo);
        args.setClientMerchantAuditVo(clientMerchantAuditVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateClientMerchantAudit();
      }
    }

    public void getClientMerchantAuditByOrgCode(String clientId, String orgCode, String type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClientMerchantAuditByOrgCode_call method_call = new getClientMerchantAuditByOrgCode_call(clientId, orgCode, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClientMerchantAuditByOrgCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String orgCode;
      private String type;
      public getClientMerchantAuditByOrgCode_call(String clientId, String orgCode, String type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.orgCode = orgCode;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClientMerchantAuditByOrgCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClientMerchantAuditByOrgCode_args args = new getClientMerchantAuditByOrgCode_args();
        args.setClientId(clientId);
        args.setOrgCode(orgCode);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClientMerchantAuditByOrgCode();
      }
    }

    public void getClientMerchantAudit(com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClientMerchantAudit_call method_call = new getClientMerchantAudit_call(clientMerchantAuditVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClientMerchantAudit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo;
      public getClientMerchantAudit_call(com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientMerchantAuditVo = clientMerchantAuditVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClientMerchantAudit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClientMerchantAudit_args args = new getClientMerchantAudit_args();
        args.setClientMerchantAuditVo(clientMerchantAuditVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.ClientMerchantAuditVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClientMerchantAudit();
      }
    }

    public void getClientMerchantAuditByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClientMerchantAuditByPage_call method_call = new getClientMerchantAuditByPage_call(page, clientMerchantAuditVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClientMerchantAuditByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo;
      public getClientMerchantAuditByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.clientMerchantAuditVo = clientMerchantAuditVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClientMerchantAuditByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClientMerchantAuditByPage_args args = new getClientMerchantAuditByPage_args();
        args.setPage(page);
        args.setClientMerchantAuditVo(clientMerchantAuditVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ClientMerchantAuditPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClientMerchantAuditByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addClientMerchantAudit", new addClientMerchantAudit());
      processMap.put("deleteClientMerchantAudit", new deleteClientMerchantAudit());
      processMap.put("updateClientMerchantAudit", new updateClientMerchantAudit());
      processMap.put("getClientMerchantAuditByOrgCode", new getClientMerchantAuditByOrgCode());
      processMap.put("getClientMerchantAudit", new getClientMerchantAudit());
      processMap.put("getClientMerchantAuditByPage", new getClientMerchantAuditByPage());
      return processMap;
    }

    public static class addClientMerchantAudit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addClientMerchantAudit_args> {
      public addClientMerchantAudit() {
        super("addClientMerchantAudit");
      }

      public addClientMerchantAudit_args getEmptyArgsInstance() {
        return new addClientMerchantAudit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addClientMerchantAudit_result getResult(I iface, addClientMerchantAudit_args args) throws org.apache.thrift.TException {
        addClientMerchantAudit_result result = new addClientMerchantAudit_result();
        result.success = iface.addClientMerchantAudit(args.originVo, args.clientMerchantAuditVo);
        return result;
      }
    }

    public static class deleteClientMerchantAudit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteClientMerchantAudit_args> {
      public deleteClientMerchantAudit() {
        super("deleteClientMerchantAudit");
      }

      public deleteClientMerchantAudit_args getEmptyArgsInstance() {
        return new deleteClientMerchantAudit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteClientMerchantAudit_result getResult(I iface, deleteClientMerchantAudit_args args) throws org.apache.thrift.TException {
        deleteClientMerchantAudit_result result = new deleteClientMerchantAudit_result();
        result.success = iface.deleteClientMerchantAudit(args.originVo, args.clientMerchantAuditVo);
        return result;
      }
    }

    public static class updateClientMerchantAudit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateClientMerchantAudit_args> {
      public updateClientMerchantAudit() {
        super("updateClientMerchantAudit");
      }

      public updateClientMerchantAudit_args getEmptyArgsInstance() {
        return new updateClientMerchantAudit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateClientMerchantAudit_result getResult(I iface, updateClientMerchantAudit_args args) throws org.apache.thrift.TException {
        updateClientMerchantAudit_result result = new updateClientMerchantAudit_result();
        result.success = iface.updateClientMerchantAudit(args.originVo, args.clientMerchantAuditVo);
        return result;
      }
    }

    public static class getClientMerchantAuditByOrgCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClientMerchantAuditByOrgCode_args> {
      public getClientMerchantAuditByOrgCode() {
        super("getClientMerchantAuditByOrgCode");
      }

      public getClientMerchantAuditByOrgCode_args getEmptyArgsInstance() {
        return new getClientMerchantAuditByOrgCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getClientMerchantAuditByOrgCode_result getResult(I iface, getClientMerchantAuditByOrgCode_args args) throws org.apache.thrift.TException {
        getClientMerchantAuditByOrgCode_result result = new getClientMerchantAuditByOrgCode_result();
        result.success = iface.getClientMerchantAuditByOrgCode(args.clientId, args.orgCode, args.type);
        return result;
      }
    }

    public static class getClientMerchantAudit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClientMerchantAudit_args> {
      public getClientMerchantAudit() {
        super("getClientMerchantAudit");
      }

      public getClientMerchantAudit_args getEmptyArgsInstance() {
        return new getClientMerchantAudit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getClientMerchantAudit_result getResult(I iface, getClientMerchantAudit_args args) throws org.apache.thrift.TException {
        getClientMerchantAudit_result result = new getClientMerchantAudit_result();
        result.success = iface.getClientMerchantAudit(args.clientMerchantAuditVo);
        return result;
      }
    }

    public static class getClientMerchantAuditByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClientMerchantAuditByPage_args> {
      public getClientMerchantAuditByPage() {
        super("getClientMerchantAuditByPage");
      }

      public getClientMerchantAuditByPage_args getEmptyArgsInstance() {
        return new getClientMerchantAuditByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getClientMerchantAuditByPage_result getResult(I iface, getClientMerchantAuditByPage_args args) throws org.apache.thrift.TException {
        getClientMerchantAuditByPage_result result = new getClientMerchantAuditByPage_result();
        result.success = iface.getClientMerchantAuditByPage(args.page, args.clientMerchantAuditVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addClientMerchantAudit", new addClientMerchantAudit());
      processMap.put("deleteClientMerchantAudit", new deleteClientMerchantAudit());
      processMap.put("updateClientMerchantAudit", new updateClientMerchantAudit());
      processMap.put("getClientMerchantAuditByOrgCode", new getClientMerchantAuditByOrgCode());
      processMap.put("getClientMerchantAudit", new getClientMerchantAudit());
      processMap.put("getClientMerchantAuditByPage", new getClientMerchantAuditByPage());
      return processMap;
    }

    public static class addClientMerchantAudit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addClientMerchantAudit_args, com.froad.thrift.vo.CommonAddVoRes> {
      public addClientMerchantAudit() {
        super("addClientMerchantAudit");
      }

      public addClientMerchantAudit_args getEmptyArgsInstance() {
        return new addClientMerchantAudit_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes>() { 
          public void onComplete(com.froad.thrift.vo.CommonAddVoRes o) {
            addClientMerchantAudit_result result = new addClientMerchantAudit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addClientMerchantAudit_result result = new addClientMerchantAudit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addClientMerchantAudit_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes> resultHandler) throws TException {
        iface.addClientMerchantAudit(args.originVo, args.clientMerchantAuditVo,resultHandler);
      }
    }

    public static class deleteClientMerchantAudit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteClientMerchantAudit_args, com.froad.thrift.vo.ResultVo> {
      public deleteClientMerchantAudit() {
        super("deleteClientMerchantAudit");
      }

      public deleteClientMerchantAudit_args getEmptyArgsInstance() {
        return new deleteClientMerchantAudit_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteClientMerchantAudit_result result = new deleteClientMerchantAudit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteClientMerchantAudit_result result = new deleteClientMerchantAudit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteClientMerchantAudit_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteClientMerchantAudit(args.originVo, args.clientMerchantAuditVo,resultHandler);
      }
    }

    public static class updateClientMerchantAudit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateClientMerchantAudit_args, com.froad.thrift.vo.ResultVo> {
      public updateClientMerchantAudit() {
        super("updateClientMerchantAudit");
      }

      public updateClientMerchantAudit_args getEmptyArgsInstance() {
        return new updateClientMerchantAudit_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateClientMerchantAudit_result result = new updateClientMerchantAudit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateClientMerchantAudit_result result = new updateClientMerchantAudit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateClientMerchantAudit_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateClientMerchantAudit(args.originVo, args.clientMerchantAuditVo,resultHandler);
      }
    }

    public static class getClientMerchantAuditByOrgCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getClientMerchantAuditByOrgCode_args, com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo> {
      public getClientMerchantAuditByOrgCode() {
        super("getClientMerchantAuditByOrgCode");
      }

      public getClientMerchantAuditByOrgCode_args getEmptyArgsInstance() {
        return new getClientMerchantAuditByOrgCode_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo>() { 
          public void onComplete(com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo o) {
            getClientMerchantAuditByOrgCode_result result = new getClientMerchantAuditByOrgCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getClientMerchantAuditByOrgCode_result result = new getClientMerchantAuditByOrgCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getClientMerchantAuditByOrgCode_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo> resultHandler) throws TException {
        iface.getClientMerchantAuditByOrgCode(args.clientId, args.orgCode, args.type,resultHandler);
      }
    }

    public static class getClientMerchantAudit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getClientMerchantAudit_args, List<com.froad.thrift.vo.ClientMerchantAuditVo>> {
      public getClientMerchantAudit() {
        super("getClientMerchantAudit");
      }

      public getClientMerchantAudit_args getEmptyArgsInstance() {
        return new getClientMerchantAudit_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.ClientMerchantAuditVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.ClientMerchantAuditVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.ClientMerchantAuditVo> o) {
            getClientMerchantAudit_result result = new getClientMerchantAudit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getClientMerchantAudit_result result = new getClientMerchantAudit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getClientMerchantAudit_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.ClientMerchantAuditVo>> resultHandler) throws TException {
        iface.getClientMerchantAudit(args.clientMerchantAuditVo,resultHandler);
      }
    }

    public static class getClientMerchantAuditByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getClientMerchantAuditByPage_args, com.froad.thrift.vo.ClientMerchantAuditPageVoRes> {
      public getClientMerchantAuditByPage() {
        super("getClientMerchantAuditByPage");
      }

      public getClientMerchantAuditByPage_args getEmptyArgsInstance() {
        return new getClientMerchantAuditByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ClientMerchantAuditPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ClientMerchantAuditPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.ClientMerchantAuditPageVoRes o) {
            getClientMerchantAuditByPage_result result = new getClientMerchantAuditByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getClientMerchantAuditByPage_result result = new getClientMerchantAuditByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getClientMerchantAuditByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ClientMerchantAuditPageVoRes> resultHandler) throws TException {
        iface.getClientMerchantAuditByPage(args.page, args.clientMerchantAuditVo,resultHandler);
      }
    }

  }

  public static class addClientMerchantAudit_args implements org.apache.thrift.TBase<addClientMerchantAudit_args, addClientMerchantAudit_args._Fields>, java.io.Serializable, Cloneable, Comparable<addClientMerchantAudit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addClientMerchantAudit_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_MERCHANT_AUDIT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientMerchantAuditVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addClientMerchantAudit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addClientMerchantAudit_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      CLIENT_MERCHANT_AUDIT_VO((short)2, "clientMerchantAuditVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // CLIENT_MERCHANT_AUDIT_VO
            return CLIENT_MERCHANT_AUDIT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.CLIENT_MERCHANT_AUDIT_VO, new org.apache.thrift.meta_data.FieldMetaData("clientMerchantAuditVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientMerchantAuditVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addClientMerchantAudit_args.class, metaDataMap);
    }

    public addClientMerchantAudit_args() {
    }

    public addClientMerchantAudit_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo)
    {
      this();
      this.originVo = originVo;
      this.clientMerchantAuditVo = clientMerchantAuditVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addClientMerchantAudit_args(addClientMerchantAudit_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetClientMerchantAuditVo()) {
        this.clientMerchantAuditVo = new com.froad.thrift.vo.ClientMerchantAuditVo(other.clientMerchantAuditVo);
      }
    }

    public addClientMerchantAudit_args deepCopy() {
      return new addClientMerchantAudit_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.clientMerchantAuditVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addClientMerchantAudit_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ClientMerchantAuditVo getClientMerchantAuditVo() {
      return this.clientMerchantAuditVo;
    }

    public addClientMerchantAudit_args setClientMerchantAuditVo(com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) {
      this.clientMerchantAuditVo = clientMerchantAuditVo;
      return this;
    }

    public void unsetClientMerchantAuditVo() {
      this.clientMerchantAuditVo = null;
    }

    /** Returns true if field clientMerchantAuditVo is set (has been assigned a value) and false otherwise */
    public boolean isSetClientMerchantAuditVo() {
      return this.clientMerchantAuditVo != null;
    }

    public void setClientMerchantAuditVoIsSet(boolean value) {
      if (!value) {
        this.clientMerchantAuditVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case CLIENT_MERCHANT_AUDIT_VO:
        if (value == null) {
          unsetClientMerchantAuditVo();
        } else {
          setClientMerchantAuditVo((com.froad.thrift.vo.ClientMerchantAuditVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case CLIENT_MERCHANT_AUDIT_VO:
        return getClientMerchantAuditVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case CLIENT_MERCHANT_AUDIT_VO:
        return isSetClientMerchantAuditVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addClientMerchantAudit_args)
        return this.equals((addClientMerchantAudit_args)that);
      return false;
    }

    public boolean equals(addClientMerchantAudit_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_clientMerchantAuditVo = true && this.isSetClientMerchantAuditVo();
      boolean that_present_clientMerchantAuditVo = true && that.isSetClientMerchantAuditVo();
      if (this_present_clientMerchantAuditVo || that_present_clientMerchantAuditVo) {
        if (!(this_present_clientMerchantAuditVo && that_present_clientMerchantAuditVo))
          return false;
        if (!this.clientMerchantAuditVo.equals(that.clientMerchantAuditVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_clientMerchantAuditVo = true && (isSetClientMerchantAuditVo());
      list.add(present_clientMerchantAuditVo);
      if (present_clientMerchantAuditVo)
        list.add(clientMerchantAuditVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addClientMerchantAudit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientMerchantAuditVo()).compareTo(other.isSetClientMerchantAuditVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientMerchantAuditVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientMerchantAuditVo, other.clientMerchantAuditVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addClientMerchantAudit_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientMerchantAuditVo:");
      if (this.clientMerchantAuditVo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientMerchantAuditVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (clientMerchantAuditVo != null) {
        clientMerchantAuditVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addClientMerchantAudit_argsStandardSchemeFactory implements SchemeFactory {
      public addClientMerchantAudit_argsStandardScheme getScheme() {
        return new addClientMerchantAudit_argsStandardScheme();
      }
    }

    private static class addClientMerchantAudit_argsStandardScheme extends StandardScheme<addClientMerchantAudit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_MERCHANT_AUDIT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientMerchantAuditVo = new com.froad.thrift.vo.ClientMerchantAuditVo();
                struct.clientMerchantAuditVo.read(iprot);
                struct.setClientMerchantAuditVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientMerchantAuditVo != null) {
          oprot.writeFieldBegin(CLIENT_MERCHANT_AUDIT_VO_FIELD_DESC);
          struct.clientMerchantAuditVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addClientMerchantAudit_argsTupleSchemeFactory implements SchemeFactory {
      public addClientMerchantAudit_argsTupleScheme getScheme() {
        return new addClientMerchantAudit_argsTupleScheme();
      }
    }

    private static class addClientMerchantAudit_argsTupleScheme extends TupleScheme<addClientMerchantAudit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetClientMerchantAuditVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetClientMerchantAuditVo()) {
          struct.clientMerchantAuditVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientMerchantAuditVo = new com.froad.thrift.vo.ClientMerchantAuditVo();
          struct.clientMerchantAuditVo.read(iprot);
          struct.setClientMerchantAuditVoIsSet(true);
        }
      }
    }

  }

  public static class addClientMerchantAudit_result implements org.apache.thrift.TBase<addClientMerchantAudit_result, addClientMerchantAudit_result._Fields>, java.io.Serializable, Cloneable, Comparable<addClientMerchantAudit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addClientMerchantAudit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addClientMerchantAudit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addClientMerchantAudit_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.CommonAddVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.CommonAddVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addClientMerchantAudit_result.class, metaDataMap);
    }

    public addClientMerchantAudit_result() {
    }

    public addClientMerchantAudit_result(
      com.froad.thrift.vo.CommonAddVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addClientMerchantAudit_result(addClientMerchantAudit_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.CommonAddVoRes(other.success);
      }
    }

    public addClientMerchantAudit_result deepCopy() {
      return new addClientMerchantAudit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.CommonAddVoRes getSuccess() {
      return this.success;
    }

    public addClientMerchantAudit_result setSuccess(com.froad.thrift.vo.CommonAddVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.CommonAddVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addClientMerchantAudit_result)
        return this.equals((addClientMerchantAudit_result)that);
      return false;
    }

    public boolean equals(addClientMerchantAudit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addClientMerchantAudit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addClientMerchantAudit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addClientMerchantAudit_resultStandardSchemeFactory implements SchemeFactory {
      public addClientMerchantAudit_resultStandardScheme getScheme() {
        return new addClientMerchantAudit_resultStandardScheme();
      }
    }

    private static class addClientMerchantAudit_resultStandardScheme extends StandardScheme<addClientMerchantAudit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.CommonAddVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addClientMerchantAudit_resultTupleSchemeFactory implements SchemeFactory {
      public addClientMerchantAudit_resultTupleScheme getScheme() {
        return new addClientMerchantAudit_resultTupleScheme();
      }
    }

    private static class addClientMerchantAudit_resultTupleScheme extends TupleScheme<addClientMerchantAudit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.CommonAddVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteClientMerchantAudit_args implements org.apache.thrift.TBase<deleteClientMerchantAudit_args, deleteClientMerchantAudit_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteClientMerchantAudit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteClientMerchantAudit_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_MERCHANT_AUDIT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientMerchantAuditVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteClientMerchantAudit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteClientMerchantAudit_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      CLIENT_MERCHANT_AUDIT_VO((short)2, "clientMerchantAuditVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // CLIENT_MERCHANT_AUDIT_VO
            return CLIENT_MERCHANT_AUDIT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.CLIENT_MERCHANT_AUDIT_VO, new org.apache.thrift.meta_data.FieldMetaData("clientMerchantAuditVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientMerchantAuditVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteClientMerchantAudit_args.class, metaDataMap);
    }

    public deleteClientMerchantAudit_args() {
    }

    public deleteClientMerchantAudit_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo)
    {
      this();
      this.originVo = originVo;
      this.clientMerchantAuditVo = clientMerchantAuditVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteClientMerchantAudit_args(deleteClientMerchantAudit_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetClientMerchantAuditVo()) {
        this.clientMerchantAuditVo = new com.froad.thrift.vo.ClientMerchantAuditVo(other.clientMerchantAuditVo);
      }
    }

    public deleteClientMerchantAudit_args deepCopy() {
      return new deleteClientMerchantAudit_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.clientMerchantAuditVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteClientMerchantAudit_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ClientMerchantAuditVo getClientMerchantAuditVo() {
      return this.clientMerchantAuditVo;
    }

    public deleteClientMerchantAudit_args setClientMerchantAuditVo(com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) {
      this.clientMerchantAuditVo = clientMerchantAuditVo;
      return this;
    }

    public void unsetClientMerchantAuditVo() {
      this.clientMerchantAuditVo = null;
    }

    /** Returns true if field clientMerchantAuditVo is set (has been assigned a value) and false otherwise */
    public boolean isSetClientMerchantAuditVo() {
      return this.clientMerchantAuditVo != null;
    }

    public void setClientMerchantAuditVoIsSet(boolean value) {
      if (!value) {
        this.clientMerchantAuditVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case CLIENT_MERCHANT_AUDIT_VO:
        if (value == null) {
          unsetClientMerchantAuditVo();
        } else {
          setClientMerchantAuditVo((com.froad.thrift.vo.ClientMerchantAuditVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case CLIENT_MERCHANT_AUDIT_VO:
        return getClientMerchantAuditVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case CLIENT_MERCHANT_AUDIT_VO:
        return isSetClientMerchantAuditVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteClientMerchantAudit_args)
        return this.equals((deleteClientMerchantAudit_args)that);
      return false;
    }

    public boolean equals(deleteClientMerchantAudit_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_clientMerchantAuditVo = true && this.isSetClientMerchantAuditVo();
      boolean that_present_clientMerchantAuditVo = true && that.isSetClientMerchantAuditVo();
      if (this_present_clientMerchantAuditVo || that_present_clientMerchantAuditVo) {
        if (!(this_present_clientMerchantAuditVo && that_present_clientMerchantAuditVo))
          return false;
        if (!this.clientMerchantAuditVo.equals(that.clientMerchantAuditVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_clientMerchantAuditVo = true && (isSetClientMerchantAuditVo());
      list.add(present_clientMerchantAuditVo);
      if (present_clientMerchantAuditVo)
        list.add(clientMerchantAuditVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteClientMerchantAudit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientMerchantAuditVo()).compareTo(other.isSetClientMerchantAuditVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientMerchantAuditVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientMerchantAuditVo, other.clientMerchantAuditVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteClientMerchantAudit_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientMerchantAuditVo:");
      if (this.clientMerchantAuditVo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientMerchantAuditVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (clientMerchantAuditVo != null) {
        clientMerchantAuditVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteClientMerchantAudit_argsStandardSchemeFactory implements SchemeFactory {
      public deleteClientMerchantAudit_argsStandardScheme getScheme() {
        return new deleteClientMerchantAudit_argsStandardScheme();
      }
    }

    private static class deleteClientMerchantAudit_argsStandardScheme extends StandardScheme<deleteClientMerchantAudit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_MERCHANT_AUDIT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientMerchantAuditVo = new com.froad.thrift.vo.ClientMerchantAuditVo();
                struct.clientMerchantAuditVo.read(iprot);
                struct.setClientMerchantAuditVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientMerchantAuditVo != null) {
          oprot.writeFieldBegin(CLIENT_MERCHANT_AUDIT_VO_FIELD_DESC);
          struct.clientMerchantAuditVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteClientMerchantAudit_argsTupleSchemeFactory implements SchemeFactory {
      public deleteClientMerchantAudit_argsTupleScheme getScheme() {
        return new deleteClientMerchantAudit_argsTupleScheme();
      }
    }

    private static class deleteClientMerchantAudit_argsTupleScheme extends TupleScheme<deleteClientMerchantAudit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetClientMerchantAuditVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetClientMerchantAuditVo()) {
          struct.clientMerchantAuditVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientMerchantAuditVo = new com.froad.thrift.vo.ClientMerchantAuditVo();
          struct.clientMerchantAuditVo.read(iprot);
          struct.setClientMerchantAuditVoIsSet(true);
        }
      }
    }

  }

  public static class deleteClientMerchantAudit_result implements org.apache.thrift.TBase<deleteClientMerchantAudit_result, deleteClientMerchantAudit_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteClientMerchantAudit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteClientMerchantAudit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteClientMerchantAudit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteClientMerchantAudit_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteClientMerchantAudit_result.class, metaDataMap);
    }

    public deleteClientMerchantAudit_result() {
    }

    public deleteClientMerchantAudit_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteClientMerchantAudit_result(deleteClientMerchantAudit_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteClientMerchantAudit_result deepCopy() {
      return new deleteClientMerchantAudit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteClientMerchantAudit_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteClientMerchantAudit_result)
        return this.equals((deleteClientMerchantAudit_result)that);
      return false;
    }

    public boolean equals(deleteClientMerchantAudit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteClientMerchantAudit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteClientMerchantAudit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteClientMerchantAudit_resultStandardSchemeFactory implements SchemeFactory {
      public deleteClientMerchantAudit_resultStandardScheme getScheme() {
        return new deleteClientMerchantAudit_resultStandardScheme();
      }
    }

    private static class deleteClientMerchantAudit_resultStandardScheme extends StandardScheme<deleteClientMerchantAudit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteClientMerchantAudit_resultTupleSchemeFactory implements SchemeFactory {
      public deleteClientMerchantAudit_resultTupleScheme getScheme() {
        return new deleteClientMerchantAudit_resultTupleScheme();
      }
    }

    private static class deleteClientMerchantAudit_resultTupleScheme extends TupleScheme<deleteClientMerchantAudit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateClientMerchantAudit_args implements org.apache.thrift.TBase<updateClientMerchantAudit_args, updateClientMerchantAudit_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateClientMerchantAudit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateClientMerchantAudit_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_MERCHANT_AUDIT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientMerchantAuditVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateClientMerchantAudit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateClientMerchantAudit_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      CLIENT_MERCHANT_AUDIT_VO((short)2, "clientMerchantAuditVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // CLIENT_MERCHANT_AUDIT_VO
            return CLIENT_MERCHANT_AUDIT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.CLIENT_MERCHANT_AUDIT_VO, new org.apache.thrift.meta_data.FieldMetaData("clientMerchantAuditVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientMerchantAuditVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateClientMerchantAudit_args.class, metaDataMap);
    }

    public updateClientMerchantAudit_args() {
    }

    public updateClientMerchantAudit_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo)
    {
      this();
      this.originVo = originVo;
      this.clientMerchantAuditVo = clientMerchantAuditVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateClientMerchantAudit_args(updateClientMerchantAudit_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetClientMerchantAuditVo()) {
        this.clientMerchantAuditVo = new com.froad.thrift.vo.ClientMerchantAuditVo(other.clientMerchantAuditVo);
      }
    }

    public updateClientMerchantAudit_args deepCopy() {
      return new updateClientMerchantAudit_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.clientMerchantAuditVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateClientMerchantAudit_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.ClientMerchantAuditVo getClientMerchantAuditVo() {
      return this.clientMerchantAuditVo;
    }

    public updateClientMerchantAudit_args setClientMerchantAuditVo(com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) {
      this.clientMerchantAuditVo = clientMerchantAuditVo;
      return this;
    }

    public void unsetClientMerchantAuditVo() {
      this.clientMerchantAuditVo = null;
    }

    /** Returns true if field clientMerchantAuditVo is set (has been assigned a value) and false otherwise */
    public boolean isSetClientMerchantAuditVo() {
      return this.clientMerchantAuditVo != null;
    }

    public void setClientMerchantAuditVoIsSet(boolean value) {
      if (!value) {
        this.clientMerchantAuditVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case CLIENT_MERCHANT_AUDIT_VO:
        if (value == null) {
          unsetClientMerchantAuditVo();
        } else {
          setClientMerchantAuditVo((com.froad.thrift.vo.ClientMerchantAuditVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case CLIENT_MERCHANT_AUDIT_VO:
        return getClientMerchantAuditVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case CLIENT_MERCHANT_AUDIT_VO:
        return isSetClientMerchantAuditVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateClientMerchantAudit_args)
        return this.equals((updateClientMerchantAudit_args)that);
      return false;
    }

    public boolean equals(updateClientMerchantAudit_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_clientMerchantAuditVo = true && this.isSetClientMerchantAuditVo();
      boolean that_present_clientMerchantAuditVo = true && that.isSetClientMerchantAuditVo();
      if (this_present_clientMerchantAuditVo || that_present_clientMerchantAuditVo) {
        if (!(this_present_clientMerchantAuditVo && that_present_clientMerchantAuditVo))
          return false;
        if (!this.clientMerchantAuditVo.equals(that.clientMerchantAuditVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_clientMerchantAuditVo = true && (isSetClientMerchantAuditVo());
      list.add(present_clientMerchantAuditVo);
      if (present_clientMerchantAuditVo)
        list.add(clientMerchantAuditVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateClientMerchantAudit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientMerchantAuditVo()).compareTo(other.isSetClientMerchantAuditVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientMerchantAuditVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientMerchantAuditVo, other.clientMerchantAuditVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateClientMerchantAudit_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientMerchantAuditVo:");
      if (this.clientMerchantAuditVo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientMerchantAuditVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (clientMerchantAuditVo != null) {
        clientMerchantAuditVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateClientMerchantAudit_argsStandardSchemeFactory implements SchemeFactory {
      public updateClientMerchantAudit_argsStandardScheme getScheme() {
        return new updateClientMerchantAudit_argsStandardScheme();
      }
    }

    private static class updateClientMerchantAudit_argsStandardScheme extends StandardScheme<updateClientMerchantAudit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_MERCHANT_AUDIT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientMerchantAuditVo = new com.froad.thrift.vo.ClientMerchantAuditVo();
                struct.clientMerchantAuditVo.read(iprot);
                struct.setClientMerchantAuditVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientMerchantAuditVo != null) {
          oprot.writeFieldBegin(CLIENT_MERCHANT_AUDIT_VO_FIELD_DESC);
          struct.clientMerchantAuditVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateClientMerchantAudit_argsTupleSchemeFactory implements SchemeFactory {
      public updateClientMerchantAudit_argsTupleScheme getScheme() {
        return new updateClientMerchantAudit_argsTupleScheme();
      }
    }

    private static class updateClientMerchantAudit_argsTupleScheme extends TupleScheme<updateClientMerchantAudit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetClientMerchantAuditVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetClientMerchantAuditVo()) {
          struct.clientMerchantAuditVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientMerchantAuditVo = new com.froad.thrift.vo.ClientMerchantAuditVo();
          struct.clientMerchantAuditVo.read(iprot);
          struct.setClientMerchantAuditVoIsSet(true);
        }
      }
    }

  }

  public static class updateClientMerchantAudit_result implements org.apache.thrift.TBase<updateClientMerchantAudit_result, updateClientMerchantAudit_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateClientMerchantAudit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateClientMerchantAudit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateClientMerchantAudit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateClientMerchantAudit_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateClientMerchantAudit_result.class, metaDataMap);
    }

    public updateClientMerchantAudit_result() {
    }

    public updateClientMerchantAudit_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateClientMerchantAudit_result(updateClientMerchantAudit_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateClientMerchantAudit_result deepCopy() {
      return new updateClientMerchantAudit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateClientMerchantAudit_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateClientMerchantAudit_result)
        return this.equals((updateClientMerchantAudit_result)that);
      return false;
    }

    public boolean equals(updateClientMerchantAudit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateClientMerchantAudit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateClientMerchantAudit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateClientMerchantAudit_resultStandardSchemeFactory implements SchemeFactory {
      public updateClientMerchantAudit_resultStandardScheme getScheme() {
        return new updateClientMerchantAudit_resultStandardScheme();
      }
    }

    private static class updateClientMerchantAudit_resultStandardScheme extends StandardScheme<updateClientMerchantAudit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateClientMerchantAudit_resultTupleSchemeFactory implements SchemeFactory {
      public updateClientMerchantAudit_resultTupleScheme getScheme() {
        return new updateClientMerchantAudit_resultTupleScheme();
      }
    }

    private static class updateClientMerchantAudit_resultTupleScheme extends TupleScheme<updateClientMerchantAudit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getClientMerchantAuditByOrgCode_args implements org.apache.thrift.TBase<getClientMerchantAuditByOrgCode_args, getClientMerchantAuditByOrgCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getClientMerchantAuditByOrgCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientMerchantAuditByOrgCode_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientMerchantAuditByOrgCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientMerchantAuditByOrgCode_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String orgCode; // required
    public String type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      ORG_CODE((short)2, "orgCode"),
      TYPE((short)3, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ORG_CODE
            return ORG_CODE;
          case 3: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientMerchantAuditByOrgCode_args.class, metaDataMap);
    }

    public getClientMerchantAuditByOrgCode_args() {
    }

    public getClientMerchantAuditByOrgCode_args(
      String clientId,
      String orgCode,
      String type)
    {
      this();
      this.clientId = clientId;
      this.orgCode = orgCode;
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientMerchantAuditByOrgCode_args(getClientMerchantAuditByOrgCode_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetOrgCode()) {
        this.orgCode = other.orgCode;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
    }

    public getClientMerchantAuditByOrgCode_args deepCopy() {
      return new getClientMerchantAuditByOrgCode_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.orgCode = null;
      this.type = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getClientMerchantAuditByOrgCode_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getOrgCode() {
      return this.orgCode;
    }

    public getClientMerchantAuditByOrgCode_args setOrgCode(String orgCode) {
      this.orgCode = orgCode;
      return this;
    }

    public void unsetOrgCode() {
      this.orgCode = null;
    }

    /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgCode() {
      return this.orgCode != null;
    }

    public void setOrgCodeIsSet(boolean value) {
      if (!value) {
        this.orgCode = null;
      }
    }

    public String getType() {
      return this.type;
    }

    public getClientMerchantAuditByOrgCode_args setType(String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ORG_CODE:
        if (value == null) {
          unsetOrgCode();
        } else {
          setOrgCode((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case ORG_CODE:
        return getOrgCode();

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case ORG_CODE:
        return isSetOrgCode();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientMerchantAuditByOrgCode_args)
        return this.equals((getClientMerchantAuditByOrgCode_args)that);
      return false;
    }

    public boolean equals(getClientMerchantAuditByOrgCode_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_orgCode = true && this.isSetOrgCode();
      boolean that_present_orgCode = true && that.isSetOrgCode();
      if (this_present_orgCode || that_present_orgCode) {
        if (!(this_present_orgCode && that_present_orgCode))
          return false;
        if (!this.orgCode.equals(that.orgCode))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_orgCode = true && (isSetOrgCode());
      list.add(present_orgCode);
      if (present_orgCode)
        list.add(orgCode);

      boolean present_type = true && (isSetType());
      list.add(present_type);
      if (present_type)
        list.add(type);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClientMerchantAuditByOrgCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientMerchantAuditByOrgCode_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgCode:");
      if (this.orgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientMerchantAuditByOrgCode_argsStandardSchemeFactory implements SchemeFactory {
      public getClientMerchantAuditByOrgCode_argsStandardScheme getScheme() {
        return new getClientMerchantAuditByOrgCode_argsStandardScheme();
      }
    }

    private static class getClientMerchantAuditByOrgCode_argsStandardScheme extends StandardScheme<getClientMerchantAuditByOrgCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientMerchantAuditByOrgCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORG_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orgCode = iprot.readString();
                struct.setOrgCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientMerchantAuditByOrgCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.orgCode != null) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.orgCode);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientMerchantAuditByOrgCode_argsTupleSchemeFactory implements SchemeFactory {
      public getClientMerchantAuditByOrgCode_argsTupleScheme getScheme() {
        return new getClientMerchantAuditByOrgCode_argsTupleScheme();
      }
    }

    private static class getClientMerchantAuditByOrgCode_argsTupleScheme extends TupleScheme<getClientMerchantAuditByOrgCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientMerchantAuditByOrgCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetOrgCode()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetOrgCode()) {
          oprot.writeString(struct.orgCode);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientMerchantAuditByOrgCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orgCode = iprot.readString();
          struct.setOrgCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class getClientMerchantAuditByOrgCode_result implements org.apache.thrift.TBase<getClientMerchantAuditByOrgCode_result, getClientMerchantAuditByOrgCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getClientMerchantAuditByOrgCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientMerchantAuditByOrgCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientMerchantAuditByOrgCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientMerchantAuditByOrgCode_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientMerchantAuditByOrgCode_result.class, metaDataMap);
    }

    public getClientMerchantAuditByOrgCode_result() {
    }

    public getClientMerchantAuditByOrgCode_result(
      com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientMerchantAuditByOrgCode_result(getClientMerchantAuditByOrgCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo(other.success);
      }
    }

    public getClientMerchantAuditByOrgCode_result deepCopy() {
      return new getClientMerchantAuditByOrgCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo getSuccess() {
      return this.success;
    }

    public getClientMerchantAuditByOrgCode_result setSuccess(com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientMerchantAuditByOrgCode_result)
        return this.equals((getClientMerchantAuditByOrgCode_result)that);
      return false;
    }

    public boolean equals(getClientMerchantAuditByOrgCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClientMerchantAuditByOrgCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientMerchantAuditByOrgCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientMerchantAuditByOrgCode_resultStandardSchemeFactory implements SchemeFactory {
      public getClientMerchantAuditByOrgCode_resultStandardScheme getScheme() {
        return new getClientMerchantAuditByOrgCode_resultStandardScheme();
      }
    }

    private static class getClientMerchantAuditByOrgCode_resultStandardScheme extends StandardScheme<getClientMerchantAuditByOrgCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientMerchantAuditByOrgCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientMerchantAuditByOrgCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientMerchantAuditByOrgCode_resultTupleSchemeFactory implements SchemeFactory {
      public getClientMerchantAuditByOrgCode_resultTupleScheme getScheme() {
        return new getClientMerchantAuditByOrgCode_resultTupleScheme();
      }
    }

    private static class getClientMerchantAuditByOrgCode_resultTupleScheme extends TupleScheme<getClientMerchantAuditByOrgCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientMerchantAuditByOrgCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientMerchantAuditByOrgCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ClientMerchantAuditOrgCodeVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getClientMerchantAudit_args implements org.apache.thrift.TBase<getClientMerchantAudit_args, getClientMerchantAudit_args._Fields>, java.io.Serializable, Cloneable, Comparable<getClientMerchantAudit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientMerchantAudit_args");

    private static final org.apache.thrift.protocol.TField CLIENT_MERCHANT_AUDIT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientMerchantAuditVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientMerchantAudit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientMerchantAudit_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_MERCHANT_AUDIT_VO((short)1, "clientMerchantAuditVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_MERCHANT_AUDIT_VO
            return CLIENT_MERCHANT_AUDIT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_MERCHANT_AUDIT_VO, new org.apache.thrift.meta_data.FieldMetaData("clientMerchantAuditVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientMerchantAuditVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientMerchantAudit_args.class, metaDataMap);
    }

    public getClientMerchantAudit_args() {
    }

    public getClientMerchantAudit_args(
      com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo)
    {
      this();
      this.clientMerchantAuditVo = clientMerchantAuditVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientMerchantAudit_args(getClientMerchantAudit_args other) {
      if (other.isSetClientMerchantAuditVo()) {
        this.clientMerchantAuditVo = new com.froad.thrift.vo.ClientMerchantAuditVo(other.clientMerchantAuditVo);
      }
    }

    public getClientMerchantAudit_args deepCopy() {
      return new getClientMerchantAudit_args(this);
    }

    @Override
    public void clear() {
      this.clientMerchantAuditVo = null;
    }

    public com.froad.thrift.vo.ClientMerchantAuditVo getClientMerchantAuditVo() {
      return this.clientMerchantAuditVo;
    }

    public getClientMerchantAudit_args setClientMerchantAuditVo(com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) {
      this.clientMerchantAuditVo = clientMerchantAuditVo;
      return this;
    }

    public void unsetClientMerchantAuditVo() {
      this.clientMerchantAuditVo = null;
    }

    /** Returns true if field clientMerchantAuditVo is set (has been assigned a value) and false otherwise */
    public boolean isSetClientMerchantAuditVo() {
      return this.clientMerchantAuditVo != null;
    }

    public void setClientMerchantAuditVoIsSet(boolean value) {
      if (!value) {
        this.clientMerchantAuditVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_MERCHANT_AUDIT_VO:
        if (value == null) {
          unsetClientMerchantAuditVo();
        } else {
          setClientMerchantAuditVo((com.froad.thrift.vo.ClientMerchantAuditVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_MERCHANT_AUDIT_VO:
        return getClientMerchantAuditVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_MERCHANT_AUDIT_VO:
        return isSetClientMerchantAuditVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientMerchantAudit_args)
        return this.equals((getClientMerchantAudit_args)that);
      return false;
    }

    public boolean equals(getClientMerchantAudit_args that) {
      if (that == null)
        return false;

      boolean this_present_clientMerchantAuditVo = true && this.isSetClientMerchantAuditVo();
      boolean that_present_clientMerchantAuditVo = true && that.isSetClientMerchantAuditVo();
      if (this_present_clientMerchantAuditVo || that_present_clientMerchantAuditVo) {
        if (!(this_present_clientMerchantAuditVo && that_present_clientMerchantAuditVo))
          return false;
        if (!this.clientMerchantAuditVo.equals(that.clientMerchantAuditVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientMerchantAuditVo = true && (isSetClientMerchantAuditVo());
      list.add(present_clientMerchantAuditVo);
      if (present_clientMerchantAuditVo)
        list.add(clientMerchantAuditVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClientMerchantAudit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientMerchantAuditVo()).compareTo(other.isSetClientMerchantAuditVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientMerchantAuditVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientMerchantAuditVo, other.clientMerchantAuditVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientMerchantAudit_args(");
      boolean first = true;

      sb.append("clientMerchantAuditVo:");
      if (this.clientMerchantAuditVo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientMerchantAuditVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (clientMerchantAuditVo != null) {
        clientMerchantAuditVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientMerchantAudit_argsStandardSchemeFactory implements SchemeFactory {
      public getClientMerchantAudit_argsStandardScheme getScheme() {
        return new getClientMerchantAudit_argsStandardScheme();
      }
    }

    private static class getClientMerchantAudit_argsStandardScheme extends StandardScheme<getClientMerchantAudit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_MERCHANT_AUDIT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientMerchantAuditVo = new com.froad.thrift.vo.ClientMerchantAuditVo();
                struct.clientMerchantAuditVo.read(iprot);
                struct.setClientMerchantAuditVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientMerchantAuditVo != null) {
          oprot.writeFieldBegin(CLIENT_MERCHANT_AUDIT_VO_FIELD_DESC);
          struct.clientMerchantAuditVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientMerchantAudit_argsTupleSchemeFactory implements SchemeFactory {
      public getClientMerchantAudit_argsTupleScheme getScheme() {
        return new getClientMerchantAudit_argsTupleScheme();
      }
    }

    private static class getClientMerchantAudit_argsTupleScheme extends TupleScheme<getClientMerchantAudit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientMerchantAuditVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientMerchantAuditVo()) {
          struct.clientMerchantAuditVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientMerchantAudit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientMerchantAuditVo = new com.froad.thrift.vo.ClientMerchantAuditVo();
          struct.clientMerchantAuditVo.read(iprot);
          struct.setClientMerchantAuditVoIsSet(true);
        }
      }
    }

  }

  public static class getClientMerchantAudit_result implements org.apache.thrift.TBase<getClientMerchantAudit_result, getClientMerchantAudit_result._Fields>, java.io.Serializable, Cloneable, Comparable<getClientMerchantAudit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientMerchantAudit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientMerchantAudit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientMerchantAudit_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ClientMerchantAuditVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientMerchantAuditVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientMerchantAudit_result.class, metaDataMap);
    }

    public getClientMerchantAudit_result() {
    }

    public getClientMerchantAudit_result(
      List<com.froad.thrift.vo.ClientMerchantAuditVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientMerchantAudit_result(getClientMerchantAudit_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.ClientMerchantAuditVo> __this__success = new ArrayList<com.froad.thrift.vo.ClientMerchantAuditVo>(other.success.size());
        for (com.froad.thrift.vo.ClientMerchantAuditVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.ClientMerchantAuditVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getClientMerchantAudit_result deepCopy() {
      return new getClientMerchantAudit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ClientMerchantAuditVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.ClientMerchantAuditVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.ClientMerchantAuditVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.ClientMerchantAuditVo> getSuccess() {
      return this.success;
    }

    public getClientMerchantAudit_result setSuccess(List<com.froad.thrift.vo.ClientMerchantAuditVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.ClientMerchantAuditVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientMerchantAudit_result)
        return this.equals((getClientMerchantAudit_result)that);
      return false;
    }

    public boolean equals(getClientMerchantAudit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClientMerchantAudit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientMerchantAudit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientMerchantAudit_resultStandardSchemeFactory implements SchemeFactory {
      public getClientMerchantAudit_resultStandardScheme getScheme() {
        return new getClientMerchantAudit_resultStandardScheme();
      }
    }

    private static class getClientMerchantAudit_resultStandardScheme extends StandardScheme<getClientMerchantAudit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.ClientMerchantAuditVo>(_list264.size);
                  com.froad.thrift.vo.ClientMerchantAuditVo _elem265;
                  for (int _i266 = 0; _i266 < _list264.size; ++_i266)
                  {
                    _elem265 = new com.froad.thrift.vo.ClientMerchantAuditVo();
                    _elem265.read(iprot);
                    struct.success.add(_elem265);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.ClientMerchantAuditVo _iter267 : struct.success)
            {
              _iter267.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientMerchantAudit_resultTupleSchemeFactory implements SchemeFactory {
      public getClientMerchantAudit_resultTupleScheme getScheme() {
        return new getClientMerchantAudit_resultTupleScheme();
      }
    }

    private static class getClientMerchantAudit_resultTupleScheme extends TupleScheme<getClientMerchantAudit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.ClientMerchantAuditVo _iter268 : struct.success)
            {
              _iter268.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientMerchantAudit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.ClientMerchantAuditVo>(_list269.size);
            com.froad.thrift.vo.ClientMerchantAuditVo _elem270;
            for (int _i271 = 0; _i271 < _list269.size; ++_i271)
            {
              _elem270 = new com.froad.thrift.vo.ClientMerchantAuditVo();
              _elem270.read(iprot);
              struct.success.add(_elem270);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getClientMerchantAuditByPage_args implements org.apache.thrift.TBase<getClientMerchantAuditByPage_args, getClientMerchantAuditByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getClientMerchantAuditByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientMerchantAuditByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_MERCHANT_AUDIT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientMerchantAuditVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientMerchantAuditByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientMerchantAuditByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      CLIENT_MERCHANT_AUDIT_VO((short)2, "clientMerchantAuditVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // CLIENT_MERCHANT_AUDIT_VO
            return CLIENT_MERCHANT_AUDIT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.CLIENT_MERCHANT_AUDIT_VO, new org.apache.thrift.meta_data.FieldMetaData("clientMerchantAuditVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientMerchantAuditVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientMerchantAuditByPage_args.class, metaDataMap);
    }

    public getClientMerchantAuditByPage_args() {
    }

    public getClientMerchantAuditByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo)
    {
      this();
      this.page = page;
      this.clientMerchantAuditVo = clientMerchantAuditVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientMerchantAuditByPage_args(getClientMerchantAuditByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetClientMerchantAuditVo()) {
        this.clientMerchantAuditVo = new com.froad.thrift.vo.ClientMerchantAuditVo(other.clientMerchantAuditVo);
      }
    }

    public getClientMerchantAuditByPage_args deepCopy() {
      return new getClientMerchantAuditByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.clientMerchantAuditVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getClientMerchantAuditByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.ClientMerchantAuditVo getClientMerchantAuditVo() {
      return this.clientMerchantAuditVo;
    }

    public getClientMerchantAuditByPage_args setClientMerchantAuditVo(com.froad.thrift.vo.ClientMerchantAuditVo clientMerchantAuditVo) {
      this.clientMerchantAuditVo = clientMerchantAuditVo;
      return this;
    }

    public void unsetClientMerchantAuditVo() {
      this.clientMerchantAuditVo = null;
    }

    /** Returns true if field clientMerchantAuditVo is set (has been assigned a value) and false otherwise */
    public boolean isSetClientMerchantAuditVo() {
      return this.clientMerchantAuditVo != null;
    }

    public void setClientMerchantAuditVoIsSet(boolean value) {
      if (!value) {
        this.clientMerchantAuditVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case CLIENT_MERCHANT_AUDIT_VO:
        if (value == null) {
          unsetClientMerchantAuditVo();
        } else {
          setClientMerchantAuditVo((com.froad.thrift.vo.ClientMerchantAuditVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case CLIENT_MERCHANT_AUDIT_VO:
        return getClientMerchantAuditVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case CLIENT_MERCHANT_AUDIT_VO:
        return isSetClientMerchantAuditVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientMerchantAuditByPage_args)
        return this.equals((getClientMerchantAuditByPage_args)that);
      return false;
    }

    public boolean equals(getClientMerchantAuditByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_clientMerchantAuditVo = true && this.isSetClientMerchantAuditVo();
      boolean that_present_clientMerchantAuditVo = true && that.isSetClientMerchantAuditVo();
      if (this_present_clientMerchantAuditVo || that_present_clientMerchantAuditVo) {
        if (!(this_present_clientMerchantAuditVo && that_present_clientMerchantAuditVo))
          return false;
        if (!this.clientMerchantAuditVo.equals(that.clientMerchantAuditVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_clientMerchantAuditVo = true && (isSetClientMerchantAuditVo());
      list.add(present_clientMerchantAuditVo);
      if (present_clientMerchantAuditVo)
        list.add(clientMerchantAuditVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClientMerchantAuditByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientMerchantAuditVo()).compareTo(other.isSetClientMerchantAuditVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientMerchantAuditVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientMerchantAuditVo, other.clientMerchantAuditVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientMerchantAuditByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientMerchantAuditVo:");
      if (this.clientMerchantAuditVo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientMerchantAuditVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (clientMerchantAuditVo != null) {
        clientMerchantAuditVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientMerchantAuditByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getClientMerchantAuditByPage_argsStandardScheme getScheme() {
        return new getClientMerchantAuditByPage_argsStandardScheme();
      }
    }

    private static class getClientMerchantAuditByPage_argsStandardScheme extends StandardScheme<getClientMerchantAuditByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientMerchantAuditByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_MERCHANT_AUDIT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientMerchantAuditVo = new com.froad.thrift.vo.ClientMerchantAuditVo();
                struct.clientMerchantAuditVo.read(iprot);
                struct.setClientMerchantAuditVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientMerchantAuditByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientMerchantAuditVo != null) {
          oprot.writeFieldBegin(CLIENT_MERCHANT_AUDIT_VO_FIELD_DESC);
          struct.clientMerchantAuditVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientMerchantAuditByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getClientMerchantAuditByPage_argsTupleScheme getScheme() {
        return new getClientMerchantAuditByPage_argsTupleScheme();
      }
    }

    private static class getClientMerchantAuditByPage_argsTupleScheme extends TupleScheme<getClientMerchantAuditByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientMerchantAuditByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetClientMerchantAuditVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetClientMerchantAuditVo()) {
          struct.clientMerchantAuditVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientMerchantAuditByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientMerchantAuditVo = new com.froad.thrift.vo.ClientMerchantAuditVo();
          struct.clientMerchantAuditVo.read(iprot);
          struct.setClientMerchantAuditVoIsSet(true);
        }
      }
    }

  }

  public static class getClientMerchantAuditByPage_result implements org.apache.thrift.TBase<getClientMerchantAuditByPage_result, getClientMerchantAuditByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getClientMerchantAuditByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClientMerchantAuditByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getClientMerchantAuditByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getClientMerchantAuditByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ClientMerchantAuditPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ClientMerchantAuditPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClientMerchantAuditByPage_result.class, metaDataMap);
    }

    public getClientMerchantAuditByPage_result() {
    }

    public getClientMerchantAuditByPage_result(
      com.froad.thrift.vo.ClientMerchantAuditPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClientMerchantAuditByPage_result(getClientMerchantAuditByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ClientMerchantAuditPageVoRes(other.success);
      }
    }

    public getClientMerchantAuditByPage_result deepCopy() {
      return new getClientMerchantAuditByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ClientMerchantAuditPageVoRes getSuccess() {
      return this.success;
    }

    public getClientMerchantAuditByPage_result setSuccess(com.froad.thrift.vo.ClientMerchantAuditPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ClientMerchantAuditPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getClientMerchantAuditByPage_result)
        return this.equals((getClientMerchantAuditByPage_result)that);
      return false;
    }

    public boolean equals(getClientMerchantAuditByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getClientMerchantAuditByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getClientMerchantAuditByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClientMerchantAuditByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getClientMerchantAuditByPage_resultStandardScheme getScheme() {
        return new getClientMerchantAuditByPage_resultStandardScheme();
      }
    }

    private static class getClientMerchantAuditByPage_resultStandardScheme extends StandardScheme<getClientMerchantAuditByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClientMerchantAuditByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ClientMerchantAuditPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClientMerchantAuditByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClientMerchantAuditByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getClientMerchantAuditByPage_resultTupleScheme getScheme() {
        return new getClientMerchantAuditByPage_resultTupleScheme();
      }
    }

    private static class getClientMerchantAuditByPage_resultTupleScheme extends TupleScheme<getClientMerchantAuditByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClientMerchantAuditByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClientMerchantAuditByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ClientMerchantAuditPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
