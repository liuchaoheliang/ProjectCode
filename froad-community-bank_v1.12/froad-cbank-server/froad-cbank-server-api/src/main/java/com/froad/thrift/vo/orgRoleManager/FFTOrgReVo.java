/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.orgRoleManager;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 权限组织Vo
 * FFTOrgReVo
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class FFTOrgReVo implements org.apache.thrift.TBase<FFTOrgReVo, FFTOrgReVo._Fields>, java.io.Serializable, Cloneable, Comparable<FFTOrgReVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FFTOrgReVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RE_ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reOrgId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RE_ORG_ID_TREE_PATH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("reOrgIdTreePathName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RE_ORG_IDTREE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("reOrgIdtreePath", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FFTOrgReVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FFTOrgReVoTupleSchemeFactory());
  }

  /**
   * 主键id
   */
  public long id; // optional
  /**
   * 组织Id
   */
  public String orgId; // optional
  /**
   * 权限组织Id
   */
  public String reOrgId; // optional
  /**
   * 组织代码(boss对应主键ID，bank对应机构号，merchant对应商户Id)
   */
  public String code; // optional
  /**
   * 平台名称(boss、bank、merchant)
   */
  public String platform; // optional
  /**
   * 权限组织id对应的树路径名称(从顶级到自己本身的orgName，逗号分隔)
   */
  public String reOrgIdTreePathName; // optional
  /**
   * 权限组织id对应的树路径(从顶级到自己本身的ID，逗号分隔)
   */
  public String reOrgIdtreePath; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键id
     */
    ID((short)1, "id"),
    /**
     * 组织Id
     */
    ORG_ID((short)2, "orgId"),
    /**
     * 权限组织Id
     */
    RE_ORG_ID((short)3, "reOrgId"),
    /**
     * 组织代码(boss对应主键ID，bank对应机构号，merchant对应商户Id)
     */
    CODE((short)4, "code"),
    /**
     * 平台名称(boss、bank、merchant)
     */
    PLATFORM((short)5, "platform"),
    /**
     * 权限组织id对应的树路径名称(从顶级到自己本身的orgName，逗号分隔)
     */
    RE_ORG_ID_TREE_PATH_NAME((short)6, "reOrgIdTreePathName"),
    /**
     * 权限组织id对应的树路径(从顶级到自己本身的ID，逗号分隔)
     */
    RE_ORG_IDTREE_PATH((short)7, "reOrgIdtreePath");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ORG_ID
          return ORG_ID;
        case 3: // RE_ORG_ID
          return RE_ORG_ID;
        case 4: // CODE
          return CODE;
        case 5: // PLATFORM
          return PLATFORM;
        case 6: // RE_ORG_ID_TREE_PATH_NAME
          return RE_ORG_ID_TREE_PATH_NAME;
        case 7: // RE_ORG_IDTREE_PATH
          return RE_ORG_IDTREE_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.ORG_ID,_Fields.RE_ORG_ID,_Fields.CODE,_Fields.PLATFORM,_Fields.RE_ORG_ID_TREE_PATH_NAME,_Fields.RE_ORG_IDTREE_PATH};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RE_ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("reOrgId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RE_ORG_ID_TREE_PATH_NAME, new org.apache.thrift.meta_data.FieldMetaData("reOrgIdTreePathName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RE_ORG_IDTREE_PATH, new org.apache.thrift.meta_data.FieldMetaData("reOrgIdtreePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FFTOrgReVo.class, metaDataMap);
  }

  public FFTOrgReVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FFTOrgReVo(FFTOrgReVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetOrgId()) {
      this.orgId = other.orgId;
    }
    if (other.isSetReOrgId()) {
      this.reOrgId = other.reOrgId;
    }
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetPlatform()) {
      this.platform = other.platform;
    }
    if (other.isSetReOrgIdTreePathName()) {
      this.reOrgIdTreePathName = other.reOrgIdTreePathName;
    }
    if (other.isSetReOrgIdtreePath()) {
      this.reOrgIdtreePath = other.reOrgIdtreePath;
    }
  }

  public FFTOrgReVo deepCopy() {
    return new FFTOrgReVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.orgId = null;
    this.reOrgId = null;
    this.code = null;
    this.platform = null;
    this.reOrgIdTreePathName = null;
    this.reOrgIdtreePath = null;
  }

  /**
   * 主键id
   */
  public long getId() {
    return this.id;
  }

  /**
   * 主键id
   */
  public FFTOrgReVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 组织Id
   */
  public String getOrgId() {
    return this.orgId;
  }

  /**
   * 组织Id
   */
  public FFTOrgReVo setOrgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

  public void unsetOrgId() {
    this.orgId = null;
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return this.orgId != null;
  }

  public void setOrgIdIsSet(boolean value) {
    if (!value) {
      this.orgId = null;
    }
  }

  /**
   * 权限组织Id
   */
  public String getReOrgId() {
    return this.reOrgId;
  }

  /**
   * 权限组织Id
   */
  public FFTOrgReVo setReOrgId(String reOrgId) {
    this.reOrgId = reOrgId;
    return this;
  }

  public void unsetReOrgId() {
    this.reOrgId = null;
  }

  /** Returns true if field reOrgId is set (has been assigned a value) and false otherwise */
  public boolean isSetReOrgId() {
    return this.reOrgId != null;
  }

  public void setReOrgIdIsSet(boolean value) {
    if (!value) {
      this.reOrgId = null;
    }
  }

  /**
   * 组织代码(boss对应主键ID，bank对应机构号，merchant对应商户Id)
   */
  public String getCode() {
    return this.code;
  }

  /**
   * 组织代码(boss对应主键ID，bank对应机构号，merchant对应商户Id)
   */
  public FFTOrgReVo setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  /**
   * 平台名称(boss、bank、merchant)
   */
  public String getPlatform() {
    return this.platform;
  }

  /**
   * 平台名称(boss、bank、merchant)
   */
  public FFTOrgReVo setPlatform(String platform) {
    this.platform = platform;
    return this;
  }

  public void unsetPlatform() {
    this.platform = null;
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return this.platform != null;
  }

  public void setPlatformIsSet(boolean value) {
    if (!value) {
      this.platform = null;
    }
  }

  /**
   * 权限组织id对应的树路径名称(从顶级到自己本身的orgName，逗号分隔)
   */
  public String getReOrgIdTreePathName() {
    return this.reOrgIdTreePathName;
  }

  /**
   * 权限组织id对应的树路径名称(从顶级到自己本身的orgName，逗号分隔)
   */
  public FFTOrgReVo setReOrgIdTreePathName(String reOrgIdTreePathName) {
    this.reOrgIdTreePathName = reOrgIdTreePathName;
    return this;
  }

  public void unsetReOrgIdTreePathName() {
    this.reOrgIdTreePathName = null;
  }

  /** Returns true if field reOrgIdTreePathName is set (has been assigned a value) and false otherwise */
  public boolean isSetReOrgIdTreePathName() {
    return this.reOrgIdTreePathName != null;
  }

  public void setReOrgIdTreePathNameIsSet(boolean value) {
    if (!value) {
      this.reOrgIdTreePathName = null;
    }
  }

  /**
   * 权限组织id对应的树路径(从顶级到自己本身的ID，逗号分隔)
   */
  public String getReOrgIdtreePath() {
    return this.reOrgIdtreePath;
  }

  /**
   * 权限组织id对应的树路径(从顶级到自己本身的ID，逗号分隔)
   */
  public FFTOrgReVo setReOrgIdtreePath(String reOrgIdtreePath) {
    this.reOrgIdtreePath = reOrgIdtreePath;
    return this;
  }

  public void unsetReOrgIdtreePath() {
    this.reOrgIdtreePath = null;
  }

  /** Returns true if field reOrgIdtreePath is set (has been assigned a value) and false otherwise */
  public boolean isSetReOrgIdtreePath() {
    return this.reOrgIdtreePath != null;
  }

  public void setReOrgIdtreePathIsSet(boolean value) {
    if (!value) {
      this.reOrgIdtreePath = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((String)value);
      }
      break;

    case RE_ORG_ID:
      if (value == null) {
        unsetReOrgId();
      } else {
        setReOrgId((String)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((String)value);
      }
      break;

    case RE_ORG_ID_TREE_PATH_NAME:
      if (value == null) {
        unsetReOrgIdTreePathName();
      } else {
        setReOrgIdTreePathName((String)value);
      }
      break;

    case RE_ORG_IDTREE_PATH:
      if (value == null) {
        unsetReOrgIdtreePath();
      } else {
        setReOrgIdtreePath((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case ORG_ID:
      return getOrgId();

    case RE_ORG_ID:
      return getReOrgId();

    case CODE:
      return getCode();

    case PLATFORM:
      return getPlatform();

    case RE_ORG_ID_TREE_PATH_NAME:
      return getReOrgIdTreePathName();

    case RE_ORG_IDTREE_PATH:
      return getReOrgIdtreePath();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ORG_ID:
      return isSetOrgId();
    case RE_ORG_ID:
      return isSetReOrgId();
    case CODE:
      return isSetCode();
    case PLATFORM:
      return isSetPlatform();
    case RE_ORG_ID_TREE_PATH_NAME:
      return isSetReOrgIdTreePathName();
    case RE_ORG_IDTREE_PATH:
      return isSetReOrgIdtreePath();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FFTOrgReVo)
      return this.equals((FFTOrgReVo)that);
    return false;
  }

  public boolean equals(FFTOrgReVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_orgId = true && this.isSetOrgId();
    boolean that_present_orgId = true && that.isSetOrgId();
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (!this.orgId.equals(that.orgId))
        return false;
    }

    boolean this_present_reOrgId = true && this.isSetReOrgId();
    boolean that_present_reOrgId = true && that.isSetReOrgId();
    if (this_present_reOrgId || that_present_reOrgId) {
      if (!(this_present_reOrgId && that_present_reOrgId))
        return false;
      if (!this.reOrgId.equals(that.reOrgId))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_platform = true && this.isSetPlatform();
    boolean that_present_platform = true && that.isSetPlatform();
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (!this.platform.equals(that.platform))
        return false;
    }

    boolean this_present_reOrgIdTreePathName = true && this.isSetReOrgIdTreePathName();
    boolean that_present_reOrgIdTreePathName = true && that.isSetReOrgIdTreePathName();
    if (this_present_reOrgIdTreePathName || that_present_reOrgIdTreePathName) {
      if (!(this_present_reOrgIdTreePathName && that_present_reOrgIdTreePathName))
        return false;
      if (!this.reOrgIdTreePathName.equals(that.reOrgIdTreePathName))
        return false;
    }

    boolean this_present_reOrgIdtreePath = true && this.isSetReOrgIdtreePath();
    boolean that_present_reOrgIdtreePath = true && that.isSetReOrgIdtreePath();
    if (this_present_reOrgIdtreePath || that_present_reOrgIdtreePath) {
      if (!(this_present_reOrgIdtreePath && that_present_reOrgIdtreePath))
        return false;
      if (!this.reOrgIdtreePath.equals(that.reOrgIdtreePath))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_orgId = true && (isSetOrgId());
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_reOrgId = true && (isSetReOrgId());
    list.add(present_reOrgId);
    if (present_reOrgId)
      list.add(reOrgId);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_platform = true && (isSetPlatform());
    list.add(present_platform);
    if (present_platform)
      list.add(platform);

    boolean present_reOrgIdTreePathName = true && (isSetReOrgIdTreePathName());
    list.add(present_reOrgIdTreePathName);
    if (present_reOrgIdTreePathName)
      list.add(reOrgIdTreePathName);

    boolean present_reOrgIdtreePath = true && (isSetReOrgIdtreePath());
    list.add(present_reOrgIdtreePath);
    if (present_reOrgIdtreePath)
      list.add(reOrgIdtreePath);

    return list.hashCode();
  }

  @Override
  public int compareTo(FFTOrgReVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReOrgId()).compareTo(other.isSetReOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reOrgId, other.reOrgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReOrgIdTreePathName()).compareTo(other.isSetReOrgIdTreePathName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReOrgIdTreePathName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reOrgIdTreePathName, other.reOrgIdTreePathName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReOrgIdtreePath()).compareTo(other.isSetReOrgIdtreePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReOrgIdtreePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reOrgIdtreePath, other.reOrgIdtreePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FFTOrgReVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetOrgId()) {
      if (!first) sb.append(", ");
      sb.append("orgId:");
      if (this.orgId == null) {
        sb.append("null");
      } else {
        sb.append(this.orgId);
      }
      first = false;
    }
    if (isSetReOrgId()) {
      if (!first) sb.append(", ");
      sb.append("reOrgId:");
      if (this.reOrgId == null) {
        sb.append("null");
      } else {
        sb.append(this.reOrgId);
      }
      first = false;
    }
    if (isSetCode()) {
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
    }
    if (isSetPlatform()) {
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
    }
    if (isSetReOrgIdTreePathName()) {
      if (!first) sb.append(", ");
      sb.append("reOrgIdTreePathName:");
      if (this.reOrgIdTreePathName == null) {
        sb.append("null");
      } else {
        sb.append(this.reOrgIdTreePathName);
      }
      first = false;
    }
    if (isSetReOrgIdtreePath()) {
      if (!first) sb.append(", ");
      sb.append("reOrgIdtreePath:");
      if (this.reOrgIdtreePath == null) {
        sb.append("null");
      } else {
        sb.append(this.reOrgIdtreePath);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FFTOrgReVoStandardSchemeFactory implements SchemeFactory {
    public FFTOrgReVoStandardScheme getScheme() {
      return new FFTOrgReVoStandardScheme();
    }
  }

  private static class FFTOrgReVoStandardScheme extends StandardScheme<FFTOrgReVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FFTOrgReVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgId = iprot.readString();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RE_ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reOrgId = iprot.readString();
              struct.setReOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platform = iprot.readString();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RE_ORG_ID_TREE_PATH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reOrgIdTreePathName = iprot.readString();
              struct.setReOrgIdTreePathNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RE_ORG_IDTREE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reOrgIdtreePath = iprot.readString();
              struct.setReOrgIdtreePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FFTOrgReVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.orgId != null) {
        if (struct.isSetOrgId()) {
          oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
          oprot.writeString(struct.orgId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reOrgId != null) {
        if (struct.isSetReOrgId()) {
          oprot.writeFieldBegin(RE_ORG_ID_FIELD_DESC);
          oprot.writeString(struct.reOrgId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.code != null) {
        if (struct.isSetCode()) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
      }
      if (struct.platform != null) {
        if (struct.isSetPlatform()) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reOrgIdTreePathName != null) {
        if (struct.isSetReOrgIdTreePathName()) {
          oprot.writeFieldBegin(RE_ORG_ID_TREE_PATH_NAME_FIELD_DESC);
          oprot.writeString(struct.reOrgIdTreePathName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reOrgIdtreePath != null) {
        if (struct.isSetReOrgIdtreePath()) {
          oprot.writeFieldBegin(RE_ORG_IDTREE_PATH_FIELD_DESC);
          oprot.writeString(struct.reOrgIdtreePath);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FFTOrgReVoTupleSchemeFactory implements SchemeFactory {
    public FFTOrgReVoTupleScheme getScheme() {
      return new FFTOrgReVoTupleScheme();
    }
  }

  private static class FFTOrgReVoTupleScheme extends TupleScheme<FFTOrgReVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FFTOrgReVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetOrgId()) {
        optionals.set(1);
      }
      if (struct.isSetReOrgId()) {
        optionals.set(2);
      }
      if (struct.isSetCode()) {
        optionals.set(3);
      }
      if (struct.isSetPlatform()) {
        optionals.set(4);
      }
      if (struct.isSetReOrgIdTreePathName()) {
        optionals.set(5);
      }
      if (struct.isSetReOrgIdtreePath()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetOrgId()) {
        oprot.writeString(struct.orgId);
      }
      if (struct.isSetReOrgId()) {
        oprot.writeString(struct.reOrgId);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetPlatform()) {
        oprot.writeString(struct.platform);
      }
      if (struct.isSetReOrgIdTreePathName()) {
        oprot.writeString(struct.reOrgIdTreePathName);
      }
      if (struct.isSetReOrgIdtreePath()) {
        oprot.writeString(struct.reOrgIdtreePath);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FFTOrgReVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orgId = iprot.readString();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reOrgId = iprot.readString();
        struct.setReOrgIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.platform = iprot.readString();
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(5)) {
        struct.reOrgIdTreePathName = iprot.readString();
        struct.setReOrgIdTreePathNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.reOrgIdtreePath = iprot.readString();
        struct.setReOrgIdtreePathIsSet(true);
      }
    }
  }

}

