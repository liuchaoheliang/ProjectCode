/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class VipProductService {

  /**
   * VIPProductService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 新加vip规则
     * @param OriginVo 操作人信息
     * @param VipProductVo
     * @return AddProductVoRes
     * 
     * @param originVo
     * @param vipProductVo
     */
    public com.froad.thrift.vo.AddProductVoRes addVipProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.VipProductVo vipProductVo) throws org.apache.thrift.TException;

    /**
     * 启用或作废vip规则
     * @param OriginVo 操作人信息
     * @param vipId VIP规则id
     * @param status 1启用,2作废
     * @return ResultVo
     * 
     * @param originVo
     * @param vipId
     * @param status
     */
    public com.froad.thrift.vo.ResultVo updateVipStatus(com.froad.thrift.vo.OriginVo originVo, String vipId, String status) throws org.apache.thrift.TException;

    /**
     * 删除vip规则
     * @param OriginVo 操作人信息
     * @param vipId VIP规则id
     * @return ResultVo
     * 
     * @param originVo
     * @param vipId
     */
    public com.froad.thrift.vo.ResultVo deleteVipProduct(com.froad.thrift.vo.OriginVo originVo, String vipId) throws org.apache.thrift.TException;

    /**
     * 修改vip规则
     * @param OriginVo 操作人信息
     * @param VipProductVo
     * @return ResultVo
     * 
     * @param originVo
     * @param vipProductVo
     */
    public com.froad.thrift.vo.ResultVo updateVipProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.VipProductVo vipProductVo) throws org.apache.thrift.TException;

    /**
     * 根据客户端id查询单独一条启用的vip规则
     * @param clientId 客户端id
     * @return VipProductVo
     * 
     * @param clientId
     */
    public com.froad.thrift.vo.VipProductVo getVipProduct(String clientId) throws org.apache.thrift.TException;

    /**
     * 根据VIP规则id查询单独一条vip规则详情
     * @param vipId VIP规则id
     * @return VipProductVo
     * 
     * @param vipId
     */
    public com.froad.thrift.vo.VipProductVo getVipProductDetail(String vipId) throws org.apache.thrift.TException;

    /**
     * 分页查询vip规则列表
     * @param PageVo 分页信息
     * @param VipProductVo
     * @return VipProductPageVoRes
     * 
     * @param pageVo
     * @param vipProductVo
     */
    public com.froad.thrift.vo.VipProductPageVoRes getVipProductsByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.VipProductVo vipProductVo) throws org.apache.thrift.TException;

    /**
     * 分页查询vip规则已经绑定的商品列表
     * @param PageVo 分页信息
     * @param vipId VIP规则id
     * @return ProductOfVipPageVo
     * 
     * @param pageVo
     * @param vipId
     */
    public com.froad.thrift.vo.ProductOfVipPageVo getProductsOfVipByPage(com.froad.thrift.vo.PageVo pageVo, String vipId) throws org.apache.thrift.TException;

    /**
     *    * VIP规则绑定新商品
     *    * @param originVo 操作人信息
     *    * @param vipId VIP规则id
     *    * @param list<BindVipInfoVo> 绑定信息
     * * @return ResultVo(提示信息)
     * 
     * @param originVo
     * @param vipId
     * @param bindInfos
     */
    public com.froad.thrift.vo.ResultVo addProductsToVipProduct(com.froad.thrift.vo.OriginVo originVo, String vipId, List<com.froad.thrift.vo.BindVipInfoVo> bindInfos) throws org.apache.thrift.TException;

    /**
     *    * VIP规则解除绑定商品
     *    * @param originVo 操作人信息
     *    * @param vipId VIP规则id
     *    * @param productIds 商品id数组 如果有值代表解除多条绑定 如果没有值解除该VIP规则下所有商品绑定
     * * @return ResultVo(提示信息)
     * 
     * @param originVo
     * @param vipId
     * @param productIds
     */
    public com.froad.thrift.vo.ResultVo removeProductsFromVipProduct(com.froad.thrift.vo.OriginVo originVo, String vipId, List<String> productIds) throws org.apache.thrift.TException;

    /**
     * 分页查询可以绑定VIP规则的商品列表
     * @param vipId VIP规则id
     * @param name 商品名称
     * @param priceStart 商品售价开始范围
     * @param priceEnd 商品售价结束范围
     * @param pageVo
     * @return ProductOfVipPageVo
     * 
     * @param vipId
     * @param name
     * @param priceStart
     * @param priceEnd
     * @param pageVo
     */
    public com.froad.thrift.vo.ProductOfVipPageVo findProductsForVipByPage(String vipId, String name, double priceStart, double priceEnd, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addVipProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.VipProductVo vipProductVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateVipStatus(com.froad.thrift.vo.OriginVo originVo, String vipId, String status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteVipProduct(com.froad.thrift.vo.OriginVo originVo, String vipId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateVipProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.VipProductVo vipProductVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVipProduct(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVipProductDetail(String vipId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVipProductsByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.VipProductVo vipProductVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductsOfVipByPage(com.froad.thrift.vo.PageVo pageVo, String vipId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addProductsToVipProduct(com.froad.thrift.vo.OriginVo originVo, String vipId, List<com.froad.thrift.vo.BindVipInfoVo> bindInfos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeProductsFromVipProduct(com.froad.thrift.vo.OriginVo originVo, String vipId, List<String> productIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findProductsForVipByPage(String vipId, String name, double priceStart, double priceEnd, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.AddProductVoRes addVipProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.VipProductVo vipProductVo) throws org.apache.thrift.TException
    {
      send_addVipProduct(originVo, vipProductVo);
      return recv_addVipProduct();
    }

    public void send_addVipProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.VipProductVo vipProductVo) throws org.apache.thrift.TException
    {
      addVipProduct_args args = new addVipProduct_args();
      args.setOriginVo(originVo);
      args.setVipProductVo(vipProductVo);
      sendBase("addVipProduct", args);
    }

    public com.froad.thrift.vo.AddProductVoRes recv_addVipProduct() throws org.apache.thrift.TException
    {
      addVipProduct_result result = new addVipProduct_result();
      receiveBase(result, "addVipProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addVipProduct failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateVipStatus(com.froad.thrift.vo.OriginVo originVo, String vipId, String status) throws org.apache.thrift.TException
    {
      send_updateVipStatus(originVo, vipId, status);
      return recv_updateVipStatus();
    }

    public void send_updateVipStatus(com.froad.thrift.vo.OriginVo originVo, String vipId, String status) throws org.apache.thrift.TException
    {
      updateVipStatus_args args = new updateVipStatus_args();
      args.setOriginVo(originVo);
      args.setVipId(vipId);
      args.setStatus(status);
      sendBase("updateVipStatus", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateVipStatus() throws org.apache.thrift.TException
    {
      updateVipStatus_result result = new updateVipStatus_result();
      receiveBase(result, "updateVipStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateVipStatus failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteVipProduct(com.froad.thrift.vo.OriginVo originVo, String vipId) throws org.apache.thrift.TException
    {
      send_deleteVipProduct(originVo, vipId);
      return recv_deleteVipProduct();
    }

    public void send_deleteVipProduct(com.froad.thrift.vo.OriginVo originVo, String vipId) throws org.apache.thrift.TException
    {
      deleteVipProduct_args args = new deleteVipProduct_args();
      args.setOriginVo(originVo);
      args.setVipId(vipId);
      sendBase("deleteVipProduct", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteVipProduct() throws org.apache.thrift.TException
    {
      deleteVipProduct_result result = new deleteVipProduct_result();
      receiveBase(result, "deleteVipProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteVipProduct failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateVipProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.VipProductVo vipProductVo) throws org.apache.thrift.TException
    {
      send_updateVipProduct(originVo, vipProductVo);
      return recv_updateVipProduct();
    }

    public void send_updateVipProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.VipProductVo vipProductVo) throws org.apache.thrift.TException
    {
      updateVipProduct_args args = new updateVipProduct_args();
      args.setOriginVo(originVo);
      args.setVipProductVo(vipProductVo);
      sendBase("updateVipProduct", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateVipProduct() throws org.apache.thrift.TException
    {
      updateVipProduct_result result = new updateVipProduct_result();
      receiveBase(result, "updateVipProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateVipProduct failed: unknown result");
    }

    public com.froad.thrift.vo.VipProductVo getVipProduct(String clientId) throws org.apache.thrift.TException
    {
      send_getVipProduct(clientId);
      return recv_getVipProduct();
    }

    public void send_getVipProduct(String clientId) throws org.apache.thrift.TException
    {
      getVipProduct_args args = new getVipProduct_args();
      args.setClientId(clientId);
      sendBase("getVipProduct", args);
    }

    public com.froad.thrift.vo.VipProductVo recv_getVipProduct() throws org.apache.thrift.TException
    {
      getVipProduct_result result = new getVipProduct_result();
      receiveBase(result, "getVipProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVipProduct failed: unknown result");
    }

    public com.froad.thrift.vo.VipProductVo getVipProductDetail(String vipId) throws org.apache.thrift.TException
    {
      send_getVipProductDetail(vipId);
      return recv_getVipProductDetail();
    }

    public void send_getVipProductDetail(String vipId) throws org.apache.thrift.TException
    {
      getVipProductDetail_args args = new getVipProductDetail_args();
      args.setVipId(vipId);
      sendBase("getVipProductDetail", args);
    }

    public com.froad.thrift.vo.VipProductVo recv_getVipProductDetail() throws org.apache.thrift.TException
    {
      getVipProductDetail_result result = new getVipProductDetail_result();
      receiveBase(result, "getVipProductDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVipProductDetail failed: unknown result");
    }

    public com.froad.thrift.vo.VipProductPageVoRes getVipProductsByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.VipProductVo vipProductVo) throws org.apache.thrift.TException
    {
      send_getVipProductsByPage(pageVo, vipProductVo);
      return recv_getVipProductsByPage();
    }

    public void send_getVipProductsByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.VipProductVo vipProductVo) throws org.apache.thrift.TException
    {
      getVipProductsByPage_args args = new getVipProductsByPage_args();
      args.setPageVo(pageVo);
      args.setVipProductVo(vipProductVo);
      sendBase("getVipProductsByPage", args);
    }

    public com.froad.thrift.vo.VipProductPageVoRes recv_getVipProductsByPage() throws org.apache.thrift.TException
    {
      getVipProductsByPage_result result = new getVipProductsByPage_result();
      receiveBase(result, "getVipProductsByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVipProductsByPage failed: unknown result");
    }

    public com.froad.thrift.vo.ProductOfVipPageVo getProductsOfVipByPage(com.froad.thrift.vo.PageVo pageVo, String vipId) throws org.apache.thrift.TException
    {
      send_getProductsOfVipByPage(pageVo, vipId);
      return recv_getProductsOfVipByPage();
    }

    public void send_getProductsOfVipByPage(com.froad.thrift.vo.PageVo pageVo, String vipId) throws org.apache.thrift.TException
    {
      getProductsOfVipByPage_args args = new getProductsOfVipByPage_args();
      args.setPageVo(pageVo);
      args.setVipId(vipId);
      sendBase("getProductsOfVipByPage", args);
    }

    public com.froad.thrift.vo.ProductOfVipPageVo recv_getProductsOfVipByPage() throws org.apache.thrift.TException
    {
      getProductsOfVipByPage_result result = new getProductsOfVipByPage_result();
      receiveBase(result, "getProductsOfVipByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductsOfVipByPage failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo addProductsToVipProduct(com.froad.thrift.vo.OriginVo originVo, String vipId, List<com.froad.thrift.vo.BindVipInfoVo> bindInfos) throws org.apache.thrift.TException
    {
      send_addProductsToVipProduct(originVo, vipId, bindInfos);
      return recv_addProductsToVipProduct();
    }

    public void send_addProductsToVipProduct(com.froad.thrift.vo.OriginVo originVo, String vipId, List<com.froad.thrift.vo.BindVipInfoVo> bindInfos) throws org.apache.thrift.TException
    {
      addProductsToVipProduct_args args = new addProductsToVipProduct_args();
      args.setOriginVo(originVo);
      args.setVipId(vipId);
      args.setBindInfos(bindInfos);
      sendBase("addProductsToVipProduct", args);
    }

    public com.froad.thrift.vo.ResultVo recv_addProductsToVipProduct() throws org.apache.thrift.TException
    {
      addProductsToVipProduct_result result = new addProductsToVipProduct_result();
      receiveBase(result, "addProductsToVipProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addProductsToVipProduct failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo removeProductsFromVipProduct(com.froad.thrift.vo.OriginVo originVo, String vipId, List<String> productIds) throws org.apache.thrift.TException
    {
      send_removeProductsFromVipProduct(originVo, vipId, productIds);
      return recv_removeProductsFromVipProduct();
    }

    public void send_removeProductsFromVipProduct(com.froad.thrift.vo.OriginVo originVo, String vipId, List<String> productIds) throws org.apache.thrift.TException
    {
      removeProductsFromVipProduct_args args = new removeProductsFromVipProduct_args();
      args.setOriginVo(originVo);
      args.setVipId(vipId);
      args.setProductIds(productIds);
      sendBase("removeProductsFromVipProduct", args);
    }

    public com.froad.thrift.vo.ResultVo recv_removeProductsFromVipProduct() throws org.apache.thrift.TException
    {
      removeProductsFromVipProduct_result result = new removeProductsFromVipProduct_result();
      receiveBase(result, "removeProductsFromVipProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeProductsFromVipProduct failed: unknown result");
    }

    public com.froad.thrift.vo.ProductOfVipPageVo findProductsForVipByPage(String vipId, String name, double priceStart, double priceEnd, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      send_findProductsForVipByPage(vipId, name, priceStart, priceEnd, pageVo);
      return recv_findProductsForVipByPage();
    }

    public void send_findProductsForVipByPage(String vipId, String name, double priceStart, double priceEnd, com.froad.thrift.vo.PageVo pageVo) throws org.apache.thrift.TException
    {
      findProductsForVipByPage_args args = new findProductsForVipByPage_args();
      args.setVipId(vipId);
      args.setName(name);
      args.setPriceStart(priceStart);
      args.setPriceEnd(priceEnd);
      args.setPageVo(pageVo);
      sendBase("findProductsForVipByPage", args);
    }

    public com.froad.thrift.vo.ProductOfVipPageVo recv_findProductsForVipByPage() throws org.apache.thrift.TException
    {
      findProductsForVipByPage_result result = new findProductsForVipByPage_result();
      receiveBase(result, "findProductsForVipByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findProductsForVipByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addVipProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.VipProductVo vipProductVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addVipProduct_call method_call = new addVipProduct_call(originVo, vipProductVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addVipProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.VipProductVo vipProductVo;
      public addVipProduct_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.VipProductVo vipProductVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.vipProductVo = vipProductVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addVipProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addVipProduct_args args = new addVipProduct_args();
        args.setOriginVo(originVo);
        args.setVipProductVo(vipProductVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AddProductVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addVipProduct();
      }
    }

    public void updateVipStatus(com.froad.thrift.vo.OriginVo originVo, String vipId, String status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateVipStatus_call method_call = new updateVipStatus_call(originVo, vipId, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateVipStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String vipId;
      private String status;
      public updateVipStatus_call(com.froad.thrift.vo.OriginVo originVo, String vipId, String status, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.vipId = vipId;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateVipStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateVipStatus_args args = new updateVipStatus_args();
        args.setOriginVo(originVo);
        args.setVipId(vipId);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateVipStatus();
      }
    }

    public void deleteVipProduct(com.froad.thrift.vo.OriginVo originVo, String vipId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteVipProduct_call method_call = new deleteVipProduct_call(originVo, vipId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteVipProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String vipId;
      public deleteVipProduct_call(com.froad.thrift.vo.OriginVo originVo, String vipId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.vipId = vipId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteVipProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteVipProduct_args args = new deleteVipProduct_args();
        args.setOriginVo(originVo);
        args.setVipId(vipId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteVipProduct();
      }
    }

    public void updateVipProduct(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.VipProductVo vipProductVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateVipProduct_call method_call = new updateVipProduct_call(originVo, vipProductVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateVipProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.VipProductVo vipProductVo;
      public updateVipProduct_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.VipProductVo vipProductVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.vipProductVo = vipProductVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateVipProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateVipProduct_args args = new updateVipProduct_args();
        args.setOriginVo(originVo);
        args.setVipProductVo(vipProductVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateVipProduct();
      }
    }

    public void getVipProduct(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVipProduct_call method_call = new getVipProduct_call(clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVipProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      public getVipProduct_call(String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVipProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVipProduct_args args = new getVipProduct_args();
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.VipProductVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVipProduct();
      }
    }

    public void getVipProductDetail(String vipId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVipProductDetail_call method_call = new getVipProductDetail_call(vipId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVipProductDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String vipId;
      public getVipProductDetail_call(String vipId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vipId = vipId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVipProductDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVipProductDetail_args args = new getVipProductDetail_args();
        args.setVipId(vipId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.VipProductVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVipProductDetail();
      }
    }

    public void getVipProductsByPage(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.VipProductVo vipProductVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVipProductsByPage_call method_call = new getVipProductsByPage_call(pageVo, vipProductVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVipProductsByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo pageVo;
      private com.froad.thrift.vo.VipProductVo vipProductVo;
      public getVipProductsByPage_call(com.froad.thrift.vo.PageVo pageVo, com.froad.thrift.vo.VipProductVo vipProductVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageVo = pageVo;
        this.vipProductVo = vipProductVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVipProductsByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVipProductsByPage_args args = new getVipProductsByPage_args();
        args.setPageVo(pageVo);
        args.setVipProductVo(vipProductVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.VipProductPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVipProductsByPage();
      }
    }

    public void getProductsOfVipByPage(com.froad.thrift.vo.PageVo pageVo, String vipId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductsOfVipByPage_call method_call = new getProductsOfVipByPage_call(pageVo, vipId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductsOfVipByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo pageVo;
      private String vipId;
      public getProductsOfVipByPage_call(com.froad.thrift.vo.PageVo pageVo, String vipId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pageVo = pageVo;
        this.vipId = vipId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductsOfVipByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductsOfVipByPage_args args = new getProductsOfVipByPage_args();
        args.setPageVo(pageVo);
        args.setVipId(vipId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductOfVipPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductsOfVipByPage();
      }
    }

    public void addProductsToVipProduct(com.froad.thrift.vo.OriginVo originVo, String vipId, List<com.froad.thrift.vo.BindVipInfoVo> bindInfos, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addProductsToVipProduct_call method_call = new addProductsToVipProduct_call(originVo, vipId, bindInfos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addProductsToVipProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String vipId;
      private List<com.froad.thrift.vo.BindVipInfoVo> bindInfos;
      public addProductsToVipProduct_call(com.froad.thrift.vo.OriginVo originVo, String vipId, List<com.froad.thrift.vo.BindVipInfoVo> bindInfos, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.vipId = vipId;
        this.bindInfos = bindInfos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProductsToVipProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addProductsToVipProduct_args args = new addProductsToVipProduct_args();
        args.setOriginVo(originVo);
        args.setVipId(vipId);
        args.setBindInfos(bindInfos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addProductsToVipProduct();
      }
    }

    public void removeProductsFromVipProduct(com.froad.thrift.vo.OriginVo originVo, String vipId, List<String> productIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeProductsFromVipProduct_call method_call = new removeProductsFromVipProduct_call(originVo, vipId, productIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeProductsFromVipProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String vipId;
      private List<String> productIds;
      public removeProductsFromVipProduct_call(com.froad.thrift.vo.OriginVo originVo, String vipId, List<String> productIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.vipId = vipId;
        this.productIds = productIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeProductsFromVipProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeProductsFromVipProduct_args args = new removeProductsFromVipProduct_args();
        args.setOriginVo(originVo);
        args.setVipId(vipId);
        args.setProductIds(productIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeProductsFromVipProduct();
      }
    }

    public void findProductsForVipByPage(String vipId, String name, double priceStart, double priceEnd, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findProductsForVipByPage_call method_call = new findProductsForVipByPage_call(vipId, name, priceStart, priceEnd, pageVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findProductsForVipByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String vipId;
      private String name;
      private double priceStart;
      private double priceEnd;
      private com.froad.thrift.vo.PageVo pageVo;
      public findProductsForVipByPage_call(String vipId, String name, double priceStart, double priceEnd, com.froad.thrift.vo.PageVo pageVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vipId = vipId;
        this.name = name;
        this.priceStart = priceStart;
        this.priceEnd = priceEnd;
        this.pageVo = pageVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findProductsForVipByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findProductsForVipByPage_args args = new findProductsForVipByPage_args();
        args.setVipId(vipId);
        args.setName(name);
        args.setPriceStart(priceStart);
        args.setPriceEnd(priceEnd);
        args.setPageVo(pageVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ProductOfVipPageVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findProductsForVipByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addVipProduct", new addVipProduct());
      processMap.put("updateVipStatus", new updateVipStatus());
      processMap.put("deleteVipProduct", new deleteVipProduct());
      processMap.put("updateVipProduct", new updateVipProduct());
      processMap.put("getVipProduct", new getVipProduct());
      processMap.put("getVipProductDetail", new getVipProductDetail());
      processMap.put("getVipProductsByPage", new getVipProductsByPage());
      processMap.put("getProductsOfVipByPage", new getProductsOfVipByPage());
      processMap.put("addProductsToVipProduct", new addProductsToVipProduct());
      processMap.put("removeProductsFromVipProduct", new removeProductsFromVipProduct());
      processMap.put("findProductsForVipByPage", new findProductsForVipByPage());
      return processMap;
    }

    public static class addVipProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addVipProduct_args> {
      public addVipProduct() {
        super("addVipProduct");
      }

      public addVipProduct_args getEmptyArgsInstance() {
        return new addVipProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addVipProduct_result getResult(I iface, addVipProduct_args args) throws org.apache.thrift.TException {
        addVipProduct_result result = new addVipProduct_result();
        result.success = iface.addVipProduct(args.originVo, args.vipProductVo);
        return result;
      }
    }

    public static class updateVipStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateVipStatus_args> {
      public updateVipStatus() {
        super("updateVipStatus");
      }

      public updateVipStatus_args getEmptyArgsInstance() {
        return new updateVipStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateVipStatus_result getResult(I iface, updateVipStatus_args args) throws org.apache.thrift.TException {
        updateVipStatus_result result = new updateVipStatus_result();
        result.success = iface.updateVipStatus(args.originVo, args.vipId, args.status);
        return result;
      }
    }

    public static class deleteVipProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteVipProduct_args> {
      public deleteVipProduct() {
        super("deleteVipProduct");
      }

      public deleteVipProduct_args getEmptyArgsInstance() {
        return new deleteVipProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteVipProduct_result getResult(I iface, deleteVipProduct_args args) throws org.apache.thrift.TException {
        deleteVipProduct_result result = new deleteVipProduct_result();
        result.success = iface.deleteVipProduct(args.originVo, args.vipId);
        return result;
      }
    }

    public static class updateVipProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateVipProduct_args> {
      public updateVipProduct() {
        super("updateVipProduct");
      }

      public updateVipProduct_args getEmptyArgsInstance() {
        return new updateVipProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateVipProduct_result getResult(I iface, updateVipProduct_args args) throws org.apache.thrift.TException {
        updateVipProduct_result result = new updateVipProduct_result();
        result.success = iface.updateVipProduct(args.originVo, args.vipProductVo);
        return result;
      }
    }

    public static class getVipProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVipProduct_args> {
      public getVipProduct() {
        super("getVipProduct");
      }

      public getVipProduct_args getEmptyArgsInstance() {
        return new getVipProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVipProduct_result getResult(I iface, getVipProduct_args args) throws org.apache.thrift.TException {
        getVipProduct_result result = new getVipProduct_result();
        result.success = iface.getVipProduct(args.clientId);
        return result;
      }
    }

    public static class getVipProductDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVipProductDetail_args> {
      public getVipProductDetail() {
        super("getVipProductDetail");
      }

      public getVipProductDetail_args getEmptyArgsInstance() {
        return new getVipProductDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVipProductDetail_result getResult(I iface, getVipProductDetail_args args) throws org.apache.thrift.TException {
        getVipProductDetail_result result = new getVipProductDetail_result();
        result.success = iface.getVipProductDetail(args.vipId);
        return result;
      }
    }

    public static class getVipProductsByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVipProductsByPage_args> {
      public getVipProductsByPage() {
        super("getVipProductsByPage");
      }

      public getVipProductsByPage_args getEmptyArgsInstance() {
        return new getVipProductsByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVipProductsByPage_result getResult(I iface, getVipProductsByPage_args args) throws org.apache.thrift.TException {
        getVipProductsByPage_result result = new getVipProductsByPage_result();
        result.success = iface.getVipProductsByPage(args.pageVo, args.vipProductVo);
        return result;
      }
    }

    public static class getProductsOfVipByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductsOfVipByPage_args> {
      public getProductsOfVipByPage() {
        super("getProductsOfVipByPage");
      }

      public getProductsOfVipByPage_args getEmptyArgsInstance() {
        return new getProductsOfVipByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductsOfVipByPage_result getResult(I iface, getProductsOfVipByPage_args args) throws org.apache.thrift.TException {
        getProductsOfVipByPage_result result = new getProductsOfVipByPage_result();
        result.success = iface.getProductsOfVipByPage(args.pageVo, args.vipId);
        return result;
      }
    }

    public static class addProductsToVipProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProductsToVipProduct_args> {
      public addProductsToVipProduct() {
        super("addProductsToVipProduct");
      }

      public addProductsToVipProduct_args getEmptyArgsInstance() {
        return new addProductsToVipProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addProductsToVipProduct_result getResult(I iface, addProductsToVipProduct_args args) throws org.apache.thrift.TException {
        addProductsToVipProduct_result result = new addProductsToVipProduct_result();
        result.success = iface.addProductsToVipProduct(args.originVo, args.vipId, args.bindInfos);
        return result;
      }
    }

    public static class removeProductsFromVipProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeProductsFromVipProduct_args> {
      public removeProductsFromVipProduct() {
        super("removeProductsFromVipProduct");
      }

      public removeProductsFromVipProduct_args getEmptyArgsInstance() {
        return new removeProductsFromVipProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeProductsFromVipProduct_result getResult(I iface, removeProductsFromVipProduct_args args) throws org.apache.thrift.TException {
        removeProductsFromVipProduct_result result = new removeProductsFromVipProduct_result();
        result.success = iface.removeProductsFromVipProduct(args.originVo, args.vipId, args.productIds);
        return result;
      }
    }

    public static class findProductsForVipByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findProductsForVipByPage_args> {
      public findProductsForVipByPage() {
        super("findProductsForVipByPage");
      }

      public findProductsForVipByPage_args getEmptyArgsInstance() {
        return new findProductsForVipByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findProductsForVipByPage_result getResult(I iface, findProductsForVipByPage_args args) throws org.apache.thrift.TException {
        findProductsForVipByPage_result result = new findProductsForVipByPage_result();
        result.success = iface.findProductsForVipByPage(args.vipId, args.name, args.priceStart, args.priceEnd, args.pageVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addVipProduct", new addVipProduct());
      processMap.put("updateVipStatus", new updateVipStatus());
      processMap.put("deleteVipProduct", new deleteVipProduct());
      processMap.put("updateVipProduct", new updateVipProduct());
      processMap.put("getVipProduct", new getVipProduct());
      processMap.put("getVipProductDetail", new getVipProductDetail());
      processMap.put("getVipProductsByPage", new getVipProductsByPage());
      processMap.put("getProductsOfVipByPage", new getProductsOfVipByPage());
      processMap.put("addProductsToVipProduct", new addProductsToVipProduct());
      processMap.put("removeProductsFromVipProduct", new removeProductsFromVipProduct());
      processMap.put("findProductsForVipByPage", new findProductsForVipByPage());
      return processMap;
    }

    public static class addVipProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addVipProduct_args, com.froad.thrift.vo.AddProductVoRes> {
      public addVipProduct() {
        super("addVipProduct");
      }

      public addVipProduct_args getEmptyArgsInstance() {
        return new addVipProduct_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AddProductVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AddProductVoRes>() { 
          public void onComplete(com.froad.thrift.vo.AddProductVoRes o) {
            addVipProduct_result result = new addVipProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addVipProduct_result result = new addVipProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addVipProduct_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AddProductVoRes> resultHandler) throws TException {
        iface.addVipProduct(args.originVo, args.vipProductVo,resultHandler);
      }
    }

    public static class updateVipStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateVipStatus_args, com.froad.thrift.vo.ResultVo> {
      public updateVipStatus() {
        super("updateVipStatus");
      }

      public updateVipStatus_args getEmptyArgsInstance() {
        return new updateVipStatus_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateVipStatus_result result = new updateVipStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateVipStatus_result result = new updateVipStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateVipStatus_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateVipStatus(args.originVo, args.vipId, args.status,resultHandler);
      }
    }

    public static class deleteVipProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteVipProduct_args, com.froad.thrift.vo.ResultVo> {
      public deleteVipProduct() {
        super("deleteVipProduct");
      }

      public deleteVipProduct_args getEmptyArgsInstance() {
        return new deleteVipProduct_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteVipProduct_result result = new deleteVipProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteVipProduct_result result = new deleteVipProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteVipProduct_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteVipProduct(args.originVo, args.vipId,resultHandler);
      }
    }

    public static class updateVipProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateVipProduct_args, com.froad.thrift.vo.ResultVo> {
      public updateVipProduct() {
        super("updateVipProduct");
      }

      public updateVipProduct_args getEmptyArgsInstance() {
        return new updateVipProduct_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateVipProduct_result result = new updateVipProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateVipProduct_result result = new updateVipProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateVipProduct_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateVipProduct(args.originVo, args.vipProductVo,resultHandler);
      }
    }

    public static class getVipProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVipProduct_args, com.froad.thrift.vo.VipProductVo> {
      public getVipProduct() {
        super("getVipProduct");
      }

      public getVipProduct_args getEmptyArgsInstance() {
        return new getVipProduct_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.VipProductVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.VipProductVo>() { 
          public void onComplete(com.froad.thrift.vo.VipProductVo o) {
            getVipProduct_result result = new getVipProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVipProduct_result result = new getVipProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVipProduct_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.VipProductVo> resultHandler) throws TException {
        iface.getVipProduct(args.clientId,resultHandler);
      }
    }

    public static class getVipProductDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVipProductDetail_args, com.froad.thrift.vo.VipProductVo> {
      public getVipProductDetail() {
        super("getVipProductDetail");
      }

      public getVipProductDetail_args getEmptyArgsInstance() {
        return new getVipProductDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.VipProductVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.VipProductVo>() { 
          public void onComplete(com.froad.thrift.vo.VipProductVo o) {
            getVipProductDetail_result result = new getVipProductDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVipProductDetail_result result = new getVipProductDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVipProductDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.VipProductVo> resultHandler) throws TException {
        iface.getVipProductDetail(args.vipId,resultHandler);
      }
    }

    public static class getVipProductsByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVipProductsByPage_args, com.froad.thrift.vo.VipProductPageVoRes> {
      public getVipProductsByPage() {
        super("getVipProductsByPage");
      }

      public getVipProductsByPage_args getEmptyArgsInstance() {
        return new getVipProductsByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.VipProductPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.VipProductPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.VipProductPageVoRes o) {
            getVipProductsByPage_result result = new getVipProductsByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVipProductsByPage_result result = new getVipProductsByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVipProductsByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.VipProductPageVoRes> resultHandler) throws TException {
        iface.getVipProductsByPage(args.pageVo, args.vipProductVo,resultHandler);
      }
    }

    public static class getProductsOfVipByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductsOfVipByPage_args, com.froad.thrift.vo.ProductOfVipPageVo> {
      public getProductsOfVipByPage() {
        super("getProductsOfVipByPage");
      }

      public getProductsOfVipByPage_args getEmptyArgsInstance() {
        return new getProductsOfVipByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductOfVipPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductOfVipPageVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductOfVipPageVo o) {
            getProductsOfVipByPage_result result = new getProductsOfVipByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductsOfVipByPage_result result = new getProductsOfVipByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductsOfVipByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductOfVipPageVo> resultHandler) throws TException {
        iface.getProductsOfVipByPage(args.pageVo, args.vipId,resultHandler);
      }
    }

    public static class addProductsToVipProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addProductsToVipProduct_args, com.froad.thrift.vo.ResultVo> {
      public addProductsToVipProduct() {
        super("addProductsToVipProduct");
      }

      public addProductsToVipProduct_args getEmptyArgsInstance() {
        return new addProductsToVipProduct_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            addProductsToVipProduct_result result = new addProductsToVipProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addProductsToVipProduct_result result = new addProductsToVipProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addProductsToVipProduct_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.addProductsToVipProduct(args.originVo, args.vipId, args.bindInfos,resultHandler);
      }
    }

    public static class removeProductsFromVipProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeProductsFromVipProduct_args, com.froad.thrift.vo.ResultVo> {
      public removeProductsFromVipProduct() {
        super("removeProductsFromVipProduct");
      }

      public removeProductsFromVipProduct_args getEmptyArgsInstance() {
        return new removeProductsFromVipProduct_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            removeProductsFromVipProduct_result result = new removeProductsFromVipProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeProductsFromVipProduct_result result = new removeProductsFromVipProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeProductsFromVipProduct_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.removeProductsFromVipProduct(args.originVo, args.vipId, args.productIds,resultHandler);
      }
    }

    public static class findProductsForVipByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findProductsForVipByPage_args, com.froad.thrift.vo.ProductOfVipPageVo> {
      public findProductsForVipByPage() {
        super("findProductsForVipByPage");
      }

      public findProductsForVipByPage_args getEmptyArgsInstance() {
        return new findProductsForVipByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ProductOfVipPageVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ProductOfVipPageVo>() { 
          public void onComplete(com.froad.thrift.vo.ProductOfVipPageVo o) {
            findProductsForVipByPage_result result = new findProductsForVipByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findProductsForVipByPage_result result = new findProductsForVipByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findProductsForVipByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ProductOfVipPageVo> resultHandler) throws TException {
        iface.findProductsForVipByPage(args.vipId, args.name, args.priceStart, args.priceEnd, args.pageVo,resultHandler);
      }
    }

  }

  public static class addVipProduct_args implements org.apache.thrift.TBase<addVipProduct_args, addVipProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<addVipProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVipProduct_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VIP_PRODUCT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("vipProductVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVipProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVipProduct_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.VipProductVo vipProductVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      VIP_PRODUCT_VO((short)2, "vipProductVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // VIP_PRODUCT_VO
            return VIP_PRODUCT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.VIP_PRODUCT_VO, new org.apache.thrift.meta_data.FieldMetaData("vipProductVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.VipProductVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVipProduct_args.class, metaDataMap);
    }

    public addVipProduct_args() {
    }

    public addVipProduct_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.VipProductVo vipProductVo)
    {
      this();
      this.originVo = originVo;
      this.vipProductVo = vipProductVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVipProduct_args(addVipProduct_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetVipProductVo()) {
        this.vipProductVo = new com.froad.thrift.vo.VipProductVo(other.vipProductVo);
      }
    }

    public addVipProduct_args deepCopy() {
      return new addVipProduct_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.vipProductVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addVipProduct_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.VipProductVo getVipProductVo() {
      return this.vipProductVo;
    }

    public addVipProduct_args setVipProductVo(com.froad.thrift.vo.VipProductVo vipProductVo) {
      this.vipProductVo = vipProductVo;
      return this;
    }

    public void unsetVipProductVo() {
      this.vipProductVo = null;
    }

    /** Returns true if field vipProductVo is set (has been assigned a value) and false otherwise */
    public boolean isSetVipProductVo() {
      return this.vipProductVo != null;
    }

    public void setVipProductVoIsSet(boolean value) {
      if (!value) {
        this.vipProductVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case VIP_PRODUCT_VO:
        if (value == null) {
          unsetVipProductVo();
        } else {
          setVipProductVo((com.froad.thrift.vo.VipProductVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case VIP_PRODUCT_VO:
        return getVipProductVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case VIP_PRODUCT_VO:
        return isSetVipProductVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVipProduct_args)
        return this.equals((addVipProduct_args)that);
      return false;
    }

    public boolean equals(addVipProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_vipProductVo = true && this.isSetVipProductVo();
      boolean that_present_vipProductVo = true && that.isSetVipProductVo();
      if (this_present_vipProductVo || that_present_vipProductVo) {
        if (!(this_present_vipProductVo && that_present_vipProductVo))
          return false;
        if (!this.vipProductVo.equals(that.vipProductVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_vipProductVo = true && (isSetVipProductVo());
      list.add(present_vipProductVo);
      if (present_vipProductVo)
        list.add(vipProductVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addVipProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVipProductVo()).compareTo(other.isSetVipProductVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVipProductVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipProductVo, other.vipProductVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVipProduct_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vipProductVo:");
      if (this.vipProductVo == null) {
        sb.append("null");
      } else {
        sb.append(this.vipProductVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (vipProductVo != null) {
        vipProductVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVipProduct_argsStandardSchemeFactory implements SchemeFactory {
      public addVipProduct_argsStandardScheme getScheme() {
        return new addVipProduct_argsStandardScheme();
      }
    }

    private static class addVipProduct_argsStandardScheme extends StandardScheme<addVipProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVipProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VIP_PRODUCT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vipProductVo = new com.froad.thrift.vo.VipProductVo();
                struct.vipProductVo.read(iprot);
                struct.setVipProductVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVipProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vipProductVo != null) {
          oprot.writeFieldBegin(VIP_PRODUCT_VO_FIELD_DESC);
          struct.vipProductVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVipProduct_argsTupleSchemeFactory implements SchemeFactory {
      public addVipProduct_argsTupleScheme getScheme() {
        return new addVipProduct_argsTupleScheme();
      }
    }

    private static class addVipProduct_argsTupleScheme extends TupleScheme<addVipProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVipProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetVipProductVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetVipProductVo()) {
          struct.vipProductVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVipProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vipProductVo = new com.froad.thrift.vo.VipProductVo();
          struct.vipProductVo.read(iprot);
          struct.setVipProductVoIsSet(true);
        }
      }
    }

  }

  public static class addVipProduct_result implements org.apache.thrift.TBase<addVipProduct_result, addVipProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<addVipProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVipProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVipProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVipProduct_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AddProductVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AddProductVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVipProduct_result.class, metaDataMap);
    }

    public addVipProduct_result() {
    }

    public addVipProduct_result(
      com.froad.thrift.vo.AddProductVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVipProduct_result(addVipProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AddProductVoRes(other.success);
      }
    }

    public addVipProduct_result deepCopy() {
      return new addVipProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AddProductVoRes getSuccess() {
      return this.success;
    }

    public addVipProduct_result setSuccess(com.froad.thrift.vo.AddProductVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AddProductVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVipProduct_result)
        return this.equals((addVipProduct_result)that);
      return false;
    }

    public boolean equals(addVipProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addVipProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVipProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVipProduct_resultStandardSchemeFactory implements SchemeFactory {
      public addVipProduct_resultStandardScheme getScheme() {
        return new addVipProduct_resultStandardScheme();
      }
    }

    private static class addVipProduct_resultStandardScheme extends StandardScheme<addVipProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVipProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AddProductVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVipProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVipProduct_resultTupleSchemeFactory implements SchemeFactory {
      public addVipProduct_resultTupleScheme getScheme() {
        return new addVipProduct_resultTupleScheme();
      }
    }

    private static class addVipProduct_resultTupleScheme extends TupleScheme<addVipProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVipProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVipProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AddProductVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateVipStatus_args implements org.apache.thrift.TBase<updateVipStatus_args, updateVipStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateVipStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVipStatus_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vipId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVipStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVipStatus_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String vipId; // required
    public String status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      VIP_ID((short)2, "vipId"),
      STATUS((short)3, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // VIP_ID
            return VIP_ID;
          case 3: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.VIP_ID, new org.apache.thrift.meta_data.FieldMetaData("vipId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVipStatus_args.class, metaDataMap);
    }

    public updateVipStatus_args() {
    }

    public updateVipStatus_args(
      com.froad.thrift.vo.OriginVo originVo,
      String vipId,
      String status)
    {
      this();
      this.originVo = originVo;
      this.vipId = vipId;
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVipStatus_args(updateVipStatus_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetVipId()) {
        this.vipId = other.vipId;
      }
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    public updateVipStatus_args deepCopy() {
      return new updateVipStatus_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.vipId = null;
      this.status = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateVipStatus_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getVipId() {
      return this.vipId;
    }

    public updateVipStatus_args setVipId(String vipId) {
      this.vipId = vipId;
      return this;
    }

    public void unsetVipId() {
      this.vipId = null;
    }

    /** Returns true if field vipId is set (has been assigned a value) and false otherwise */
    public boolean isSetVipId() {
      return this.vipId != null;
    }

    public void setVipIdIsSet(boolean value) {
      if (!value) {
        this.vipId = null;
      }
    }

    public String getStatus() {
      return this.status;
    }

    public updateVipStatus_args setStatus(String status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case VIP_ID:
        if (value == null) {
          unsetVipId();
        } else {
          setVipId((String)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case VIP_ID:
        return getVipId();

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case VIP_ID:
        return isSetVipId();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVipStatus_args)
        return this.equals((updateVipStatus_args)that);
      return false;
    }

    public boolean equals(updateVipStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_vipId = true && this.isSetVipId();
      boolean that_present_vipId = true && that.isSetVipId();
      if (this_present_vipId || that_present_vipId) {
        if (!(this_present_vipId && that_present_vipId))
          return false;
        if (!this.vipId.equals(that.vipId))
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_vipId = true && (isSetVipId());
      list.add(present_vipId);
      if (present_vipId)
        list.add(vipId);

      boolean present_status = true && (isSetStatus());
      list.add(present_status);
      if (present_status)
        list.add(status);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateVipStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVipId()).compareTo(other.isSetVipId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVipId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipId, other.vipId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVipStatus_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vipId:");
      if (this.vipId == null) {
        sb.append("null");
      } else {
        sb.append(this.vipId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVipStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateVipStatus_argsStandardScheme getScheme() {
        return new updateVipStatus_argsStandardScheme();
      }
    }

    private static class updateVipStatus_argsStandardScheme extends StandardScheme<updateVipStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVipStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VIP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vipId = iprot.readString();
                struct.setVipIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.status = iprot.readString();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVipStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vipId != null) {
          oprot.writeFieldBegin(VIP_ID_FIELD_DESC);
          oprot.writeString(struct.vipId);
          oprot.writeFieldEnd();
        }
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVipStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateVipStatus_argsTupleScheme getScheme() {
        return new updateVipStatus_argsTupleScheme();
      }
    }

    private static class updateVipStatus_argsTupleScheme extends TupleScheme<updateVipStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVipStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetVipId()) {
          optionals.set(1);
        }
        if (struct.isSetStatus()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetVipId()) {
          oprot.writeString(struct.vipId);
        }
        if (struct.isSetStatus()) {
          oprot.writeString(struct.status);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVipStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vipId = iprot.readString();
          struct.setVipIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.status = iprot.readString();
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class updateVipStatus_result implements org.apache.thrift.TBase<updateVipStatus_result, updateVipStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateVipStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVipStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVipStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVipStatus_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVipStatus_result.class, metaDataMap);
    }

    public updateVipStatus_result() {
    }

    public updateVipStatus_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVipStatus_result(updateVipStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateVipStatus_result deepCopy() {
      return new updateVipStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateVipStatus_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVipStatus_result)
        return this.equals((updateVipStatus_result)that);
      return false;
    }

    public boolean equals(updateVipStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateVipStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVipStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVipStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateVipStatus_resultStandardScheme getScheme() {
        return new updateVipStatus_resultStandardScheme();
      }
    }

    private static class updateVipStatus_resultStandardScheme extends StandardScheme<updateVipStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVipStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVipStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVipStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateVipStatus_resultTupleScheme getScheme() {
        return new updateVipStatus_resultTupleScheme();
      }
    }

    private static class updateVipStatus_resultTupleScheme extends TupleScheme<updateVipStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVipStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVipStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteVipProduct_args implements org.apache.thrift.TBase<deleteVipProduct_args, deleteVipProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteVipProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteVipProduct_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vipId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteVipProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteVipProduct_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String vipId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      VIP_ID((short)2, "vipId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // VIP_ID
            return VIP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.VIP_ID, new org.apache.thrift.meta_data.FieldMetaData("vipId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteVipProduct_args.class, metaDataMap);
    }

    public deleteVipProduct_args() {
    }

    public deleteVipProduct_args(
      com.froad.thrift.vo.OriginVo originVo,
      String vipId)
    {
      this();
      this.originVo = originVo;
      this.vipId = vipId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteVipProduct_args(deleteVipProduct_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetVipId()) {
        this.vipId = other.vipId;
      }
    }

    public deleteVipProduct_args deepCopy() {
      return new deleteVipProduct_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.vipId = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteVipProduct_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getVipId() {
      return this.vipId;
    }

    public deleteVipProduct_args setVipId(String vipId) {
      this.vipId = vipId;
      return this;
    }

    public void unsetVipId() {
      this.vipId = null;
    }

    /** Returns true if field vipId is set (has been assigned a value) and false otherwise */
    public boolean isSetVipId() {
      return this.vipId != null;
    }

    public void setVipIdIsSet(boolean value) {
      if (!value) {
        this.vipId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case VIP_ID:
        if (value == null) {
          unsetVipId();
        } else {
          setVipId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case VIP_ID:
        return getVipId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case VIP_ID:
        return isSetVipId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteVipProduct_args)
        return this.equals((deleteVipProduct_args)that);
      return false;
    }

    public boolean equals(deleteVipProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_vipId = true && this.isSetVipId();
      boolean that_present_vipId = true && that.isSetVipId();
      if (this_present_vipId || that_present_vipId) {
        if (!(this_present_vipId && that_present_vipId))
          return false;
        if (!this.vipId.equals(that.vipId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_vipId = true && (isSetVipId());
      list.add(present_vipId);
      if (present_vipId)
        list.add(vipId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteVipProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVipId()).compareTo(other.isSetVipId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVipId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipId, other.vipId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteVipProduct_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vipId:");
      if (this.vipId == null) {
        sb.append("null");
      } else {
        sb.append(this.vipId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteVipProduct_argsStandardSchemeFactory implements SchemeFactory {
      public deleteVipProduct_argsStandardScheme getScheme() {
        return new deleteVipProduct_argsStandardScheme();
      }
    }

    private static class deleteVipProduct_argsStandardScheme extends StandardScheme<deleteVipProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteVipProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VIP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vipId = iprot.readString();
                struct.setVipIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteVipProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vipId != null) {
          oprot.writeFieldBegin(VIP_ID_FIELD_DESC);
          oprot.writeString(struct.vipId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteVipProduct_argsTupleSchemeFactory implements SchemeFactory {
      public deleteVipProduct_argsTupleScheme getScheme() {
        return new deleteVipProduct_argsTupleScheme();
      }
    }

    private static class deleteVipProduct_argsTupleScheme extends TupleScheme<deleteVipProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteVipProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetVipId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetVipId()) {
          oprot.writeString(struct.vipId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteVipProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vipId = iprot.readString();
          struct.setVipIdIsSet(true);
        }
      }
    }

  }

  public static class deleteVipProduct_result implements org.apache.thrift.TBase<deleteVipProduct_result, deleteVipProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteVipProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteVipProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteVipProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteVipProduct_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteVipProduct_result.class, metaDataMap);
    }

    public deleteVipProduct_result() {
    }

    public deleteVipProduct_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteVipProduct_result(deleteVipProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteVipProduct_result deepCopy() {
      return new deleteVipProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteVipProduct_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteVipProduct_result)
        return this.equals((deleteVipProduct_result)that);
      return false;
    }

    public boolean equals(deleteVipProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteVipProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteVipProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteVipProduct_resultStandardSchemeFactory implements SchemeFactory {
      public deleteVipProduct_resultStandardScheme getScheme() {
        return new deleteVipProduct_resultStandardScheme();
      }
    }

    private static class deleteVipProduct_resultStandardScheme extends StandardScheme<deleteVipProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteVipProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteVipProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteVipProduct_resultTupleSchemeFactory implements SchemeFactory {
      public deleteVipProduct_resultTupleScheme getScheme() {
        return new deleteVipProduct_resultTupleScheme();
      }
    }

    private static class deleteVipProduct_resultTupleScheme extends TupleScheme<deleteVipProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteVipProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteVipProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateVipProduct_args implements org.apache.thrift.TBase<updateVipProduct_args, updateVipProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateVipProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVipProduct_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VIP_PRODUCT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("vipProductVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVipProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVipProduct_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.VipProductVo vipProductVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      VIP_PRODUCT_VO((short)2, "vipProductVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // VIP_PRODUCT_VO
            return VIP_PRODUCT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.VIP_PRODUCT_VO, new org.apache.thrift.meta_data.FieldMetaData("vipProductVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.VipProductVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVipProduct_args.class, metaDataMap);
    }

    public updateVipProduct_args() {
    }

    public updateVipProduct_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.VipProductVo vipProductVo)
    {
      this();
      this.originVo = originVo;
      this.vipProductVo = vipProductVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVipProduct_args(updateVipProduct_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetVipProductVo()) {
        this.vipProductVo = new com.froad.thrift.vo.VipProductVo(other.vipProductVo);
      }
    }

    public updateVipProduct_args deepCopy() {
      return new updateVipProduct_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.vipProductVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateVipProduct_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.VipProductVo getVipProductVo() {
      return this.vipProductVo;
    }

    public updateVipProduct_args setVipProductVo(com.froad.thrift.vo.VipProductVo vipProductVo) {
      this.vipProductVo = vipProductVo;
      return this;
    }

    public void unsetVipProductVo() {
      this.vipProductVo = null;
    }

    /** Returns true if field vipProductVo is set (has been assigned a value) and false otherwise */
    public boolean isSetVipProductVo() {
      return this.vipProductVo != null;
    }

    public void setVipProductVoIsSet(boolean value) {
      if (!value) {
        this.vipProductVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case VIP_PRODUCT_VO:
        if (value == null) {
          unsetVipProductVo();
        } else {
          setVipProductVo((com.froad.thrift.vo.VipProductVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case VIP_PRODUCT_VO:
        return getVipProductVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case VIP_PRODUCT_VO:
        return isSetVipProductVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVipProduct_args)
        return this.equals((updateVipProduct_args)that);
      return false;
    }

    public boolean equals(updateVipProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_vipProductVo = true && this.isSetVipProductVo();
      boolean that_present_vipProductVo = true && that.isSetVipProductVo();
      if (this_present_vipProductVo || that_present_vipProductVo) {
        if (!(this_present_vipProductVo && that_present_vipProductVo))
          return false;
        if (!this.vipProductVo.equals(that.vipProductVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_vipProductVo = true && (isSetVipProductVo());
      list.add(present_vipProductVo);
      if (present_vipProductVo)
        list.add(vipProductVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateVipProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVipProductVo()).compareTo(other.isSetVipProductVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVipProductVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipProductVo, other.vipProductVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVipProduct_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vipProductVo:");
      if (this.vipProductVo == null) {
        sb.append("null");
      } else {
        sb.append(this.vipProductVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (vipProductVo != null) {
        vipProductVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVipProduct_argsStandardSchemeFactory implements SchemeFactory {
      public updateVipProduct_argsStandardScheme getScheme() {
        return new updateVipProduct_argsStandardScheme();
      }
    }

    private static class updateVipProduct_argsStandardScheme extends StandardScheme<updateVipProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVipProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VIP_PRODUCT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vipProductVo = new com.froad.thrift.vo.VipProductVo();
                struct.vipProductVo.read(iprot);
                struct.setVipProductVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVipProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vipProductVo != null) {
          oprot.writeFieldBegin(VIP_PRODUCT_VO_FIELD_DESC);
          struct.vipProductVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVipProduct_argsTupleSchemeFactory implements SchemeFactory {
      public updateVipProduct_argsTupleScheme getScheme() {
        return new updateVipProduct_argsTupleScheme();
      }
    }

    private static class updateVipProduct_argsTupleScheme extends TupleScheme<updateVipProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVipProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetVipProductVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetVipProductVo()) {
          struct.vipProductVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVipProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vipProductVo = new com.froad.thrift.vo.VipProductVo();
          struct.vipProductVo.read(iprot);
          struct.setVipProductVoIsSet(true);
        }
      }
    }

  }

  public static class updateVipProduct_result implements org.apache.thrift.TBase<updateVipProduct_result, updateVipProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateVipProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVipProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVipProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVipProduct_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVipProduct_result.class, metaDataMap);
    }

    public updateVipProduct_result() {
    }

    public updateVipProduct_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVipProduct_result(updateVipProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateVipProduct_result deepCopy() {
      return new updateVipProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateVipProduct_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVipProduct_result)
        return this.equals((updateVipProduct_result)that);
      return false;
    }

    public boolean equals(updateVipProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateVipProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVipProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVipProduct_resultStandardSchemeFactory implements SchemeFactory {
      public updateVipProduct_resultStandardScheme getScheme() {
        return new updateVipProduct_resultStandardScheme();
      }
    }

    private static class updateVipProduct_resultStandardScheme extends StandardScheme<updateVipProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVipProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVipProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVipProduct_resultTupleSchemeFactory implements SchemeFactory {
      public updateVipProduct_resultTupleScheme getScheme() {
        return new updateVipProduct_resultTupleScheme();
      }
    }

    private static class updateVipProduct_resultTupleScheme extends TupleScheme<updateVipProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVipProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVipProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVipProduct_args implements org.apache.thrift.TBase<getVipProduct_args, getVipProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVipProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVipProduct_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVipProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVipProduct_argsTupleSchemeFactory());
    }

    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVipProduct_args.class, metaDataMap);
    }

    public getVipProduct_args() {
    }

    public getVipProduct_args(
      String clientId)
    {
      this();
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVipProduct_args(getVipProduct_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public getVipProduct_args deepCopy() {
      return new getVipProduct_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getVipProduct_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVipProduct_args)
        return this.equals((getVipProduct_args)that);
      return false;
    }

    public boolean equals(getVipProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVipProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVipProduct_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVipProduct_argsStandardSchemeFactory implements SchemeFactory {
      public getVipProduct_argsStandardScheme getScheme() {
        return new getVipProduct_argsStandardScheme();
      }
    }

    private static class getVipProduct_argsStandardScheme extends StandardScheme<getVipProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVipProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVipProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVipProduct_argsTupleSchemeFactory implements SchemeFactory {
      public getVipProduct_argsTupleScheme getScheme() {
        return new getVipProduct_argsTupleScheme();
      }
    }

    private static class getVipProduct_argsTupleScheme extends TupleScheme<getVipProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVipProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVipProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class getVipProduct_result implements org.apache.thrift.TBase<getVipProduct_result, getVipProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVipProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVipProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVipProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVipProduct_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.VipProductVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.VipProductVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVipProduct_result.class, metaDataMap);
    }

    public getVipProduct_result() {
    }

    public getVipProduct_result(
      com.froad.thrift.vo.VipProductVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVipProduct_result(getVipProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.VipProductVo(other.success);
      }
    }

    public getVipProduct_result deepCopy() {
      return new getVipProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.VipProductVo getSuccess() {
      return this.success;
    }

    public getVipProduct_result setSuccess(com.froad.thrift.vo.VipProductVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.VipProductVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVipProduct_result)
        return this.equals((getVipProduct_result)that);
      return false;
    }

    public boolean equals(getVipProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVipProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVipProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVipProduct_resultStandardSchemeFactory implements SchemeFactory {
      public getVipProduct_resultStandardScheme getScheme() {
        return new getVipProduct_resultStandardScheme();
      }
    }

    private static class getVipProduct_resultStandardScheme extends StandardScheme<getVipProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVipProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.VipProductVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVipProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVipProduct_resultTupleSchemeFactory implements SchemeFactory {
      public getVipProduct_resultTupleScheme getScheme() {
        return new getVipProduct_resultTupleScheme();
      }
    }

    private static class getVipProduct_resultTupleScheme extends TupleScheme<getVipProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVipProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVipProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.VipProductVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVipProductDetail_args implements org.apache.thrift.TBase<getVipProductDetail_args, getVipProductDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVipProductDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVipProductDetail_args");

    private static final org.apache.thrift.protocol.TField VIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vipId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVipProductDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVipProductDetail_argsTupleSchemeFactory());
    }

    public String vipId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VIP_ID((short)1, "vipId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VIP_ID
            return VIP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VIP_ID, new org.apache.thrift.meta_data.FieldMetaData("vipId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVipProductDetail_args.class, metaDataMap);
    }

    public getVipProductDetail_args() {
    }

    public getVipProductDetail_args(
      String vipId)
    {
      this();
      this.vipId = vipId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVipProductDetail_args(getVipProductDetail_args other) {
      if (other.isSetVipId()) {
        this.vipId = other.vipId;
      }
    }

    public getVipProductDetail_args deepCopy() {
      return new getVipProductDetail_args(this);
    }

    @Override
    public void clear() {
      this.vipId = null;
    }

    public String getVipId() {
      return this.vipId;
    }

    public getVipProductDetail_args setVipId(String vipId) {
      this.vipId = vipId;
      return this;
    }

    public void unsetVipId() {
      this.vipId = null;
    }

    /** Returns true if field vipId is set (has been assigned a value) and false otherwise */
    public boolean isSetVipId() {
      return this.vipId != null;
    }

    public void setVipIdIsSet(boolean value) {
      if (!value) {
        this.vipId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VIP_ID:
        if (value == null) {
          unsetVipId();
        } else {
          setVipId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VIP_ID:
        return getVipId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VIP_ID:
        return isSetVipId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVipProductDetail_args)
        return this.equals((getVipProductDetail_args)that);
      return false;
    }

    public boolean equals(getVipProductDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_vipId = true && this.isSetVipId();
      boolean that_present_vipId = true && that.isSetVipId();
      if (this_present_vipId || that_present_vipId) {
        if (!(this_present_vipId && that_present_vipId))
          return false;
        if (!this.vipId.equals(that.vipId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vipId = true && (isSetVipId());
      list.add(present_vipId);
      if (present_vipId)
        list.add(vipId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVipProductDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVipId()).compareTo(other.isSetVipId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVipId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipId, other.vipId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVipProductDetail_args(");
      boolean first = true;

      sb.append("vipId:");
      if (this.vipId == null) {
        sb.append("null");
      } else {
        sb.append(this.vipId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVipProductDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getVipProductDetail_argsStandardScheme getScheme() {
        return new getVipProductDetail_argsStandardScheme();
      }
    }

    private static class getVipProductDetail_argsStandardScheme extends StandardScheme<getVipProductDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVipProductDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VIP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vipId = iprot.readString();
                struct.setVipIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVipProductDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vipId != null) {
          oprot.writeFieldBegin(VIP_ID_FIELD_DESC);
          oprot.writeString(struct.vipId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVipProductDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getVipProductDetail_argsTupleScheme getScheme() {
        return new getVipProductDetail_argsTupleScheme();
      }
    }

    private static class getVipProductDetail_argsTupleScheme extends TupleScheme<getVipProductDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVipProductDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVipId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVipId()) {
          oprot.writeString(struct.vipId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVipProductDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vipId = iprot.readString();
          struct.setVipIdIsSet(true);
        }
      }
    }

  }

  public static class getVipProductDetail_result implements org.apache.thrift.TBase<getVipProductDetail_result, getVipProductDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVipProductDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVipProductDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVipProductDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVipProductDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.VipProductVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.VipProductVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVipProductDetail_result.class, metaDataMap);
    }

    public getVipProductDetail_result() {
    }

    public getVipProductDetail_result(
      com.froad.thrift.vo.VipProductVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVipProductDetail_result(getVipProductDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.VipProductVo(other.success);
      }
    }

    public getVipProductDetail_result deepCopy() {
      return new getVipProductDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.VipProductVo getSuccess() {
      return this.success;
    }

    public getVipProductDetail_result setSuccess(com.froad.thrift.vo.VipProductVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.VipProductVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVipProductDetail_result)
        return this.equals((getVipProductDetail_result)that);
      return false;
    }

    public boolean equals(getVipProductDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVipProductDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVipProductDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVipProductDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getVipProductDetail_resultStandardScheme getScheme() {
        return new getVipProductDetail_resultStandardScheme();
      }
    }

    private static class getVipProductDetail_resultStandardScheme extends StandardScheme<getVipProductDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVipProductDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.VipProductVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVipProductDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVipProductDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getVipProductDetail_resultTupleScheme getScheme() {
        return new getVipProductDetail_resultTupleScheme();
      }
    }

    private static class getVipProductDetail_resultTupleScheme extends TupleScheme<getVipProductDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVipProductDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVipProductDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.VipProductVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVipProductsByPage_args implements org.apache.thrift.TBase<getVipProductsByPage_args, getVipProductsByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVipProductsByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVipProductsByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VIP_PRODUCT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("vipProductVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVipProductsByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVipProductsByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo pageVo; // required
    public com.froad.thrift.vo.VipProductVo vipProductVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_VO((short)1, "pageVo"),
      VIP_PRODUCT_VO((short)2, "vipProductVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_VO
            return PAGE_VO;
          case 2: // VIP_PRODUCT_VO
            return VIP_PRODUCT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.VIP_PRODUCT_VO, new org.apache.thrift.meta_data.FieldMetaData("vipProductVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.VipProductVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVipProductsByPage_args.class, metaDataMap);
    }

    public getVipProductsByPage_args() {
    }

    public getVipProductsByPage_args(
      com.froad.thrift.vo.PageVo pageVo,
      com.froad.thrift.vo.VipProductVo vipProductVo)
    {
      this();
      this.pageVo = pageVo;
      this.vipProductVo = vipProductVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVipProductsByPage_args(getVipProductsByPage_args other) {
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
      if (other.isSetVipProductVo()) {
        this.vipProductVo = new com.froad.thrift.vo.VipProductVo(other.vipProductVo);
      }
    }

    public getVipProductsByPage_args deepCopy() {
      return new getVipProductsByPage_args(this);
    }

    @Override
    public void clear() {
      this.pageVo = null;
      this.vipProductVo = null;
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public getVipProductsByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public com.froad.thrift.vo.VipProductVo getVipProductVo() {
      return this.vipProductVo;
    }

    public getVipProductsByPage_args setVipProductVo(com.froad.thrift.vo.VipProductVo vipProductVo) {
      this.vipProductVo = vipProductVo;
      return this;
    }

    public void unsetVipProductVo() {
      this.vipProductVo = null;
    }

    /** Returns true if field vipProductVo is set (has been assigned a value) and false otherwise */
    public boolean isSetVipProductVo() {
      return this.vipProductVo != null;
    }

    public void setVipProductVoIsSet(boolean value) {
      if (!value) {
        this.vipProductVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case VIP_PRODUCT_VO:
        if (value == null) {
          unsetVipProductVo();
        } else {
          setVipProductVo((com.froad.thrift.vo.VipProductVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_VO:
        return getPageVo();

      case VIP_PRODUCT_VO:
        return getVipProductVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_VO:
        return isSetPageVo();
      case VIP_PRODUCT_VO:
        return isSetVipProductVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVipProductsByPage_args)
        return this.equals((getVipProductsByPage_args)that);
      return false;
    }

    public boolean equals(getVipProductsByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      boolean this_present_vipProductVo = true && this.isSetVipProductVo();
      boolean that_present_vipProductVo = true && that.isSetVipProductVo();
      if (this_present_vipProductVo || that_present_vipProductVo) {
        if (!(this_present_vipProductVo && that_present_vipProductVo))
          return false;
        if (!this.vipProductVo.equals(that.vipProductVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      boolean present_vipProductVo = true && (isSetVipProductVo());
      list.add(present_vipProductVo);
      if (present_vipProductVo)
        list.add(vipProductVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVipProductsByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVipProductVo()).compareTo(other.isSetVipProductVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVipProductVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipProductVo, other.vipProductVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVipProductsByPage_args(");
      boolean first = true;

      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vipProductVo:");
      if (this.vipProductVo == null) {
        sb.append("null");
      } else {
        sb.append(this.vipProductVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageVo != null) {
        pageVo.validate();
      }
      if (vipProductVo != null) {
        vipProductVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVipProductsByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getVipProductsByPage_argsStandardScheme getScheme() {
        return new getVipProductsByPage_argsStandardScheme();
      }
    }

    private static class getVipProductsByPage_argsStandardScheme extends StandardScheme<getVipProductsByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVipProductsByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VIP_PRODUCT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vipProductVo = new com.froad.thrift.vo.VipProductVo();
                struct.vipProductVo.read(iprot);
                struct.setVipProductVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVipProductsByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vipProductVo != null) {
          oprot.writeFieldBegin(VIP_PRODUCT_VO_FIELD_DESC);
          struct.vipProductVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVipProductsByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getVipProductsByPage_argsTupleScheme getScheme() {
        return new getVipProductsByPage_argsTupleScheme();
      }
    }

    private static class getVipProductsByPage_argsTupleScheme extends TupleScheme<getVipProductsByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVipProductsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageVo()) {
          optionals.set(0);
        }
        if (struct.isSetVipProductVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
        if (struct.isSetVipProductVo()) {
          struct.vipProductVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVipProductsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vipProductVo = new com.froad.thrift.vo.VipProductVo();
          struct.vipProductVo.read(iprot);
          struct.setVipProductVoIsSet(true);
        }
      }
    }

  }

  public static class getVipProductsByPage_result implements org.apache.thrift.TBase<getVipProductsByPage_result, getVipProductsByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVipProductsByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVipProductsByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVipProductsByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVipProductsByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.VipProductPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.VipProductPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVipProductsByPage_result.class, metaDataMap);
    }

    public getVipProductsByPage_result() {
    }

    public getVipProductsByPage_result(
      com.froad.thrift.vo.VipProductPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVipProductsByPage_result(getVipProductsByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.VipProductPageVoRes(other.success);
      }
    }

    public getVipProductsByPage_result deepCopy() {
      return new getVipProductsByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.VipProductPageVoRes getSuccess() {
      return this.success;
    }

    public getVipProductsByPage_result setSuccess(com.froad.thrift.vo.VipProductPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.VipProductPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVipProductsByPage_result)
        return this.equals((getVipProductsByPage_result)that);
      return false;
    }

    public boolean equals(getVipProductsByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVipProductsByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVipProductsByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVipProductsByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getVipProductsByPage_resultStandardScheme getScheme() {
        return new getVipProductsByPage_resultStandardScheme();
      }
    }

    private static class getVipProductsByPage_resultStandardScheme extends StandardScheme<getVipProductsByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVipProductsByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.VipProductPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVipProductsByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVipProductsByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getVipProductsByPage_resultTupleScheme getScheme() {
        return new getVipProductsByPage_resultTupleScheme();
      }
    }

    private static class getVipProductsByPage_resultTupleScheme extends TupleScheme<getVipProductsByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVipProductsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVipProductsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.VipProductPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProductsOfVipByPage_args implements org.apache.thrift.TBase<getProductsOfVipByPage_args, getProductsOfVipByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductsOfVipByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductsOfVipByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vipId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductsOfVipByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductsOfVipByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo pageVo; // required
    public String vipId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE_VO((short)1, "pageVo"),
      VIP_ID((short)2, "vipId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE_VO
            return PAGE_VO;
          case 2: // VIP_ID
            return VIP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.VIP_ID, new org.apache.thrift.meta_data.FieldMetaData("vipId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductsOfVipByPage_args.class, metaDataMap);
    }

    public getProductsOfVipByPage_args() {
    }

    public getProductsOfVipByPage_args(
      com.froad.thrift.vo.PageVo pageVo,
      String vipId)
    {
      this();
      this.pageVo = pageVo;
      this.vipId = vipId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductsOfVipByPage_args(getProductsOfVipByPage_args other) {
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
      if (other.isSetVipId()) {
        this.vipId = other.vipId;
      }
    }

    public getProductsOfVipByPage_args deepCopy() {
      return new getProductsOfVipByPage_args(this);
    }

    @Override
    public void clear() {
      this.pageVo = null;
      this.vipId = null;
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public getProductsOfVipByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public String getVipId() {
      return this.vipId;
    }

    public getProductsOfVipByPage_args setVipId(String vipId) {
      this.vipId = vipId;
      return this;
    }

    public void unsetVipId() {
      this.vipId = null;
    }

    /** Returns true if field vipId is set (has been assigned a value) and false otherwise */
    public boolean isSetVipId() {
      return this.vipId != null;
    }

    public void setVipIdIsSet(boolean value) {
      if (!value) {
        this.vipId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case VIP_ID:
        if (value == null) {
          unsetVipId();
        } else {
          setVipId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE_VO:
        return getPageVo();

      case VIP_ID:
        return getVipId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE_VO:
        return isSetPageVo();
      case VIP_ID:
        return isSetVipId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductsOfVipByPage_args)
        return this.equals((getProductsOfVipByPage_args)that);
      return false;
    }

    public boolean equals(getProductsOfVipByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      boolean this_present_vipId = true && this.isSetVipId();
      boolean that_present_vipId = true && that.isSetVipId();
      if (this_present_vipId || that_present_vipId) {
        if (!(this_present_vipId && that_present_vipId))
          return false;
        if (!this.vipId.equals(that.vipId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      boolean present_vipId = true && (isSetVipId());
      list.add(present_vipId);
      if (present_vipId)
        list.add(vipId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductsOfVipByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVipId()).compareTo(other.isSetVipId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVipId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipId, other.vipId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductsOfVipByPage_args(");
      boolean first = true;

      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vipId:");
      if (this.vipId == null) {
        sb.append("null");
      } else {
        sb.append(this.vipId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductsOfVipByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getProductsOfVipByPage_argsStandardScheme getScheme() {
        return new getProductsOfVipByPage_argsStandardScheme();
      }
    }

    private static class getProductsOfVipByPage_argsStandardScheme extends StandardScheme<getProductsOfVipByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductsOfVipByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VIP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vipId = iprot.readString();
                struct.setVipIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductsOfVipByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vipId != null) {
          oprot.writeFieldBegin(VIP_ID_FIELD_DESC);
          oprot.writeString(struct.vipId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductsOfVipByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getProductsOfVipByPage_argsTupleScheme getScheme() {
        return new getProductsOfVipByPage_argsTupleScheme();
      }
    }

    private static class getProductsOfVipByPage_argsTupleScheme extends TupleScheme<getProductsOfVipByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductsOfVipByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPageVo()) {
          optionals.set(0);
        }
        if (struct.isSetVipId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
        if (struct.isSetVipId()) {
          oprot.writeString(struct.vipId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductsOfVipByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vipId = iprot.readString();
          struct.setVipIdIsSet(true);
        }
      }
    }

  }

  public static class getProductsOfVipByPage_result implements org.apache.thrift.TBase<getProductsOfVipByPage_result, getProductsOfVipByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductsOfVipByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductsOfVipByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductsOfVipByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductsOfVipByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductOfVipPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductOfVipPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductsOfVipByPage_result.class, metaDataMap);
    }

    public getProductsOfVipByPage_result() {
    }

    public getProductsOfVipByPage_result(
      com.froad.thrift.vo.ProductOfVipPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductsOfVipByPage_result(getProductsOfVipByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductOfVipPageVo(other.success);
      }
    }

    public getProductsOfVipByPage_result deepCopy() {
      return new getProductsOfVipByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductOfVipPageVo getSuccess() {
      return this.success;
    }

    public getProductsOfVipByPage_result setSuccess(com.froad.thrift.vo.ProductOfVipPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductOfVipPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductsOfVipByPage_result)
        return this.equals((getProductsOfVipByPage_result)that);
      return false;
    }

    public boolean equals(getProductsOfVipByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductsOfVipByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductsOfVipByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductsOfVipByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getProductsOfVipByPage_resultStandardScheme getScheme() {
        return new getProductsOfVipByPage_resultStandardScheme();
      }
    }

    private static class getProductsOfVipByPage_resultStandardScheme extends StandardScheme<getProductsOfVipByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductsOfVipByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductOfVipPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductsOfVipByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductsOfVipByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getProductsOfVipByPage_resultTupleScheme getScheme() {
        return new getProductsOfVipByPage_resultTupleScheme();
      }
    }

    private static class getProductsOfVipByPage_resultTupleScheme extends TupleScheme<getProductsOfVipByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductsOfVipByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductsOfVipByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductOfVipPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addProductsToVipProduct_args implements org.apache.thrift.TBase<addProductsToVipProduct_args, addProductsToVipProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<addProductsToVipProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductsToVipProduct_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vipId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BIND_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("bindInfos", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductsToVipProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductsToVipProduct_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String vipId; // required
    public List<com.froad.thrift.vo.BindVipInfoVo> bindInfos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      VIP_ID((short)2, "vipId"),
      BIND_INFOS((short)3, "bindInfos");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // VIP_ID
            return VIP_ID;
          case 3: // BIND_INFOS
            return BIND_INFOS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.VIP_ID, new org.apache.thrift.meta_data.FieldMetaData("vipId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BIND_INFOS, new org.apache.thrift.meta_data.FieldMetaData("bindInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BindVipInfoVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductsToVipProduct_args.class, metaDataMap);
    }

    public addProductsToVipProduct_args() {
    }

    public addProductsToVipProduct_args(
      com.froad.thrift.vo.OriginVo originVo,
      String vipId,
      List<com.froad.thrift.vo.BindVipInfoVo> bindInfos)
    {
      this();
      this.originVo = originVo;
      this.vipId = vipId;
      this.bindInfos = bindInfos;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductsToVipProduct_args(addProductsToVipProduct_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetVipId()) {
        this.vipId = other.vipId;
      }
      if (other.isSetBindInfos()) {
        List<com.froad.thrift.vo.BindVipInfoVo> __this__bindInfos = new ArrayList<com.froad.thrift.vo.BindVipInfoVo>(other.bindInfos.size());
        for (com.froad.thrift.vo.BindVipInfoVo other_element : other.bindInfos) {
          __this__bindInfos.add(new com.froad.thrift.vo.BindVipInfoVo(other_element));
        }
        this.bindInfos = __this__bindInfos;
      }
    }

    public addProductsToVipProduct_args deepCopy() {
      return new addProductsToVipProduct_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.vipId = null;
      this.bindInfos = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addProductsToVipProduct_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getVipId() {
      return this.vipId;
    }

    public addProductsToVipProduct_args setVipId(String vipId) {
      this.vipId = vipId;
      return this;
    }

    public void unsetVipId() {
      this.vipId = null;
    }

    /** Returns true if field vipId is set (has been assigned a value) and false otherwise */
    public boolean isSetVipId() {
      return this.vipId != null;
    }

    public void setVipIdIsSet(boolean value) {
      if (!value) {
        this.vipId = null;
      }
    }

    public int getBindInfosSize() {
      return (this.bindInfos == null) ? 0 : this.bindInfos.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.BindVipInfoVo> getBindInfosIterator() {
      return (this.bindInfos == null) ? null : this.bindInfos.iterator();
    }

    public void addToBindInfos(com.froad.thrift.vo.BindVipInfoVo elem) {
      if (this.bindInfos == null) {
        this.bindInfos = new ArrayList<com.froad.thrift.vo.BindVipInfoVo>();
      }
      this.bindInfos.add(elem);
    }

    public List<com.froad.thrift.vo.BindVipInfoVo> getBindInfos() {
      return this.bindInfos;
    }

    public addProductsToVipProduct_args setBindInfos(List<com.froad.thrift.vo.BindVipInfoVo> bindInfos) {
      this.bindInfos = bindInfos;
      return this;
    }

    public void unsetBindInfos() {
      this.bindInfos = null;
    }

    /** Returns true if field bindInfos is set (has been assigned a value) and false otherwise */
    public boolean isSetBindInfos() {
      return this.bindInfos != null;
    }

    public void setBindInfosIsSet(boolean value) {
      if (!value) {
        this.bindInfos = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case VIP_ID:
        if (value == null) {
          unsetVipId();
        } else {
          setVipId((String)value);
        }
        break;

      case BIND_INFOS:
        if (value == null) {
          unsetBindInfos();
        } else {
          setBindInfos((List<com.froad.thrift.vo.BindVipInfoVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case VIP_ID:
        return getVipId();

      case BIND_INFOS:
        return getBindInfos();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case VIP_ID:
        return isSetVipId();
      case BIND_INFOS:
        return isSetBindInfos();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductsToVipProduct_args)
        return this.equals((addProductsToVipProduct_args)that);
      return false;
    }

    public boolean equals(addProductsToVipProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_vipId = true && this.isSetVipId();
      boolean that_present_vipId = true && that.isSetVipId();
      if (this_present_vipId || that_present_vipId) {
        if (!(this_present_vipId && that_present_vipId))
          return false;
        if (!this.vipId.equals(that.vipId))
          return false;
      }

      boolean this_present_bindInfos = true && this.isSetBindInfos();
      boolean that_present_bindInfos = true && that.isSetBindInfos();
      if (this_present_bindInfos || that_present_bindInfos) {
        if (!(this_present_bindInfos && that_present_bindInfos))
          return false;
        if (!this.bindInfos.equals(that.bindInfos))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_vipId = true && (isSetVipId());
      list.add(present_vipId);
      if (present_vipId)
        list.add(vipId);

      boolean present_bindInfos = true && (isSetBindInfos());
      list.add(present_bindInfos);
      if (present_bindInfos)
        list.add(bindInfos);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductsToVipProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVipId()).compareTo(other.isSetVipId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVipId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipId, other.vipId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBindInfos()).compareTo(other.isSetBindInfos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBindInfos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindInfos, other.bindInfos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductsToVipProduct_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vipId:");
      if (this.vipId == null) {
        sb.append("null");
      } else {
        sb.append(this.vipId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bindInfos:");
      if (this.bindInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.bindInfos);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductsToVipProduct_argsStandardSchemeFactory implements SchemeFactory {
      public addProductsToVipProduct_argsStandardScheme getScheme() {
        return new addProductsToVipProduct_argsStandardScheme();
      }
    }

    private static class addProductsToVipProduct_argsStandardScheme extends StandardScheme<addProductsToVipProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductsToVipProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VIP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vipId = iprot.readString();
                struct.setVipIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BIND_INFOS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                  struct.bindInfos = new ArrayList<com.froad.thrift.vo.BindVipInfoVo>(_list216.size);
                  com.froad.thrift.vo.BindVipInfoVo _elem217;
                  for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                  {
                    _elem217 = new com.froad.thrift.vo.BindVipInfoVo();
                    _elem217.read(iprot);
                    struct.bindInfos.add(_elem217);
                  }
                  iprot.readListEnd();
                }
                struct.setBindInfosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductsToVipProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vipId != null) {
          oprot.writeFieldBegin(VIP_ID_FIELD_DESC);
          oprot.writeString(struct.vipId);
          oprot.writeFieldEnd();
        }
        if (struct.bindInfos != null) {
          oprot.writeFieldBegin(BIND_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bindInfos.size()));
            for (com.froad.thrift.vo.BindVipInfoVo _iter219 : struct.bindInfos)
            {
              _iter219.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductsToVipProduct_argsTupleSchemeFactory implements SchemeFactory {
      public addProductsToVipProduct_argsTupleScheme getScheme() {
        return new addProductsToVipProduct_argsTupleScheme();
      }
    }

    private static class addProductsToVipProduct_argsTupleScheme extends TupleScheme<addProductsToVipProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductsToVipProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetVipId()) {
          optionals.set(1);
        }
        if (struct.isSetBindInfos()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetVipId()) {
          oprot.writeString(struct.vipId);
        }
        if (struct.isSetBindInfos()) {
          {
            oprot.writeI32(struct.bindInfos.size());
            for (com.froad.thrift.vo.BindVipInfoVo _iter220 : struct.bindInfos)
            {
              _iter220.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductsToVipProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vipId = iprot.readString();
          struct.setVipIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.bindInfos = new ArrayList<com.froad.thrift.vo.BindVipInfoVo>(_list221.size);
            com.froad.thrift.vo.BindVipInfoVo _elem222;
            for (int _i223 = 0; _i223 < _list221.size; ++_i223)
            {
              _elem222 = new com.froad.thrift.vo.BindVipInfoVo();
              _elem222.read(iprot);
              struct.bindInfos.add(_elem222);
            }
          }
          struct.setBindInfosIsSet(true);
        }
      }
    }

  }

  public static class addProductsToVipProduct_result implements org.apache.thrift.TBase<addProductsToVipProduct_result, addProductsToVipProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<addProductsToVipProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProductsToVipProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProductsToVipProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProductsToVipProduct_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProductsToVipProduct_result.class, metaDataMap);
    }

    public addProductsToVipProduct_result() {
    }

    public addProductsToVipProduct_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProductsToVipProduct_result(addProductsToVipProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public addProductsToVipProduct_result deepCopy() {
      return new addProductsToVipProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public addProductsToVipProduct_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProductsToVipProduct_result)
        return this.equals((addProductsToVipProduct_result)that);
      return false;
    }

    public boolean equals(addProductsToVipProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProductsToVipProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProductsToVipProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProductsToVipProduct_resultStandardSchemeFactory implements SchemeFactory {
      public addProductsToVipProduct_resultStandardScheme getScheme() {
        return new addProductsToVipProduct_resultStandardScheme();
      }
    }

    private static class addProductsToVipProduct_resultStandardScheme extends StandardScheme<addProductsToVipProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProductsToVipProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProductsToVipProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProductsToVipProduct_resultTupleSchemeFactory implements SchemeFactory {
      public addProductsToVipProduct_resultTupleScheme getScheme() {
        return new addProductsToVipProduct_resultTupleScheme();
      }
    }

    private static class addProductsToVipProduct_resultTupleScheme extends TupleScheme<addProductsToVipProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProductsToVipProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProductsToVipProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeProductsFromVipProduct_args implements org.apache.thrift.TBase<removeProductsFromVipProduct_args, removeProductsFromVipProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeProductsFromVipProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeProductsFromVipProduct_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vipId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PRODUCT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("productIds", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeProductsFromVipProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeProductsFromVipProduct_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String vipId; // required
    public List<String> productIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      VIP_ID((short)2, "vipId"),
      PRODUCT_IDS((short)3, "productIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // VIP_ID
            return VIP_ID;
          case 3: // PRODUCT_IDS
            return PRODUCT_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.VIP_ID, new org.apache.thrift.meta_data.FieldMetaData("vipId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRODUCT_IDS, new org.apache.thrift.meta_data.FieldMetaData("productIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeProductsFromVipProduct_args.class, metaDataMap);
    }

    public removeProductsFromVipProduct_args() {
    }

    public removeProductsFromVipProduct_args(
      com.froad.thrift.vo.OriginVo originVo,
      String vipId,
      List<String> productIds)
    {
      this();
      this.originVo = originVo;
      this.vipId = vipId;
      this.productIds = productIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeProductsFromVipProduct_args(removeProductsFromVipProduct_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetVipId()) {
        this.vipId = other.vipId;
      }
      if (other.isSetProductIds()) {
        List<String> __this__productIds = new ArrayList<String>(other.productIds);
        this.productIds = __this__productIds;
      }
    }

    public removeProductsFromVipProduct_args deepCopy() {
      return new removeProductsFromVipProduct_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.vipId = null;
      this.productIds = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public removeProductsFromVipProduct_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getVipId() {
      return this.vipId;
    }

    public removeProductsFromVipProduct_args setVipId(String vipId) {
      this.vipId = vipId;
      return this;
    }

    public void unsetVipId() {
      this.vipId = null;
    }

    /** Returns true if field vipId is set (has been assigned a value) and false otherwise */
    public boolean isSetVipId() {
      return this.vipId != null;
    }

    public void setVipIdIsSet(boolean value) {
      if (!value) {
        this.vipId = null;
      }
    }

    public int getProductIdsSize() {
      return (this.productIds == null) ? 0 : this.productIds.size();
    }

    public java.util.Iterator<String> getProductIdsIterator() {
      return (this.productIds == null) ? null : this.productIds.iterator();
    }

    public void addToProductIds(String elem) {
      if (this.productIds == null) {
        this.productIds = new ArrayList<String>();
      }
      this.productIds.add(elem);
    }

    public List<String> getProductIds() {
      return this.productIds;
    }

    public removeProductsFromVipProduct_args setProductIds(List<String> productIds) {
      this.productIds = productIds;
      return this;
    }

    public void unsetProductIds() {
      this.productIds = null;
    }

    /** Returns true if field productIds is set (has been assigned a value) and false otherwise */
    public boolean isSetProductIds() {
      return this.productIds != null;
    }

    public void setProductIdsIsSet(boolean value) {
      if (!value) {
        this.productIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case VIP_ID:
        if (value == null) {
          unsetVipId();
        } else {
          setVipId((String)value);
        }
        break;

      case PRODUCT_IDS:
        if (value == null) {
          unsetProductIds();
        } else {
          setProductIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case VIP_ID:
        return getVipId();

      case PRODUCT_IDS:
        return getProductIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case VIP_ID:
        return isSetVipId();
      case PRODUCT_IDS:
        return isSetProductIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeProductsFromVipProduct_args)
        return this.equals((removeProductsFromVipProduct_args)that);
      return false;
    }

    public boolean equals(removeProductsFromVipProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_vipId = true && this.isSetVipId();
      boolean that_present_vipId = true && that.isSetVipId();
      if (this_present_vipId || that_present_vipId) {
        if (!(this_present_vipId && that_present_vipId))
          return false;
        if (!this.vipId.equals(that.vipId))
          return false;
      }

      boolean this_present_productIds = true && this.isSetProductIds();
      boolean that_present_productIds = true && that.isSetProductIds();
      if (this_present_productIds || that_present_productIds) {
        if (!(this_present_productIds && that_present_productIds))
          return false;
        if (!this.productIds.equals(that.productIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_vipId = true && (isSetVipId());
      list.add(present_vipId);
      if (present_vipId)
        list.add(vipId);

      boolean present_productIds = true && (isSetProductIds());
      list.add(present_productIds);
      if (present_productIds)
        list.add(productIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeProductsFromVipProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVipId()).compareTo(other.isSetVipId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVipId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipId, other.vipId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProductIds()).compareTo(other.isSetProductIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productIds, other.productIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeProductsFromVipProduct_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vipId:");
      if (this.vipId == null) {
        sb.append("null");
      } else {
        sb.append(this.vipId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productIds:");
      if (this.productIds == null) {
        sb.append("null");
      } else {
        sb.append(this.productIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeProductsFromVipProduct_argsStandardSchemeFactory implements SchemeFactory {
      public removeProductsFromVipProduct_argsStandardScheme getScheme() {
        return new removeProductsFromVipProduct_argsStandardScheme();
      }
    }

    private static class removeProductsFromVipProduct_argsStandardScheme extends StandardScheme<removeProductsFromVipProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeProductsFromVipProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VIP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vipId = iprot.readString();
                struct.setVipIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PRODUCT_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list224 = iprot.readListBegin();
                  struct.productIds = new ArrayList<String>(_list224.size);
                  String _elem225;
                  for (int _i226 = 0; _i226 < _list224.size; ++_i226)
                  {
                    _elem225 = iprot.readString();
                    struct.productIds.add(_elem225);
                  }
                  iprot.readListEnd();
                }
                struct.setProductIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeProductsFromVipProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.vipId != null) {
          oprot.writeFieldBegin(VIP_ID_FIELD_DESC);
          oprot.writeString(struct.vipId);
          oprot.writeFieldEnd();
        }
        if (struct.productIds != null) {
          oprot.writeFieldBegin(PRODUCT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.productIds.size()));
            for (String _iter227 : struct.productIds)
            {
              oprot.writeString(_iter227);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeProductsFromVipProduct_argsTupleSchemeFactory implements SchemeFactory {
      public removeProductsFromVipProduct_argsTupleScheme getScheme() {
        return new removeProductsFromVipProduct_argsTupleScheme();
      }
    }

    private static class removeProductsFromVipProduct_argsTupleScheme extends TupleScheme<removeProductsFromVipProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeProductsFromVipProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetVipId()) {
          optionals.set(1);
        }
        if (struct.isSetProductIds()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetVipId()) {
          oprot.writeString(struct.vipId);
        }
        if (struct.isSetProductIds()) {
          {
            oprot.writeI32(struct.productIds.size());
            for (String _iter228 : struct.productIds)
            {
              oprot.writeString(_iter228);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeProductsFromVipProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vipId = iprot.readString();
          struct.setVipIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.productIds = new ArrayList<String>(_list229.size);
            String _elem230;
            for (int _i231 = 0; _i231 < _list229.size; ++_i231)
            {
              _elem230 = iprot.readString();
              struct.productIds.add(_elem230);
            }
          }
          struct.setProductIdsIsSet(true);
        }
      }
    }

  }

  public static class removeProductsFromVipProduct_result implements org.apache.thrift.TBase<removeProductsFromVipProduct_result, removeProductsFromVipProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeProductsFromVipProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeProductsFromVipProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeProductsFromVipProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeProductsFromVipProduct_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeProductsFromVipProduct_result.class, metaDataMap);
    }

    public removeProductsFromVipProduct_result() {
    }

    public removeProductsFromVipProduct_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeProductsFromVipProduct_result(removeProductsFromVipProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public removeProductsFromVipProduct_result deepCopy() {
      return new removeProductsFromVipProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public removeProductsFromVipProduct_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeProductsFromVipProduct_result)
        return this.equals((removeProductsFromVipProduct_result)that);
      return false;
    }

    public boolean equals(removeProductsFromVipProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeProductsFromVipProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeProductsFromVipProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeProductsFromVipProduct_resultStandardSchemeFactory implements SchemeFactory {
      public removeProductsFromVipProduct_resultStandardScheme getScheme() {
        return new removeProductsFromVipProduct_resultStandardScheme();
      }
    }

    private static class removeProductsFromVipProduct_resultStandardScheme extends StandardScheme<removeProductsFromVipProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeProductsFromVipProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeProductsFromVipProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeProductsFromVipProduct_resultTupleSchemeFactory implements SchemeFactory {
      public removeProductsFromVipProduct_resultTupleScheme getScheme() {
        return new removeProductsFromVipProduct_resultTupleScheme();
      }
    }

    private static class removeProductsFromVipProduct_resultTupleScheme extends TupleScheme<removeProductsFromVipProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeProductsFromVipProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeProductsFromVipProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findProductsForVipByPage_args implements org.apache.thrift.TBase<findProductsForVipByPage_args, findProductsForVipByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<findProductsForVipByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProductsForVipByPage_args");

    private static final org.apache.thrift.protocol.TField VIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vipId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PRICE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("priceStart", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField PRICE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("priceEnd", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("pageVo", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProductsForVipByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProductsForVipByPage_argsTupleSchemeFactory());
    }

    public String vipId; // required
    public String name; // required
    public double priceStart; // required
    public double priceEnd; // required
    public com.froad.thrift.vo.PageVo pageVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VIP_ID((short)1, "vipId"),
      NAME((short)2, "name"),
      PRICE_START((short)3, "priceStart"),
      PRICE_END((short)4, "priceEnd"),
      PAGE_VO((short)5, "pageVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VIP_ID
            return VIP_ID;
          case 2: // NAME
            return NAME;
          case 3: // PRICE_START
            return PRICE_START;
          case 4: // PRICE_END
            return PRICE_END;
          case 5: // PAGE_VO
            return PAGE_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRICESTART_ISSET_ID = 0;
    private static final int __PRICEEND_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VIP_ID, new org.apache.thrift.meta_data.FieldMetaData("vipId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRICE_START, new org.apache.thrift.meta_data.FieldMetaData("priceStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.PRICE_END, new org.apache.thrift.meta_data.FieldMetaData("priceEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.PAGE_VO, new org.apache.thrift.meta_data.FieldMetaData("pageVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProductsForVipByPage_args.class, metaDataMap);
    }

    public findProductsForVipByPage_args() {
    }

    public findProductsForVipByPage_args(
      String vipId,
      String name,
      double priceStart,
      double priceEnd,
      com.froad.thrift.vo.PageVo pageVo)
    {
      this();
      this.vipId = vipId;
      this.name = name;
      this.priceStart = priceStart;
      setPriceStartIsSet(true);
      this.priceEnd = priceEnd;
      setPriceEndIsSet(true);
      this.pageVo = pageVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProductsForVipByPage_args(findProductsForVipByPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetVipId()) {
        this.vipId = other.vipId;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.priceStart = other.priceStart;
      this.priceEnd = other.priceEnd;
      if (other.isSetPageVo()) {
        this.pageVo = new com.froad.thrift.vo.PageVo(other.pageVo);
      }
    }

    public findProductsForVipByPage_args deepCopy() {
      return new findProductsForVipByPage_args(this);
    }

    @Override
    public void clear() {
      this.vipId = null;
      this.name = null;
      setPriceStartIsSet(false);
      this.priceStart = 0.0;
      setPriceEndIsSet(false);
      this.priceEnd = 0.0;
      this.pageVo = null;
    }

    public String getVipId() {
      return this.vipId;
    }

    public findProductsForVipByPage_args setVipId(String vipId) {
      this.vipId = vipId;
      return this;
    }

    public void unsetVipId() {
      this.vipId = null;
    }

    /** Returns true if field vipId is set (has been assigned a value) and false otherwise */
    public boolean isSetVipId() {
      return this.vipId != null;
    }

    public void setVipIdIsSet(boolean value) {
      if (!value) {
        this.vipId = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public findProductsForVipByPage_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public double getPriceStart() {
      return this.priceStart;
    }

    public findProductsForVipByPage_args setPriceStart(double priceStart) {
      this.priceStart = priceStart;
      setPriceStartIsSet(true);
      return this;
    }

    public void unsetPriceStart() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICESTART_ISSET_ID);
    }

    /** Returns true if field priceStart is set (has been assigned a value) and false otherwise */
    public boolean isSetPriceStart() {
      return EncodingUtils.testBit(__isset_bitfield, __PRICESTART_ISSET_ID);
    }

    public void setPriceStartIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICESTART_ISSET_ID, value);
    }

    public double getPriceEnd() {
      return this.priceEnd;
    }

    public findProductsForVipByPage_args setPriceEnd(double priceEnd) {
      this.priceEnd = priceEnd;
      setPriceEndIsSet(true);
      return this;
    }

    public void unsetPriceEnd() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICEEND_ISSET_ID);
    }

    /** Returns true if field priceEnd is set (has been assigned a value) and false otherwise */
    public boolean isSetPriceEnd() {
      return EncodingUtils.testBit(__isset_bitfield, __PRICEEND_ISSET_ID);
    }

    public void setPriceEndIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICEEND_ISSET_ID, value);
    }

    public com.froad.thrift.vo.PageVo getPageVo() {
      return this.pageVo;
    }

    public findProductsForVipByPage_args setPageVo(com.froad.thrift.vo.PageVo pageVo) {
      this.pageVo = pageVo;
      return this;
    }

    public void unsetPageVo() {
      this.pageVo = null;
    }

    /** Returns true if field pageVo is set (has been assigned a value) and false otherwise */
    public boolean isSetPageVo() {
      return this.pageVo != null;
    }

    public void setPageVoIsSet(boolean value) {
      if (!value) {
        this.pageVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VIP_ID:
        if (value == null) {
          unsetVipId();
        } else {
          setVipId((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case PRICE_START:
        if (value == null) {
          unsetPriceStart();
        } else {
          setPriceStart((Double)value);
        }
        break;

      case PRICE_END:
        if (value == null) {
          unsetPriceEnd();
        } else {
          setPriceEnd((Double)value);
        }
        break;

      case PAGE_VO:
        if (value == null) {
          unsetPageVo();
        } else {
          setPageVo((com.froad.thrift.vo.PageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VIP_ID:
        return getVipId();

      case NAME:
        return getName();

      case PRICE_START:
        return Double.valueOf(getPriceStart());

      case PRICE_END:
        return Double.valueOf(getPriceEnd());

      case PAGE_VO:
        return getPageVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VIP_ID:
        return isSetVipId();
      case NAME:
        return isSetName();
      case PRICE_START:
        return isSetPriceStart();
      case PRICE_END:
        return isSetPriceEnd();
      case PAGE_VO:
        return isSetPageVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProductsForVipByPage_args)
        return this.equals((findProductsForVipByPage_args)that);
      return false;
    }

    public boolean equals(findProductsForVipByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_vipId = true && this.isSetVipId();
      boolean that_present_vipId = true && that.isSetVipId();
      if (this_present_vipId || that_present_vipId) {
        if (!(this_present_vipId && that_present_vipId))
          return false;
        if (!this.vipId.equals(that.vipId))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_priceStart = true;
      boolean that_present_priceStart = true;
      if (this_present_priceStart || that_present_priceStart) {
        if (!(this_present_priceStart && that_present_priceStart))
          return false;
        if (this.priceStart != that.priceStart)
          return false;
      }

      boolean this_present_priceEnd = true;
      boolean that_present_priceEnd = true;
      if (this_present_priceEnd || that_present_priceEnd) {
        if (!(this_present_priceEnd && that_present_priceEnd))
          return false;
        if (this.priceEnd != that.priceEnd)
          return false;
      }

      boolean this_present_pageVo = true && this.isSetPageVo();
      boolean that_present_pageVo = true && that.isSetPageVo();
      if (this_present_pageVo || that_present_pageVo) {
        if (!(this_present_pageVo && that_present_pageVo))
          return false;
        if (!this.pageVo.equals(that.pageVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vipId = true && (isSetVipId());
      list.add(present_vipId);
      if (present_vipId)
        list.add(vipId);

      boolean present_name = true && (isSetName());
      list.add(present_name);
      if (present_name)
        list.add(name);

      boolean present_priceStart = true;
      list.add(present_priceStart);
      if (present_priceStart)
        list.add(priceStart);

      boolean present_priceEnd = true;
      list.add(present_priceEnd);
      if (present_priceEnd)
        list.add(priceEnd);

      boolean present_pageVo = true && (isSetPageVo());
      list.add(present_pageVo);
      if (present_pageVo)
        list.add(pageVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProductsForVipByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVipId()).compareTo(other.isSetVipId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVipId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipId, other.vipId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPriceStart()).compareTo(other.isSetPriceStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPriceStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceStart, other.priceStart);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPriceEnd()).compareTo(other.isSetPriceEnd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPriceEnd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceEnd, other.priceEnd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageVo()).compareTo(other.isSetPageVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageVo, other.pageVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProductsForVipByPage_args(");
      boolean first = true;

      sb.append("vipId:");
      if (this.vipId == null) {
        sb.append("null");
      } else {
        sb.append(this.vipId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("priceStart:");
      sb.append(this.priceStart);
      first = false;
      if (!first) sb.append(", ");
      sb.append("priceEnd:");
      sb.append(this.priceEnd);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageVo:");
      if (this.pageVo == null) {
        sb.append("null");
      } else {
        sb.append(this.pageVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageVo != null) {
        pageVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProductsForVipByPage_argsStandardSchemeFactory implements SchemeFactory {
      public findProductsForVipByPage_argsStandardScheme getScheme() {
        return new findProductsForVipByPage_argsStandardScheme();
      }
    }

    private static class findProductsForVipByPage_argsStandardScheme extends StandardScheme<findProductsForVipByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProductsForVipByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VIP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vipId = iprot.readString();
                struct.setVipIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PRICE_START
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.priceStart = iprot.readDouble();
                struct.setPriceStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PRICE_END
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.priceEnd = iprot.readDouble();
                struct.setPriceEndIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PAGE_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageVo = new com.froad.thrift.vo.PageVo();
                struct.pageVo.read(iprot);
                struct.setPageVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProductsForVipByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vipId != null) {
          oprot.writeFieldBegin(VIP_ID_FIELD_DESC);
          oprot.writeString(struct.vipId);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRICE_START_FIELD_DESC);
        oprot.writeDouble(struct.priceStart);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PRICE_END_FIELD_DESC);
        oprot.writeDouble(struct.priceEnd);
        oprot.writeFieldEnd();
        if (struct.pageVo != null) {
          oprot.writeFieldBegin(PAGE_VO_FIELD_DESC);
          struct.pageVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProductsForVipByPage_argsTupleSchemeFactory implements SchemeFactory {
      public findProductsForVipByPage_argsTupleScheme getScheme() {
        return new findProductsForVipByPage_argsTupleScheme();
      }
    }

    private static class findProductsForVipByPage_argsTupleScheme extends TupleScheme<findProductsForVipByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProductsForVipByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVipId()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetPriceStart()) {
          optionals.set(2);
        }
        if (struct.isSetPriceEnd()) {
          optionals.set(3);
        }
        if (struct.isSetPageVo()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetVipId()) {
          oprot.writeString(struct.vipId);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetPriceStart()) {
          oprot.writeDouble(struct.priceStart);
        }
        if (struct.isSetPriceEnd()) {
          oprot.writeDouble(struct.priceEnd);
        }
        if (struct.isSetPageVo()) {
          struct.pageVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProductsForVipByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.vipId = iprot.readString();
          struct.setVipIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.priceStart = iprot.readDouble();
          struct.setPriceStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.priceEnd = iprot.readDouble();
          struct.setPriceEndIsSet(true);
        }
        if (incoming.get(4)) {
          struct.pageVo = new com.froad.thrift.vo.PageVo();
          struct.pageVo.read(iprot);
          struct.setPageVoIsSet(true);
        }
      }
    }

  }

  public static class findProductsForVipByPage_result implements org.apache.thrift.TBase<findProductsForVipByPage_result, findProductsForVipByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<findProductsForVipByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findProductsForVipByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findProductsForVipByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findProductsForVipByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ProductOfVipPageVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ProductOfVipPageVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findProductsForVipByPage_result.class, metaDataMap);
    }

    public findProductsForVipByPage_result() {
    }

    public findProductsForVipByPage_result(
      com.froad.thrift.vo.ProductOfVipPageVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findProductsForVipByPage_result(findProductsForVipByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ProductOfVipPageVo(other.success);
      }
    }

    public findProductsForVipByPage_result deepCopy() {
      return new findProductsForVipByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ProductOfVipPageVo getSuccess() {
      return this.success;
    }

    public findProductsForVipByPage_result setSuccess(com.froad.thrift.vo.ProductOfVipPageVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ProductOfVipPageVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findProductsForVipByPage_result)
        return this.equals((findProductsForVipByPage_result)that);
      return false;
    }

    public boolean equals(findProductsForVipByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findProductsForVipByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findProductsForVipByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findProductsForVipByPage_resultStandardSchemeFactory implements SchemeFactory {
      public findProductsForVipByPage_resultStandardScheme getScheme() {
        return new findProductsForVipByPage_resultStandardScheme();
      }
    }

    private static class findProductsForVipByPage_resultStandardScheme extends StandardScheme<findProductsForVipByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findProductsForVipByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ProductOfVipPageVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findProductsForVipByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findProductsForVipByPage_resultTupleSchemeFactory implements SchemeFactory {
      public findProductsForVipByPage_resultTupleScheme getScheme() {
        return new findProductsForVipByPage_resultTupleScheme();
      }
    }

    private static class findProductsForVipByPage_resultTupleScheme extends TupleScheme<findProductsForVipByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findProductsForVipByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findProductsForVipByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ProductOfVipPageVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
