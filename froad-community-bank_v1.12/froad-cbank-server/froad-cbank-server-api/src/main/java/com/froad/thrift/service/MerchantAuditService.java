/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class MerchantAuditService {

  /**
   * MerchantAuditService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 商户再审核
     * originVo 对象 的clientId和operatorId 必须填值，merchantTempVo 对象里面的审核流水号字段可为空
     * @param originVo 操作vo
     * @param merchantTempVoReq 审核信息VO
     * @return MerchantAuditVoRes 审核操作对象
     * 
     * @param originVo
     * @param merchantTempVoReq
     */
    public com.froad.thrift.vo.MerchantAuditVoRes auditMerchant(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantTempVoReq merchantTempVoReq) throws org.apache.thrift.TException;

    /**
     * 同步商户编辑后的数据到主表
     * @param merchantTempVo 审核信息VO
     * @return MerchantAuditVoRes 审核操作对象
     * 
     * @param auditId
     */
    public com.froad.thrift.vo.MerchantAuditVoRes synchMerchantEdit(String auditId) throws org.apache.thrift.TException;

    /**
     * 查询商户修改必审信息
     * originVo 对象 的clientId和operatorId 必须填值
     * @param originVo 操作vo
     * @param merchantTempVoReq 审核信息VO
     * @return MerchantTempVoReq 商户修改审核变更信息对象
     * 
     * @param originVo
     * @param auditId
     */
    public com.froad.thrift.vo.MerchantTempVo getAuditMerchant(com.froad.thrift.vo.OriginVo originVo, String auditId) throws org.apache.thrift.TException;

    /**
     * 查询 MerchantTempVo 根据该对象查询
     * @param MerchantTempVo
     * @return List<MerchantTempVo>
     * 
     * @param merchantTempVo
     */
    public List<com.froad.thrift.vo.MerchantTempVo> getMerchantTemp(com.froad.thrift.vo.MerchantTempVo merchantTempVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void auditMerchant(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantTempVoReq merchantTempVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void synchMerchantEdit(String auditId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAuditMerchant(com.froad.thrift.vo.OriginVo originVo, String auditId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantTemp(com.froad.thrift.vo.MerchantTempVo merchantTempVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.MerchantAuditVoRes auditMerchant(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantTempVoReq merchantTempVoReq) throws org.apache.thrift.TException
    {
      send_auditMerchant(originVo, merchantTempVoReq);
      return recv_auditMerchant();
    }

    public void send_auditMerchant(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantTempVoReq merchantTempVoReq) throws org.apache.thrift.TException
    {
      auditMerchant_args args = new auditMerchant_args();
      args.setOriginVo(originVo);
      args.setMerchantTempVoReq(merchantTempVoReq);
      sendBase("auditMerchant", args);
    }

    public com.froad.thrift.vo.MerchantAuditVoRes recv_auditMerchant() throws org.apache.thrift.TException
    {
      auditMerchant_result result = new auditMerchant_result();
      receiveBase(result, "auditMerchant");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "auditMerchant failed: unknown result");
    }

    public com.froad.thrift.vo.MerchantAuditVoRes synchMerchantEdit(String auditId) throws org.apache.thrift.TException
    {
      send_synchMerchantEdit(auditId);
      return recv_synchMerchantEdit();
    }

    public void send_synchMerchantEdit(String auditId) throws org.apache.thrift.TException
    {
      synchMerchantEdit_args args = new synchMerchantEdit_args();
      args.setAuditId(auditId);
      sendBase("synchMerchantEdit", args);
    }

    public com.froad.thrift.vo.MerchantAuditVoRes recv_synchMerchantEdit() throws org.apache.thrift.TException
    {
      synchMerchantEdit_result result = new synchMerchantEdit_result();
      receiveBase(result, "synchMerchantEdit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "synchMerchantEdit failed: unknown result");
    }

    public com.froad.thrift.vo.MerchantTempVo getAuditMerchant(com.froad.thrift.vo.OriginVo originVo, String auditId) throws org.apache.thrift.TException
    {
      send_getAuditMerchant(originVo, auditId);
      return recv_getAuditMerchant();
    }

    public void send_getAuditMerchant(com.froad.thrift.vo.OriginVo originVo, String auditId) throws org.apache.thrift.TException
    {
      getAuditMerchant_args args = new getAuditMerchant_args();
      args.setOriginVo(originVo);
      args.setAuditId(auditId);
      sendBase("getAuditMerchant", args);
    }

    public com.froad.thrift.vo.MerchantTempVo recv_getAuditMerchant() throws org.apache.thrift.TException
    {
      getAuditMerchant_result result = new getAuditMerchant_result();
      receiveBase(result, "getAuditMerchant");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAuditMerchant failed: unknown result");
    }

    public List<com.froad.thrift.vo.MerchantTempVo> getMerchantTemp(com.froad.thrift.vo.MerchantTempVo merchantTempVo) throws org.apache.thrift.TException
    {
      send_getMerchantTemp(merchantTempVo);
      return recv_getMerchantTemp();
    }

    public void send_getMerchantTemp(com.froad.thrift.vo.MerchantTempVo merchantTempVo) throws org.apache.thrift.TException
    {
      getMerchantTemp_args args = new getMerchantTemp_args();
      args.setMerchantTempVo(merchantTempVo);
      sendBase("getMerchantTemp", args);
    }

    public List<com.froad.thrift.vo.MerchantTempVo> recv_getMerchantTemp() throws org.apache.thrift.TException
    {
      getMerchantTemp_result result = new getMerchantTemp_result();
      receiveBase(result, "getMerchantTemp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantTemp failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void auditMerchant(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantTempVoReq merchantTempVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      auditMerchant_call method_call = new auditMerchant_call(originVo, merchantTempVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class auditMerchant_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.MerchantTempVoReq merchantTempVoReq;
      public auditMerchant_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantTempVoReq merchantTempVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantTempVoReq = merchantTempVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("auditMerchant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        auditMerchant_args args = new auditMerchant_args();
        args.setOriginVo(originVo);
        args.setMerchantTempVoReq(merchantTempVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantAuditVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_auditMerchant();
      }
    }

    public void synchMerchantEdit(String auditId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      synchMerchantEdit_call method_call = new synchMerchantEdit_call(auditId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class synchMerchantEdit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String auditId;
      public synchMerchantEdit_call(String auditId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auditId = auditId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("synchMerchantEdit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        synchMerchantEdit_args args = new synchMerchantEdit_args();
        args.setAuditId(auditId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantAuditVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_synchMerchantEdit();
      }
    }

    public void getAuditMerchant(com.froad.thrift.vo.OriginVo originVo, String auditId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAuditMerchant_call method_call = new getAuditMerchant_call(originVo, auditId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAuditMerchant_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private String auditId;
      public getAuditMerchant_call(com.froad.thrift.vo.OriginVo originVo, String auditId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.auditId = auditId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAuditMerchant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAuditMerchant_args args = new getAuditMerchant_args();
        args.setOriginVo(originVo);
        args.setAuditId(auditId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantTempVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAuditMerchant();
      }
    }

    public void getMerchantTemp(com.froad.thrift.vo.MerchantTempVo merchantTempVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantTemp_call method_call = new getMerchantTemp_call(merchantTempVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantTemp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.MerchantTempVo merchantTempVo;
      public getMerchantTemp_call(com.froad.thrift.vo.MerchantTempVo merchantTempVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantTempVo = merchantTempVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantTemp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantTemp_args args = new getMerchantTemp_args();
        args.setMerchantTempVo(merchantTempVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.MerchantTempVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantTemp();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("auditMerchant", new auditMerchant());
      processMap.put("synchMerchantEdit", new synchMerchantEdit());
      processMap.put("getAuditMerchant", new getAuditMerchant());
      processMap.put("getMerchantTemp", new getMerchantTemp());
      return processMap;
    }

    public static class auditMerchant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, auditMerchant_args> {
      public auditMerchant() {
        super("auditMerchant");
      }

      public auditMerchant_args getEmptyArgsInstance() {
        return new auditMerchant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public auditMerchant_result getResult(I iface, auditMerchant_args args) throws org.apache.thrift.TException {
        auditMerchant_result result = new auditMerchant_result();
        result.success = iface.auditMerchant(args.originVo, args.merchantTempVoReq);
        return result;
      }
    }

    public static class synchMerchantEdit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, synchMerchantEdit_args> {
      public synchMerchantEdit() {
        super("synchMerchantEdit");
      }

      public synchMerchantEdit_args getEmptyArgsInstance() {
        return new synchMerchantEdit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public synchMerchantEdit_result getResult(I iface, synchMerchantEdit_args args) throws org.apache.thrift.TException {
        synchMerchantEdit_result result = new synchMerchantEdit_result();
        result.success = iface.synchMerchantEdit(args.auditId);
        return result;
      }
    }

    public static class getAuditMerchant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAuditMerchant_args> {
      public getAuditMerchant() {
        super("getAuditMerchant");
      }

      public getAuditMerchant_args getEmptyArgsInstance() {
        return new getAuditMerchant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAuditMerchant_result getResult(I iface, getAuditMerchant_args args) throws org.apache.thrift.TException {
        getAuditMerchant_result result = new getAuditMerchant_result();
        result.success = iface.getAuditMerchant(args.originVo, args.auditId);
        return result;
      }
    }

    public static class getMerchantTemp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantTemp_args> {
      public getMerchantTemp() {
        super("getMerchantTemp");
      }

      public getMerchantTemp_args getEmptyArgsInstance() {
        return new getMerchantTemp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantTemp_result getResult(I iface, getMerchantTemp_args args) throws org.apache.thrift.TException {
        getMerchantTemp_result result = new getMerchantTemp_result();
        result.success = iface.getMerchantTemp(args.merchantTempVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("auditMerchant", new auditMerchant());
      processMap.put("synchMerchantEdit", new synchMerchantEdit());
      processMap.put("getAuditMerchant", new getAuditMerchant());
      processMap.put("getMerchantTemp", new getMerchantTemp());
      return processMap;
    }

    public static class auditMerchant<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, auditMerchant_args, com.froad.thrift.vo.MerchantAuditVoRes> {
      public auditMerchant() {
        super("auditMerchant");
      }

      public auditMerchant_args getEmptyArgsInstance() {
        return new auditMerchant_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantAuditVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantAuditVoRes>() { 
          public void onComplete(com.froad.thrift.vo.MerchantAuditVoRes o) {
            auditMerchant_result result = new auditMerchant_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            auditMerchant_result result = new auditMerchant_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, auditMerchant_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantAuditVoRes> resultHandler) throws TException {
        iface.auditMerchant(args.originVo, args.merchantTempVoReq,resultHandler);
      }
    }

    public static class synchMerchantEdit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, synchMerchantEdit_args, com.froad.thrift.vo.MerchantAuditVoRes> {
      public synchMerchantEdit() {
        super("synchMerchantEdit");
      }

      public synchMerchantEdit_args getEmptyArgsInstance() {
        return new synchMerchantEdit_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantAuditVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantAuditVoRes>() { 
          public void onComplete(com.froad.thrift.vo.MerchantAuditVoRes o) {
            synchMerchantEdit_result result = new synchMerchantEdit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            synchMerchantEdit_result result = new synchMerchantEdit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, synchMerchantEdit_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantAuditVoRes> resultHandler) throws TException {
        iface.synchMerchantEdit(args.auditId,resultHandler);
      }
    }

    public static class getAuditMerchant<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAuditMerchant_args, com.froad.thrift.vo.MerchantTempVo> {
      public getAuditMerchant() {
        super("getAuditMerchant");
      }

      public getAuditMerchant_args getEmptyArgsInstance() {
        return new getAuditMerchant_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantTempVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantTempVo>() { 
          public void onComplete(com.froad.thrift.vo.MerchantTempVo o) {
            getAuditMerchant_result result = new getAuditMerchant_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAuditMerchant_result result = new getAuditMerchant_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAuditMerchant_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantTempVo> resultHandler) throws TException {
        iface.getAuditMerchant(args.originVo, args.auditId,resultHandler);
      }
    }

    public static class getMerchantTemp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantTemp_args, List<com.froad.thrift.vo.MerchantTempVo>> {
      public getMerchantTemp() {
        super("getMerchantTemp");
      }

      public getMerchantTemp_args getEmptyArgsInstance() {
        return new getMerchantTemp_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.MerchantTempVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.MerchantTempVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.MerchantTempVo> o) {
            getMerchantTemp_result result = new getMerchantTemp_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantTemp_result result = new getMerchantTemp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantTemp_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.MerchantTempVo>> resultHandler) throws TException {
        iface.getMerchantTemp(args.merchantTempVo,resultHandler);
      }
    }

  }

  public static class auditMerchant_args implements org.apache.thrift.TBase<auditMerchant_args, auditMerchant_args._Fields>, java.io.Serializable, Cloneable, Comparable<auditMerchant_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("auditMerchant_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_TEMP_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantTempVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new auditMerchant_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new auditMerchant_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.MerchantTempVoReq merchantTempVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_TEMP_VO_REQ((short)2, "merchantTempVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_TEMP_VO_REQ
            return MERCHANT_TEMP_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_TEMP_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("merchantTempVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantTempVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(auditMerchant_args.class, metaDataMap);
    }

    public auditMerchant_args() {
    }

    public auditMerchant_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.MerchantTempVoReq merchantTempVoReq)
    {
      this();
      this.originVo = originVo;
      this.merchantTempVoReq = merchantTempVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public auditMerchant_args(auditMerchant_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantTempVoReq()) {
        this.merchantTempVoReq = new com.froad.thrift.vo.MerchantTempVoReq(other.merchantTempVoReq);
      }
    }

    public auditMerchant_args deepCopy() {
      return new auditMerchant_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantTempVoReq = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public auditMerchant_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.MerchantTempVoReq getMerchantTempVoReq() {
      return this.merchantTempVoReq;
    }

    public auditMerchant_args setMerchantTempVoReq(com.froad.thrift.vo.MerchantTempVoReq merchantTempVoReq) {
      this.merchantTempVoReq = merchantTempVoReq;
      return this;
    }

    public void unsetMerchantTempVoReq() {
      this.merchantTempVoReq = null;
    }

    /** Returns true if field merchantTempVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantTempVoReq() {
      return this.merchantTempVoReq != null;
    }

    public void setMerchantTempVoReqIsSet(boolean value) {
      if (!value) {
        this.merchantTempVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_TEMP_VO_REQ:
        if (value == null) {
          unsetMerchantTempVoReq();
        } else {
          setMerchantTempVoReq((com.froad.thrift.vo.MerchantTempVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_TEMP_VO_REQ:
        return getMerchantTempVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_TEMP_VO_REQ:
        return isSetMerchantTempVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof auditMerchant_args)
        return this.equals((auditMerchant_args)that);
      return false;
    }

    public boolean equals(auditMerchant_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantTempVoReq = true && this.isSetMerchantTempVoReq();
      boolean that_present_merchantTempVoReq = true && that.isSetMerchantTempVoReq();
      if (this_present_merchantTempVoReq || that_present_merchantTempVoReq) {
        if (!(this_present_merchantTempVoReq && that_present_merchantTempVoReq))
          return false;
        if (!this.merchantTempVoReq.equals(that.merchantTempVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantTempVoReq = true && (isSetMerchantTempVoReq());
      list.add(present_merchantTempVoReq);
      if (present_merchantTempVoReq)
        list.add(merchantTempVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(auditMerchant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantTempVoReq()).compareTo(other.isSetMerchantTempVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantTempVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantTempVoReq, other.merchantTempVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("auditMerchant_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantTempVoReq:");
      if (this.merchantTempVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantTempVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (merchantTempVoReq != null) {
        merchantTempVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class auditMerchant_argsStandardSchemeFactory implements SchemeFactory {
      public auditMerchant_argsStandardScheme getScheme() {
        return new auditMerchant_argsStandardScheme();
      }
    }

    private static class auditMerchant_argsStandardScheme extends StandardScheme<auditMerchant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, auditMerchant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_TEMP_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantTempVoReq = new com.froad.thrift.vo.MerchantTempVoReq();
                struct.merchantTempVoReq.read(iprot);
                struct.setMerchantTempVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, auditMerchant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantTempVoReq != null) {
          oprot.writeFieldBegin(MERCHANT_TEMP_VO_REQ_FIELD_DESC);
          struct.merchantTempVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class auditMerchant_argsTupleSchemeFactory implements SchemeFactory {
      public auditMerchant_argsTupleScheme getScheme() {
        return new auditMerchant_argsTupleScheme();
      }
    }

    private static class auditMerchant_argsTupleScheme extends TupleScheme<auditMerchant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, auditMerchant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantTempVoReq()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantTempVoReq()) {
          struct.merchantTempVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, auditMerchant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantTempVoReq = new com.froad.thrift.vo.MerchantTempVoReq();
          struct.merchantTempVoReq.read(iprot);
          struct.setMerchantTempVoReqIsSet(true);
        }
      }
    }

  }

  public static class auditMerchant_result implements org.apache.thrift.TBase<auditMerchant_result, auditMerchant_result._Fields>, java.io.Serializable, Cloneable, Comparable<auditMerchant_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("auditMerchant_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new auditMerchant_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new auditMerchant_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantAuditVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantAuditVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(auditMerchant_result.class, metaDataMap);
    }

    public auditMerchant_result() {
    }

    public auditMerchant_result(
      com.froad.thrift.vo.MerchantAuditVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public auditMerchant_result(auditMerchant_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantAuditVoRes(other.success);
      }
    }

    public auditMerchant_result deepCopy() {
      return new auditMerchant_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantAuditVoRes getSuccess() {
      return this.success;
    }

    public auditMerchant_result setSuccess(com.froad.thrift.vo.MerchantAuditVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantAuditVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof auditMerchant_result)
        return this.equals((auditMerchant_result)that);
      return false;
    }

    public boolean equals(auditMerchant_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(auditMerchant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("auditMerchant_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class auditMerchant_resultStandardSchemeFactory implements SchemeFactory {
      public auditMerchant_resultStandardScheme getScheme() {
        return new auditMerchant_resultStandardScheme();
      }
    }

    private static class auditMerchant_resultStandardScheme extends StandardScheme<auditMerchant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, auditMerchant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantAuditVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, auditMerchant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class auditMerchant_resultTupleSchemeFactory implements SchemeFactory {
      public auditMerchant_resultTupleScheme getScheme() {
        return new auditMerchant_resultTupleScheme();
      }
    }

    private static class auditMerchant_resultTupleScheme extends TupleScheme<auditMerchant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, auditMerchant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, auditMerchant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantAuditVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class synchMerchantEdit_args implements org.apache.thrift.TBase<synchMerchantEdit_args, synchMerchantEdit_args._Fields>, java.io.Serializable, Cloneable, Comparable<synchMerchantEdit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("synchMerchantEdit_args");

    private static final org.apache.thrift.protocol.TField AUDIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("auditId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new synchMerchantEdit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new synchMerchantEdit_argsTupleSchemeFactory());
    }

    public String auditId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUDIT_ID((short)1, "auditId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUDIT_ID
            return AUDIT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUDIT_ID, new org.apache.thrift.meta_data.FieldMetaData("auditId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(synchMerchantEdit_args.class, metaDataMap);
    }

    public synchMerchantEdit_args() {
    }

    public synchMerchantEdit_args(
      String auditId)
    {
      this();
      this.auditId = auditId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public synchMerchantEdit_args(synchMerchantEdit_args other) {
      if (other.isSetAuditId()) {
        this.auditId = other.auditId;
      }
    }

    public synchMerchantEdit_args deepCopy() {
      return new synchMerchantEdit_args(this);
    }

    @Override
    public void clear() {
      this.auditId = null;
    }

    public String getAuditId() {
      return this.auditId;
    }

    public synchMerchantEdit_args setAuditId(String auditId) {
      this.auditId = auditId;
      return this;
    }

    public void unsetAuditId() {
      this.auditId = null;
    }

    /** Returns true if field auditId is set (has been assigned a value) and false otherwise */
    public boolean isSetAuditId() {
      return this.auditId != null;
    }

    public void setAuditIdIsSet(boolean value) {
      if (!value) {
        this.auditId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUDIT_ID:
        if (value == null) {
          unsetAuditId();
        } else {
          setAuditId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUDIT_ID:
        return getAuditId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUDIT_ID:
        return isSetAuditId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof synchMerchantEdit_args)
        return this.equals((synchMerchantEdit_args)that);
      return false;
    }

    public boolean equals(synchMerchantEdit_args that) {
      if (that == null)
        return false;

      boolean this_present_auditId = true && this.isSetAuditId();
      boolean that_present_auditId = true && that.isSetAuditId();
      if (this_present_auditId || that_present_auditId) {
        if (!(this_present_auditId && that_present_auditId))
          return false;
        if (!this.auditId.equals(that.auditId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_auditId = true && (isSetAuditId());
      list.add(present_auditId);
      if (present_auditId)
        list.add(auditId);

      return list.hashCode();
    }

    @Override
    public int compareTo(synchMerchantEdit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuditId()).compareTo(other.isSetAuditId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuditId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditId, other.auditId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("synchMerchantEdit_args(");
      boolean first = true;

      sb.append("auditId:");
      if (this.auditId == null) {
        sb.append("null");
      } else {
        sb.append(this.auditId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class synchMerchantEdit_argsStandardSchemeFactory implements SchemeFactory {
      public synchMerchantEdit_argsStandardScheme getScheme() {
        return new synchMerchantEdit_argsStandardScheme();
      }
    }

    private static class synchMerchantEdit_argsStandardScheme extends StandardScheme<synchMerchantEdit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, synchMerchantEdit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUDIT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.auditId = iprot.readString();
                struct.setAuditIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, synchMerchantEdit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auditId != null) {
          oprot.writeFieldBegin(AUDIT_ID_FIELD_DESC);
          oprot.writeString(struct.auditId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class synchMerchantEdit_argsTupleSchemeFactory implements SchemeFactory {
      public synchMerchantEdit_argsTupleScheme getScheme() {
        return new synchMerchantEdit_argsTupleScheme();
      }
    }

    private static class synchMerchantEdit_argsTupleScheme extends TupleScheme<synchMerchantEdit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, synchMerchantEdit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuditId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuditId()) {
          oprot.writeString(struct.auditId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, synchMerchantEdit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.auditId = iprot.readString();
          struct.setAuditIdIsSet(true);
        }
      }
    }

  }

  public static class synchMerchantEdit_result implements org.apache.thrift.TBase<synchMerchantEdit_result, synchMerchantEdit_result._Fields>, java.io.Serializable, Cloneable, Comparable<synchMerchantEdit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("synchMerchantEdit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new synchMerchantEdit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new synchMerchantEdit_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantAuditVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantAuditVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(synchMerchantEdit_result.class, metaDataMap);
    }

    public synchMerchantEdit_result() {
    }

    public synchMerchantEdit_result(
      com.froad.thrift.vo.MerchantAuditVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public synchMerchantEdit_result(synchMerchantEdit_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantAuditVoRes(other.success);
      }
    }

    public synchMerchantEdit_result deepCopy() {
      return new synchMerchantEdit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantAuditVoRes getSuccess() {
      return this.success;
    }

    public synchMerchantEdit_result setSuccess(com.froad.thrift.vo.MerchantAuditVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantAuditVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof synchMerchantEdit_result)
        return this.equals((synchMerchantEdit_result)that);
      return false;
    }

    public boolean equals(synchMerchantEdit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(synchMerchantEdit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("synchMerchantEdit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class synchMerchantEdit_resultStandardSchemeFactory implements SchemeFactory {
      public synchMerchantEdit_resultStandardScheme getScheme() {
        return new synchMerchantEdit_resultStandardScheme();
      }
    }

    private static class synchMerchantEdit_resultStandardScheme extends StandardScheme<synchMerchantEdit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, synchMerchantEdit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantAuditVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, synchMerchantEdit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class synchMerchantEdit_resultTupleSchemeFactory implements SchemeFactory {
      public synchMerchantEdit_resultTupleScheme getScheme() {
        return new synchMerchantEdit_resultTupleScheme();
      }
    }

    private static class synchMerchantEdit_resultTupleScheme extends TupleScheme<synchMerchantEdit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, synchMerchantEdit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, synchMerchantEdit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantAuditVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAuditMerchant_args implements org.apache.thrift.TBase<getAuditMerchant_args, getAuditMerchant_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAuditMerchant_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAuditMerchant_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUDIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("auditId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAuditMerchant_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAuditMerchant_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public String auditId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      AUDIT_ID((short)2, "auditId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // AUDIT_ID
            return AUDIT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.AUDIT_ID, new org.apache.thrift.meta_data.FieldMetaData("auditId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAuditMerchant_args.class, metaDataMap);
    }

    public getAuditMerchant_args() {
    }

    public getAuditMerchant_args(
      com.froad.thrift.vo.OriginVo originVo,
      String auditId)
    {
      this();
      this.originVo = originVo;
      this.auditId = auditId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAuditMerchant_args(getAuditMerchant_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetAuditId()) {
        this.auditId = other.auditId;
      }
    }

    public getAuditMerchant_args deepCopy() {
      return new getAuditMerchant_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.auditId = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public getAuditMerchant_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public String getAuditId() {
      return this.auditId;
    }

    public getAuditMerchant_args setAuditId(String auditId) {
      this.auditId = auditId;
      return this;
    }

    public void unsetAuditId() {
      this.auditId = null;
    }

    /** Returns true if field auditId is set (has been assigned a value) and false otherwise */
    public boolean isSetAuditId() {
      return this.auditId != null;
    }

    public void setAuditIdIsSet(boolean value) {
      if (!value) {
        this.auditId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case AUDIT_ID:
        if (value == null) {
          unsetAuditId();
        } else {
          setAuditId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case AUDIT_ID:
        return getAuditId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case AUDIT_ID:
        return isSetAuditId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAuditMerchant_args)
        return this.equals((getAuditMerchant_args)that);
      return false;
    }

    public boolean equals(getAuditMerchant_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_auditId = true && this.isSetAuditId();
      boolean that_present_auditId = true && that.isSetAuditId();
      if (this_present_auditId || that_present_auditId) {
        if (!(this_present_auditId && that_present_auditId))
          return false;
        if (!this.auditId.equals(that.auditId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_auditId = true && (isSetAuditId());
      list.add(present_auditId);
      if (present_auditId)
        list.add(auditId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAuditMerchant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuditId()).compareTo(other.isSetAuditId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuditId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditId, other.auditId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAuditMerchant_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auditId:");
      if (this.auditId == null) {
        sb.append("null");
      } else {
        sb.append(this.auditId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAuditMerchant_argsStandardSchemeFactory implements SchemeFactory {
      public getAuditMerchant_argsStandardScheme getScheme() {
        return new getAuditMerchant_argsStandardScheme();
      }
    }

    private static class getAuditMerchant_argsStandardScheme extends StandardScheme<getAuditMerchant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAuditMerchant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUDIT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.auditId = iprot.readString();
                struct.setAuditIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAuditMerchant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.auditId != null) {
          oprot.writeFieldBegin(AUDIT_ID_FIELD_DESC);
          oprot.writeString(struct.auditId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAuditMerchant_argsTupleSchemeFactory implements SchemeFactory {
      public getAuditMerchant_argsTupleScheme getScheme() {
        return new getAuditMerchant_argsTupleScheme();
      }
    }

    private static class getAuditMerchant_argsTupleScheme extends TupleScheme<getAuditMerchant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAuditMerchant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetAuditId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetAuditId()) {
          oprot.writeString(struct.auditId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAuditMerchant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auditId = iprot.readString();
          struct.setAuditIdIsSet(true);
        }
      }
    }

  }

  public static class getAuditMerchant_result implements org.apache.thrift.TBase<getAuditMerchant_result, getAuditMerchant_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAuditMerchant_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAuditMerchant_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAuditMerchant_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAuditMerchant_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantTempVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantTempVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAuditMerchant_result.class, metaDataMap);
    }

    public getAuditMerchant_result() {
    }

    public getAuditMerchant_result(
      com.froad.thrift.vo.MerchantTempVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAuditMerchant_result(getAuditMerchant_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantTempVo(other.success);
      }
    }

    public getAuditMerchant_result deepCopy() {
      return new getAuditMerchant_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantTempVo getSuccess() {
      return this.success;
    }

    public getAuditMerchant_result setSuccess(com.froad.thrift.vo.MerchantTempVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantTempVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAuditMerchant_result)
        return this.equals((getAuditMerchant_result)that);
      return false;
    }

    public boolean equals(getAuditMerchant_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAuditMerchant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAuditMerchant_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAuditMerchant_resultStandardSchemeFactory implements SchemeFactory {
      public getAuditMerchant_resultStandardScheme getScheme() {
        return new getAuditMerchant_resultStandardScheme();
      }
    }

    private static class getAuditMerchant_resultStandardScheme extends StandardScheme<getAuditMerchant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAuditMerchant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantTempVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAuditMerchant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAuditMerchant_resultTupleSchemeFactory implements SchemeFactory {
      public getAuditMerchant_resultTupleScheme getScheme() {
        return new getAuditMerchant_resultTupleScheme();
      }
    }

    private static class getAuditMerchant_resultTupleScheme extends TupleScheme<getAuditMerchant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAuditMerchant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAuditMerchant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantTempVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantTemp_args implements org.apache.thrift.TBase<getMerchantTemp_args, getMerchantTemp_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantTemp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantTemp_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_TEMP_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantTempVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantTemp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantTemp_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantTempVo merchantTempVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_TEMP_VO((short)1, "merchantTempVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_TEMP_VO
            return MERCHANT_TEMP_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_TEMP_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantTempVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantTempVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantTemp_args.class, metaDataMap);
    }

    public getMerchantTemp_args() {
    }

    public getMerchantTemp_args(
      com.froad.thrift.vo.MerchantTempVo merchantTempVo)
    {
      this();
      this.merchantTempVo = merchantTempVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantTemp_args(getMerchantTemp_args other) {
      if (other.isSetMerchantTempVo()) {
        this.merchantTempVo = new com.froad.thrift.vo.MerchantTempVo(other.merchantTempVo);
      }
    }

    public getMerchantTemp_args deepCopy() {
      return new getMerchantTemp_args(this);
    }

    @Override
    public void clear() {
      this.merchantTempVo = null;
    }

    public com.froad.thrift.vo.MerchantTempVo getMerchantTempVo() {
      return this.merchantTempVo;
    }

    public getMerchantTemp_args setMerchantTempVo(com.froad.thrift.vo.MerchantTempVo merchantTempVo) {
      this.merchantTempVo = merchantTempVo;
      return this;
    }

    public void unsetMerchantTempVo() {
      this.merchantTempVo = null;
    }

    /** Returns true if field merchantTempVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantTempVo() {
      return this.merchantTempVo != null;
    }

    public void setMerchantTempVoIsSet(boolean value) {
      if (!value) {
        this.merchantTempVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_TEMP_VO:
        if (value == null) {
          unsetMerchantTempVo();
        } else {
          setMerchantTempVo((com.froad.thrift.vo.MerchantTempVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_TEMP_VO:
        return getMerchantTempVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_TEMP_VO:
        return isSetMerchantTempVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantTemp_args)
        return this.equals((getMerchantTemp_args)that);
      return false;
    }

    public boolean equals(getMerchantTemp_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantTempVo = true && this.isSetMerchantTempVo();
      boolean that_present_merchantTempVo = true && that.isSetMerchantTempVo();
      if (this_present_merchantTempVo || that_present_merchantTempVo) {
        if (!(this_present_merchantTempVo && that_present_merchantTempVo))
          return false;
        if (!this.merchantTempVo.equals(that.merchantTempVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantTempVo = true && (isSetMerchantTempVo());
      list.add(present_merchantTempVo);
      if (present_merchantTempVo)
        list.add(merchantTempVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantTemp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantTempVo()).compareTo(other.isSetMerchantTempVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantTempVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantTempVo, other.merchantTempVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantTemp_args(");
      boolean first = true;

      sb.append("merchantTempVo:");
      if (this.merchantTempVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantTempVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (merchantTempVo != null) {
        merchantTempVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantTemp_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantTemp_argsStandardScheme getScheme() {
        return new getMerchantTemp_argsStandardScheme();
      }
    }

    private static class getMerchantTemp_argsStandardScheme extends StandardScheme<getMerchantTemp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantTemp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_TEMP_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantTempVo = new com.froad.thrift.vo.MerchantTempVo();
                struct.merchantTempVo.read(iprot);
                struct.setMerchantTempVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantTemp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantTempVo != null) {
          oprot.writeFieldBegin(MERCHANT_TEMP_VO_FIELD_DESC);
          struct.merchantTempVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantTemp_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantTemp_argsTupleScheme getScheme() {
        return new getMerchantTemp_argsTupleScheme();
      }
    }

    private static class getMerchantTemp_argsTupleScheme extends TupleScheme<getMerchantTemp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantTemp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantTempVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantTempVo()) {
          struct.merchantTempVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantTemp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantTempVo = new com.froad.thrift.vo.MerchantTempVo();
          struct.merchantTempVo.read(iprot);
          struct.setMerchantTempVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantTemp_result implements org.apache.thrift.TBase<getMerchantTemp_result, getMerchantTemp_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantTemp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantTemp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantTemp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantTemp_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.MerchantTempVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantTempVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantTemp_result.class, metaDataMap);
    }

    public getMerchantTemp_result() {
    }

    public getMerchantTemp_result(
      List<com.froad.thrift.vo.MerchantTempVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantTemp_result(getMerchantTemp_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.MerchantTempVo> __this__success = new ArrayList<com.froad.thrift.vo.MerchantTempVo>(other.success.size());
        for (com.froad.thrift.vo.MerchantTempVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.MerchantTempVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMerchantTemp_result deepCopy() {
      return new getMerchantTemp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.MerchantTempVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.MerchantTempVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.MerchantTempVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.MerchantTempVo> getSuccess() {
      return this.success;
    }

    public getMerchantTemp_result setSuccess(List<com.froad.thrift.vo.MerchantTempVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.MerchantTempVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantTemp_result)
        return this.equals((getMerchantTemp_result)that);
      return false;
    }

    public boolean equals(getMerchantTemp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantTemp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantTemp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantTemp_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantTemp_resultStandardScheme getScheme() {
        return new getMerchantTemp_resultStandardScheme();
      }
    }

    private static class getMerchantTemp_resultStandardScheme extends StandardScheme<getMerchantTemp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantTemp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.MerchantTempVo>(_list0.size);
                  com.froad.thrift.vo.MerchantTempVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.MerchantTempVo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantTemp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.MerchantTempVo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantTemp_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantTemp_resultTupleScheme getScheme() {
        return new getMerchantTemp_resultTupleScheme();
      }
    }

    private static class getMerchantTemp_resultTupleScheme extends TupleScheme<getMerchantTemp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantTemp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.MerchantTempVo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantTemp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.MerchantTempVo>(_list5.size);
            com.froad.thrift.vo.MerchantTempVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.MerchantTempVo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
