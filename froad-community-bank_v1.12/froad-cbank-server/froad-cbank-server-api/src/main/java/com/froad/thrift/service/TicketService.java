/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class TicketService {

  /**
   * 券模块对外接口
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 验证券接口
     * 
     * @param requestVo
     */
    public com.froad.thrift.vo.ticket.TicketVerifyResponseVo verifyTickets(com.froad.thrift.vo.ticket.TicketVerifyRequestVo requestVo) throws org.apache.thrift.TException;

    /**
     * 验证券接口(相同商品合并成一个)
     * 
     * @param requestVo
     */
    public com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo verifyGroupTicketsOfMerger(com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo requestVo) throws org.apache.thrift.TException;

    /**
     * 查找券详细信息
     * 
     * @param requestVo
     */
    public com.froad.thrift.vo.ticket.TicketDetailResponseVo getTicketDetails(com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo) throws org.apache.thrift.TException;

    /**
     * 查找个人版券详细信息
     * 
     * @param requestVo
     */
    public com.froad.thrift.vo.ticket.TicketProductResponseVo getTicketProductDetails(com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo) throws org.apache.thrift.TException;

    /**
     * 延长券有效期
     *  endDate时间格式 - 类似System.currentTimeMillis()
     * 
     * @param ticketId
     * @param endDate
     */
    public com.froad.thrift.vo.ResultVo extendEndDate(String ticketId, long endDate) throws org.apache.thrift.TException;

    /**
     * 延长指定商品id的券有效期
     *  endDate时间格式 - 类似System.currentTimeMillis()
     * 
     * @param productId
     * @param endDate
     */
    public com.froad.thrift.vo.ResultVo extendEndDateByProductId(String productId, long endDate) throws org.apache.thrift.TException;

    /**
     * 获取券列表
     * 
     * @param ticketListRequestVo
     */
    public com.froad.thrift.vo.ticket.TicketListResponseVo getTicketList(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) throws org.apache.thrift.TException;

    /**
     * 导出券列表
     * 
     * @param ticketListRequestVo
     */
    public com.froad.thrift.vo.ExportResultRes exportTickets(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) throws org.apache.thrift.TException;

    /**
     * 获取商户验码记录
     * 
     * @param ticketListRequestVo
     */
    public com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo getVerifyTicketListByPage(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) throws org.apache.thrift.TException;

    /**
     * 获取券列表(相同商品合并成一个)
     * 
     * @param ticketListRequestVo
     */
    public com.froad.thrift.vo.ticket.TicketListResponseVo getTicketListOfMerger(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) throws org.apache.thrift.TException;

    /**
     * 1) resource = 3，根据券ID获取该会员所有有效券列表
     * 2) resource = 2，根据券ID获取该会员下所有有效团购券
     * 3) resource = 1，根据券ID获取券该会员下所有有效预售券
     * 
     * @param requestVo
     */
    public com.froad.thrift.vo.ticket.TicketListResponseVo getRelatedTickets(com.froad.thrift.vo.ticket.TicketRelatedRequestVo requestVo) throws org.apache.thrift.TException;

    /**
     * 查询券信息
     * 
     * @param ticketDetailVo
     */
    public List<com.froad.thrift.vo.ticket.TicketDetailVo> getTicketDetail(com.froad.thrift.vo.ticket.TicketDetailVo ticketDetailVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void verifyTickets(com.froad.thrift.vo.ticket.TicketVerifyRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifyGroupTicketsOfMerger(com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTicketDetails(com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTicketProductDetails(com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void extendEndDate(String ticketId, long endDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void extendEndDateByProductId(String productId, long endDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTicketList(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void exportTickets(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVerifyTicketListByPage(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTicketListOfMerger(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRelatedTickets(com.froad.thrift.vo.ticket.TicketRelatedRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTicketDetail(com.froad.thrift.vo.ticket.TicketDetailVo ticketDetailVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.ticket.TicketVerifyResponseVo verifyTickets(com.froad.thrift.vo.ticket.TicketVerifyRequestVo requestVo) throws org.apache.thrift.TException
    {
      send_verifyTickets(requestVo);
      return recv_verifyTickets();
    }

    public void send_verifyTickets(com.froad.thrift.vo.ticket.TicketVerifyRequestVo requestVo) throws org.apache.thrift.TException
    {
      verifyTickets_args args = new verifyTickets_args();
      args.setRequestVo(requestVo);
      sendBase("verifyTickets", args);
    }

    public com.froad.thrift.vo.ticket.TicketVerifyResponseVo recv_verifyTickets() throws org.apache.thrift.TException
    {
      verifyTickets_result result = new verifyTickets_result();
      receiveBase(result, "verifyTickets");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyTickets failed: unknown result");
    }

    public com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo verifyGroupTicketsOfMerger(com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo requestVo) throws org.apache.thrift.TException
    {
      send_verifyGroupTicketsOfMerger(requestVo);
      return recv_verifyGroupTicketsOfMerger();
    }

    public void send_verifyGroupTicketsOfMerger(com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo requestVo) throws org.apache.thrift.TException
    {
      verifyGroupTicketsOfMerger_args args = new verifyGroupTicketsOfMerger_args();
      args.setRequestVo(requestVo);
      sendBase("verifyGroupTicketsOfMerger", args);
    }

    public com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo recv_verifyGroupTicketsOfMerger() throws org.apache.thrift.TException
    {
      verifyGroupTicketsOfMerger_result result = new verifyGroupTicketsOfMerger_result();
      receiveBase(result, "verifyGroupTicketsOfMerger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyGroupTicketsOfMerger failed: unknown result");
    }

    public com.froad.thrift.vo.ticket.TicketDetailResponseVo getTicketDetails(com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo) throws org.apache.thrift.TException
    {
      send_getTicketDetails(requestVo);
      return recv_getTicketDetails();
    }

    public void send_getTicketDetails(com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo) throws org.apache.thrift.TException
    {
      getTicketDetails_args args = new getTicketDetails_args();
      args.setRequestVo(requestVo);
      sendBase("getTicketDetails", args);
    }

    public com.froad.thrift.vo.ticket.TicketDetailResponseVo recv_getTicketDetails() throws org.apache.thrift.TException
    {
      getTicketDetails_result result = new getTicketDetails_result();
      receiveBase(result, "getTicketDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTicketDetails failed: unknown result");
    }

    public com.froad.thrift.vo.ticket.TicketProductResponseVo getTicketProductDetails(com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo) throws org.apache.thrift.TException
    {
      send_getTicketProductDetails(requestVo);
      return recv_getTicketProductDetails();
    }

    public void send_getTicketProductDetails(com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo) throws org.apache.thrift.TException
    {
      getTicketProductDetails_args args = new getTicketProductDetails_args();
      args.setRequestVo(requestVo);
      sendBase("getTicketProductDetails", args);
    }

    public com.froad.thrift.vo.ticket.TicketProductResponseVo recv_getTicketProductDetails() throws org.apache.thrift.TException
    {
      getTicketProductDetails_result result = new getTicketProductDetails_result();
      receiveBase(result, "getTicketProductDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTicketProductDetails failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo extendEndDate(String ticketId, long endDate) throws org.apache.thrift.TException
    {
      send_extendEndDate(ticketId, endDate);
      return recv_extendEndDate();
    }

    public void send_extendEndDate(String ticketId, long endDate) throws org.apache.thrift.TException
    {
      extendEndDate_args args = new extendEndDate_args();
      args.setTicketId(ticketId);
      args.setEndDate(endDate);
      sendBase("extendEndDate", args);
    }

    public com.froad.thrift.vo.ResultVo recv_extendEndDate() throws org.apache.thrift.TException
    {
      extendEndDate_result result = new extendEndDate_result();
      receiveBase(result, "extendEndDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "extendEndDate failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo extendEndDateByProductId(String productId, long endDate) throws org.apache.thrift.TException
    {
      send_extendEndDateByProductId(productId, endDate);
      return recv_extendEndDateByProductId();
    }

    public void send_extendEndDateByProductId(String productId, long endDate) throws org.apache.thrift.TException
    {
      extendEndDateByProductId_args args = new extendEndDateByProductId_args();
      args.setProductId(productId);
      args.setEndDate(endDate);
      sendBase("extendEndDateByProductId", args);
    }

    public com.froad.thrift.vo.ResultVo recv_extendEndDateByProductId() throws org.apache.thrift.TException
    {
      extendEndDateByProductId_result result = new extendEndDateByProductId_result();
      receiveBase(result, "extendEndDateByProductId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "extendEndDateByProductId failed: unknown result");
    }

    public com.froad.thrift.vo.ticket.TicketListResponseVo getTicketList(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) throws org.apache.thrift.TException
    {
      send_getTicketList(ticketListRequestVo);
      return recv_getTicketList();
    }

    public void send_getTicketList(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) throws org.apache.thrift.TException
    {
      getTicketList_args args = new getTicketList_args();
      args.setTicketListRequestVo(ticketListRequestVo);
      sendBase("getTicketList", args);
    }

    public com.froad.thrift.vo.ticket.TicketListResponseVo recv_getTicketList() throws org.apache.thrift.TException
    {
      getTicketList_result result = new getTicketList_result();
      receiveBase(result, "getTicketList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTicketList failed: unknown result");
    }

    public com.froad.thrift.vo.ExportResultRes exportTickets(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) throws org.apache.thrift.TException
    {
      send_exportTickets(ticketListRequestVo);
      return recv_exportTickets();
    }

    public void send_exportTickets(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) throws org.apache.thrift.TException
    {
      exportTickets_args args = new exportTickets_args();
      args.setTicketListRequestVo(ticketListRequestVo);
      sendBase("exportTickets", args);
    }

    public com.froad.thrift.vo.ExportResultRes recv_exportTickets() throws org.apache.thrift.TException
    {
      exportTickets_result result = new exportTickets_result();
      receiveBase(result, "exportTickets");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exportTickets failed: unknown result");
    }

    public com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo getVerifyTicketListByPage(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) throws org.apache.thrift.TException
    {
      send_getVerifyTicketListByPage(ticketListRequestVo);
      return recv_getVerifyTicketListByPage();
    }

    public void send_getVerifyTicketListByPage(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) throws org.apache.thrift.TException
    {
      getVerifyTicketListByPage_args args = new getVerifyTicketListByPage_args();
      args.setTicketListRequestVo(ticketListRequestVo);
      sendBase("getVerifyTicketListByPage", args);
    }

    public com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo recv_getVerifyTicketListByPage() throws org.apache.thrift.TException
    {
      getVerifyTicketListByPage_result result = new getVerifyTicketListByPage_result();
      receiveBase(result, "getVerifyTicketListByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVerifyTicketListByPage failed: unknown result");
    }

    public com.froad.thrift.vo.ticket.TicketListResponseVo getTicketListOfMerger(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) throws org.apache.thrift.TException
    {
      send_getTicketListOfMerger(ticketListRequestVo);
      return recv_getTicketListOfMerger();
    }

    public void send_getTicketListOfMerger(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) throws org.apache.thrift.TException
    {
      getTicketListOfMerger_args args = new getTicketListOfMerger_args();
      args.setTicketListRequestVo(ticketListRequestVo);
      sendBase("getTicketListOfMerger", args);
    }

    public com.froad.thrift.vo.ticket.TicketListResponseVo recv_getTicketListOfMerger() throws org.apache.thrift.TException
    {
      getTicketListOfMerger_result result = new getTicketListOfMerger_result();
      receiveBase(result, "getTicketListOfMerger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTicketListOfMerger failed: unknown result");
    }

    public com.froad.thrift.vo.ticket.TicketListResponseVo getRelatedTickets(com.froad.thrift.vo.ticket.TicketRelatedRequestVo requestVo) throws org.apache.thrift.TException
    {
      send_getRelatedTickets(requestVo);
      return recv_getRelatedTickets();
    }

    public void send_getRelatedTickets(com.froad.thrift.vo.ticket.TicketRelatedRequestVo requestVo) throws org.apache.thrift.TException
    {
      getRelatedTickets_args args = new getRelatedTickets_args();
      args.setRequestVo(requestVo);
      sendBase("getRelatedTickets", args);
    }

    public com.froad.thrift.vo.ticket.TicketListResponseVo recv_getRelatedTickets() throws org.apache.thrift.TException
    {
      getRelatedTickets_result result = new getRelatedTickets_result();
      receiveBase(result, "getRelatedTickets");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRelatedTickets failed: unknown result");
    }

    public List<com.froad.thrift.vo.ticket.TicketDetailVo> getTicketDetail(com.froad.thrift.vo.ticket.TicketDetailVo ticketDetailVo) throws org.apache.thrift.TException
    {
      send_getTicketDetail(ticketDetailVo);
      return recv_getTicketDetail();
    }

    public void send_getTicketDetail(com.froad.thrift.vo.ticket.TicketDetailVo ticketDetailVo) throws org.apache.thrift.TException
    {
      getTicketDetail_args args = new getTicketDetail_args();
      args.setTicketDetailVo(ticketDetailVo);
      sendBase("getTicketDetail", args);
    }

    public List<com.froad.thrift.vo.ticket.TicketDetailVo> recv_getTicketDetail() throws org.apache.thrift.TException
    {
      getTicketDetail_result result = new getTicketDetail_result();
      receiveBase(result, "getTicketDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTicketDetail failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void verifyTickets(com.froad.thrift.vo.ticket.TicketVerifyRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyTickets_call method_call = new verifyTickets_call(requestVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyTickets_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ticket.TicketVerifyRequestVo requestVo;
      public verifyTickets_call(com.froad.thrift.vo.ticket.TicketVerifyRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestVo = requestVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyTickets", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyTickets_args args = new verifyTickets_args();
        args.setRequestVo(requestVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ticket.TicketVerifyResponseVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyTickets();
      }
    }

    public void verifyGroupTicketsOfMerger(com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyGroupTicketsOfMerger_call method_call = new verifyGroupTicketsOfMerger_call(requestVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyGroupTicketsOfMerger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo requestVo;
      public verifyGroupTicketsOfMerger_call(com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestVo = requestVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyGroupTicketsOfMerger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyGroupTicketsOfMerger_args args = new verifyGroupTicketsOfMerger_args();
        args.setRequestVo(requestVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyGroupTicketsOfMerger();
      }
    }

    public void getTicketDetails(com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTicketDetails_call method_call = new getTicketDetails_call(requestVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTicketDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo;
      public getTicketDetails_call(com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestVo = requestVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTicketDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTicketDetails_args args = new getTicketDetails_args();
        args.setRequestVo(requestVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ticket.TicketDetailResponseVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTicketDetails();
      }
    }

    public void getTicketProductDetails(com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTicketProductDetails_call method_call = new getTicketProductDetails_call(requestVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTicketProductDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo;
      public getTicketProductDetails_call(com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestVo = requestVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTicketProductDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTicketProductDetails_args args = new getTicketProductDetails_args();
        args.setRequestVo(requestVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ticket.TicketProductResponseVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTicketProductDetails();
      }
    }

    public void extendEndDate(String ticketId, long endDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      extendEndDate_call method_call = new extendEndDate_call(ticketId, endDate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class extendEndDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ticketId;
      private long endDate;
      public extendEndDate_call(String ticketId, long endDate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ticketId = ticketId;
        this.endDate = endDate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("extendEndDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        extendEndDate_args args = new extendEndDate_args();
        args.setTicketId(ticketId);
        args.setEndDate(endDate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_extendEndDate();
      }
    }

    public void extendEndDateByProductId(String productId, long endDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      extendEndDateByProductId_call method_call = new extendEndDateByProductId_call(productId, endDate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class extendEndDateByProductId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String productId;
      private long endDate;
      public extendEndDateByProductId_call(String productId, long endDate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
        this.endDate = endDate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("extendEndDateByProductId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        extendEndDateByProductId_args args = new extendEndDateByProductId_args();
        args.setProductId(productId);
        args.setEndDate(endDate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_extendEndDateByProductId();
      }
    }

    public void getTicketList(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTicketList_call method_call = new getTicketList_call(ticketListRequestVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTicketList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo;
      public getTicketList_call(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ticketListRequestVo = ticketListRequestVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTicketList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTicketList_args args = new getTicketList_args();
        args.setTicketListRequestVo(ticketListRequestVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ticket.TicketListResponseVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTicketList();
      }
    }

    public void exportTickets(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exportTickets_call method_call = new exportTickets_call(ticketListRequestVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exportTickets_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo;
      public exportTickets_call(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ticketListRequestVo = ticketListRequestVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportTickets", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exportTickets_args args = new exportTickets_args();
        args.setTicketListRequestVo(ticketListRequestVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ExportResultRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exportTickets();
      }
    }

    public void getVerifyTicketListByPage(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVerifyTicketListByPage_call method_call = new getVerifyTicketListByPage_call(ticketListRequestVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVerifyTicketListByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo;
      public getVerifyTicketListByPage_call(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ticketListRequestVo = ticketListRequestVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVerifyTicketListByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVerifyTicketListByPage_args args = new getVerifyTicketListByPage_args();
        args.setTicketListRequestVo(ticketListRequestVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVerifyTicketListByPage();
      }
    }

    public void getTicketListOfMerger(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTicketListOfMerger_call method_call = new getTicketListOfMerger_call(ticketListRequestVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTicketListOfMerger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo;
      public getTicketListOfMerger_call(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ticketListRequestVo = ticketListRequestVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTicketListOfMerger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTicketListOfMerger_args args = new getTicketListOfMerger_args();
        args.setTicketListRequestVo(ticketListRequestVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ticket.TicketListResponseVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTicketListOfMerger();
      }
    }

    public void getRelatedTickets(com.froad.thrift.vo.ticket.TicketRelatedRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRelatedTickets_call method_call = new getRelatedTickets_call(requestVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRelatedTickets_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ticket.TicketRelatedRequestVo requestVo;
      public getRelatedTickets_call(com.froad.thrift.vo.ticket.TicketRelatedRequestVo requestVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestVo = requestVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRelatedTickets", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRelatedTickets_args args = new getRelatedTickets_args();
        args.setRequestVo(requestVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ticket.TicketListResponseVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRelatedTickets();
      }
    }

    public void getTicketDetail(com.froad.thrift.vo.ticket.TicketDetailVo ticketDetailVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTicketDetail_call method_call = new getTicketDetail_call(ticketDetailVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTicketDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.ticket.TicketDetailVo ticketDetailVo;
      public getTicketDetail_call(com.froad.thrift.vo.ticket.TicketDetailVo ticketDetailVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ticketDetailVo = ticketDetailVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTicketDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTicketDetail_args args = new getTicketDetail_args();
        args.setTicketDetailVo(ticketDetailVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.ticket.TicketDetailVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTicketDetail();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("verifyTickets", new verifyTickets());
      processMap.put("verifyGroupTicketsOfMerger", new verifyGroupTicketsOfMerger());
      processMap.put("getTicketDetails", new getTicketDetails());
      processMap.put("getTicketProductDetails", new getTicketProductDetails());
      processMap.put("extendEndDate", new extendEndDate());
      processMap.put("extendEndDateByProductId", new extendEndDateByProductId());
      processMap.put("getTicketList", new getTicketList());
      processMap.put("exportTickets", new exportTickets());
      processMap.put("getVerifyTicketListByPage", new getVerifyTicketListByPage());
      processMap.put("getTicketListOfMerger", new getTicketListOfMerger());
      processMap.put("getRelatedTickets", new getRelatedTickets());
      processMap.put("getTicketDetail", new getTicketDetail());
      return processMap;
    }

    public static class verifyTickets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyTickets_args> {
      public verifyTickets() {
        super("verifyTickets");
      }

      public verifyTickets_args getEmptyArgsInstance() {
        return new verifyTickets_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyTickets_result getResult(I iface, verifyTickets_args args) throws org.apache.thrift.TException {
        verifyTickets_result result = new verifyTickets_result();
        result.success = iface.verifyTickets(args.requestVo);
        return result;
      }
    }

    public static class verifyGroupTicketsOfMerger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyGroupTicketsOfMerger_args> {
      public verifyGroupTicketsOfMerger() {
        super("verifyGroupTicketsOfMerger");
      }

      public verifyGroupTicketsOfMerger_args getEmptyArgsInstance() {
        return new verifyGroupTicketsOfMerger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifyGroupTicketsOfMerger_result getResult(I iface, verifyGroupTicketsOfMerger_args args) throws org.apache.thrift.TException {
        verifyGroupTicketsOfMerger_result result = new verifyGroupTicketsOfMerger_result();
        result.success = iface.verifyGroupTicketsOfMerger(args.requestVo);
        return result;
      }
    }

    public static class getTicketDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTicketDetails_args> {
      public getTicketDetails() {
        super("getTicketDetails");
      }

      public getTicketDetails_args getEmptyArgsInstance() {
        return new getTicketDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTicketDetails_result getResult(I iface, getTicketDetails_args args) throws org.apache.thrift.TException {
        getTicketDetails_result result = new getTicketDetails_result();
        result.success = iface.getTicketDetails(args.requestVo);
        return result;
      }
    }

    public static class getTicketProductDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTicketProductDetails_args> {
      public getTicketProductDetails() {
        super("getTicketProductDetails");
      }

      public getTicketProductDetails_args getEmptyArgsInstance() {
        return new getTicketProductDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTicketProductDetails_result getResult(I iface, getTicketProductDetails_args args) throws org.apache.thrift.TException {
        getTicketProductDetails_result result = new getTicketProductDetails_result();
        result.success = iface.getTicketProductDetails(args.requestVo);
        return result;
      }
    }

    public static class extendEndDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, extendEndDate_args> {
      public extendEndDate() {
        super("extendEndDate");
      }

      public extendEndDate_args getEmptyArgsInstance() {
        return new extendEndDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public extendEndDate_result getResult(I iface, extendEndDate_args args) throws org.apache.thrift.TException {
        extendEndDate_result result = new extendEndDate_result();
        result.success = iface.extendEndDate(args.ticketId, args.endDate);
        return result;
      }
    }

    public static class extendEndDateByProductId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, extendEndDateByProductId_args> {
      public extendEndDateByProductId() {
        super("extendEndDateByProductId");
      }

      public extendEndDateByProductId_args getEmptyArgsInstance() {
        return new extendEndDateByProductId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public extendEndDateByProductId_result getResult(I iface, extendEndDateByProductId_args args) throws org.apache.thrift.TException {
        extendEndDateByProductId_result result = new extendEndDateByProductId_result();
        result.success = iface.extendEndDateByProductId(args.productId, args.endDate);
        return result;
      }
    }

    public static class getTicketList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTicketList_args> {
      public getTicketList() {
        super("getTicketList");
      }

      public getTicketList_args getEmptyArgsInstance() {
        return new getTicketList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTicketList_result getResult(I iface, getTicketList_args args) throws org.apache.thrift.TException {
        getTicketList_result result = new getTicketList_result();
        result.success = iface.getTicketList(args.ticketListRequestVo);
        return result;
      }
    }

    public static class exportTickets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportTickets_args> {
      public exportTickets() {
        super("exportTickets");
      }

      public exportTickets_args getEmptyArgsInstance() {
        return new exportTickets_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exportTickets_result getResult(I iface, exportTickets_args args) throws org.apache.thrift.TException {
        exportTickets_result result = new exportTickets_result();
        result.success = iface.exportTickets(args.ticketListRequestVo);
        return result;
      }
    }

    public static class getVerifyTicketListByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVerifyTicketListByPage_args> {
      public getVerifyTicketListByPage() {
        super("getVerifyTicketListByPage");
      }

      public getVerifyTicketListByPage_args getEmptyArgsInstance() {
        return new getVerifyTicketListByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVerifyTicketListByPage_result getResult(I iface, getVerifyTicketListByPage_args args) throws org.apache.thrift.TException {
        getVerifyTicketListByPage_result result = new getVerifyTicketListByPage_result();
        result.success = iface.getVerifyTicketListByPage(args.ticketListRequestVo);
        return result;
      }
    }

    public static class getTicketListOfMerger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTicketListOfMerger_args> {
      public getTicketListOfMerger() {
        super("getTicketListOfMerger");
      }

      public getTicketListOfMerger_args getEmptyArgsInstance() {
        return new getTicketListOfMerger_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTicketListOfMerger_result getResult(I iface, getTicketListOfMerger_args args) throws org.apache.thrift.TException {
        getTicketListOfMerger_result result = new getTicketListOfMerger_result();
        result.success = iface.getTicketListOfMerger(args.ticketListRequestVo);
        return result;
      }
    }

    public static class getRelatedTickets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRelatedTickets_args> {
      public getRelatedTickets() {
        super("getRelatedTickets");
      }

      public getRelatedTickets_args getEmptyArgsInstance() {
        return new getRelatedTickets_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRelatedTickets_result getResult(I iface, getRelatedTickets_args args) throws org.apache.thrift.TException {
        getRelatedTickets_result result = new getRelatedTickets_result();
        result.success = iface.getRelatedTickets(args.requestVo);
        return result;
      }
    }

    public static class getTicketDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTicketDetail_args> {
      public getTicketDetail() {
        super("getTicketDetail");
      }

      public getTicketDetail_args getEmptyArgsInstance() {
        return new getTicketDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTicketDetail_result getResult(I iface, getTicketDetail_args args) throws org.apache.thrift.TException {
        getTicketDetail_result result = new getTicketDetail_result();
        result.success = iface.getTicketDetail(args.ticketDetailVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("verifyTickets", new verifyTickets());
      processMap.put("verifyGroupTicketsOfMerger", new verifyGroupTicketsOfMerger());
      processMap.put("getTicketDetails", new getTicketDetails());
      processMap.put("getTicketProductDetails", new getTicketProductDetails());
      processMap.put("extendEndDate", new extendEndDate());
      processMap.put("extendEndDateByProductId", new extendEndDateByProductId());
      processMap.put("getTicketList", new getTicketList());
      processMap.put("exportTickets", new exportTickets());
      processMap.put("getVerifyTicketListByPage", new getVerifyTicketListByPage());
      processMap.put("getTicketListOfMerger", new getTicketListOfMerger());
      processMap.put("getRelatedTickets", new getRelatedTickets());
      processMap.put("getTicketDetail", new getTicketDetail());
      return processMap;
    }

    public static class verifyTickets<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyTickets_args, com.froad.thrift.vo.ticket.TicketVerifyResponseVo> {
      public verifyTickets() {
        super("verifyTickets");
      }

      public verifyTickets_args getEmptyArgsInstance() {
        return new verifyTickets_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketVerifyResponseVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketVerifyResponseVo>() { 
          public void onComplete(com.froad.thrift.vo.ticket.TicketVerifyResponseVo o) {
            verifyTickets_result result = new verifyTickets_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifyTickets_result result = new verifyTickets_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyTickets_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketVerifyResponseVo> resultHandler) throws TException {
        iface.verifyTickets(args.requestVo,resultHandler);
      }
    }

    public static class verifyGroupTicketsOfMerger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyGroupTicketsOfMerger_args, com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo> {
      public verifyGroupTicketsOfMerger() {
        super("verifyGroupTicketsOfMerger");
      }

      public verifyGroupTicketsOfMerger_args getEmptyArgsInstance() {
        return new verifyGroupTicketsOfMerger_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo>() { 
          public void onComplete(com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo o) {
            verifyGroupTicketsOfMerger_result result = new verifyGroupTicketsOfMerger_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifyGroupTicketsOfMerger_result result = new verifyGroupTicketsOfMerger_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyGroupTicketsOfMerger_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo> resultHandler) throws TException {
        iface.verifyGroupTicketsOfMerger(args.requestVo,resultHandler);
      }
    }

    public static class getTicketDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTicketDetails_args, com.froad.thrift.vo.ticket.TicketDetailResponseVo> {
      public getTicketDetails() {
        super("getTicketDetails");
      }

      public getTicketDetails_args getEmptyArgsInstance() {
        return new getTicketDetails_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketDetailResponseVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketDetailResponseVo>() { 
          public void onComplete(com.froad.thrift.vo.ticket.TicketDetailResponseVo o) {
            getTicketDetails_result result = new getTicketDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTicketDetails_result result = new getTicketDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTicketDetails_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketDetailResponseVo> resultHandler) throws TException {
        iface.getTicketDetails(args.requestVo,resultHandler);
      }
    }

    public static class getTicketProductDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTicketProductDetails_args, com.froad.thrift.vo.ticket.TicketProductResponseVo> {
      public getTicketProductDetails() {
        super("getTicketProductDetails");
      }

      public getTicketProductDetails_args getEmptyArgsInstance() {
        return new getTicketProductDetails_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketProductResponseVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketProductResponseVo>() { 
          public void onComplete(com.froad.thrift.vo.ticket.TicketProductResponseVo o) {
            getTicketProductDetails_result result = new getTicketProductDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTicketProductDetails_result result = new getTicketProductDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTicketProductDetails_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketProductResponseVo> resultHandler) throws TException {
        iface.getTicketProductDetails(args.requestVo,resultHandler);
      }
    }

    public static class extendEndDate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, extendEndDate_args, com.froad.thrift.vo.ResultVo> {
      public extendEndDate() {
        super("extendEndDate");
      }

      public extendEndDate_args getEmptyArgsInstance() {
        return new extendEndDate_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            extendEndDate_result result = new extendEndDate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            extendEndDate_result result = new extendEndDate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, extendEndDate_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.extendEndDate(args.ticketId, args.endDate,resultHandler);
      }
    }

    public static class extendEndDateByProductId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, extendEndDateByProductId_args, com.froad.thrift.vo.ResultVo> {
      public extendEndDateByProductId() {
        super("extendEndDateByProductId");
      }

      public extendEndDateByProductId_args getEmptyArgsInstance() {
        return new extendEndDateByProductId_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            extendEndDateByProductId_result result = new extendEndDateByProductId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            extendEndDateByProductId_result result = new extendEndDateByProductId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, extendEndDateByProductId_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.extendEndDateByProductId(args.productId, args.endDate,resultHandler);
      }
    }

    public static class getTicketList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTicketList_args, com.froad.thrift.vo.ticket.TicketListResponseVo> {
      public getTicketList() {
        super("getTicketList");
      }

      public getTicketList_args getEmptyArgsInstance() {
        return new getTicketList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketListResponseVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketListResponseVo>() { 
          public void onComplete(com.froad.thrift.vo.ticket.TicketListResponseVo o) {
            getTicketList_result result = new getTicketList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTicketList_result result = new getTicketList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTicketList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketListResponseVo> resultHandler) throws TException {
        iface.getTicketList(args.ticketListRequestVo,resultHandler);
      }
    }

    public static class exportTickets<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exportTickets_args, com.froad.thrift.vo.ExportResultRes> {
      public exportTickets() {
        super("exportTickets");
      }

      public exportTickets_args getEmptyArgsInstance() {
        return new exportTickets_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes>() { 
          public void onComplete(com.froad.thrift.vo.ExportResultRes o) {
            exportTickets_result result = new exportTickets_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            exportTickets_result result = new exportTickets_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exportTickets_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ExportResultRes> resultHandler) throws TException {
        iface.exportTickets(args.ticketListRequestVo,resultHandler);
      }
    }

    public static class getVerifyTicketListByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVerifyTicketListByPage_args, com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo> {
      public getVerifyTicketListByPage() {
        super("getVerifyTicketListByPage");
      }

      public getVerifyTicketListByPage_args getEmptyArgsInstance() {
        return new getVerifyTicketListByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo>() { 
          public void onComplete(com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo o) {
            getVerifyTicketListByPage_result result = new getVerifyTicketListByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVerifyTicketListByPage_result result = new getVerifyTicketListByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVerifyTicketListByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo> resultHandler) throws TException {
        iface.getVerifyTicketListByPage(args.ticketListRequestVo,resultHandler);
      }
    }

    public static class getTicketListOfMerger<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTicketListOfMerger_args, com.froad.thrift.vo.ticket.TicketListResponseVo> {
      public getTicketListOfMerger() {
        super("getTicketListOfMerger");
      }

      public getTicketListOfMerger_args getEmptyArgsInstance() {
        return new getTicketListOfMerger_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketListResponseVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketListResponseVo>() { 
          public void onComplete(com.froad.thrift.vo.ticket.TicketListResponseVo o) {
            getTicketListOfMerger_result result = new getTicketListOfMerger_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTicketListOfMerger_result result = new getTicketListOfMerger_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTicketListOfMerger_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketListResponseVo> resultHandler) throws TException {
        iface.getTicketListOfMerger(args.ticketListRequestVo,resultHandler);
      }
    }

    public static class getRelatedTickets<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRelatedTickets_args, com.froad.thrift.vo.ticket.TicketListResponseVo> {
      public getRelatedTickets() {
        super("getRelatedTickets");
      }

      public getRelatedTickets_args getEmptyArgsInstance() {
        return new getRelatedTickets_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketListResponseVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketListResponseVo>() { 
          public void onComplete(com.froad.thrift.vo.ticket.TicketListResponseVo o) {
            getRelatedTickets_result result = new getRelatedTickets_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRelatedTickets_result result = new getRelatedTickets_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRelatedTickets_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ticket.TicketListResponseVo> resultHandler) throws TException {
        iface.getRelatedTickets(args.requestVo,resultHandler);
      }
    }

    public static class getTicketDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTicketDetail_args, List<com.froad.thrift.vo.ticket.TicketDetailVo>> {
      public getTicketDetail() {
        super("getTicketDetail");
      }

      public getTicketDetail_args getEmptyArgsInstance() {
        return new getTicketDetail_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.ticket.TicketDetailVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.ticket.TicketDetailVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.ticket.TicketDetailVo> o) {
            getTicketDetail_result result = new getTicketDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTicketDetail_result result = new getTicketDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTicketDetail_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.ticket.TicketDetailVo>> resultHandler) throws TException {
        iface.getTicketDetail(args.ticketDetailVo,resultHandler);
      }
    }

  }

  public static class verifyTickets_args implements org.apache.thrift.TBase<verifyTickets_args, verifyTickets_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyTickets_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyTickets_args");

    private static final org.apache.thrift.protocol.TField REQUEST_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("requestVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyTickets_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyTickets_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketVerifyRequestVo requestVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_VO((short)1, "requestVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_VO
            return REQUEST_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_VO, new org.apache.thrift.meta_data.FieldMetaData("requestVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketVerifyRequestVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyTickets_args.class, metaDataMap);
    }

    public verifyTickets_args() {
    }

    public verifyTickets_args(
      com.froad.thrift.vo.ticket.TicketVerifyRequestVo requestVo)
    {
      this();
      this.requestVo = requestVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyTickets_args(verifyTickets_args other) {
      if (other.isSetRequestVo()) {
        this.requestVo = new com.froad.thrift.vo.ticket.TicketVerifyRequestVo(other.requestVo);
      }
    }

    public verifyTickets_args deepCopy() {
      return new verifyTickets_args(this);
    }

    @Override
    public void clear() {
      this.requestVo = null;
    }

    public com.froad.thrift.vo.ticket.TicketVerifyRequestVo getRequestVo() {
      return this.requestVo;
    }

    public verifyTickets_args setRequestVo(com.froad.thrift.vo.ticket.TicketVerifyRequestVo requestVo) {
      this.requestVo = requestVo;
      return this;
    }

    public void unsetRequestVo() {
      this.requestVo = null;
    }

    /** Returns true if field requestVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestVo() {
      return this.requestVo != null;
    }

    public void setRequestVoIsSet(boolean value) {
      if (!value) {
        this.requestVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_VO:
        if (value == null) {
          unsetRequestVo();
        } else {
          setRequestVo((com.froad.thrift.vo.ticket.TicketVerifyRequestVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_VO:
        return getRequestVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_VO:
        return isSetRequestVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyTickets_args)
        return this.equals((verifyTickets_args)that);
      return false;
    }

    public boolean equals(verifyTickets_args that) {
      if (that == null)
        return false;

      boolean this_present_requestVo = true && this.isSetRequestVo();
      boolean that_present_requestVo = true && that.isSetRequestVo();
      if (this_present_requestVo || that_present_requestVo) {
        if (!(this_present_requestVo && that_present_requestVo))
          return false;
        if (!this.requestVo.equals(that.requestVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestVo = true && (isSetRequestVo());
      list.add(present_requestVo);
      if (present_requestVo)
        list.add(requestVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyTickets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestVo()).compareTo(other.isSetRequestVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestVo, other.requestVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyTickets_args(");
      boolean first = true;

      sb.append("requestVo:");
      if (this.requestVo == null) {
        sb.append("null");
      } else {
        sb.append(this.requestVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (requestVo != null) {
        requestVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyTickets_argsStandardSchemeFactory implements SchemeFactory {
      public verifyTickets_argsStandardScheme getScheme() {
        return new verifyTickets_argsStandardScheme();
      }
    }

    private static class verifyTickets_argsStandardScheme extends StandardScheme<verifyTickets_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyTickets_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.requestVo = new com.froad.thrift.vo.ticket.TicketVerifyRequestVo();
                struct.requestVo.read(iprot);
                struct.setRequestVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyTickets_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestVo != null) {
          oprot.writeFieldBegin(REQUEST_VO_FIELD_DESC);
          struct.requestVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyTickets_argsTupleSchemeFactory implements SchemeFactory {
      public verifyTickets_argsTupleScheme getScheme() {
        return new verifyTickets_argsTupleScheme();
      }
    }

    private static class verifyTickets_argsTupleScheme extends TupleScheme<verifyTickets_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyTickets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestVo()) {
          struct.requestVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyTickets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestVo = new com.froad.thrift.vo.ticket.TicketVerifyRequestVo();
          struct.requestVo.read(iprot);
          struct.setRequestVoIsSet(true);
        }
      }
    }

  }

  public static class verifyTickets_result implements org.apache.thrift.TBase<verifyTickets_result, verifyTickets_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyTickets_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyTickets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyTickets_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyTickets_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketVerifyResponseVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketVerifyResponseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyTickets_result.class, metaDataMap);
    }

    public verifyTickets_result() {
    }

    public verifyTickets_result(
      com.froad.thrift.vo.ticket.TicketVerifyResponseVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyTickets_result(verifyTickets_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ticket.TicketVerifyResponseVo(other.success);
      }
    }

    public verifyTickets_result deepCopy() {
      return new verifyTickets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ticket.TicketVerifyResponseVo getSuccess() {
      return this.success;
    }

    public verifyTickets_result setSuccess(com.froad.thrift.vo.ticket.TicketVerifyResponseVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ticket.TicketVerifyResponseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyTickets_result)
        return this.equals((verifyTickets_result)that);
      return false;
    }

    public boolean equals(verifyTickets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyTickets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyTickets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyTickets_resultStandardSchemeFactory implements SchemeFactory {
      public verifyTickets_resultStandardScheme getScheme() {
        return new verifyTickets_resultStandardScheme();
      }
    }

    private static class verifyTickets_resultStandardScheme extends StandardScheme<verifyTickets_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyTickets_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ticket.TicketVerifyResponseVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyTickets_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyTickets_resultTupleSchemeFactory implements SchemeFactory {
      public verifyTickets_resultTupleScheme getScheme() {
        return new verifyTickets_resultTupleScheme();
      }
    }

    private static class verifyTickets_resultTupleScheme extends TupleScheme<verifyTickets_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyTickets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyTickets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ticket.TicketVerifyResponseVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class verifyGroupTicketsOfMerger_args implements org.apache.thrift.TBase<verifyGroupTicketsOfMerger_args, verifyGroupTicketsOfMerger_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyGroupTicketsOfMerger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyGroupTicketsOfMerger_args");

    private static final org.apache.thrift.protocol.TField REQUEST_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("requestVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyGroupTicketsOfMerger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyGroupTicketsOfMerger_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo requestVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_VO((short)1, "requestVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_VO
            return REQUEST_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_VO, new org.apache.thrift.meta_data.FieldMetaData("requestVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyGroupTicketsOfMerger_args.class, metaDataMap);
    }

    public verifyGroupTicketsOfMerger_args() {
    }

    public verifyGroupTicketsOfMerger_args(
      com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo requestVo)
    {
      this();
      this.requestVo = requestVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyGroupTicketsOfMerger_args(verifyGroupTicketsOfMerger_args other) {
      if (other.isSetRequestVo()) {
        this.requestVo = new com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo(other.requestVo);
      }
    }

    public verifyGroupTicketsOfMerger_args deepCopy() {
      return new verifyGroupTicketsOfMerger_args(this);
    }

    @Override
    public void clear() {
      this.requestVo = null;
    }

    public com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo getRequestVo() {
      return this.requestVo;
    }

    public verifyGroupTicketsOfMerger_args setRequestVo(com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo requestVo) {
      this.requestVo = requestVo;
      return this;
    }

    public void unsetRequestVo() {
      this.requestVo = null;
    }

    /** Returns true if field requestVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestVo() {
      return this.requestVo != null;
    }

    public void setRequestVoIsSet(boolean value) {
      if (!value) {
        this.requestVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_VO:
        if (value == null) {
          unsetRequestVo();
        } else {
          setRequestVo((com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_VO:
        return getRequestVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_VO:
        return isSetRequestVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyGroupTicketsOfMerger_args)
        return this.equals((verifyGroupTicketsOfMerger_args)that);
      return false;
    }

    public boolean equals(verifyGroupTicketsOfMerger_args that) {
      if (that == null)
        return false;

      boolean this_present_requestVo = true && this.isSetRequestVo();
      boolean that_present_requestVo = true && that.isSetRequestVo();
      if (this_present_requestVo || that_present_requestVo) {
        if (!(this_present_requestVo && that_present_requestVo))
          return false;
        if (!this.requestVo.equals(that.requestVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestVo = true && (isSetRequestVo());
      list.add(present_requestVo);
      if (present_requestVo)
        list.add(requestVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyGroupTicketsOfMerger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestVo()).compareTo(other.isSetRequestVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestVo, other.requestVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyGroupTicketsOfMerger_args(");
      boolean first = true;

      sb.append("requestVo:");
      if (this.requestVo == null) {
        sb.append("null");
      } else {
        sb.append(this.requestVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (requestVo != null) {
        requestVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyGroupTicketsOfMerger_argsStandardSchemeFactory implements SchemeFactory {
      public verifyGroupTicketsOfMerger_argsStandardScheme getScheme() {
        return new verifyGroupTicketsOfMerger_argsStandardScheme();
      }
    }

    private static class verifyGroupTicketsOfMerger_argsStandardScheme extends StandardScheme<verifyGroupTicketsOfMerger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyGroupTicketsOfMerger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.requestVo = new com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo();
                struct.requestVo.read(iprot);
                struct.setRequestVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyGroupTicketsOfMerger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestVo != null) {
          oprot.writeFieldBegin(REQUEST_VO_FIELD_DESC);
          struct.requestVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyGroupTicketsOfMerger_argsTupleSchemeFactory implements SchemeFactory {
      public verifyGroupTicketsOfMerger_argsTupleScheme getScheme() {
        return new verifyGroupTicketsOfMerger_argsTupleScheme();
      }
    }

    private static class verifyGroupTicketsOfMerger_argsTupleScheme extends TupleScheme<verifyGroupTicketsOfMerger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyGroupTicketsOfMerger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestVo()) {
          struct.requestVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyGroupTicketsOfMerger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestVo = new com.froad.thrift.vo.ticket.TicketVerifyOfMergerRequestVo();
          struct.requestVo.read(iprot);
          struct.setRequestVoIsSet(true);
        }
      }
    }

  }

  public static class verifyGroupTicketsOfMerger_result implements org.apache.thrift.TBase<verifyGroupTicketsOfMerger_result, verifyGroupTicketsOfMerger_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyGroupTicketsOfMerger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyGroupTicketsOfMerger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifyGroupTicketsOfMerger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifyGroupTicketsOfMerger_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyGroupTicketsOfMerger_result.class, metaDataMap);
    }

    public verifyGroupTicketsOfMerger_result() {
    }

    public verifyGroupTicketsOfMerger_result(
      com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyGroupTicketsOfMerger_result(verifyGroupTicketsOfMerger_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo(other.success);
      }
    }

    public verifyGroupTicketsOfMerger_result deepCopy() {
      return new verifyGroupTicketsOfMerger_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo getSuccess() {
      return this.success;
    }

    public verifyGroupTicketsOfMerger_result setSuccess(com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyGroupTicketsOfMerger_result)
        return this.equals((verifyGroupTicketsOfMerger_result)that);
      return false;
    }

    public boolean equals(verifyGroupTicketsOfMerger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(verifyGroupTicketsOfMerger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifyGroupTicketsOfMerger_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyGroupTicketsOfMerger_resultStandardSchemeFactory implements SchemeFactory {
      public verifyGroupTicketsOfMerger_resultStandardScheme getScheme() {
        return new verifyGroupTicketsOfMerger_resultStandardScheme();
      }
    }

    private static class verifyGroupTicketsOfMerger_resultStandardScheme extends StandardScheme<verifyGroupTicketsOfMerger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyGroupTicketsOfMerger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyGroupTicketsOfMerger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyGroupTicketsOfMerger_resultTupleSchemeFactory implements SchemeFactory {
      public verifyGroupTicketsOfMerger_resultTupleScheme getScheme() {
        return new verifyGroupTicketsOfMerger_resultTupleScheme();
      }
    }

    private static class verifyGroupTicketsOfMerger_resultTupleScheme extends TupleScheme<verifyGroupTicketsOfMerger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyGroupTicketsOfMerger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyGroupTicketsOfMerger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ticket.TicketVerifyOfMergerResponseVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTicketDetails_args implements org.apache.thrift.TBase<getTicketDetails_args, getTicketDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTicketDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicketDetails_args");

    private static final org.apache.thrift.protocol.TField REQUEST_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("requestVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicketDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicketDetails_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_VO((short)1, "requestVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_VO
            return REQUEST_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_VO, new org.apache.thrift.meta_data.FieldMetaData("requestVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketDetailRequestVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicketDetails_args.class, metaDataMap);
    }

    public getTicketDetails_args() {
    }

    public getTicketDetails_args(
      com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo)
    {
      this();
      this.requestVo = requestVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicketDetails_args(getTicketDetails_args other) {
      if (other.isSetRequestVo()) {
        this.requestVo = new com.froad.thrift.vo.ticket.TicketDetailRequestVo(other.requestVo);
      }
    }

    public getTicketDetails_args deepCopy() {
      return new getTicketDetails_args(this);
    }

    @Override
    public void clear() {
      this.requestVo = null;
    }

    public com.froad.thrift.vo.ticket.TicketDetailRequestVo getRequestVo() {
      return this.requestVo;
    }

    public getTicketDetails_args setRequestVo(com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo) {
      this.requestVo = requestVo;
      return this;
    }

    public void unsetRequestVo() {
      this.requestVo = null;
    }

    /** Returns true if field requestVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestVo() {
      return this.requestVo != null;
    }

    public void setRequestVoIsSet(boolean value) {
      if (!value) {
        this.requestVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_VO:
        if (value == null) {
          unsetRequestVo();
        } else {
          setRequestVo((com.froad.thrift.vo.ticket.TicketDetailRequestVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_VO:
        return getRequestVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_VO:
        return isSetRequestVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicketDetails_args)
        return this.equals((getTicketDetails_args)that);
      return false;
    }

    public boolean equals(getTicketDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_requestVo = true && this.isSetRequestVo();
      boolean that_present_requestVo = true && that.isSetRequestVo();
      if (this_present_requestVo || that_present_requestVo) {
        if (!(this_present_requestVo && that_present_requestVo))
          return false;
        if (!this.requestVo.equals(that.requestVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestVo = true && (isSetRequestVo());
      list.add(present_requestVo);
      if (present_requestVo)
        list.add(requestVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTicketDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestVo()).compareTo(other.isSetRequestVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestVo, other.requestVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicketDetails_args(");
      boolean first = true;

      sb.append("requestVo:");
      if (this.requestVo == null) {
        sb.append("null");
      } else {
        sb.append(this.requestVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (requestVo != null) {
        requestVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicketDetails_argsStandardSchemeFactory implements SchemeFactory {
      public getTicketDetails_argsStandardScheme getScheme() {
        return new getTicketDetails_argsStandardScheme();
      }
    }

    private static class getTicketDetails_argsStandardScheme extends StandardScheme<getTicketDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicketDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.requestVo = new com.froad.thrift.vo.ticket.TicketDetailRequestVo();
                struct.requestVo.read(iprot);
                struct.setRequestVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicketDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestVo != null) {
          oprot.writeFieldBegin(REQUEST_VO_FIELD_DESC);
          struct.requestVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicketDetails_argsTupleSchemeFactory implements SchemeFactory {
      public getTicketDetails_argsTupleScheme getScheme() {
        return new getTicketDetails_argsTupleScheme();
      }
    }

    private static class getTicketDetails_argsTupleScheme extends TupleScheme<getTicketDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicketDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestVo()) {
          struct.requestVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicketDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestVo = new com.froad.thrift.vo.ticket.TicketDetailRequestVo();
          struct.requestVo.read(iprot);
          struct.setRequestVoIsSet(true);
        }
      }
    }

  }

  public static class getTicketDetails_result implements org.apache.thrift.TBase<getTicketDetails_result, getTicketDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTicketDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicketDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicketDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicketDetails_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketDetailResponseVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketDetailResponseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicketDetails_result.class, metaDataMap);
    }

    public getTicketDetails_result() {
    }

    public getTicketDetails_result(
      com.froad.thrift.vo.ticket.TicketDetailResponseVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicketDetails_result(getTicketDetails_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ticket.TicketDetailResponseVo(other.success);
      }
    }

    public getTicketDetails_result deepCopy() {
      return new getTicketDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ticket.TicketDetailResponseVo getSuccess() {
      return this.success;
    }

    public getTicketDetails_result setSuccess(com.froad.thrift.vo.ticket.TicketDetailResponseVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ticket.TicketDetailResponseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicketDetails_result)
        return this.equals((getTicketDetails_result)that);
      return false;
    }

    public boolean equals(getTicketDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTicketDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicketDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicketDetails_resultStandardSchemeFactory implements SchemeFactory {
      public getTicketDetails_resultStandardScheme getScheme() {
        return new getTicketDetails_resultStandardScheme();
      }
    }

    private static class getTicketDetails_resultStandardScheme extends StandardScheme<getTicketDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicketDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ticket.TicketDetailResponseVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicketDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicketDetails_resultTupleSchemeFactory implements SchemeFactory {
      public getTicketDetails_resultTupleScheme getScheme() {
        return new getTicketDetails_resultTupleScheme();
      }
    }

    private static class getTicketDetails_resultTupleScheme extends TupleScheme<getTicketDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicketDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicketDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ticket.TicketDetailResponseVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTicketProductDetails_args implements org.apache.thrift.TBase<getTicketProductDetails_args, getTicketProductDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTicketProductDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicketProductDetails_args");

    private static final org.apache.thrift.protocol.TField REQUEST_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("requestVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicketProductDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicketProductDetails_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_VO((short)1, "requestVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_VO
            return REQUEST_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_VO, new org.apache.thrift.meta_data.FieldMetaData("requestVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketDetailRequestVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicketProductDetails_args.class, metaDataMap);
    }

    public getTicketProductDetails_args() {
    }

    public getTicketProductDetails_args(
      com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo)
    {
      this();
      this.requestVo = requestVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicketProductDetails_args(getTicketProductDetails_args other) {
      if (other.isSetRequestVo()) {
        this.requestVo = new com.froad.thrift.vo.ticket.TicketDetailRequestVo(other.requestVo);
      }
    }

    public getTicketProductDetails_args deepCopy() {
      return new getTicketProductDetails_args(this);
    }

    @Override
    public void clear() {
      this.requestVo = null;
    }

    public com.froad.thrift.vo.ticket.TicketDetailRequestVo getRequestVo() {
      return this.requestVo;
    }

    public getTicketProductDetails_args setRequestVo(com.froad.thrift.vo.ticket.TicketDetailRequestVo requestVo) {
      this.requestVo = requestVo;
      return this;
    }

    public void unsetRequestVo() {
      this.requestVo = null;
    }

    /** Returns true if field requestVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestVo() {
      return this.requestVo != null;
    }

    public void setRequestVoIsSet(boolean value) {
      if (!value) {
        this.requestVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_VO:
        if (value == null) {
          unsetRequestVo();
        } else {
          setRequestVo((com.froad.thrift.vo.ticket.TicketDetailRequestVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_VO:
        return getRequestVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_VO:
        return isSetRequestVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicketProductDetails_args)
        return this.equals((getTicketProductDetails_args)that);
      return false;
    }

    public boolean equals(getTicketProductDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_requestVo = true && this.isSetRequestVo();
      boolean that_present_requestVo = true && that.isSetRequestVo();
      if (this_present_requestVo || that_present_requestVo) {
        if (!(this_present_requestVo && that_present_requestVo))
          return false;
        if (!this.requestVo.equals(that.requestVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestVo = true && (isSetRequestVo());
      list.add(present_requestVo);
      if (present_requestVo)
        list.add(requestVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTicketProductDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestVo()).compareTo(other.isSetRequestVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestVo, other.requestVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicketProductDetails_args(");
      boolean first = true;

      sb.append("requestVo:");
      if (this.requestVo == null) {
        sb.append("null");
      } else {
        sb.append(this.requestVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (requestVo != null) {
        requestVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicketProductDetails_argsStandardSchemeFactory implements SchemeFactory {
      public getTicketProductDetails_argsStandardScheme getScheme() {
        return new getTicketProductDetails_argsStandardScheme();
      }
    }

    private static class getTicketProductDetails_argsStandardScheme extends StandardScheme<getTicketProductDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicketProductDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.requestVo = new com.froad.thrift.vo.ticket.TicketDetailRequestVo();
                struct.requestVo.read(iprot);
                struct.setRequestVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicketProductDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestVo != null) {
          oprot.writeFieldBegin(REQUEST_VO_FIELD_DESC);
          struct.requestVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicketProductDetails_argsTupleSchemeFactory implements SchemeFactory {
      public getTicketProductDetails_argsTupleScheme getScheme() {
        return new getTicketProductDetails_argsTupleScheme();
      }
    }

    private static class getTicketProductDetails_argsTupleScheme extends TupleScheme<getTicketProductDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicketProductDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestVo()) {
          struct.requestVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicketProductDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestVo = new com.froad.thrift.vo.ticket.TicketDetailRequestVo();
          struct.requestVo.read(iprot);
          struct.setRequestVoIsSet(true);
        }
      }
    }

  }

  public static class getTicketProductDetails_result implements org.apache.thrift.TBase<getTicketProductDetails_result, getTicketProductDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTicketProductDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicketProductDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicketProductDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicketProductDetails_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketProductResponseVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketProductResponseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicketProductDetails_result.class, metaDataMap);
    }

    public getTicketProductDetails_result() {
    }

    public getTicketProductDetails_result(
      com.froad.thrift.vo.ticket.TicketProductResponseVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicketProductDetails_result(getTicketProductDetails_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ticket.TicketProductResponseVo(other.success);
      }
    }

    public getTicketProductDetails_result deepCopy() {
      return new getTicketProductDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ticket.TicketProductResponseVo getSuccess() {
      return this.success;
    }

    public getTicketProductDetails_result setSuccess(com.froad.thrift.vo.ticket.TicketProductResponseVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ticket.TicketProductResponseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicketProductDetails_result)
        return this.equals((getTicketProductDetails_result)that);
      return false;
    }

    public boolean equals(getTicketProductDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTicketProductDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicketProductDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicketProductDetails_resultStandardSchemeFactory implements SchemeFactory {
      public getTicketProductDetails_resultStandardScheme getScheme() {
        return new getTicketProductDetails_resultStandardScheme();
      }
    }

    private static class getTicketProductDetails_resultStandardScheme extends StandardScheme<getTicketProductDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicketProductDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ticket.TicketProductResponseVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicketProductDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicketProductDetails_resultTupleSchemeFactory implements SchemeFactory {
      public getTicketProductDetails_resultTupleScheme getScheme() {
        return new getTicketProductDetails_resultTupleScheme();
      }
    }

    private static class getTicketProductDetails_resultTupleScheme extends TupleScheme<getTicketProductDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicketProductDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicketProductDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ticket.TicketProductResponseVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class extendEndDate_args implements org.apache.thrift.TBase<extendEndDate_args, extendEndDate_args._Fields>, java.io.Serializable, Cloneable, Comparable<extendEndDate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("extendEndDate_args");

    private static final org.apache.thrift.protocol.TField TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new extendEndDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new extendEndDate_argsTupleSchemeFactory());
    }

    public String ticketId; // required
    public long endDate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TICKET_ID((short)1, "ticketId"),
      END_DATE((short)2, "endDate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TICKET_ID
            return TICKET_ID;
          case 2: // END_DATE
            return END_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ENDDATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(extendEndDate_args.class, metaDataMap);
    }

    public extendEndDate_args() {
    }

    public extendEndDate_args(
      String ticketId,
      long endDate)
    {
      this();
      this.ticketId = ticketId;
      this.endDate = endDate;
      setEndDateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public extendEndDate_args(extendEndDate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTicketId()) {
        this.ticketId = other.ticketId;
      }
      this.endDate = other.endDate;
    }

    public extendEndDate_args deepCopy() {
      return new extendEndDate_args(this);
    }

    @Override
    public void clear() {
      this.ticketId = null;
      setEndDateIsSet(false);
      this.endDate = 0;
    }

    public String getTicketId() {
      return this.ticketId;
    }

    public extendEndDate_args setTicketId(String ticketId) {
      this.ticketId = ticketId;
      return this;
    }

    public void unsetTicketId() {
      this.ticketId = null;
    }

    /** Returns true if field ticketId is set (has been assigned a value) and false otherwise */
    public boolean isSetTicketId() {
      return this.ticketId != null;
    }

    public void setTicketIdIsSet(boolean value) {
      if (!value) {
        this.ticketId = null;
      }
    }

    public long getEndDate() {
      return this.endDate;
    }

    public extendEndDate_args setEndDate(long endDate) {
      this.endDate = endDate;
      setEndDateIsSet(true);
      return this;
    }

    public void unsetEndDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEndDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TICKET_ID:
        if (value == null) {
          unsetTicketId();
        } else {
          setTicketId((String)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEndDate();
        } else {
          setEndDate((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TICKET_ID:
        return getTicketId();

      case END_DATE:
        return Long.valueOf(getEndDate());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TICKET_ID:
        return isSetTicketId();
      case END_DATE:
        return isSetEndDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof extendEndDate_args)
        return this.equals((extendEndDate_args)that);
      return false;
    }

    public boolean equals(extendEndDate_args that) {
      if (that == null)
        return false;

      boolean this_present_ticketId = true && this.isSetTicketId();
      boolean that_present_ticketId = true && that.isSetTicketId();
      if (this_present_ticketId || that_present_ticketId) {
        if (!(this_present_ticketId && that_present_ticketId))
          return false;
        if (!this.ticketId.equals(that.ticketId))
          return false;
      }

      boolean this_present_endDate = true;
      boolean that_present_endDate = true;
      if (this_present_endDate || that_present_endDate) {
        if (!(this_present_endDate && that_present_endDate))
          return false;
        if (this.endDate != that.endDate)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ticketId = true && (isSetTicketId());
      list.add(present_ticketId);
      if (present_ticketId)
        list.add(ticketId);

      boolean present_endDate = true;
      list.add(present_endDate);
      if (present_endDate)
        list.add(endDate);

      return list.hashCode();
    }

    @Override
    public int compareTo(extendEndDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTicketId()).compareTo(other.isSetTicketId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicketId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketId, other.ticketId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("extendEndDate_args(");
      boolean first = true;

      sb.append("ticketId:");
      if (this.ticketId == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDate:");
      sb.append(this.endDate);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class extendEndDate_argsStandardSchemeFactory implements SchemeFactory {
      public extendEndDate_argsStandardScheme getScheme() {
        return new extendEndDate_argsStandardScheme();
      }
    }

    private static class extendEndDate_argsStandardScheme extends StandardScheme<extendEndDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, extendEndDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TICKET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ticketId = iprot.readString();
                struct.setTicketIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endDate = iprot.readI64();
                struct.setEndDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, extendEndDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ticketId != null) {
          oprot.writeFieldBegin(TICKET_ID_FIELD_DESC);
          oprot.writeString(struct.ticketId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeI64(struct.endDate);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class extendEndDate_argsTupleSchemeFactory implements SchemeFactory {
      public extendEndDate_argsTupleScheme getScheme() {
        return new extendEndDate_argsTupleScheme();
      }
    }

    private static class extendEndDate_argsTupleScheme extends TupleScheme<extendEndDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, extendEndDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTicketId()) {
          optionals.set(0);
        }
        if (struct.isSetEndDate()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTicketId()) {
          oprot.writeString(struct.ticketId);
        }
        if (struct.isSetEndDate()) {
          oprot.writeI64(struct.endDate);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, extendEndDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ticketId = iprot.readString();
          struct.setTicketIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endDate = iprot.readI64();
          struct.setEndDateIsSet(true);
        }
      }
    }

  }

  public static class extendEndDate_result implements org.apache.thrift.TBase<extendEndDate_result, extendEndDate_result._Fields>, java.io.Serializable, Cloneable, Comparable<extendEndDate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("extendEndDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new extendEndDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new extendEndDate_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(extendEndDate_result.class, metaDataMap);
    }

    public extendEndDate_result() {
    }

    public extendEndDate_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public extendEndDate_result(extendEndDate_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public extendEndDate_result deepCopy() {
      return new extendEndDate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public extendEndDate_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof extendEndDate_result)
        return this.equals((extendEndDate_result)that);
      return false;
    }

    public boolean equals(extendEndDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(extendEndDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("extendEndDate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class extendEndDate_resultStandardSchemeFactory implements SchemeFactory {
      public extendEndDate_resultStandardScheme getScheme() {
        return new extendEndDate_resultStandardScheme();
      }
    }

    private static class extendEndDate_resultStandardScheme extends StandardScheme<extendEndDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, extendEndDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, extendEndDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class extendEndDate_resultTupleSchemeFactory implements SchemeFactory {
      public extendEndDate_resultTupleScheme getScheme() {
        return new extendEndDate_resultTupleScheme();
      }
    }

    private static class extendEndDate_resultTupleScheme extends TupleScheme<extendEndDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, extendEndDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, extendEndDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class extendEndDateByProductId_args implements org.apache.thrift.TBase<extendEndDateByProductId_args, extendEndDateByProductId_args._Fields>, java.io.Serializable, Cloneable, Comparable<extendEndDateByProductId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("extendEndDateByProductId_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new extendEndDateByProductId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new extendEndDateByProductId_argsTupleSchemeFactory());
    }

    public String productId; // required
    public long endDate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ID((short)1, "productId"),
      END_DATE((short)2, "endDate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ID
            return PRODUCT_ID;
          case 2: // END_DATE
            return END_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ENDDATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(extendEndDateByProductId_args.class, metaDataMap);
    }

    public extendEndDateByProductId_args() {
    }

    public extendEndDateByProductId_args(
      String productId,
      long endDate)
    {
      this();
      this.productId = productId;
      this.endDate = endDate;
      setEndDateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public extendEndDateByProductId_args(extendEndDateByProductId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
      this.endDate = other.endDate;
    }

    public extendEndDateByProductId_args deepCopy() {
      return new extendEndDateByProductId_args(this);
    }

    @Override
    public void clear() {
      this.productId = null;
      setEndDateIsSet(false);
      this.endDate = 0;
    }

    public String getProductId() {
      return this.productId;
    }

    public extendEndDateByProductId_args setProductId(String productId) {
      this.productId = productId;
      return this;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public long getEndDate() {
      return this.endDate;
    }

    public extendEndDateByProductId_args setEndDate(long endDate) {
      this.endDate = endDate;
      setEndDateIsSet(true);
      return this;
    }

    public void unsetEndDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEndDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((String)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEndDate();
        } else {
          setEndDate((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ID:
        return getProductId();

      case END_DATE:
        return Long.valueOf(getEndDate());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ID:
        return isSetProductId();
      case END_DATE:
        return isSetEndDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof extendEndDateByProductId_args)
        return this.equals((extendEndDateByProductId_args)that);
      return false;
    }

    public boolean equals(extendEndDateByProductId_args that) {
      if (that == null)
        return false;

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      boolean this_present_endDate = true;
      boolean that_present_endDate = true;
      if (this_present_endDate || that_present_endDate) {
        if (!(this_present_endDate && that_present_endDate))
          return false;
        if (this.endDate != that.endDate)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productId = true && (isSetProductId());
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      boolean present_endDate = true;
      list.add(present_endDate);
      if (present_endDate)
        list.add(endDate);

      return list.hashCode();
    }

    @Override
    public int compareTo(extendEndDateByProductId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("extendEndDateByProductId_args(");
      boolean first = true;

      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDate:");
      sb.append(this.endDate);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class extendEndDateByProductId_argsStandardSchemeFactory implements SchemeFactory {
      public extendEndDateByProductId_argsStandardScheme getScheme() {
        return new extendEndDateByProductId_argsStandardScheme();
      }
    }

    private static class extendEndDateByProductId_argsStandardScheme extends StandardScheme<extendEndDateByProductId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, extendEndDateByProductId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.productId = iprot.readString();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.endDate = iprot.readI64();
                struct.setEndDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, extendEndDateByProductId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productId != null) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeI64(struct.endDate);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class extendEndDateByProductId_argsTupleSchemeFactory implements SchemeFactory {
      public extendEndDateByProductId_argsTupleScheme getScheme() {
        return new extendEndDateByProductId_argsTupleScheme();
      }
    }

    private static class extendEndDateByProductId_argsTupleScheme extends TupleScheme<extendEndDateByProductId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, extendEndDateByProductId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductId()) {
          optionals.set(0);
        }
        if (struct.isSetEndDate()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductId()) {
          oprot.writeString(struct.productId);
        }
        if (struct.isSetEndDate()) {
          oprot.writeI64(struct.endDate);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, extendEndDateByProductId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productId = iprot.readString();
          struct.setProductIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endDate = iprot.readI64();
          struct.setEndDateIsSet(true);
        }
      }
    }

  }

  public static class extendEndDateByProductId_result implements org.apache.thrift.TBase<extendEndDateByProductId_result, extendEndDateByProductId_result._Fields>, java.io.Serializable, Cloneable, Comparable<extendEndDateByProductId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("extendEndDateByProductId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new extendEndDateByProductId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new extendEndDateByProductId_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(extendEndDateByProductId_result.class, metaDataMap);
    }

    public extendEndDateByProductId_result() {
    }

    public extendEndDateByProductId_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public extendEndDateByProductId_result(extendEndDateByProductId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public extendEndDateByProductId_result deepCopy() {
      return new extendEndDateByProductId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public extendEndDateByProductId_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof extendEndDateByProductId_result)
        return this.equals((extendEndDateByProductId_result)that);
      return false;
    }

    public boolean equals(extendEndDateByProductId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(extendEndDateByProductId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("extendEndDateByProductId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class extendEndDateByProductId_resultStandardSchemeFactory implements SchemeFactory {
      public extendEndDateByProductId_resultStandardScheme getScheme() {
        return new extendEndDateByProductId_resultStandardScheme();
      }
    }

    private static class extendEndDateByProductId_resultStandardScheme extends StandardScheme<extendEndDateByProductId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, extendEndDateByProductId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, extendEndDateByProductId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class extendEndDateByProductId_resultTupleSchemeFactory implements SchemeFactory {
      public extendEndDateByProductId_resultTupleScheme getScheme() {
        return new extendEndDateByProductId_resultTupleScheme();
      }
    }

    private static class extendEndDateByProductId_resultTupleScheme extends TupleScheme<extendEndDateByProductId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, extendEndDateByProductId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, extendEndDateByProductId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTicketList_args implements org.apache.thrift.TBase<getTicketList_args, getTicketList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTicketList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicketList_args");

    private static final org.apache.thrift.protocol.TField TICKET_LIST_REQUEST_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketListRequestVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicketList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicketList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TICKET_LIST_REQUEST_VO((short)1, "ticketListRequestVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TICKET_LIST_REQUEST_VO
            return TICKET_LIST_REQUEST_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TICKET_LIST_REQUEST_VO, new org.apache.thrift.meta_data.FieldMetaData("ticketListRequestVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketListRequestVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicketList_args.class, metaDataMap);
    }

    public getTicketList_args() {
    }

    public getTicketList_args(
      com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo)
    {
      this();
      this.ticketListRequestVo = ticketListRequestVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicketList_args(getTicketList_args other) {
      if (other.isSetTicketListRequestVo()) {
        this.ticketListRequestVo = new com.froad.thrift.vo.ticket.TicketListRequestVo(other.ticketListRequestVo);
      }
    }

    public getTicketList_args deepCopy() {
      return new getTicketList_args(this);
    }

    @Override
    public void clear() {
      this.ticketListRequestVo = null;
    }

    public com.froad.thrift.vo.ticket.TicketListRequestVo getTicketListRequestVo() {
      return this.ticketListRequestVo;
    }

    public getTicketList_args setTicketListRequestVo(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) {
      this.ticketListRequestVo = ticketListRequestVo;
      return this;
    }

    public void unsetTicketListRequestVo() {
      this.ticketListRequestVo = null;
    }

    /** Returns true if field ticketListRequestVo is set (has been assigned a value) and false otherwise */
    public boolean isSetTicketListRequestVo() {
      return this.ticketListRequestVo != null;
    }

    public void setTicketListRequestVoIsSet(boolean value) {
      if (!value) {
        this.ticketListRequestVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TICKET_LIST_REQUEST_VO:
        if (value == null) {
          unsetTicketListRequestVo();
        } else {
          setTicketListRequestVo((com.froad.thrift.vo.ticket.TicketListRequestVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TICKET_LIST_REQUEST_VO:
        return getTicketListRequestVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TICKET_LIST_REQUEST_VO:
        return isSetTicketListRequestVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicketList_args)
        return this.equals((getTicketList_args)that);
      return false;
    }

    public boolean equals(getTicketList_args that) {
      if (that == null)
        return false;

      boolean this_present_ticketListRequestVo = true && this.isSetTicketListRequestVo();
      boolean that_present_ticketListRequestVo = true && that.isSetTicketListRequestVo();
      if (this_present_ticketListRequestVo || that_present_ticketListRequestVo) {
        if (!(this_present_ticketListRequestVo && that_present_ticketListRequestVo))
          return false;
        if (!this.ticketListRequestVo.equals(that.ticketListRequestVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ticketListRequestVo = true && (isSetTicketListRequestVo());
      list.add(present_ticketListRequestVo);
      if (present_ticketListRequestVo)
        list.add(ticketListRequestVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTicketList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTicketListRequestVo()).compareTo(other.isSetTicketListRequestVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicketListRequestVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketListRequestVo, other.ticketListRequestVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicketList_args(");
      boolean first = true;

      sb.append("ticketListRequestVo:");
      if (this.ticketListRequestVo == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketListRequestVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (ticketListRequestVo != null) {
        ticketListRequestVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicketList_argsStandardSchemeFactory implements SchemeFactory {
      public getTicketList_argsStandardScheme getScheme() {
        return new getTicketList_argsStandardScheme();
      }
    }

    private static class getTicketList_argsStandardScheme extends StandardScheme<getTicketList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicketList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TICKET_LIST_REQUEST_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ticketListRequestVo = new com.froad.thrift.vo.ticket.TicketListRequestVo();
                struct.ticketListRequestVo.read(iprot);
                struct.setTicketListRequestVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicketList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ticketListRequestVo != null) {
          oprot.writeFieldBegin(TICKET_LIST_REQUEST_VO_FIELD_DESC);
          struct.ticketListRequestVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicketList_argsTupleSchemeFactory implements SchemeFactory {
      public getTicketList_argsTupleScheme getScheme() {
        return new getTicketList_argsTupleScheme();
      }
    }

    private static class getTicketList_argsTupleScheme extends TupleScheme<getTicketList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicketList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTicketListRequestVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTicketListRequestVo()) {
          struct.ticketListRequestVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicketList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ticketListRequestVo = new com.froad.thrift.vo.ticket.TicketListRequestVo();
          struct.ticketListRequestVo.read(iprot);
          struct.setTicketListRequestVoIsSet(true);
        }
      }
    }

  }

  public static class getTicketList_result implements org.apache.thrift.TBase<getTicketList_result, getTicketList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTicketList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicketList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicketList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicketList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketListResponseVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketListResponseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicketList_result.class, metaDataMap);
    }

    public getTicketList_result() {
    }

    public getTicketList_result(
      com.froad.thrift.vo.ticket.TicketListResponseVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicketList_result(getTicketList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ticket.TicketListResponseVo(other.success);
      }
    }

    public getTicketList_result deepCopy() {
      return new getTicketList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ticket.TicketListResponseVo getSuccess() {
      return this.success;
    }

    public getTicketList_result setSuccess(com.froad.thrift.vo.ticket.TicketListResponseVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ticket.TicketListResponseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicketList_result)
        return this.equals((getTicketList_result)that);
      return false;
    }

    public boolean equals(getTicketList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTicketList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicketList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicketList_resultStandardSchemeFactory implements SchemeFactory {
      public getTicketList_resultStandardScheme getScheme() {
        return new getTicketList_resultStandardScheme();
      }
    }

    private static class getTicketList_resultStandardScheme extends StandardScheme<getTicketList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicketList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ticket.TicketListResponseVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicketList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicketList_resultTupleSchemeFactory implements SchemeFactory {
      public getTicketList_resultTupleScheme getScheme() {
        return new getTicketList_resultTupleScheme();
      }
    }

    private static class getTicketList_resultTupleScheme extends TupleScheme<getTicketList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicketList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicketList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ticket.TicketListResponseVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exportTickets_args implements org.apache.thrift.TBase<exportTickets_args, exportTickets_args._Fields>, java.io.Serializable, Cloneable, Comparable<exportTickets_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportTickets_args");

    private static final org.apache.thrift.protocol.TField TICKET_LIST_REQUEST_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketListRequestVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportTickets_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportTickets_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TICKET_LIST_REQUEST_VO((short)1, "ticketListRequestVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TICKET_LIST_REQUEST_VO
            return TICKET_LIST_REQUEST_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TICKET_LIST_REQUEST_VO, new org.apache.thrift.meta_data.FieldMetaData("ticketListRequestVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketListRequestVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportTickets_args.class, metaDataMap);
    }

    public exportTickets_args() {
    }

    public exportTickets_args(
      com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo)
    {
      this();
      this.ticketListRequestVo = ticketListRequestVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportTickets_args(exportTickets_args other) {
      if (other.isSetTicketListRequestVo()) {
        this.ticketListRequestVo = new com.froad.thrift.vo.ticket.TicketListRequestVo(other.ticketListRequestVo);
      }
    }

    public exportTickets_args deepCopy() {
      return new exportTickets_args(this);
    }

    @Override
    public void clear() {
      this.ticketListRequestVo = null;
    }

    public com.froad.thrift.vo.ticket.TicketListRequestVo getTicketListRequestVo() {
      return this.ticketListRequestVo;
    }

    public exportTickets_args setTicketListRequestVo(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) {
      this.ticketListRequestVo = ticketListRequestVo;
      return this;
    }

    public void unsetTicketListRequestVo() {
      this.ticketListRequestVo = null;
    }

    /** Returns true if field ticketListRequestVo is set (has been assigned a value) and false otherwise */
    public boolean isSetTicketListRequestVo() {
      return this.ticketListRequestVo != null;
    }

    public void setTicketListRequestVoIsSet(boolean value) {
      if (!value) {
        this.ticketListRequestVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TICKET_LIST_REQUEST_VO:
        if (value == null) {
          unsetTicketListRequestVo();
        } else {
          setTicketListRequestVo((com.froad.thrift.vo.ticket.TicketListRequestVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TICKET_LIST_REQUEST_VO:
        return getTicketListRequestVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TICKET_LIST_REQUEST_VO:
        return isSetTicketListRequestVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportTickets_args)
        return this.equals((exportTickets_args)that);
      return false;
    }

    public boolean equals(exportTickets_args that) {
      if (that == null)
        return false;

      boolean this_present_ticketListRequestVo = true && this.isSetTicketListRequestVo();
      boolean that_present_ticketListRequestVo = true && that.isSetTicketListRequestVo();
      if (this_present_ticketListRequestVo || that_present_ticketListRequestVo) {
        if (!(this_present_ticketListRequestVo && that_present_ticketListRequestVo))
          return false;
        if (!this.ticketListRequestVo.equals(that.ticketListRequestVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ticketListRequestVo = true && (isSetTicketListRequestVo());
      list.add(present_ticketListRequestVo);
      if (present_ticketListRequestVo)
        list.add(ticketListRequestVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportTickets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTicketListRequestVo()).compareTo(other.isSetTicketListRequestVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicketListRequestVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketListRequestVo, other.ticketListRequestVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportTickets_args(");
      boolean first = true;

      sb.append("ticketListRequestVo:");
      if (this.ticketListRequestVo == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketListRequestVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (ticketListRequestVo != null) {
        ticketListRequestVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportTickets_argsStandardSchemeFactory implements SchemeFactory {
      public exportTickets_argsStandardScheme getScheme() {
        return new exportTickets_argsStandardScheme();
      }
    }

    private static class exportTickets_argsStandardScheme extends StandardScheme<exportTickets_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportTickets_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TICKET_LIST_REQUEST_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ticketListRequestVo = new com.froad.thrift.vo.ticket.TicketListRequestVo();
                struct.ticketListRequestVo.read(iprot);
                struct.setTicketListRequestVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportTickets_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ticketListRequestVo != null) {
          oprot.writeFieldBegin(TICKET_LIST_REQUEST_VO_FIELD_DESC);
          struct.ticketListRequestVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportTickets_argsTupleSchemeFactory implements SchemeFactory {
      public exportTickets_argsTupleScheme getScheme() {
        return new exportTickets_argsTupleScheme();
      }
    }

    private static class exportTickets_argsTupleScheme extends TupleScheme<exportTickets_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportTickets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTicketListRequestVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTicketListRequestVo()) {
          struct.ticketListRequestVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportTickets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ticketListRequestVo = new com.froad.thrift.vo.ticket.TicketListRequestVo();
          struct.ticketListRequestVo.read(iprot);
          struct.setTicketListRequestVoIsSet(true);
        }
      }
    }

  }

  public static class exportTickets_result implements org.apache.thrift.TBase<exportTickets_result, exportTickets_result._Fields>, java.io.Serializable, Cloneable, Comparable<exportTickets_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportTickets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportTickets_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportTickets_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ExportResultRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ExportResultRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportTickets_result.class, metaDataMap);
    }

    public exportTickets_result() {
    }

    public exportTickets_result(
      com.froad.thrift.vo.ExportResultRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportTickets_result(exportTickets_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ExportResultRes(other.success);
      }
    }

    public exportTickets_result deepCopy() {
      return new exportTickets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ExportResultRes getSuccess() {
      return this.success;
    }

    public exportTickets_result setSuccess(com.froad.thrift.vo.ExportResultRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ExportResultRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportTickets_result)
        return this.equals((exportTickets_result)that);
      return false;
    }

    public boolean equals(exportTickets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(exportTickets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportTickets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportTickets_resultStandardSchemeFactory implements SchemeFactory {
      public exportTickets_resultStandardScheme getScheme() {
        return new exportTickets_resultStandardScheme();
      }
    }

    private static class exportTickets_resultStandardScheme extends StandardScheme<exportTickets_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportTickets_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ExportResultRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportTickets_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportTickets_resultTupleSchemeFactory implements SchemeFactory {
      public exportTickets_resultTupleScheme getScheme() {
        return new exportTickets_resultTupleScheme();
      }
    }

    private static class exportTickets_resultTupleScheme extends TupleScheme<exportTickets_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportTickets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportTickets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ExportResultRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVerifyTicketListByPage_args implements org.apache.thrift.TBase<getVerifyTicketListByPage_args, getVerifyTicketListByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVerifyTicketListByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVerifyTicketListByPage_args");

    private static final org.apache.thrift.protocol.TField TICKET_LIST_REQUEST_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketListRequestVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVerifyTicketListByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVerifyTicketListByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TICKET_LIST_REQUEST_VO((short)1, "ticketListRequestVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TICKET_LIST_REQUEST_VO
            return TICKET_LIST_REQUEST_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TICKET_LIST_REQUEST_VO, new org.apache.thrift.meta_data.FieldMetaData("ticketListRequestVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketListRequestVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVerifyTicketListByPage_args.class, metaDataMap);
    }

    public getVerifyTicketListByPage_args() {
    }

    public getVerifyTicketListByPage_args(
      com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo)
    {
      this();
      this.ticketListRequestVo = ticketListRequestVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVerifyTicketListByPage_args(getVerifyTicketListByPage_args other) {
      if (other.isSetTicketListRequestVo()) {
        this.ticketListRequestVo = new com.froad.thrift.vo.ticket.TicketListRequestVo(other.ticketListRequestVo);
      }
    }

    public getVerifyTicketListByPage_args deepCopy() {
      return new getVerifyTicketListByPage_args(this);
    }

    @Override
    public void clear() {
      this.ticketListRequestVo = null;
    }

    public com.froad.thrift.vo.ticket.TicketListRequestVo getTicketListRequestVo() {
      return this.ticketListRequestVo;
    }

    public getVerifyTicketListByPage_args setTicketListRequestVo(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) {
      this.ticketListRequestVo = ticketListRequestVo;
      return this;
    }

    public void unsetTicketListRequestVo() {
      this.ticketListRequestVo = null;
    }

    /** Returns true if field ticketListRequestVo is set (has been assigned a value) and false otherwise */
    public boolean isSetTicketListRequestVo() {
      return this.ticketListRequestVo != null;
    }

    public void setTicketListRequestVoIsSet(boolean value) {
      if (!value) {
        this.ticketListRequestVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TICKET_LIST_REQUEST_VO:
        if (value == null) {
          unsetTicketListRequestVo();
        } else {
          setTicketListRequestVo((com.froad.thrift.vo.ticket.TicketListRequestVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TICKET_LIST_REQUEST_VO:
        return getTicketListRequestVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TICKET_LIST_REQUEST_VO:
        return isSetTicketListRequestVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVerifyTicketListByPage_args)
        return this.equals((getVerifyTicketListByPage_args)that);
      return false;
    }

    public boolean equals(getVerifyTicketListByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_ticketListRequestVo = true && this.isSetTicketListRequestVo();
      boolean that_present_ticketListRequestVo = true && that.isSetTicketListRequestVo();
      if (this_present_ticketListRequestVo || that_present_ticketListRequestVo) {
        if (!(this_present_ticketListRequestVo && that_present_ticketListRequestVo))
          return false;
        if (!this.ticketListRequestVo.equals(that.ticketListRequestVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ticketListRequestVo = true && (isSetTicketListRequestVo());
      list.add(present_ticketListRequestVo);
      if (present_ticketListRequestVo)
        list.add(ticketListRequestVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVerifyTicketListByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTicketListRequestVo()).compareTo(other.isSetTicketListRequestVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicketListRequestVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketListRequestVo, other.ticketListRequestVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVerifyTicketListByPage_args(");
      boolean first = true;

      sb.append("ticketListRequestVo:");
      if (this.ticketListRequestVo == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketListRequestVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (ticketListRequestVo != null) {
        ticketListRequestVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVerifyTicketListByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getVerifyTicketListByPage_argsStandardScheme getScheme() {
        return new getVerifyTicketListByPage_argsStandardScheme();
      }
    }

    private static class getVerifyTicketListByPage_argsStandardScheme extends StandardScheme<getVerifyTicketListByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVerifyTicketListByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TICKET_LIST_REQUEST_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ticketListRequestVo = new com.froad.thrift.vo.ticket.TicketListRequestVo();
                struct.ticketListRequestVo.read(iprot);
                struct.setTicketListRequestVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVerifyTicketListByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ticketListRequestVo != null) {
          oprot.writeFieldBegin(TICKET_LIST_REQUEST_VO_FIELD_DESC);
          struct.ticketListRequestVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVerifyTicketListByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getVerifyTicketListByPage_argsTupleScheme getScheme() {
        return new getVerifyTicketListByPage_argsTupleScheme();
      }
    }

    private static class getVerifyTicketListByPage_argsTupleScheme extends TupleScheme<getVerifyTicketListByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVerifyTicketListByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTicketListRequestVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTicketListRequestVo()) {
          struct.ticketListRequestVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVerifyTicketListByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ticketListRequestVo = new com.froad.thrift.vo.ticket.TicketListRequestVo();
          struct.ticketListRequestVo.read(iprot);
          struct.setTicketListRequestVoIsSet(true);
        }
      }
    }

  }

  public static class getVerifyTicketListByPage_result implements org.apache.thrift.TBase<getVerifyTicketListByPage_result, getVerifyTicketListByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVerifyTicketListByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVerifyTicketListByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVerifyTicketListByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVerifyTicketListByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVerifyTicketListByPage_result.class, metaDataMap);
    }

    public getVerifyTicketListByPage_result() {
    }

    public getVerifyTicketListByPage_result(
      com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVerifyTicketListByPage_result(getVerifyTicketListByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo(other.success);
      }
    }

    public getVerifyTicketListByPage_result deepCopy() {
      return new getVerifyTicketListByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo getSuccess() {
      return this.success;
    }

    public getVerifyTicketListByPage_result setSuccess(com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVerifyTicketListByPage_result)
        return this.equals((getVerifyTicketListByPage_result)that);
      return false;
    }

    public boolean equals(getVerifyTicketListByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVerifyTicketListByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVerifyTicketListByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVerifyTicketListByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getVerifyTicketListByPage_resultStandardScheme getScheme() {
        return new getVerifyTicketListByPage_resultStandardScheme();
      }
    }

    private static class getVerifyTicketListByPage_resultStandardScheme extends StandardScheme<getVerifyTicketListByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVerifyTicketListByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVerifyTicketListByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVerifyTicketListByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getVerifyTicketListByPage_resultTupleScheme getScheme() {
        return new getVerifyTicketListByPage_resultTupleScheme();
      }
    }

    private static class getVerifyTicketListByPage_resultTupleScheme extends TupleScheme<getVerifyTicketListByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVerifyTicketListByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVerifyTicketListByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ticket.VerifyTicketListByPageResponseVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTicketListOfMerger_args implements org.apache.thrift.TBase<getTicketListOfMerger_args, getTicketListOfMerger_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTicketListOfMerger_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicketListOfMerger_args");

    private static final org.apache.thrift.protocol.TField TICKET_LIST_REQUEST_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketListRequestVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicketListOfMerger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicketListOfMerger_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TICKET_LIST_REQUEST_VO((short)1, "ticketListRequestVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TICKET_LIST_REQUEST_VO
            return TICKET_LIST_REQUEST_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TICKET_LIST_REQUEST_VO, new org.apache.thrift.meta_data.FieldMetaData("ticketListRequestVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketListRequestVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicketListOfMerger_args.class, metaDataMap);
    }

    public getTicketListOfMerger_args() {
    }

    public getTicketListOfMerger_args(
      com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo)
    {
      this();
      this.ticketListRequestVo = ticketListRequestVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicketListOfMerger_args(getTicketListOfMerger_args other) {
      if (other.isSetTicketListRequestVo()) {
        this.ticketListRequestVo = new com.froad.thrift.vo.ticket.TicketListRequestVo(other.ticketListRequestVo);
      }
    }

    public getTicketListOfMerger_args deepCopy() {
      return new getTicketListOfMerger_args(this);
    }

    @Override
    public void clear() {
      this.ticketListRequestVo = null;
    }

    public com.froad.thrift.vo.ticket.TicketListRequestVo getTicketListRequestVo() {
      return this.ticketListRequestVo;
    }

    public getTicketListOfMerger_args setTicketListRequestVo(com.froad.thrift.vo.ticket.TicketListRequestVo ticketListRequestVo) {
      this.ticketListRequestVo = ticketListRequestVo;
      return this;
    }

    public void unsetTicketListRequestVo() {
      this.ticketListRequestVo = null;
    }

    /** Returns true if field ticketListRequestVo is set (has been assigned a value) and false otherwise */
    public boolean isSetTicketListRequestVo() {
      return this.ticketListRequestVo != null;
    }

    public void setTicketListRequestVoIsSet(boolean value) {
      if (!value) {
        this.ticketListRequestVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TICKET_LIST_REQUEST_VO:
        if (value == null) {
          unsetTicketListRequestVo();
        } else {
          setTicketListRequestVo((com.froad.thrift.vo.ticket.TicketListRequestVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TICKET_LIST_REQUEST_VO:
        return getTicketListRequestVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TICKET_LIST_REQUEST_VO:
        return isSetTicketListRequestVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicketListOfMerger_args)
        return this.equals((getTicketListOfMerger_args)that);
      return false;
    }

    public boolean equals(getTicketListOfMerger_args that) {
      if (that == null)
        return false;

      boolean this_present_ticketListRequestVo = true && this.isSetTicketListRequestVo();
      boolean that_present_ticketListRequestVo = true && that.isSetTicketListRequestVo();
      if (this_present_ticketListRequestVo || that_present_ticketListRequestVo) {
        if (!(this_present_ticketListRequestVo && that_present_ticketListRequestVo))
          return false;
        if (!this.ticketListRequestVo.equals(that.ticketListRequestVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ticketListRequestVo = true && (isSetTicketListRequestVo());
      list.add(present_ticketListRequestVo);
      if (present_ticketListRequestVo)
        list.add(ticketListRequestVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTicketListOfMerger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTicketListRequestVo()).compareTo(other.isSetTicketListRequestVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicketListRequestVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketListRequestVo, other.ticketListRequestVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicketListOfMerger_args(");
      boolean first = true;

      sb.append("ticketListRequestVo:");
      if (this.ticketListRequestVo == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketListRequestVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (ticketListRequestVo != null) {
        ticketListRequestVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicketListOfMerger_argsStandardSchemeFactory implements SchemeFactory {
      public getTicketListOfMerger_argsStandardScheme getScheme() {
        return new getTicketListOfMerger_argsStandardScheme();
      }
    }

    private static class getTicketListOfMerger_argsStandardScheme extends StandardScheme<getTicketListOfMerger_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicketListOfMerger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TICKET_LIST_REQUEST_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ticketListRequestVo = new com.froad.thrift.vo.ticket.TicketListRequestVo();
                struct.ticketListRequestVo.read(iprot);
                struct.setTicketListRequestVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicketListOfMerger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ticketListRequestVo != null) {
          oprot.writeFieldBegin(TICKET_LIST_REQUEST_VO_FIELD_DESC);
          struct.ticketListRequestVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicketListOfMerger_argsTupleSchemeFactory implements SchemeFactory {
      public getTicketListOfMerger_argsTupleScheme getScheme() {
        return new getTicketListOfMerger_argsTupleScheme();
      }
    }

    private static class getTicketListOfMerger_argsTupleScheme extends TupleScheme<getTicketListOfMerger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicketListOfMerger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTicketListRequestVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTicketListRequestVo()) {
          struct.ticketListRequestVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicketListOfMerger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ticketListRequestVo = new com.froad.thrift.vo.ticket.TicketListRequestVo();
          struct.ticketListRequestVo.read(iprot);
          struct.setTicketListRequestVoIsSet(true);
        }
      }
    }

  }

  public static class getTicketListOfMerger_result implements org.apache.thrift.TBase<getTicketListOfMerger_result, getTicketListOfMerger_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTicketListOfMerger_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicketListOfMerger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicketListOfMerger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicketListOfMerger_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketListResponseVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketListResponseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicketListOfMerger_result.class, metaDataMap);
    }

    public getTicketListOfMerger_result() {
    }

    public getTicketListOfMerger_result(
      com.froad.thrift.vo.ticket.TicketListResponseVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicketListOfMerger_result(getTicketListOfMerger_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ticket.TicketListResponseVo(other.success);
      }
    }

    public getTicketListOfMerger_result deepCopy() {
      return new getTicketListOfMerger_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ticket.TicketListResponseVo getSuccess() {
      return this.success;
    }

    public getTicketListOfMerger_result setSuccess(com.froad.thrift.vo.ticket.TicketListResponseVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ticket.TicketListResponseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicketListOfMerger_result)
        return this.equals((getTicketListOfMerger_result)that);
      return false;
    }

    public boolean equals(getTicketListOfMerger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTicketListOfMerger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicketListOfMerger_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicketListOfMerger_resultStandardSchemeFactory implements SchemeFactory {
      public getTicketListOfMerger_resultStandardScheme getScheme() {
        return new getTicketListOfMerger_resultStandardScheme();
      }
    }

    private static class getTicketListOfMerger_resultStandardScheme extends StandardScheme<getTicketListOfMerger_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicketListOfMerger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ticket.TicketListResponseVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicketListOfMerger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicketListOfMerger_resultTupleSchemeFactory implements SchemeFactory {
      public getTicketListOfMerger_resultTupleScheme getScheme() {
        return new getTicketListOfMerger_resultTupleScheme();
      }
    }

    private static class getTicketListOfMerger_resultTupleScheme extends TupleScheme<getTicketListOfMerger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicketListOfMerger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicketListOfMerger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ticket.TicketListResponseVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRelatedTickets_args implements org.apache.thrift.TBase<getRelatedTickets_args, getRelatedTickets_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRelatedTickets_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRelatedTickets_args");

    private static final org.apache.thrift.protocol.TField REQUEST_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("requestVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRelatedTickets_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRelatedTickets_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketRelatedRequestVo requestVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_VO((short)1, "requestVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_VO
            return REQUEST_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_VO, new org.apache.thrift.meta_data.FieldMetaData("requestVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketRelatedRequestVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRelatedTickets_args.class, metaDataMap);
    }

    public getRelatedTickets_args() {
    }

    public getRelatedTickets_args(
      com.froad.thrift.vo.ticket.TicketRelatedRequestVo requestVo)
    {
      this();
      this.requestVo = requestVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRelatedTickets_args(getRelatedTickets_args other) {
      if (other.isSetRequestVo()) {
        this.requestVo = new com.froad.thrift.vo.ticket.TicketRelatedRequestVo(other.requestVo);
      }
    }

    public getRelatedTickets_args deepCopy() {
      return new getRelatedTickets_args(this);
    }

    @Override
    public void clear() {
      this.requestVo = null;
    }

    public com.froad.thrift.vo.ticket.TicketRelatedRequestVo getRequestVo() {
      return this.requestVo;
    }

    public getRelatedTickets_args setRequestVo(com.froad.thrift.vo.ticket.TicketRelatedRequestVo requestVo) {
      this.requestVo = requestVo;
      return this;
    }

    public void unsetRequestVo() {
      this.requestVo = null;
    }

    /** Returns true if field requestVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestVo() {
      return this.requestVo != null;
    }

    public void setRequestVoIsSet(boolean value) {
      if (!value) {
        this.requestVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_VO:
        if (value == null) {
          unsetRequestVo();
        } else {
          setRequestVo((com.froad.thrift.vo.ticket.TicketRelatedRequestVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_VO:
        return getRequestVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_VO:
        return isSetRequestVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRelatedTickets_args)
        return this.equals((getRelatedTickets_args)that);
      return false;
    }

    public boolean equals(getRelatedTickets_args that) {
      if (that == null)
        return false;

      boolean this_present_requestVo = true && this.isSetRequestVo();
      boolean that_present_requestVo = true && that.isSetRequestVo();
      if (this_present_requestVo || that_present_requestVo) {
        if (!(this_present_requestVo && that_present_requestVo))
          return false;
        if (!this.requestVo.equals(that.requestVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestVo = true && (isSetRequestVo());
      list.add(present_requestVo);
      if (present_requestVo)
        list.add(requestVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRelatedTickets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestVo()).compareTo(other.isSetRequestVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestVo, other.requestVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRelatedTickets_args(");
      boolean first = true;

      sb.append("requestVo:");
      if (this.requestVo == null) {
        sb.append("null");
      } else {
        sb.append(this.requestVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (requestVo != null) {
        requestVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRelatedTickets_argsStandardSchemeFactory implements SchemeFactory {
      public getRelatedTickets_argsStandardScheme getScheme() {
        return new getRelatedTickets_argsStandardScheme();
      }
    }

    private static class getRelatedTickets_argsStandardScheme extends StandardScheme<getRelatedTickets_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRelatedTickets_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.requestVo = new com.froad.thrift.vo.ticket.TicketRelatedRequestVo();
                struct.requestVo.read(iprot);
                struct.setRequestVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRelatedTickets_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestVo != null) {
          oprot.writeFieldBegin(REQUEST_VO_FIELD_DESC);
          struct.requestVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRelatedTickets_argsTupleSchemeFactory implements SchemeFactory {
      public getRelatedTickets_argsTupleScheme getScheme() {
        return new getRelatedTickets_argsTupleScheme();
      }
    }

    private static class getRelatedTickets_argsTupleScheme extends TupleScheme<getRelatedTickets_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRelatedTickets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestVo()) {
          struct.requestVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRelatedTickets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestVo = new com.froad.thrift.vo.ticket.TicketRelatedRequestVo();
          struct.requestVo.read(iprot);
          struct.setRequestVoIsSet(true);
        }
      }
    }

  }

  public static class getRelatedTickets_result implements org.apache.thrift.TBase<getRelatedTickets_result, getRelatedTickets_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRelatedTickets_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRelatedTickets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRelatedTickets_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRelatedTickets_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketListResponseVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketListResponseVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRelatedTickets_result.class, metaDataMap);
    }

    public getRelatedTickets_result() {
    }

    public getRelatedTickets_result(
      com.froad.thrift.vo.ticket.TicketListResponseVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRelatedTickets_result(getRelatedTickets_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ticket.TicketListResponseVo(other.success);
      }
    }

    public getRelatedTickets_result deepCopy() {
      return new getRelatedTickets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ticket.TicketListResponseVo getSuccess() {
      return this.success;
    }

    public getRelatedTickets_result setSuccess(com.froad.thrift.vo.ticket.TicketListResponseVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ticket.TicketListResponseVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRelatedTickets_result)
        return this.equals((getRelatedTickets_result)that);
      return false;
    }

    public boolean equals(getRelatedTickets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRelatedTickets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRelatedTickets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRelatedTickets_resultStandardSchemeFactory implements SchemeFactory {
      public getRelatedTickets_resultStandardScheme getScheme() {
        return new getRelatedTickets_resultStandardScheme();
      }
    }

    private static class getRelatedTickets_resultStandardScheme extends StandardScheme<getRelatedTickets_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRelatedTickets_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ticket.TicketListResponseVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRelatedTickets_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRelatedTickets_resultTupleSchemeFactory implements SchemeFactory {
      public getRelatedTickets_resultTupleScheme getScheme() {
        return new getRelatedTickets_resultTupleScheme();
      }
    }

    private static class getRelatedTickets_resultTupleScheme extends TupleScheme<getRelatedTickets_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRelatedTickets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRelatedTickets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ticket.TicketListResponseVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTicketDetail_args implements org.apache.thrift.TBase<getTicketDetail_args, getTicketDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTicketDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicketDetail_args");

    private static final org.apache.thrift.protocol.TField TICKET_DETAIL_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketDetailVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicketDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicketDetail_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ticket.TicketDetailVo ticketDetailVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TICKET_DETAIL_VO((short)1, "ticketDetailVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TICKET_DETAIL_VO
            return TICKET_DETAIL_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TICKET_DETAIL_VO, new org.apache.thrift.meta_data.FieldMetaData("ticketDetailVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketDetailVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicketDetail_args.class, metaDataMap);
    }

    public getTicketDetail_args() {
    }

    public getTicketDetail_args(
      com.froad.thrift.vo.ticket.TicketDetailVo ticketDetailVo)
    {
      this();
      this.ticketDetailVo = ticketDetailVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicketDetail_args(getTicketDetail_args other) {
      if (other.isSetTicketDetailVo()) {
        this.ticketDetailVo = new com.froad.thrift.vo.ticket.TicketDetailVo(other.ticketDetailVo);
      }
    }

    public getTicketDetail_args deepCopy() {
      return new getTicketDetail_args(this);
    }

    @Override
    public void clear() {
      this.ticketDetailVo = null;
    }

    public com.froad.thrift.vo.ticket.TicketDetailVo getTicketDetailVo() {
      return this.ticketDetailVo;
    }

    public getTicketDetail_args setTicketDetailVo(com.froad.thrift.vo.ticket.TicketDetailVo ticketDetailVo) {
      this.ticketDetailVo = ticketDetailVo;
      return this;
    }

    public void unsetTicketDetailVo() {
      this.ticketDetailVo = null;
    }

    /** Returns true if field ticketDetailVo is set (has been assigned a value) and false otherwise */
    public boolean isSetTicketDetailVo() {
      return this.ticketDetailVo != null;
    }

    public void setTicketDetailVoIsSet(boolean value) {
      if (!value) {
        this.ticketDetailVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TICKET_DETAIL_VO:
        if (value == null) {
          unsetTicketDetailVo();
        } else {
          setTicketDetailVo((com.froad.thrift.vo.ticket.TicketDetailVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TICKET_DETAIL_VO:
        return getTicketDetailVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TICKET_DETAIL_VO:
        return isSetTicketDetailVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicketDetail_args)
        return this.equals((getTicketDetail_args)that);
      return false;
    }

    public boolean equals(getTicketDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_ticketDetailVo = true && this.isSetTicketDetailVo();
      boolean that_present_ticketDetailVo = true && that.isSetTicketDetailVo();
      if (this_present_ticketDetailVo || that_present_ticketDetailVo) {
        if (!(this_present_ticketDetailVo && that_present_ticketDetailVo))
          return false;
        if (!this.ticketDetailVo.equals(that.ticketDetailVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ticketDetailVo = true && (isSetTicketDetailVo());
      list.add(present_ticketDetailVo);
      if (present_ticketDetailVo)
        list.add(ticketDetailVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTicketDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTicketDetailVo()).compareTo(other.isSetTicketDetailVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicketDetailVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketDetailVo, other.ticketDetailVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicketDetail_args(");
      boolean first = true;

      sb.append("ticketDetailVo:");
      if (this.ticketDetailVo == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketDetailVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (ticketDetailVo != null) {
        ticketDetailVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicketDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getTicketDetail_argsStandardScheme getScheme() {
        return new getTicketDetail_argsStandardScheme();
      }
    }

    private static class getTicketDetail_argsStandardScheme extends StandardScheme<getTicketDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicketDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TICKET_DETAIL_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ticketDetailVo = new com.froad.thrift.vo.ticket.TicketDetailVo();
                struct.ticketDetailVo.read(iprot);
                struct.setTicketDetailVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicketDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ticketDetailVo != null) {
          oprot.writeFieldBegin(TICKET_DETAIL_VO_FIELD_DESC);
          struct.ticketDetailVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicketDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getTicketDetail_argsTupleScheme getScheme() {
        return new getTicketDetail_argsTupleScheme();
      }
    }

    private static class getTicketDetail_argsTupleScheme extends TupleScheme<getTicketDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicketDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTicketDetailVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTicketDetailVo()) {
          struct.ticketDetailVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicketDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ticketDetailVo = new com.froad.thrift.vo.ticket.TicketDetailVo();
          struct.ticketDetailVo.read(iprot);
          struct.setTicketDetailVoIsSet(true);
        }
      }
    }

  }

  public static class getTicketDetail_result implements org.apache.thrift.TBase<getTicketDetail_result, getTicketDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTicketDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicketDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicketDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicketDetail_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.ticket.TicketDetailVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ticket.TicketDetailVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicketDetail_result.class, metaDataMap);
    }

    public getTicketDetail_result() {
    }

    public getTicketDetail_result(
      List<com.froad.thrift.vo.ticket.TicketDetailVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicketDetail_result(getTicketDetail_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.ticket.TicketDetailVo> __this__success = new ArrayList<com.froad.thrift.vo.ticket.TicketDetailVo>(other.success.size());
        for (com.froad.thrift.vo.ticket.TicketDetailVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.ticket.TicketDetailVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTicketDetail_result deepCopy() {
      return new getTicketDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.ticket.TicketDetailVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.ticket.TicketDetailVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.ticket.TicketDetailVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.ticket.TicketDetailVo> getSuccess() {
      return this.success;
    }

    public getTicketDetail_result setSuccess(List<com.froad.thrift.vo.ticket.TicketDetailVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.ticket.TicketDetailVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicketDetail_result)
        return this.equals((getTicketDetail_result)that);
      return false;
    }

    public boolean equals(getTicketDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTicketDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicketDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicketDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getTicketDetail_resultStandardScheme getScheme() {
        return new getTicketDetail_resultStandardScheme();
      }
    }

    private static class getTicketDetail_resultStandardScheme extends StandardScheme<getTicketDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicketDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.ticket.TicketDetailVo>(_list0.size);
                  com.froad.thrift.vo.ticket.TicketDetailVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.ticket.TicketDetailVo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicketDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.ticket.TicketDetailVo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicketDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getTicketDetail_resultTupleScheme getScheme() {
        return new getTicketDetail_resultTupleScheme();
      }
    }

    private static class getTicketDetail_resultTupleScheme extends TupleScheme<getTicketDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicketDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.ticket.TicketDetailVo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicketDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.ticket.TicketDetailVo>(_list5.size);
            com.froad.thrift.vo.ticket.TicketDetailVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.ticket.TicketDetailVo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
