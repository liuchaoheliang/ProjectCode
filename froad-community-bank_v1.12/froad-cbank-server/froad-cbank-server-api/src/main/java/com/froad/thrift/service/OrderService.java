/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class OrderService {

  /**
   * 订单管理模块
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 创建订单接口
     * 
     * @param addOrderVoReq
     */
    public com.froad.thrift.vo.order.AddOrderVoRes addOrder(com.froad.thrift.vo.order.AddOrderVoReq addOrderVoReq) throws org.apache.thrift.TException;

    /**
     * 获取订单概要
     * 
     * @param getOrderSummaryVoReq
     */
    public com.froad.thrift.vo.order.GetOrderSummaryVoRes getOrderList(com.froad.thrift.vo.order.GetOrderSummaryVoReq getOrderSummaryVoReq) throws org.apache.thrift.TException;

    /**
     * 获取订单详情
     * 
     * @param getOrderDetailVoReq
     */
    public com.froad.thrift.vo.order.GetOrderDetailVoRes getOrderDetail(com.froad.thrift.vo.order.GetOrderDetailVoReq getOrderDetailVoReq) throws org.apache.thrift.TException;

    /**
     * 获取面对面支付订单概要
     * 
     * @param getQrcodeOrderSummaryVoReq
     */
    public com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes getQrcodeOrderList(com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq getQrcodeOrderSummaryVoReq) throws org.apache.thrift.TException;

    /**
     * 获取面对面支付订单详情
     * 
     * @param getQrcodeOrderDetailVoReq
     */
    public com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes getQrcodeOrderDetail(com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq getQrcodeOrderDetailVoReq) throws org.apache.thrift.TException;

    /**
     * 取消订单
     * 
     * @param deleteOrderVoReq
     */
    public com.froad.thrift.vo.order.DeleteOrderVoRes deleteOrder(com.froad.thrift.vo.order.DeleteOrderVoReq deleteOrderVoReq) throws org.apache.thrift.TException;

    /**
     * 订单发货
     * 
     * @param shippingOrderVoReq
     */
    public com.froad.thrift.vo.order.ShippingOrderVoRes shippingOrder(com.froad.thrift.vo.order.ShippingOrderVoReq shippingOrderVoReq) throws org.apache.thrift.TException;

    /**
     * 订单收货
     * 
     * @param receiptOrderReq
     */
    public com.froad.thrift.vo.order.ShippingOrderVoRes receiptOrder(com.froad.thrift.vo.order.ReceiptOrderReq receiptOrderReq) throws org.apache.thrift.TException;

    /**
     * 创建面对面支付订单
     * 
     * @param addQrcodeOrderVoReq
     */
    public com.froad.thrift.vo.order.AddQrcodeOrderVoRes addQrcodeOrder(com.froad.thrift.vo.order.AddQrcodeOrderVoReq addQrcodeOrderVoReq) throws org.apache.thrift.TException;

    /**
     * 获取VIP节约金额
     * 
     * @param getVipDiscountVoReq
     */
    public com.froad.thrift.vo.order.GetVipDiscountVoRes getVipDiscount(com.froad.thrift.vo.order.GetVipDiscountVoReq getVipDiscountVoReq) throws org.apache.thrift.TException;

    /**
     * 获取积分兑换订单列表（在线积分/网点礼品）
     * 
     * @param getPointExchangeListVoReq
     */
    public com.froad.thrift.vo.order.GetPointExchangeListVoRes getPointExchangeList(com.froad.thrift.vo.order.GetPointExchangeListVoReq getPointExchangeListVoReq) throws org.apache.thrift.TException;

    /**
     * 获取积分兑换订单详情（在线积分/网点礼品）
     * 
     * @param getPointExchangeDetailVoReq
     */
    public com.froad.thrift.vo.order.GetPointExchangeDetailVoRes getPointExchangeDetail(com.froad.thrift.vo.order.GetPointExchangeDetailVoReq getPointExchangeDetailVoReq) throws org.apache.thrift.TException;

    /**
     * 操作库存
     * 
     * @param storeVoReq
     */
    public com.froad.thrift.vo.order.StoreVoRes storeProcess(com.froad.thrift.vo.order.StoreVoReq storeVoReq) throws org.apache.thrift.TException;

    /**
     * 获取子订单商品价格
     * 
     * @param getSubOrderProductVoReq
     */
    public com.froad.thrift.vo.order.GetSubOrderProductVoRes getSubOrderProduct(com.froad.thrift.vo.order.GetSubOrderProductVoReq getSubOrderProductVoReq) throws org.apache.thrift.TException;

    /**
     * 根据二维码获取订单信息
     * 
     * @param getOrderByQrcodeVoReq
     */
    public com.froad.thrift.vo.order.GetOrderByQrcodeVoRes getOrderByQrcode(com.froad.thrift.vo.order.GetOrderByQrcodeVoReq getOrderByQrcodeVoReq) throws org.apache.thrift.TException;

    /**
     * 获取会员可购买数量
     * 
     * @param getMemberBuyLimitVoReq
     */
    public com.froad.thrift.vo.order.GetMemberBuyLimitVoRes getMemberBuyLimit(com.froad.thrift.vo.order.GetMemberBuyLimitVoReq getMemberBuyLimitVoReq) throws org.apache.thrift.TException;

    /**
     * 获取订单支付结果描述
     * 
     * @param getOrderPaymentResultVoReq
     */
    public com.froad.thrift.vo.order.GetOrderPaymentResultVoRes getOrderPaymentResult(com.froad.thrift.vo.order.GetOrderPaymentResultVoReq getOrderPaymentResultVoReq) throws org.apache.thrift.TException;

    /**
     * 购买VIP（开通VIP资格）
     * 
     * @param addVIPOrderVoReq
     */
    public com.froad.thrift.vo.order.AddVIPOrderVoRes addVIPOrder(com.froad.thrift.vo.order.AddVIPOrderVoReq addVIPOrderVoReq) throws org.apache.thrift.TException;

    /**
     * 获取子订单
     * 
     * @param getSubOrderVoReq
     */
    public com.froad.thrift.vo.order.GetSubOrderVoRes getSubOrder(com.froad.thrift.vo.order.GetSubOrderVoReq getSubOrderVoReq) throws org.apache.thrift.TException;

    /**
     * 更新子订单物流状态
     * 
     * @param updateSubOrderLogisticVoReq
     */
    public com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes updateSubOrderLogistic(com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq updateSubOrderLogisticVoReq) throws org.apache.thrift.TException;

    /**
     * 判断是否跳收银台
     * 
     * @param cashierVoReq
     */
    public com.froad.thrift.vo.order.CashierVoRes checkBeforeCashier(com.froad.thrift.vo.order.CashierVoReq cashierVoReq) throws org.apache.thrift.TException;

    /**
     * 创建惠付订单
     * 
     * @param addPrefPayOrderReq
     */
    public com.froad.thrift.vo.order.AddPrefPayOrderRes addPrefPayOrder(com.froad.thrift.vo.order.AddPrefPayOrderReq addPrefPayOrderReq) throws org.apache.thrift.TException;

    /**
     * 关闭订单
     * 
     * @param closeOrderVoReq
     */
    public com.froad.thrift.vo.order.CloseOrderVoRes closeOrder(com.froad.thrift.vo.order.CloseOrderVoReq closeOrderVoReq) throws org.apache.thrift.TException;

    /**
     * 获取用户最近一笔成功支付的VIP订单号
     * 
     * @param clientId
     * @param memberCode
     */
    public String getVipOrderId(String clientId, long memberCode) throws org.apache.thrift.TException;

    /**
     * 支付中关单后订单退款处理(退积分)
     * 
     * @param refundPayingOrderVoReq
     */
    public com.froad.thrift.vo.order.RefundPayingOrderVoRes refundPayingOrder(com.froad.thrift.vo.order.RefundPayingOrderVoReq refundPayingOrderVoReq) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addOrder(com.froad.thrift.vo.order.AddOrderVoReq addOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOrderList(com.froad.thrift.vo.order.GetOrderSummaryVoReq getOrderSummaryVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOrderDetail(com.froad.thrift.vo.order.GetOrderDetailVoReq getOrderDetailVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getQrcodeOrderList(com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq getQrcodeOrderSummaryVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getQrcodeOrderDetail(com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq getQrcodeOrderDetailVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteOrder(com.froad.thrift.vo.order.DeleteOrderVoReq deleteOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void shippingOrder(com.froad.thrift.vo.order.ShippingOrderVoReq shippingOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void receiptOrder(com.froad.thrift.vo.order.ReceiptOrderReq receiptOrderReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addQrcodeOrder(com.froad.thrift.vo.order.AddQrcodeOrderVoReq addQrcodeOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVipDiscount(com.froad.thrift.vo.order.GetVipDiscountVoReq getVipDiscountVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPointExchangeList(com.froad.thrift.vo.order.GetPointExchangeListVoReq getPointExchangeListVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPointExchangeDetail(com.froad.thrift.vo.order.GetPointExchangeDetailVoReq getPointExchangeDetailVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void storeProcess(com.froad.thrift.vo.order.StoreVoReq storeVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSubOrderProduct(com.froad.thrift.vo.order.GetSubOrderProductVoReq getSubOrderProductVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOrderByQrcode(com.froad.thrift.vo.order.GetOrderByQrcodeVoReq getOrderByQrcodeVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMemberBuyLimit(com.froad.thrift.vo.order.GetMemberBuyLimitVoReq getMemberBuyLimitVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOrderPaymentResult(com.froad.thrift.vo.order.GetOrderPaymentResultVoReq getOrderPaymentResultVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addVIPOrder(com.froad.thrift.vo.order.AddVIPOrderVoReq addVIPOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSubOrder(com.froad.thrift.vo.order.GetSubOrderVoReq getSubOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSubOrderLogistic(com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq updateSubOrderLogisticVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkBeforeCashier(com.froad.thrift.vo.order.CashierVoReq cashierVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addPrefPayOrder(com.froad.thrift.vo.order.AddPrefPayOrderReq addPrefPayOrderReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void closeOrder(com.froad.thrift.vo.order.CloseOrderVoReq closeOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVipOrderId(String clientId, long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void refundPayingOrder(com.froad.thrift.vo.order.RefundPayingOrderVoReq refundPayingOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.order.AddOrderVoRes addOrder(com.froad.thrift.vo.order.AddOrderVoReq addOrderVoReq) throws org.apache.thrift.TException
    {
      send_addOrder(addOrderVoReq);
      return recv_addOrder();
    }

    public void send_addOrder(com.froad.thrift.vo.order.AddOrderVoReq addOrderVoReq) throws org.apache.thrift.TException
    {
      addOrder_args args = new addOrder_args();
      args.setAddOrderVoReq(addOrderVoReq);
      sendBase("addOrder", args);
    }

    public com.froad.thrift.vo.order.AddOrderVoRes recv_addOrder() throws org.apache.thrift.TException
    {
      addOrder_result result = new addOrder_result();
      receiveBase(result, "addOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOrder failed: unknown result");
    }

    public com.froad.thrift.vo.order.GetOrderSummaryVoRes getOrderList(com.froad.thrift.vo.order.GetOrderSummaryVoReq getOrderSummaryVoReq) throws org.apache.thrift.TException
    {
      send_getOrderList(getOrderSummaryVoReq);
      return recv_getOrderList();
    }

    public void send_getOrderList(com.froad.thrift.vo.order.GetOrderSummaryVoReq getOrderSummaryVoReq) throws org.apache.thrift.TException
    {
      getOrderList_args args = new getOrderList_args();
      args.setGetOrderSummaryVoReq(getOrderSummaryVoReq);
      sendBase("getOrderList", args);
    }

    public com.froad.thrift.vo.order.GetOrderSummaryVoRes recv_getOrderList() throws org.apache.thrift.TException
    {
      getOrderList_result result = new getOrderList_result();
      receiveBase(result, "getOrderList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrderList failed: unknown result");
    }

    public com.froad.thrift.vo.order.GetOrderDetailVoRes getOrderDetail(com.froad.thrift.vo.order.GetOrderDetailVoReq getOrderDetailVoReq) throws org.apache.thrift.TException
    {
      send_getOrderDetail(getOrderDetailVoReq);
      return recv_getOrderDetail();
    }

    public void send_getOrderDetail(com.froad.thrift.vo.order.GetOrderDetailVoReq getOrderDetailVoReq) throws org.apache.thrift.TException
    {
      getOrderDetail_args args = new getOrderDetail_args();
      args.setGetOrderDetailVoReq(getOrderDetailVoReq);
      sendBase("getOrderDetail", args);
    }

    public com.froad.thrift.vo.order.GetOrderDetailVoRes recv_getOrderDetail() throws org.apache.thrift.TException
    {
      getOrderDetail_result result = new getOrderDetail_result();
      receiveBase(result, "getOrderDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrderDetail failed: unknown result");
    }

    public com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes getQrcodeOrderList(com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq getQrcodeOrderSummaryVoReq) throws org.apache.thrift.TException
    {
      send_getQrcodeOrderList(getQrcodeOrderSummaryVoReq);
      return recv_getQrcodeOrderList();
    }

    public void send_getQrcodeOrderList(com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq getQrcodeOrderSummaryVoReq) throws org.apache.thrift.TException
    {
      getQrcodeOrderList_args args = new getQrcodeOrderList_args();
      args.setGetQrcodeOrderSummaryVoReq(getQrcodeOrderSummaryVoReq);
      sendBase("getQrcodeOrderList", args);
    }

    public com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes recv_getQrcodeOrderList() throws org.apache.thrift.TException
    {
      getQrcodeOrderList_result result = new getQrcodeOrderList_result();
      receiveBase(result, "getQrcodeOrderList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getQrcodeOrderList failed: unknown result");
    }

    public com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes getQrcodeOrderDetail(com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq getQrcodeOrderDetailVoReq) throws org.apache.thrift.TException
    {
      send_getQrcodeOrderDetail(getQrcodeOrderDetailVoReq);
      return recv_getQrcodeOrderDetail();
    }

    public void send_getQrcodeOrderDetail(com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq getQrcodeOrderDetailVoReq) throws org.apache.thrift.TException
    {
      getQrcodeOrderDetail_args args = new getQrcodeOrderDetail_args();
      args.setGetQrcodeOrderDetailVoReq(getQrcodeOrderDetailVoReq);
      sendBase("getQrcodeOrderDetail", args);
    }

    public com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes recv_getQrcodeOrderDetail() throws org.apache.thrift.TException
    {
      getQrcodeOrderDetail_result result = new getQrcodeOrderDetail_result();
      receiveBase(result, "getQrcodeOrderDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getQrcodeOrderDetail failed: unknown result");
    }

    public com.froad.thrift.vo.order.DeleteOrderVoRes deleteOrder(com.froad.thrift.vo.order.DeleteOrderVoReq deleteOrderVoReq) throws org.apache.thrift.TException
    {
      send_deleteOrder(deleteOrderVoReq);
      return recv_deleteOrder();
    }

    public void send_deleteOrder(com.froad.thrift.vo.order.DeleteOrderVoReq deleteOrderVoReq) throws org.apache.thrift.TException
    {
      deleteOrder_args args = new deleteOrder_args();
      args.setDeleteOrderVoReq(deleteOrderVoReq);
      sendBase("deleteOrder", args);
    }

    public com.froad.thrift.vo.order.DeleteOrderVoRes recv_deleteOrder() throws org.apache.thrift.TException
    {
      deleteOrder_result result = new deleteOrder_result();
      receiveBase(result, "deleteOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteOrder failed: unknown result");
    }

    public com.froad.thrift.vo.order.ShippingOrderVoRes shippingOrder(com.froad.thrift.vo.order.ShippingOrderVoReq shippingOrderVoReq) throws org.apache.thrift.TException
    {
      send_shippingOrder(shippingOrderVoReq);
      return recv_shippingOrder();
    }

    public void send_shippingOrder(com.froad.thrift.vo.order.ShippingOrderVoReq shippingOrderVoReq) throws org.apache.thrift.TException
    {
      shippingOrder_args args = new shippingOrder_args();
      args.setShippingOrderVoReq(shippingOrderVoReq);
      sendBase("shippingOrder", args);
    }

    public com.froad.thrift.vo.order.ShippingOrderVoRes recv_shippingOrder() throws org.apache.thrift.TException
    {
      shippingOrder_result result = new shippingOrder_result();
      receiveBase(result, "shippingOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "shippingOrder failed: unknown result");
    }

    public com.froad.thrift.vo.order.ShippingOrderVoRes receiptOrder(com.froad.thrift.vo.order.ReceiptOrderReq receiptOrderReq) throws org.apache.thrift.TException
    {
      send_receiptOrder(receiptOrderReq);
      return recv_receiptOrder();
    }

    public void send_receiptOrder(com.froad.thrift.vo.order.ReceiptOrderReq receiptOrderReq) throws org.apache.thrift.TException
    {
      receiptOrder_args args = new receiptOrder_args();
      args.setReceiptOrderReq(receiptOrderReq);
      sendBase("receiptOrder", args);
    }

    public com.froad.thrift.vo.order.ShippingOrderVoRes recv_receiptOrder() throws org.apache.thrift.TException
    {
      receiptOrder_result result = new receiptOrder_result();
      receiveBase(result, "receiptOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "receiptOrder failed: unknown result");
    }

    public com.froad.thrift.vo.order.AddQrcodeOrderVoRes addQrcodeOrder(com.froad.thrift.vo.order.AddQrcodeOrderVoReq addQrcodeOrderVoReq) throws org.apache.thrift.TException
    {
      send_addQrcodeOrder(addQrcodeOrderVoReq);
      return recv_addQrcodeOrder();
    }

    public void send_addQrcodeOrder(com.froad.thrift.vo.order.AddQrcodeOrderVoReq addQrcodeOrderVoReq) throws org.apache.thrift.TException
    {
      addQrcodeOrder_args args = new addQrcodeOrder_args();
      args.setAddQrcodeOrderVoReq(addQrcodeOrderVoReq);
      sendBase("addQrcodeOrder", args);
    }

    public com.froad.thrift.vo.order.AddQrcodeOrderVoRes recv_addQrcodeOrder() throws org.apache.thrift.TException
    {
      addQrcodeOrder_result result = new addQrcodeOrder_result();
      receiveBase(result, "addQrcodeOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addQrcodeOrder failed: unknown result");
    }

    public com.froad.thrift.vo.order.GetVipDiscountVoRes getVipDiscount(com.froad.thrift.vo.order.GetVipDiscountVoReq getVipDiscountVoReq) throws org.apache.thrift.TException
    {
      send_getVipDiscount(getVipDiscountVoReq);
      return recv_getVipDiscount();
    }

    public void send_getVipDiscount(com.froad.thrift.vo.order.GetVipDiscountVoReq getVipDiscountVoReq) throws org.apache.thrift.TException
    {
      getVipDiscount_args args = new getVipDiscount_args();
      args.setGetVipDiscountVoReq(getVipDiscountVoReq);
      sendBase("getVipDiscount", args);
    }

    public com.froad.thrift.vo.order.GetVipDiscountVoRes recv_getVipDiscount() throws org.apache.thrift.TException
    {
      getVipDiscount_result result = new getVipDiscount_result();
      receiveBase(result, "getVipDiscount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVipDiscount failed: unknown result");
    }

    public com.froad.thrift.vo.order.GetPointExchangeListVoRes getPointExchangeList(com.froad.thrift.vo.order.GetPointExchangeListVoReq getPointExchangeListVoReq) throws org.apache.thrift.TException
    {
      send_getPointExchangeList(getPointExchangeListVoReq);
      return recv_getPointExchangeList();
    }

    public void send_getPointExchangeList(com.froad.thrift.vo.order.GetPointExchangeListVoReq getPointExchangeListVoReq) throws org.apache.thrift.TException
    {
      getPointExchangeList_args args = new getPointExchangeList_args();
      args.setGetPointExchangeListVoReq(getPointExchangeListVoReq);
      sendBase("getPointExchangeList", args);
    }

    public com.froad.thrift.vo.order.GetPointExchangeListVoRes recv_getPointExchangeList() throws org.apache.thrift.TException
    {
      getPointExchangeList_result result = new getPointExchangeList_result();
      receiveBase(result, "getPointExchangeList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPointExchangeList failed: unknown result");
    }

    public com.froad.thrift.vo.order.GetPointExchangeDetailVoRes getPointExchangeDetail(com.froad.thrift.vo.order.GetPointExchangeDetailVoReq getPointExchangeDetailVoReq) throws org.apache.thrift.TException
    {
      send_getPointExchangeDetail(getPointExchangeDetailVoReq);
      return recv_getPointExchangeDetail();
    }

    public void send_getPointExchangeDetail(com.froad.thrift.vo.order.GetPointExchangeDetailVoReq getPointExchangeDetailVoReq) throws org.apache.thrift.TException
    {
      getPointExchangeDetail_args args = new getPointExchangeDetail_args();
      args.setGetPointExchangeDetailVoReq(getPointExchangeDetailVoReq);
      sendBase("getPointExchangeDetail", args);
    }

    public com.froad.thrift.vo.order.GetPointExchangeDetailVoRes recv_getPointExchangeDetail() throws org.apache.thrift.TException
    {
      getPointExchangeDetail_result result = new getPointExchangeDetail_result();
      receiveBase(result, "getPointExchangeDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPointExchangeDetail failed: unknown result");
    }

    public com.froad.thrift.vo.order.StoreVoRes storeProcess(com.froad.thrift.vo.order.StoreVoReq storeVoReq) throws org.apache.thrift.TException
    {
      send_storeProcess(storeVoReq);
      return recv_storeProcess();
    }

    public void send_storeProcess(com.froad.thrift.vo.order.StoreVoReq storeVoReq) throws org.apache.thrift.TException
    {
      storeProcess_args args = new storeProcess_args();
      args.setStoreVoReq(storeVoReq);
      sendBase("storeProcess", args);
    }

    public com.froad.thrift.vo.order.StoreVoRes recv_storeProcess() throws org.apache.thrift.TException
    {
      storeProcess_result result = new storeProcess_result();
      receiveBase(result, "storeProcess");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "storeProcess failed: unknown result");
    }

    public com.froad.thrift.vo.order.GetSubOrderProductVoRes getSubOrderProduct(com.froad.thrift.vo.order.GetSubOrderProductVoReq getSubOrderProductVoReq) throws org.apache.thrift.TException
    {
      send_getSubOrderProduct(getSubOrderProductVoReq);
      return recv_getSubOrderProduct();
    }

    public void send_getSubOrderProduct(com.froad.thrift.vo.order.GetSubOrderProductVoReq getSubOrderProductVoReq) throws org.apache.thrift.TException
    {
      getSubOrderProduct_args args = new getSubOrderProduct_args();
      args.setGetSubOrderProductVoReq(getSubOrderProductVoReq);
      sendBase("getSubOrderProduct", args);
    }

    public com.froad.thrift.vo.order.GetSubOrderProductVoRes recv_getSubOrderProduct() throws org.apache.thrift.TException
    {
      getSubOrderProduct_result result = new getSubOrderProduct_result();
      receiveBase(result, "getSubOrderProduct");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSubOrderProduct failed: unknown result");
    }

    public com.froad.thrift.vo.order.GetOrderByQrcodeVoRes getOrderByQrcode(com.froad.thrift.vo.order.GetOrderByQrcodeVoReq getOrderByQrcodeVoReq) throws org.apache.thrift.TException
    {
      send_getOrderByQrcode(getOrderByQrcodeVoReq);
      return recv_getOrderByQrcode();
    }

    public void send_getOrderByQrcode(com.froad.thrift.vo.order.GetOrderByQrcodeVoReq getOrderByQrcodeVoReq) throws org.apache.thrift.TException
    {
      getOrderByQrcode_args args = new getOrderByQrcode_args();
      args.setGetOrderByQrcodeVoReq(getOrderByQrcodeVoReq);
      sendBase("getOrderByQrcode", args);
    }

    public com.froad.thrift.vo.order.GetOrderByQrcodeVoRes recv_getOrderByQrcode() throws org.apache.thrift.TException
    {
      getOrderByQrcode_result result = new getOrderByQrcode_result();
      receiveBase(result, "getOrderByQrcode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrderByQrcode failed: unknown result");
    }

    public com.froad.thrift.vo.order.GetMemberBuyLimitVoRes getMemberBuyLimit(com.froad.thrift.vo.order.GetMemberBuyLimitVoReq getMemberBuyLimitVoReq) throws org.apache.thrift.TException
    {
      send_getMemberBuyLimit(getMemberBuyLimitVoReq);
      return recv_getMemberBuyLimit();
    }

    public void send_getMemberBuyLimit(com.froad.thrift.vo.order.GetMemberBuyLimitVoReq getMemberBuyLimitVoReq) throws org.apache.thrift.TException
    {
      getMemberBuyLimit_args args = new getMemberBuyLimit_args();
      args.setGetMemberBuyLimitVoReq(getMemberBuyLimitVoReq);
      sendBase("getMemberBuyLimit", args);
    }

    public com.froad.thrift.vo.order.GetMemberBuyLimitVoRes recv_getMemberBuyLimit() throws org.apache.thrift.TException
    {
      getMemberBuyLimit_result result = new getMemberBuyLimit_result();
      receiveBase(result, "getMemberBuyLimit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMemberBuyLimit failed: unknown result");
    }

    public com.froad.thrift.vo.order.GetOrderPaymentResultVoRes getOrderPaymentResult(com.froad.thrift.vo.order.GetOrderPaymentResultVoReq getOrderPaymentResultVoReq) throws org.apache.thrift.TException
    {
      send_getOrderPaymentResult(getOrderPaymentResultVoReq);
      return recv_getOrderPaymentResult();
    }

    public void send_getOrderPaymentResult(com.froad.thrift.vo.order.GetOrderPaymentResultVoReq getOrderPaymentResultVoReq) throws org.apache.thrift.TException
    {
      getOrderPaymentResult_args args = new getOrderPaymentResult_args();
      args.setGetOrderPaymentResultVoReq(getOrderPaymentResultVoReq);
      sendBase("getOrderPaymentResult", args);
    }

    public com.froad.thrift.vo.order.GetOrderPaymentResultVoRes recv_getOrderPaymentResult() throws org.apache.thrift.TException
    {
      getOrderPaymentResult_result result = new getOrderPaymentResult_result();
      receiveBase(result, "getOrderPaymentResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrderPaymentResult failed: unknown result");
    }

    public com.froad.thrift.vo.order.AddVIPOrderVoRes addVIPOrder(com.froad.thrift.vo.order.AddVIPOrderVoReq addVIPOrderVoReq) throws org.apache.thrift.TException
    {
      send_addVIPOrder(addVIPOrderVoReq);
      return recv_addVIPOrder();
    }

    public void send_addVIPOrder(com.froad.thrift.vo.order.AddVIPOrderVoReq addVIPOrderVoReq) throws org.apache.thrift.TException
    {
      addVIPOrder_args args = new addVIPOrder_args();
      args.setAddVIPOrderVoReq(addVIPOrderVoReq);
      sendBase("addVIPOrder", args);
    }

    public com.froad.thrift.vo.order.AddVIPOrderVoRes recv_addVIPOrder() throws org.apache.thrift.TException
    {
      addVIPOrder_result result = new addVIPOrder_result();
      receiveBase(result, "addVIPOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addVIPOrder failed: unknown result");
    }

    public com.froad.thrift.vo.order.GetSubOrderVoRes getSubOrder(com.froad.thrift.vo.order.GetSubOrderVoReq getSubOrderVoReq) throws org.apache.thrift.TException
    {
      send_getSubOrder(getSubOrderVoReq);
      return recv_getSubOrder();
    }

    public void send_getSubOrder(com.froad.thrift.vo.order.GetSubOrderVoReq getSubOrderVoReq) throws org.apache.thrift.TException
    {
      getSubOrder_args args = new getSubOrder_args();
      args.setGetSubOrderVoReq(getSubOrderVoReq);
      sendBase("getSubOrder", args);
    }

    public com.froad.thrift.vo.order.GetSubOrderVoRes recv_getSubOrder() throws org.apache.thrift.TException
    {
      getSubOrder_result result = new getSubOrder_result();
      receiveBase(result, "getSubOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSubOrder failed: unknown result");
    }

    public com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes updateSubOrderLogistic(com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq updateSubOrderLogisticVoReq) throws org.apache.thrift.TException
    {
      send_updateSubOrderLogistic(updateSubOrderLogisticVoReq);
      return recv_updateSubOrderLogistic();
    }

    public void send_updateSubOrderLogistic(com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq updateSubOrderLogisticVoReq) throws org.apache.thrift.TException
    {
      updateSubOrderLogistic_args args = new updateSubOrderLogistic_args();
      args.setUpdateSubOrderLogisticVoReq(updateSubOrderLogisticVoReq);
      sendBase("updateSubOrderLogistic", args);
    }

    public com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes recv_updateSubOrderLogistic() throws org.apache.thrift.TException
    {
      updateSubOrderLogistic_result result = new updateSubOrderLogistic_result();
      receiveBase(result, "updateSubOrderLogistic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSubOrderLogistic failed: unknown result");
    }

    public com.froad.thrift.vo.order.CashierVoRes checkBeforeCashier(com.froad.thrift.vo.order.CashierVoReq cashierVoReq) throws org.apache.thrift.TException
    {
      send_checkBeforeCashier(cashierVoReq);
      return recv_checkBeforeCashier();
    }

    public void send_checkBeforeCashier(com.froad.thrift.vo.order.CashierVoReq cashierVoReq) throws org.apache.thrift.TException
    {
      checkBeforeCashier_args args = new checkBeforeCashier_args();
      args.setCashierVoReq(cashierVoReq);
      sendBase("checkBeforeCashier", args);
    }

    public com.froad.thrift.vo.order.CashierVoRes recv_checkBeforeCashier() throws org.apache.thrift.TException
    {
      checkBeforeCashier_result result = new checkBeforeCashier_result();
      receiveBase(result, "checkBeforeCashier");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkBeforeCashier failed: unknown result");
    }

    public com.froad.thrift.vo.order.AddPrefPayOrderRes addPrefPayOrder(com.froad.thrift.vo.order.AddPrefPayOrderReq addPrefPayOrderReq) throws org.apache.thrift.TException
    {
      send_addPrefPayOrder(addPrefPayOrderReq);
      return recv_addPrefPayOrder();
    }

    public void send_addPrefPayOrder(com.froad.thrift.vo.order.AddPrefPayOrderReq addPrefPayOrderReq) throws org.apache.thrift.TException
    {
      addPrefPayOrder_args args = new addPrefPayOrder_args();
      args.setAddPrefPayOrderReq(addPrefPayOrderReq);
      sendBase("addPrefPayOrder", args);
    }

    public com.froad.thrift.vo.order.AddPrefPayOrderRes recv_addPrefPayOrder() throws org.apache.thrift.TException
    {
      addPrefPayOrder_result result = new addPrefPayOrder_result();
      receiveBase(result, "addPrefPayOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPrefPayOrder failed: unknown result");
    }

    public com.froad.thrift.vo.order.CloseOrderVoRes closeOrder(com.froad.thrift.vo.order.CloseOrderVoReq closeOrderVoReq) throws org.apache.thrift.TException
    {
      send_closeOrder(closeOrderVoReq);
      return recv_closeOrder();
    }

    public void send_closeOrder(com.froad.thrift.vo.order.CloseOrderVoReq closeOrderVoReq) throws org.apache.thrift.TException
    {
      closeOrder_args args = new closeOrder_args();
      args.setCloseOrderVoReq(closeOrderVoReq);
      sendBase("closeOrder", args);
    }

    public com.froad.thrift.vo.order.CloseOrderVoRes recv_closeOrder() throws org.apache.thrift.TException
    {
      closeOrder_result result = new closeOrder_result();
      receiveBase(result, "closeOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "closeOrder failed: unknown result");
    }

    public String getVipOrderId(String clientId, long memberCode) throws org.apache.thrift.TException
    {
      send_getVipOrderId(clientId, memberCode);
      return recv_getVipOrderId();
    }

    public void send_getVipOrderId(String clientId, long memberCode) throws org.apache.thrift.TException
    {
      getVipOrderId_args args = new getVipOrderId_args();
      args.setClientId(clientId);
      args.setMemberCode(memberCode);
      sendBase("getVipOrderId", args);
    }

    public String recv_getVipOrderId() throws org.apache.thrift.TException
    {
      getVipOrderId_result result = new getVipOrderId_result();
      receiveBase(result, "getVipOrderId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVipOrderId failed: unknown result");
    }

    public com.froad.thrift.vo.order.RefundPayingOrderVoRes refundPayingOrder(com.froad.thrift.vo.order.RefundPayingOrderVoReq refundPayingOrderVoReq) throws org.apache.thrift.TException
    {
      send_refundPayingOrder(refundPayingOrderVoReq);
      return recv_refundPayingOrder();
    }

    public void send_refundPayingOrder(com.froad.thrift.vo.order.RefundPayingOrderVoReq refundPayingOrderVoReq) throws org.apache.thrift.TException
    {
      refundPayingOrder_args args = new refundPayingOrder_args();
      args.setRefundPayingOrderVoReq(refundPayingOrderVoReq);
      sendBase("refundPayingOrder", args);
    }

    public com.froad.thrift.vo.order.RefundPayingOrderVoRes recv_refundPayingOrder() throws org.apache.thrift.TException
    {
      refundPayingOrder_result result = new refundPayingOrder_result();
      receiveBase(result, "refundPayingOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "refundPayingOrder failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addOrder(com.froad.thrift.vo.order.AddOrderVoReq addOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOrder_call method_call = new addOrder_call(addOrderVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.AddOrderVoReq addOrderVoReq;
      public addOrder_call(com.froad.thrift.vo.order.AddOrderVoReq addOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.addOrderVoReq = addOrderVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOrder_args args = new addOrder_args();
        args.setAddOrderVoReq(addOrderVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.AddOrderVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addOrder();
      }
    }

    public void getOrderList(com.froad.thrift.vo.order.GetOrderSummaryVoReq getOrderSummaryVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrderList_call method_call = new getOrderList_call(getOrderSummaryVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrderList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.GetOrderSummaryVoReq getOrderSummaryVoReq;
      public getOrderList_call(com.froad.thrift.vo.order.GetOrderSummaryVoReq getOrderSummaryVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.getOrderSummaryVoReq = getOrderSummaryVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrderList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrderList_args args = new getOrderList_args();
        args.setGetOrderSummaryVoReq(getOrderSummaryVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.GetOrderSummaryVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrderList();
      }
    }

    public void getOrderDetail(com.froad.thrift.vo.order.GetOrderDetailVoReq getOrderDetailVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrderDetail_call method_call = new getOrderDetail_call(getOrderDetailVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrderDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.GetOrderDetailVoReq getOrderDetailVoReq;
      public getOrderDetail_call(com.froad.thrift.vo.order.GetOrderDetailVoReq getOrderDetailVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.getOrderDetailVoReq = getOrderDetailVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrderDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrderDetail_args args = new getOrderDetail_args();
        args.setGetOrderDetailVoReq(getOrderDetailVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.GetOrderDetailVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrderDetail();
      }
    }

    public void getQrcodeOrderList(com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq getQrcodeOrderSummaryVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getQrcodeOrderList_call method_call = new getQrcodeOrderList_call(getQrcodeOrderSummaryVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getQrcodeOrderList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq getQrcodeOrderSummaryVoReq;
      public getQrcodeOrderList_call(com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq getQrcodeOrderSummaryVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.getQrcodeOrderSummaryVoReq = getQrcodeOrderSummaryVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getQrcodeOrderList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getQrcodeOrderList_args args = new getQrcodeOrderList_args();
        args.setGetQrcodeOrderSummaryVoReq(getQrcodeOrderSummaryVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getQrcodeOrderList();
      }
    }

    public void getQrcodeOrderDetail(com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq getQrcodeOrderDetailVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getQrcodeOrderDetail_call method_call = new getQrcodeOrderDetail_call(getQrcodeOrderDetailVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getQrcodeOrderDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq getQrcodeOrderDetailVoReq;
      public getQrcodeOrderDetail_call(com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq getQrcodeOrderDetailVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.getQrcodeOrderDetailVoReq = getQrcodeOrderDetailVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getQrcodeOrderDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getQrcodeOrderDetail_args args = new getQrcodeOrderDetail_args();
        args.setGetQrcodeOrderDetailVoReq(getQrcodeOrderDetailVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getQrcodeOrderDetail();
      }
    }

    public void deleteOrder(com.froad.thrift.vo.order.DeleteOrderVoReq deleteOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteOrder_call method_call = new deleteOrder_call(deleteOrderVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.DeleteOrderVoReq deleteOrderVoReq;
      public deleteOrder_call(com.froad.thrift.vo.order.DeleteOrderVoReq deleteOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deleteOrderVoReq = deleteOrderVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteOrder_args args = new deleteOrder_args();
        args.setDeleteOrderVoReq(deleteOrderVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.DeleteOrderVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteOrder();
      }
    }

    public void shippingOrder(com.froad.thrift.vo.order.ShippingOrderVoReq shippingOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shippingOrder_call method_call = new shippingOrder_call(shippingOrderVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shippingOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.ShippingOrderVoReq shippingOrderVoReq;
      public shippingOrder_call(com.froad.thrift.vo.order.ShippingOrderVoReq shippingOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shippingOrderVoReq = shippingOrderVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shippingOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shippingOrder_args args = new shippingOrder_args();
        args.setShippingOrderVoReq(shippingOrderVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.ShippingOrderVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_shippingOrder();
      }
    }

    public void receiptOrder(com.froad.thrift.vo.order.ReceiptOrderReq receiptOrderReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      receiptOrder_call method_call = new receiptOrder_call(receiptOrderReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiptOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.ReceiptOrderReq receiptOrderReq;
      public receiptOrder_call(com.froad.thrift.vo.order.ReceiptOrderReq receiptOrderReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.receiptOrderReq = receiptOrderReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiptOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiptOrder_args args = new receiptOrder_args();
        args.setReceiptOrderReq(receiptOrderReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.ShippingOrderVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_receiptOrder();
      }
    }

    public void addQrcodeOrder(com.froad.thrift.vo.order.AddQrcodeOrderVoReq addQrcodeOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addQrcodeOrder_call method_call = new addQrcodeOrder_call(addQrcodeOrderVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addQrcodeOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.AddQrcodeOrderVoReq addQrcodeOrderVoReq;
      public addQrcodeOrder_call(com.froad.thrift.vo.order.AddQrcodeOrderVoReq addQrcodeOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.addQrcodeOrderVoReq = addQrcodeOrderVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addQrcodeOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addQrcodeOrder_args args = new addQrcodeOrder_args();
        args.setAddQrcodeOrderVoReq(addQrcodeOrderVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.AddQrcodeOrderVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addQrcodeOrder();
      }
    }

    public void getVipDiscount(com.froad.thrift.vo.order.GetVipDiscountVoReq getVipDiscountVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVipDiscount_call method_call = new getVipDiscount_call(getVipDiscountVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVipDiscount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.GetVipDiscountVoReq getVipDiscountVoReq;
      public getVipDiscount_call(com.froad.thrift.vo.order.GetVipDiscountVoReq getVipDiscountVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.getVipDiscountVoReq = getVipDiscountVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVipDiscount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVipDiscount_args args = new getVipDiscount_args();
        args.setGetVipDiscountVoReq(getVipDiscountVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.GetVipDiscountVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVipDiscount();
      }
    }

    public void getPointExchangeList(com.froad.thrift.vo.order.GetPointExchangeListVoReq getPointExchangeListVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPointExchangeList_call method_call = new getPointExchangeList_call(getPointExchangeListVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPointExchangeList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.GetPointExchangeListVoReq getPointExchangeListVoReq;
      public getPointExchangeList_call(com.froad.thrift.vo.order.GetPointExchangeListVoReq getPointExchangeListVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.getPointExchangeListVoReq = getPointExchangeListVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPointExchangeList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPointExchangeList_args args = new getPointExchangeList_args();
        args.setGetPointExchangeListVoReq(getPointExchangeListVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.GetPointExchangeListVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPointExchangeList();
      }
    }

    public void getPointExchangeDetail(com.froad.thrift.vo.order.GetPointExchangeDetailVoReq getPointExchangeDetailVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPointExchangeDetail_call method_call = new getPointExchangeDetail_call(getPointExchangeDetailVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPointExchangeDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.GetPointExchangeDetailVoReq getPointExchangeDetailVoReq;
      public getPointExchangeDetail_call(com.froad.thrift.vo.order.GetPointExchangeDetailVoReq getPointExchangeDetailVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.getPointExchangeDetailVoReq = getPointExchangeDetailVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPointExchangeDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPointExchangeDetail_args args = new getPointExchangeDetail_args();
        args.setGetPointExchangeDetailVoReq(getPointExchangeDetailVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.GetPointExchangeDetailVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPointExchangeDetail();
      }
    }

    public void storeProcess(com.froad.thrift.vo.order.StoreVoReq storeVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeProcess_call method_call = new storeProcess_call(storeVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeProcess_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.StoreVoReq storeVoReq;
      public storeProcess_call(com.froad.thrift.vo.order.StoreVoReq storeVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.storeVoReq = storeVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeProcess", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeProcess_args args = new storeProcess_args();
        args.setStoreVoReq(storeVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.StoreVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_storeProcess();
      }
    }

    public void getSubOrderProduct(com.froad.thrift.vo.order.GetSubOrderProductVoReq getSubOrderProductVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSubOrderProduct_call method_call = new getSubOrderProduct_call(getSubOrderProductVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSubOrderProduct_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.GetSubOrderProductVoReq getSubOrderProductVoReq;
      public getSubOrderProduct_call(com.froad.thrift.vo.order.GetSubOrderProductVoReq getSubOrderProductVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.getSubOrderProductVoReq = getSubOrderProductVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubOrderProduct", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSubOrderProduct_args args = new getSubOrderProduct_args();
        args.setGetSubOrderProductVoReq(getSubOrderProductVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.GetSubOrderProductVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSubOrderProduct();
      }
    }

    public void getOrderByQrcode(com.froad.thrift.vo.order.GetOrderByQrcodeVoReq getOrderByQrcodeVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrderByQrcode_call method_call = new getOrderByQrcode_call(getOrderByQrcodeVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrderByQrcode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.GetOrderByQrcodeVoReq getOrderByQrcodeVoReq;
      public getOrderByQrcode_call(com.froad.thrift.vo.order.GetOrderByQrcodeVoReq getOrderByQrcodeVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.getOrderByQrcodeVoReq = getOrderByQrcodeVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrderByQrcode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrderByQrcode_args args = new getOrderByQrcode_args();
        args.setGetOrderByQrcodeVoReq(getOrderByQrcodeVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.GetOrderByQrcodeVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrderByQrcode();
      }
    }

    public void getMemberBuyLimit(com.froad.thrift.vo.order.GetMemberBuyLimitVoReq getMemberBuyLimitVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMemberBuyLimit_call method_call = new getMemberBuyLimit_call(getMemberBuyLimitVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMemberBuyLimit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.GetMemberBuyLimitVoReq getMemberBuyLimitVoReq;
      public getMemberBuyLimit_call(com.froad.thrift.vo.order.GetMemberBuyLimitVoReq getMemberBuyLimitVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.getMemberBuyLimitVoReq = getMemberBuyLimitVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMemberBuyLimit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMemberBuyLimit_args args = new getMemberBuyLimit_args();
        args.setGetMemberBuyLimitVoReq(getMemberBuyLimitVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.GetMemberBuyLimitVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMemberBuyLimit();
      }
    }

    public void getOrderPaymentResult(com.froad.thrift.vo.order.GetOrderPaymentResultVoReq getOrderPaymentResultVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrderPaymentResult_call method_call = new getOrderPaymentResult_call(getOrderPaymentResultVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrderPaymentResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.GetOrderPaymentResultVoReq getOrderPaymentResultVoReq;
      public getOrderPaymentResult_call(com.froad.thrift.vo.order.GetOrderPaymentResultVoReq getOrderPaymentResultVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.getOrderPaymentResultVoReq = getOrderPaymentResultVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrderPaymentResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrderPaymentResult_args args = new getOrderPaymentResult_args();
        args.setGetOrderPaymentResultVoReq(getOrderPaymentResultVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.GetOrderPaymentResultVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrderPaymentResult();
      }
    }

    public void addVIPOrder(com.froad.thrift.vo.order.AddVIPOrderVoReq addVIPOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addVIPOrder_call method_call = new addVIPOrder_call(addVIPOrderVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addVIPOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.AddVIPOrderVoReq addVIPOrderVoReq;
      public addVIPOrder_call(com.froad.thrift.vo.order.AddVIPOrderVoReq addVIPOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.addVIPOrderVoReq = addVIPOrderVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addVIPOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addVIPOrder_args args = new addVIPOrder_args();
        args.setAddVIPOrderVoReq(addVIPOrderVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.AddVIPOrderVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addVIPOrder();
      }
    }

    public void getSubOrder(com.froad.thrift.vo.order.GetSubOrderVoReq getSubOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSubOrder_call method_call = new getSubOrder_call(getSubOrderVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSubOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.GetSubOrderVoReq getSubOrderVoReq;
      public getSubOrder_call(com.froad.thrift.vo.order.GetSubOrderVoReq getSubOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.getSubOrderVoReq = getSubOrderVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSubOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSubOrder_args args = new getSubOrder_args();
        args.setGetSubOrderVoReq(getSubOrderVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.GetSubOrderVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSubOrder();
      }
    }

    public void updateSubOrderLogistic(com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq updateSubOrderLogisticVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSubOrderLogistic_call method_call = new updateSubOrderLogistic_call(updateSubOrderLogisticVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSubOrderLogistic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq updateSubOrderLogisticVoReq;
      public updateSubOrderLogistic_call(com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq updateSubOrderLogisticVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.updateSubOrderLogisticVoReq = updateSubOrderLogisticVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSubOrderLogistic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSubOrderLogistic_args args = new updateSubOrderLogistic_args();
        args.setUpdateSubOrderLogisticVoReq(updateSubOrderLogisticVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSubOrderLogistic();
      }
    }

    public void checkBeforeCashier(com.froad.thrift.vo.order.CashierVoReq cashierVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkBeforeCashier_call method_call = new checkBeforeCashier_call(cashierVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkBeforeCashier_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.CashierVoReq cashierVoReq;
      public checkBeforeCashier_call(com.froad.thrift.vo.order.CashierVoReq cashierVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cashierVoReq = cashierVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkBeforeCashier", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkBeforeCashier_args args = new checkBeforeCashier_args();
        args.setCashierVoReq(cashierVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.CashierVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkBeforeCashier();
      }
    }

    public void addPrefPayOrder(com.froad.thrift.vo.order.AddPrefPayOrderReq addPrefPayOrderReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPrefPayOrder_call method_call = new addPrefPayOrder_call(addPrefPayOrderReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPrefPayOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.AddPrefPayOrderReq addPrefPayOrderReq;
      public addPrefPayOrder_call(com.froad.thrift.vo.order.AddPrefPayOrderReq addPrefPayOrderReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.addPrefPayOrderReq = addPrefPayOrderReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPrefPayOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPrefPayOrder_args args = new addPrefPayOrder_args();
        args.setAddPrefPayOrderReq(addPrefPayOrderReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.AddPrefPayOrderRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addPrefPayOrder();
      }
    }

    public void closeOrder(com.froad.thrift.vo.order.CloseOrderVoReq closeOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeOrder_call method_call = new closeOrder_call(closeOrderVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.CloseOrderVoReq closeOrderVoReq;
      public closeOrder_call(com.froad.thrift.vo.order.CloseOrderVoReq closeOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.closeOrderVoReq = closeOrderVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        closeOrder_args args = new closeOrder_args();
        args.setCloseOrderVoReq(closeOrderVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.CloseOrderVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_closeOrder();
      }
    }

    public void getVipOrderId(String clientId, long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVipOrderId_call method_call = new getVipOrderId_call(clientId, memberCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVipOrderId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private long memberCode;
      public getVipOrderId_call(String clientId, long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.memberCode = memberCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVipOrderId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVipOrderId_args args = new getVipOrderId_args();
        args.setClientId(clientId);
        args.setMemberCode(memberCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVipOrderId();
      }
    }

    public void refundPayingOrder(com.froad.thrift.vo.order.RefundPayingOrderVoReq refundPayingOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      refundPayingOrder_call method_call = new refundPayingOrder_call(refundPayingOrderVoReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class refundPayingOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.order.RefundPayingOrderVoReq refundPayingOrderVoReq;
      public refundPayingOrder_call(com.froad.thrift.vo.order.RefundPayingOrderVoReq refundPayingOrderVoReq, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundPayingOrderVoReq = refundPayingOrderVoReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("refundPayingOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        refundPayingOrder_args args = new refundPayingOrder_args();
        args.setRefundPayingOrderVoReq(refundPayingOrderVoReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.order.RefundPayingOrderVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_refundPayingOrder();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addOrder", new addOrder());
      processMap.put("getOrderList", new getOrderList());
      processMap.put("getOrderDetail", new getOrderDetail());
      processMap.put("getQrcodeOrderList", new getQrcodeOrderList());
      processMap.put("getQrcodeOrderDetail", new getQrcodeOrderDetail());
      processMap.put("deleteOrder", new deleteOrder());
      processMap.put("shippingOrder", new shippingOrder());
      processMap.put("receiptOrder", new receiptOrder());
      processMap.put("addQrcodeOrder", new addQrcodeOrder());
      processMap.put("getVipDiscount", new getVipDiscount());
      processMap.put("getPointExchangeList", new getPointExchangeList());
      processMap.put("getPointExchangeDetail", new getPointExchangeDetail());
      processMap.put("storeProcess", new storeProcess());
      processMap.put("getSubOrderProduct", new getSubOrderProduct());
      processMap.put("getOrderByQrcode", new getOrderByQrcode());
      processMap.put("getMemberBuyLimit", new getMemberBuyLimit());
      processMap.put("getOrderPaymentResult", new getOrderPaymentResult());
      processMap.put("addVIPOrder", new addVIPOrder());
      processMap.put("getSubOrder", new getSubOrder());
      processMap.put("updateSubOrderLogistic", new updateSubOrderLogistic());
      processMap.put("checkBeforeCashier", new checkBeforeCashier());
      processMap.put("addPrefPayOrder", new addPrefPayOrder());
      processMap.put("closeOrder", new closeOrder());
      processMap.put("getVipOrderId", new getVipOrderId());
      processMap.put("refundPayingOrder", new refundPayingOrder());
      return processMap;
    }

    public static class addOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOrder_args> {
      public addOrder() {
        super("addOrder");
      }

      public addOrder_args getEmptyArgsInstance() {
        return new addOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOrder_result getResult(I iface, addOrder_args args) throws org.apache.thrift.TException {
        addOrder_result result = new addOrder_result();
        result.success = iface.addOrder(args.addOrderVoReq);
        return result;
      }
    }

    public static class getOrderList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrderList_args> {
      public getOrderList() {
        super("getOrderList");
      }

      public getOrderList_args getEmptyArgsInstance() {
        return new getOrderList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrderList_result getResult(I iface, getOrderList_args args) throws org.apache.thrift.TException {
        getOrderList_result result = new getOrderList_result();
        result.success = iface.getOrderList(args.getOrderSummaryVoReq);
        return result;
      }
    }

    public static class getOrderDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrderDetail_args> {
      public getOrderDetail() {
        super("getOrderDetail");
      }

      public getOrderDetail_args getEmptyArgsInstance() {
        return new getOrderDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrderDetail_result getResult(I iface, getOrderDetail_args args) throws org.apache.thrift.TException {
        getOrderDetail_result result = new getOrderDetail_result();
        result.success = iface.getOrderDetail(args.getOrderDetailVoReq);
        return result;
      }
    }

    public static class getQrcodeOrderList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQrcodeOrderList_args> {
      public getQrcodeOrderList() {
        super("getQrcodeOrderList");
      }

      public getQrcodeOrderList_args getEmptyArgsInstance() {
        return new getQrcodeOrderList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getQrcodeOrderList_result getResult(I iface, getQrcodeOrderList_args args) throws org.apache.thrift.TException {
        getQrcodeOrderList_result result = new getQrcodeOrderList_result();
        result.success = iface.getQrcodeOrderList(args.getQrcodeOrderSummaryVoReq);
        return result;
      }
    }

    public static class getQrcodeOrderDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQrcodeOrderDetail_args> {
      public getQrcodeOrderDetail() {
        super("getQrcodeOrderDetail");
      }

      public getQrcodeOrderDetail_args getEmptyArgsInstance() {
        return new getQrcodeOrderDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getQrcodeOrderDetail_result getResult(I iface, getQrcodeOrderDetail_args args) throws org.apache.thrift.TException {
        getQrcodeOrderDetail_result result = new getQrcodeOrderDetail_result();
        result.success = iface.getQrcodeOrderDetail(args.getQrcodeOrderDetailVoReq);
        return result;
      }
    }

    public static class deleteOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteOrder_args> {
      public deleteOrder() {
        super("deleteOrder");
      }

      public deleteOrder_args getEmptyArgsInstance() {
        return new deleteOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteOrder_result getResult(I iface, deleteOrder_args args) throws org.apache.thrift.TException {
        deleteOrder_result result = new deleteOrder_result();
        result.success = iface.deleteOrder(args.deleteOrderVoReq);
        return result;
      }
    }

    public static class shippingOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shippingOrder_args> {
      public shippingOrder() {
        super("shippingOrder");
      }

      public shippingOrder_args getEmptyArgsInstance() {
        return new shippingOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public shippingOrder_result getResult(I iface, shippingOrder_args args) throws org.apache.thrift.TException {
        shippingOrder_result result = new shippingOrder_result();
        result.success = iface.shippingOrder(args.shippingOrderVoReq);
        return result;
      }
    }

    public static class receiptOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiptOrder_args> {
      public receiptOrder() {
        super("receiptOrder");
      }

      public receiptOrder_args getEmptyArgsInstance() {
        return new receiptOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public receiptOrder_result getResult(I iface, receiptOrder_args args) throws org.apache.thrift.TException {
        receiptOrder_result result = new receiptOrder_result();
        result.success = iface.receiptOrder(args.receiptOrderReq);
        return result;
      }
    }

    public static class addQrcodeOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addQrcodeOrder_args> {
      public addQrcodeOrder() {
        super("addQrcodeOrder");
      }

      public addQrcodeOrder_args getEmptyArgsInstance() {
        return new addQrcodeOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addQrcodeOrder_result getResult(I iface, addQrcodeOrder_args args) throws org.apache.thrift.TException {
        addQrcodeOrder_result result = new addQrcodeOrder_result();
        result.success = iface.addQrcodeOrder(args.addQrcodeOrderVoReq);
        return result;
      }
    }

    public static class getVipDiscount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVipDiscount_args> {
      public getVipDiscount() {
        super("getVipDiscount");
      }

      public getVipDiscount_args getEmptyArgsInstance() {
        return new getVipDiscount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVipDiscount_result getResult(I iface, getVipDiscount_args args) throws org.apache.thrift.TException {
        getVipDiscount_result result = new getVipDiscount_result();
        result.success = iface.getVipDiscount(args.getVipDiscountVoReq);
        return result;
      }
    }

    public static class getPointExchangeList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPointExchangeList_args> {
      public getPointExchangeList() {
        super("getPointExchangeList");
      }

      public getPointExchangeList_args getEmptyArgsInstance() {
        return new getPointExchangeList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPointExchangeList_result getResult(I iface, getPointExchangeList_args args) throws org.apache.thrift.TException {
        getPointExchangeList_result result = new getPointExchangeList_result();
        result.success = iface.getPointExchangeList(args.getPointExchangeListVoReq);
        return result;
      }
    }

    public static class getPointExchangeDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPointExchangeDetail_args> {
      public getPointExchangeDetail() {
        super("getPointExchangeDetail");
      }

      public getPointExchangeDetail_args getEmptyArgsInstance() {
        return new getPointExchangeDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPointExchangeDetail_result getResult(I iface, getPointExchangeDetail_args args) throws org.apache.thrift.TException {
        getPointExchangeDetail_result result = new getPointExchangeDetail_result();
        result.success = iface.getPointExchangeDetail(args.getPointExchangeDetailVoReq);
        return result;
      }
    }

    public static class storeProcess<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeProcess_args> {
      public storeProcess() {
        super("storeProcess");
      }

      public storeProcess_args getEmptyArgsInstance() {
        return new storeProcess_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public storeProcess_result getResult(I iface, storeProcess_args args) throws org.apache.thrift.TException {
        storeProcess_result result = new storeProcess_result();
        result.success = iface.storeProcess(args.storeVoReq);
        return result;
      }
    }

    public static class getSubOrderProduct<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSubOrderProduct_args> {
      public getSubOrderProduct() {
        super("getSubOrderProduct");
      }

      public getSubOrderProduct_args getEmptyArgsInstance() {
        return new getSubOrderProduct_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSubOrderProduct_result getResult(I iface, getSubOrderProduct_args args) throws org.apache.thrift.TException {
        getSubOrderProduct_result result = new getSubOrderProduct_result();
        result.success = iface.getSubOrderProduct(args.getSubOrderProductVoReq);
        return result;
      }
    }

    public static class getOrderByQrcode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrderByQrcode_args> {
      public getOrderByQrcode() {
        super("getOrderByQrcode");
      }

      public getOrderByQrcode_args getEmptyArgsInstance() {
        return new getOrderByQrcode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrderByQrcode_result getResult(I iface, getOrderByQrcode_args args) throws org.apache.thrift.TException {
        getOrderByQrcode_result result = new getOrderByQrcode_result();
        result.success = iface.getOrderByQrcode(args.getOrderByQrcodeVoReq);
        return result;
      }
    }

    public static class getMemberBuyLimit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMemberBuyLimit_args> {
      public getMemberBuyLimit() {
        super("getMemberBuyLimit");
      }

      public getMemberBuyLimit_args getEmptyArgsInstance() {
        return new getMemberBuyLimit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMemberBuyLimit_result getResult(I iface, getMemberBuyLimit_args args) throws org.apache.thrift.TException {
        getMemberBuyLimit_result result = new getMemberBuyLimit_result();
        result.success = iface.getMemberBuyLimit(args.getMemberBuyLimitVoReq);
        return result;
      }
    }

    public static class getOrderPaymentResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrderPaymentResult_args> {
      public getOrderPaymentResult() {
        super("getOrderPaymentResult");
      }

      public getOrderPaymentResult_args getEmptyArgsInstance() {
        return new getOrderPaymentResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrderPaymentResult_result getResult(I iface, getOrderPaymentResult_args args) throws org.apache.thrift.TException {
        getOrderPaymentResult_result result = new getOrderPaymentResult_result();
        result.success = iface.getOrderPaymentResult(args.getOrderPaymentResultVoReq);
        return result;
      }
    }

    public static class addVIPOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addVIPOrder_args> {
      public addVIPOrder() {
        super("addVIPOrder");
      }

      public addVIPOrder_args getEmptyArgsInstance() {
        return new addVIPOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addVIPOrder_result getResult(I iface, addVIPOrder_args args) throws org.apache.thrift.TException {
        addVIPOrder_result result = new addVIPOrder_result();
        result.success = iface.addVIPOrder(args.addVIPOrderVoReq);
        return result;
      }
    }

    public static class getSubOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSubOrder_args> {
      public getSubOrder() {
        super("getSubOrder");
      }

      public getSubOrder_args getEmptyArgsInstance() {
        return new getSubOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSubOrder_result getResult(I iface, getSubOrder_args args) throws org.apache.thrift.TException {
        getSubOrder_result result = new getSubOrder_result();
        result.success = iface.getSubOrder(args.getSubOrderVoReq);
        return result;
      }
    }

    public static class updateSubOrderLogistic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSubOrderLogistic_args> {
      public updateSubOrderLogistic() {
        super("updateSubOrderLogistic");
      }

      public updateSubOrderLogistic_args getEmptyArgsInstance() {
        return new updateSubOrderLogistic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSubOrderLogistic_result getResult(I iface, updateSubOrderLogistic_args args) throws org.apache.thrift.TException {
        updateSubOrderLogistic_result result = new updateSubOrderLogistic_result();
        result.success = iface.updateSubOrderLogistic(args.updateSubOrderLogisticVoReq);
        return result;
      }
    }

    public static class checkBeforeCashier<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkBeforeCashier_args> {
      public checkBeforeCashier() {
        super("checkBeforeCashier");
      }

      public checkBeforeCashier_args getEmptyArgsInstance() {
        return new checkBeforeCashier_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkBeforeCashier_result getResult(I iface, checkBeforeCashier_args args) throws org.apache.thrift.TException {
        checkBeforeCashier_result result = new checkBeforeCashier_result();
        result.success = iface.checkBeforeCashier(args.cashierVoReq);
        return result;
      }
    }

    public static class addPrefPayOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPrefPayOrder_args> {
      public addPrefPayOrder() {
        super("addPrefPayOrder");
      }

      public addPrefPayOrder_args getEmptyArgsInstance() {
        return new addPrefPayOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addPrefPayOrder_result getResult(I iface, addPrefPayOrder_args args) throws org.apache.thrift.TException {
        addPrefPayOrder_result result = new addPrefPayOrder_result();
        result.success = iface.addPrefPayOrder(args.addPrefPayOrderReq);
        return result;
      }
    }

    public static class closeOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeOrder_args> {
      public closeOrder() {
        super("closeOrder");
      }

      public closeOrder_args getEmptyArgsInstance() {
        return new closeOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public closeOrder_result getResult(I iface, closeOrder_args args) throws org.apache.thrift.TException {
        closeOrder_result result = new closeOrder_result();
        result.success = iface.closeOrder(args.closeOrderVoReq);
        return result;
      }
    }

    public static class getVipOrderId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVipOrderId_args> {
      public getVipOrderId() {
        super("getVipOrderId");
      }

      public getVipOrderId_args getEmptyArgsInstance() {
        return new getVipOrderId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVipOrderId_result getResult(I iface, getVipOrderId_args args) throws org.apache.thrift.TException {
        getVipOrderId_result result = new getVipOrderId_result();
        result.success = iface.getVipOrderId(args.clientId, args.memberCode);
        return result;
      }
    }

    public static class refundPayingOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, refundPayingOrder_args> {
      public refundPayingOrder() {
        super("refundPayingOrder");
      }

      public refundPayingOrder_args getEmptyArgsInstance() {
        return new refundPayingOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public refundPayingOrder_result getResult(I iface, refundPayingOrder_args args) throws org.apache.thrift.TException {
        refundPayingOrder_result result = new refundPayingOrder_result();
        result.success = iface.refundPayingOrder(args.refundPayingOrderVoReq);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addOrder", new addOrder());
      processMap.put("getOrderList", new getOrderList());
      processMap.put("getOrderDetail", new getOrderDetail());
      processMap.put("getQrcodeOrderList", new getQrcodeOrderList());
      processMap.put("getQrcodeOrderDetail", new getQrcodeOrderDetail());
      processMap.put("deleteOrder", new deleteOrder());
      processMap.put("shippingOrder", new shippingOrder());
      processMap.put("receiptOrder", new receiptOrder());
      processMap.put("addQrcodeOrder", new addQrcodeOrder());
      processMap.put("getVipDiscount", new getVipDiscount());
      processMap.put("getPointExchangeList", new getPointExchangeList());
      processMap.put("getPointExchangeDetail", new getPointExchangeDetail());
      processMap.put("storeProcess", new storeProcess());
      processMap.put("getSubOrderProduct", new getSubOrderProduct());
      processMap.put("getOrderByQrcode", new getOrderByQrcode());
      processMap.put("getMemberBuyLimit", new getMemberBuyLimit());
      processMap.put("getOrderPaymentResult", new getOrderPaymentResult());
      processMap.put("addVIPOrder", new addVIPOrder());
      processMap.put("getSubOrder", new getSubOrder());
      processMap.put("updateSubOrderLogistic", new updateSubOrderLogistic());
      processMap.put("checkBeforeCashier", new checkBeforeCashier());
      processMap.put("addPrefPayOrder", new addPrefPayOrder());
      processMap.put("closeOrder", new closeOrder());
      processMap.put("getVipOrderId", new getVipOrderId());
      processMap.put("refundPayingOrder", new refundPayingOrder());
      return processMap;
    }

    public static class addOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOrder_args, com.froad.thrift.vo.order.AddOrderVoRes> {
      public addOrder() {
        super("addOrder");
      }

      public addOrder_args getEmptyArgsInstance() {
        return new addOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.AddOrderVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.AddOrderVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.AddOrderVoRes o) {
            addOrder_result result = new addOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOrder_result result = new addOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.AddOrderVoRes> resultHandler) throws TException {
        iface.addOrder(args.addOrderVoReq,resultHandler);
      }
    }

    public static class getOrderList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrderList_args, com.froad.thrift.vo.order.GetOrderSummaryVoRes> {
      public getOrderList() {
        super("getOrderList");
      }

      public getOrderList_args getEmptyArgsInstance() {
        return new getOrderList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.GetOrderSummaryVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.GetOrderSummaryVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.GetOrderSummaryVoRes o) {
            getOrderList_result result = new getOrderList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOrderList_result result = new getOrderList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrderList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.GetOrderSummaryVoRes> resultHandler) throws TException {
        iface.getOrderList(args.getOrderSummaryVoReq,resultHandler);
      }
    }

    public static class getOrderDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrderDetail_args, com.froad.thrift.vo.order.GetOrderDetailVoRes> {
      public getOrderDetail() {
        super("getOrderDetail");
      }

      public getOrderDetail_args getEmptyArgsInstance() {
        return new getOrderDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.GetOrderDetailVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.GetOrderDetailVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.GetOrderDetailVoRes o) {
            getOrderDetail_result result = new getOrderDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOrderDetail_result result = new getOrderDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrderDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.GetOrderDetailVoRes> resultHandler) throws TException {
        iface.getOrderDetail(args.getOrderDetailVoReq,resultHandler);
      }
    }

    public static class getQrcodeOrderList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getQrcodeOrderList_args, com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes> {
      public getQrcodeOrderList() {
        super("getQrcodeOrderList");
      }

      public getQrcodeOrderList_args getEmptyArgsInstance() {
        return new getQrcodeOrderList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes o) {
            getQrcodeOrderList_result result = new getQrcodeOrderList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getQrcodeOrderList_result result = new getQrcodeOrderList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getQrcodeOrderList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes> resultHandler) throws TException {
        iface.getQrcodeOrderList(args.getQrcodeOrderSummaryVoReq,resultHandler);
      }
    }

    public static class getQrcodeOrderDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getQrcodeOrderDetail_args, com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes> {
      public getQrcodeOrderDetail() {
        super("getQrcodeOrderDetail");
      }

      public getQrcodeOrderDetail_args getEmptyArgsInstance() {
        return new getQrcodeOrderDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes o) {
            getQrcodeOrderDetail_result result = new getQrcodeOrderDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getQrcodeOrderDetail_result result = new getQrcodeOrderDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getQrcodeOrderDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes> resultHandler) throws TException {
        iface.getQrcodeOrderDetail(args.getQrcodeOrderDetailVoReq,resultHandler);
      }
    }

    public static class deleteOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteOrder_args, com.froad.thrift.vo.order.DeleteOrderVoRes> {
      public deleteOrder() {
        super("deleteOrder");
      }

      public deleteOrder_args getEmptyArgsInstance() {
        return new deleteOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.DeleteOrderVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.DeleteOrderVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.DeleteOrderVoRes o) {
            deleteOrder_result result = new deleteOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteOrder_result result = new deleteOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.DeleteOrderVoRes> resultHandler) throws TException {
        iface.deleteOrder(args.deleteOrderVoReq,resultHandler);
      }
    }

    public static class shippingOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, shippingOrder_args, com.froad.thrift.vo.order.ShippingOrderVoRes> {
      public shippingOrder() {
        super("shippingOrder");
      }

      public shippingOrder_args getEmptyArgsInstance() {
        return new shippingOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.ShippingOrderVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.ShippingOrderVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.ShippingOrderVoRes o) {
            shippingOrder_result result = new shippingOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            shippingOrder_result result = new shippingOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, shippingOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.ShippingOrderVoRes> resultHandler) throws TException {
        iface.shippingOrder(args.shippingOrderVoReq,resultHandler);
      }
    }

    public static class receiptOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, receiptOrder_args, com.froad.thrift.vo.order.ShippingOrderVoRes> {
      public receiptOrder() {
        super("receiptOrder");
      }

      public receiptOrder_args getEmptyArgsInstance() {
        return new receiptOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.ShippingOrderVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.ShippingOrderVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.ShippingOrderVoRes o) {
            receiptOrder_result result = new receiptOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            receiptOrder_result result = new receiptOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, receiptOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.ShippingOrderVoRes> resultHandler) throws TException {
        iface.receiptOrder(args.receiptOrderReq,resultHandler);
      }
    }

    public static class addQrcodeOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addQrcodeOrder_args, com.froad.thrift.vo.order.AddQrcodeOrderVoRes> {
      public addQrcodeOrder() {
        super("addQrcodeOrder");
      }

      public addQrcodeOrder_args getEmptyArgsInstance() {
        return new addQrcodeOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.AddQrcodeOrderVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.AddQrcodeOrderVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.AddQrcodeOrderVoRes o) {
            addQrcodeOrder_result result = new addQrcodeOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addQrcodeOrder_result result = new addQrcodeOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addQrcodeOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.AddQrcodeOrderVoRes> resultHandler) throws TException {
        iface.addQrcodeOrder(args.addQrcodeOrderVoReq,resultHandler);
      }
    }

    public static class getVipDiscount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVipDiscount_args, com.froad.thrift.vo.order.GetVipDiscountVoRes> {
      public getVipDiscount() {
        super("getVipDiscount");
      }

      public getVipDiscount_args getEmptyArgsInstance() {
        return new getVipDiscount_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.GetVipDiscountVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.GetVipDiscountVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.GetVipDiscountVoRes o) {
            getVipDiscount_result result = new getVipDiscount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVipDiscount_result result = new getVipDiscount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVipDiscount_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.GetVipDiscountVoRes> resultHandler) throws TException {
        iface.getVipDiscount(args.getVipDiscountVoReq,resultHandler);
      }
    }

    public static class getPointExchangeList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPointExchangeList_args, com.froad.thrift.vo.order.GetPointExchangeListVoRes> {
      public getPointExchangeList() {
        super("getPointExchangeList");
      }

      public getPointExchangeList_args getEmptyArgsInstance() {
        return new getPointExchangeList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.GetPointExchangeListVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.GetPointExchangeListVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.GetPointExchangeListVoRes o) {
            getPointExchangeList_result result = new getPointExchangeList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPointExchangeList_result result = new getPointExchangeList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPointExchangeList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.GetPointExchangeListVoRes> resultHandler) throws TException {
        iface.getPointExchangeList(args.getPointExchangeListVoReq,resultHandler);
      }
    }

    public static class getPointExchangeDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPointExchangeDetail_args, com.froad.thrift.vo.order.GetPointExchangeDetailVoRes> {
      public getPointExchangeDetail() {
        super("getPointExchangeDetail");
      }

      public getPointExchangeDetail_args getEmptyArgsInstance() {
        return new getPointExchangeDetail_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.GetPointExchangeDetailVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.GetPointExchangeDetailVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.GetPointExchangeDetailVoRes o) {
            getPointExchangeDetail_result result = new getPointExchangeDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPointExchangeDetail_result result = new getPointExchangeDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPointExchangeDetail_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.GetPointExchangeDetailVoRes> resultHandler) throws TException {
        iface.getPointExchangeDetail(args.getPointExchangeDetailVoReq,resultHandler);
      }
    }

    public static class storeProcess<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, storeProcess_args, com.froad.thrift.vo.order.StoreVoRes> {
      public storeProcess() {
        super("storeProcess");
      }

      public storeProcess_args getEmptyArgsInstance() {
        return new storeProcess_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.StoreVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.StoreVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.StoreVoRes o) {
            storeProcess_result result = new storeProcess_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            storeProcess_result result = new storeProcess_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, storeProcess_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.StoreVoRes> resultHandler) throws TException {
        iface.storeProcess(args.storeVoReq,resultHandler);
      }
    }

    public static class getSubOrderProduct<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSubOrderProduct_args, com.froad.thrift.vo.order.GetSubOrderProductVoRes> {
      public getSubOrderProduct() {
        super("getSubOrderProduct");
      }

      public getSubOrderProduct_args getEmptyArgsInstance() {
        return new getSubOrderProduct_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.GetSubOrderProductVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.GetSubOrderProductVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.GetSubOrderProductVoRes o) {
            getSubOrderProduct_result result = new getSubOrderProduct_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSubOrderProduct_result result = new getSubOrderProduct_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSubOrderProduct_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.GetSubOrderProductVoRes> resultHandler) throws TException {
        iface.getSubOrderProduct(args.getSubOrderProductVoReq,resultHandler);
      }
    }

    public static class getOrderByQrcode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrderByQrcode_args, com.froad.thrift.vo.order.GetOrderByQrcodeVoRes> {
      public getOrderByQrcode() {
        super("getOrderByQrcode");
      }

      public getOrderByQrcode_args getEmptyArgsInstance() {
        return new getOrderByQrcode_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.GetOrderByQrcodeVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.GetOrderByQrcodeVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.GetOrderByQrcodeVoRes o) {
            getOrderByQrcode_result result = new getOrderByQrcode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOrderByQrcode_result result = new getOrderByQrcode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrderByQrcode_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.GetOrderByQrcodeVoRes> resultHandler) throws TException {
        iface.getOrderByQrcode(args.getOrderByQrcodeVoReq,resultHandler);
      }
    }

    public static class getMemberBuyLimit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMemberBuyLimit_args, com.froad.thrift.vo.order.GetMemberBuyLimitVoRes> {
      public getMemberBuyLimit() {
        super("getMemberBuyLimit");
      }

      public getMemberBuyLimit_args getEmptyArgsInstance() {
        return new getMemberBuyLimit_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.GetMemberBuyLimitVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.GetMemberBuyLimitVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.GetMemberBuyLimitVoRes o) {
            getMemberBuyLimit_result result = new getMemberBuyLimit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMemberBuyLimit_result result = new getMemberBuyLimit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMemberBuyLimit_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.GetMemberBuyLimitVoRes> resultHandler) throws TException {
        iface.getMemberBuyLimit(args.getMemberBuyLimitVoReq,resultHandler);
      }
    }

    public static class getOrderPaymentResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrderPaymentResult_args, com.froad.thrift.vo.order.GetOrderPaymentResultVoRes> {
      public getOrderPaymentResult() {
        super("getOrderPaymentResult");
      }

      public getOrderPaymentResult_args getEmptyArgsInstance() {
        return new getOrderPaymentResult_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.GetOrderPaymentResultVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.GetOrderPaymentResultVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.GetOrderPaymentResultVoRes o) {
            getOrderPaymentResult_result result = new getOrderPaymentResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOrderPaymentResult_result result = new getOrderPaymentResult_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrderPaymentResult_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.GetOrderPaymentResultVoRes> resultHandler) throws TException {
        iface.getOrderPaymentResult(args.getOrderPaymentResultVoReq,resultHandler);
      }
    }

    public static class addVIPOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addVIPOrder_args, com.froad.thrift.vo.order.AddVIPOrderVoRes> {
      public addVIPOrder() {
        super("addVIPOrder");
      }

      public addVIPOrder_args getEmptyArgsInstance() {
        return new addVIPOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.AddVIPOrderVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.AddVIPOrderVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.AddVIPOrderVoRes o) {
            addVIPOrder_result result = new addVIPOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addVIPOrder_result result = new addVIPOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addVIPOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.AddVIPOrderVoRes> resultHandler) throws TException {
        iface.addVIPOrder(args.addVIPOrderVoReq,resultHandler);
      }
    }

    public static class getSubOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSubOrder_args, com.froad.thrift.vo.order.GetSubOrderVoRes> {
      public getSubOrder() {
        super("getSubOrder");
      }

      public getSubOrder_args getEmptyArgsInstance() {
        return new getSubOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.GetSubOrderVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.GetSubOrderVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.GetSubOrderVoRes o) {
            getSubOrder_result result = new getSubOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSubOrder_result result = new getSubOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSubOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.GetSubOrderVoRes> resultHandler) throws TException {
        iface.getSubOrder(args.getSubOrderVoReq,resultHandler);
      }
    }

    public static class updateSubOrderLogistic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSubOrderLogistic_args, com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes> {
      public updateSubOrderLogistic() {
        super("updateSubOrderLogistic");
      }

      public updateSubOrderLogistic_args getEmptyArgsInstance() {
        return new updateSubOrderLogistic_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes o) {
            updateSubOrderLogistic_result result = new updateSubOrderLogistic_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSubOrderLogistic_result result = new updateSubOrderLogistic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSubOrderLogistic_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes> resultHandler) throws TException {
        iface.updateSubOrderLogistic(args.updateSubOrderLogisticVoReq,resultHandler);
      }
    }

    public static class checkBeforeCashier<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkBeforeCashier_args, com.froad.thrift.vo.order.CashierVoRes> {
      public checkBeforeCashier() {
        super("checkBeforeCashier");
      }

      public checkBeforeCashier_args getEmptyArgsInstance() {
        return new checkBeforeCashier_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.CashierVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.CashierVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.CashierVoRes o) {
            checkBeforeCashier_result result = new checkBeforeCashier_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkBeforeCashier_result result = new checkBeforeCashier_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkBeforeCashier_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.CashierVoRes> resultHandler) throws TException {
        iface.checkBeforeCashier(args.cashierVoReq,resultHandler);
      }
    }

    public static class addPrefPayOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPrefPayOrder_args, com.froad.thrift.vo.order.AddPrefPayOrderRes> {
      public addPrefPayOrder() {
        super("addPrefPayOrder");
      }

      public addPrefPayOrder_args getEmptyArgsInstance() {
        return new addPrefPayOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.AddPrefPayOrderRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.AddPrefPayOrderRes>() { 
          public void onComplete(com.froad.thrift.vo.order.AddPrefPayOrderRes o) {
            addPrefPayOrder_result result = new addPrefPayOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addPrefPayOrder_result result = new addPrefPayOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addPrefPayOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.AddPrefPayOrderRes> resultHandler) throws TException {
        iface.addPrefPayOrder(args.addPrefPayOrderReq,resultHandler);
      }
    }

    public static class closeOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeOrder_args, com.froad.thrift.vo.order.CloseOrderVoRes> {
      public closeOrder() {
        super("closeOrder");
      }

      public closeOrder_args getEmptyArgsInstance() {
        return new closeOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.CloseOrderVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.CloseOrderVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.CloseOrderVoRes o) {
            closeOrder_result result = new closeOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            closeOrder_result result = new closeOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, closeOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.CloseOrderVoRes> resultHandler) throws TException {
        iface.closeOrder(args.closeOrderVoReq,resultHandler);
      }
    }

    public static class getVipOrderId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVipOrderId_args, String> {
      public getVipOrderId() {
        super("getVipOrderId");
      }

      public getVipOrderId_args getEmptyArgsInstance() {
        return new getVipOrderId_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getVipOrderId_result result = new getVipOrderId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVipOrderId_result result = new getVipOrderId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVipOrderId_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getVipOrderId(args.clientId, args.memberCode,resultHandler);
      }
    }

    public static class refundPayingOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, refundPayingOrder_args, com.froad.thrift.vo.order.RefundPayingOrderVoRes> {
      public refundPayingOrder() {
        super("refundPayingOrder");
      }

      public refundPayingOrder_args getEmptyArgsInstance() {
        return new refundPayingOrder_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.order.RefundPayingOrderVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.order.RefundPayingOrderVoRes>() { 
          public void onComplete(com.froad.thrift.vo.order.RefundPayingOrderVoRes o) {
            refundPayingOrder_result result = new refundPayingOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            refundPayingOrder_result result = new refundPayingOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, refundPayingOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.order.RefundPayingOrderVoRes> resultHandler) throws TException {
        iface.refundPayingOrder(args.refundPayingOrderVoReq,resultHandler);
      }
    }

  }

  public static class addOrder_args implements org.apache.thrift.TBase<addOrder_args, addOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrder_args");

    private static final org.apache.thrift.protocol.TField ADD_ORDER_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("addOrderVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.AddOrderVoReq addOrderVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADD_ORDER_VO_REQ((short)1, "addOrderVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADD_ORDER_VO_REQ
            return ADD_ORDER_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADD_ORDER_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("addOrderVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.AddOrderVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrder_args.class, metaDataMap);
    }

    public addOrder_args() {
    }

    public addOrder_args(
      com.froad.thrift.vo.order.AddOrderVoReq addOrderVoReq)
    {
      this();
      this.addOrderVoReq = addOrderVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrder_args(addOrder_args other) {
      if (other.isSetAddOrderVoReq()) {
        this.addOrderVoReq = new com.froad.thrift.vo.order.AddOrderVoReq(other.addOrderVoReq);
      }
    }

    public addOrder_args deepCopy() {
      return new addOrder_args(this);
    }

    @Override
    public void clear() {
      this.addOrderVoReq = null;
    }

    public com.froad.thrift.vo.order.AddOrderVoReq getAddOrderVoReq() {
      return this.addOrderVoReq;
    }

    public addOrder_args setAddOrderVoReq(com.froad.thrift.vo.order.AddOrderVoReq addOrderVoReq) {
      this.addOrderVoReq = addOrderVoReq;
      return this;
    }

    public void unsetAddOrderVoReq() {
      this.addOrderVoReq = null;
    }

    /** Returns true if field addOrderVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetAddOrderVoReq() {
      return this.addOrderVoReq != null;
    }

    public void setAddOrderVoReqIsSet(boolean value) {
      if (!value) {
        this.addOrderVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADD_ORDER_VO_REQ:
        if (value == null) {
          unsetAddOrderVoReq();
        } else {
          setAddOrderVoReq((com.froad.thrift.vo.order.AddOrderVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADD_ORDER_VO_REQ:
        return getAddOrderVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADD_ORDER_VO_REQ:
        return isSetAddOrderVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrder_args)
        return this.equals((addOrder_args)that);
      return false;
    }

    public boolean equals(addOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_addOrderVoReq = true && this.isSetAddOrderVoReq();
      boolean that_present_addOrderVoReq = true && that.isSetAddOrderVoReq();
      if (this_present_addOrderVoReq || that_present_addOrderVoReq) {
        if (!(this_present_addOrderVoReq && that_present_addOrderVoReq))
          return false;
        if (!this.addOrderVoReq.equals(that.addOrderVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_addOrderVoReq = true && (isSetAddOrderVoReq());
      list.add(present_addOrderVoReq);
      if (present_addOrderVoReq)
        list.add(addOrderVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAddOrderVoReq()).compareTo(other.isSetAddOrderVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddOrderVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addOrderVoReq, other.addOrderVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrder_args(");
      boolean first = true;

      sb.append("addOrderVoReq:");
      if (this.addOrderVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.addOrderVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (addOrderVoReq != null) {
        addOrderVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOrder_argsStandardSchemeFactory implements SchemeFactory {
      public addOrder_argsStandardScheme getScheme() {
        return new addOrder_argsStandardScheme();
      }
    }

    private static class addOrder_argsStandardScheme extends StandardScheme<addOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADD_ORDER_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.addOrderVoReq = new com.froad.thrift.vo.order.AddOrderVoReq();
                struct.addOrderVoReq.read(iprot);
                struct.setAddOrderVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.addOrderVoReq != null) {
          oprot.writeFieldBegin(ADD_ORDER_VO_REQ_FIELD_DESC);
          struct.addOrderVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrder_argsTupleSchemeFactory implements SchemeFactory {
      public addOrder_argsTupleScheme getScheme() {
        return new addOrder_argsTupleScheme();
      }
    }

    private static class addOrder_argsTupleScheme extends TupleScheme<addOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAddOrderVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAddOrderVoReq()) {
          struct.addOrderVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.addOrderVoReq = new com.froad.thrift.vo.order.AddOrderVoReq();
          struct.addOrderVoReq.read(iprot);
          struct.setAddOrderVoReqIsSet(true);
        }
      }
    }

  }

  public static class addOrder_result implements org.apache.thrift.TBase<addOrder_result, addOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.AddOrderVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.AddOrderVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrder_result.class, metaDataMap);
    }

    public addOrder_result() {
    }

    public addOrder_result(
      com.froad.thrift.vo.order.AddOrderVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrder_result(addOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.AddOrderVoRes(other.success);
      }
    }

    public addOrder_result deepCopy() {
      return new addOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.AddOrderVoRes getSuccess() {
      return this.success;
    }

    public addOrder_result setSuccess(com.froad.thrift.vo.order.AddOrderVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.AddOrderVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrder_result)
        return this.equals((addOrder_result)that);
      return false;
    }

    public boolean equals(addOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOrder_resultStandardSchemeFactory implements SchemeFactory {
      public addOrder_resultStandardScheme getScheme() {
        return new addOrder_resultStandardScheme();
      }
    }

    private static class addOrder_resultStandardScheme extends StandardScheme<addOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.AddOrderVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrder_resultTupleSchemeFactory implements SchemeFactory {
      public addOrder_resultTupleScheme getScheme() {
        return new addOrder_resultTupleScheme();
      }
    }

    private static class addOrder_resultTupleScheme extends TupleScheme<addOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.AddOrderVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOrderList_args implements org.apache.thrift.TBase<getOrderList_args, getOrderList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderList_args");

    private static final org.apache.thrift.protocol.TField GET_ORDER_SUMMARY_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("getOrderSummaryVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrderList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrderList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetOrderSummaryVoReq getOrderSummaryVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GET_ORDER_SUMMARY_VO_REQ((short)1, "getOrderSummaryVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GET_ORDER_SUMMARY_VO_REQ
            return GET_ORDER_SUMMARY_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GET_ORDER_SUMMARY_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("getOrderSummaryVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetOrderSummaryVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderList_args.class, metaDataMap);
    }

    public getOrderList_args() {
    }

    public getOrderList_args(
      com.froad.thrift.vo.order.GetOrderSummaryVoReq getOrderSummaryVoReq)
    {
      this();
      this.getOrderSummaryVoReq = getOrderSummaryVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrderList_args(getOrderList_args other) {
      if (other.isSetGetOrderSummaryVoReq()) {
        this.getOrderSummaryVoReq = new com.froad.thrift.vo.order.GetOrderSummaryVoReq(other.getOrderSummaryVoReq);
      }
    }

    public getOrderList_args deepCopy() {
      return new getOrderList_args(this);
    }

    @Override
    public void clear() {
      this.getOrderSummaryVoReq = null;
    }

    public com.froad.thrift.vo.order.GetOrderSummaryVoReq getGetOrderSummaryVoReq() {
      return this.getOrderSummaryVoReq;
    }

    public getOrderList_args setGetOrderSummaryVoReq(com.froad.thrift.vo.order.GetOrderSummaryVoReq getOrderSummaryVoReq) {
      this.getOrderSummaryVoReq = getOrderSummaryVoReq;
      return this;
    }

    public void unsetGetOrderSummaryVoReq() {
      this.getOrderSummaryVoReq = null;
    }

    /** Returns true if field getOrderSummaryVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetGetOrderSummaryVoReq() {
      return this.getOrderSummaryVoReq != null;
    }

    public void setGetOrderSummaryVoReqIsSet(boolean value) {
      if (!value) {
        this.getOrderSummaryVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GET_ORDER_SUMMARY_VO_REQ:
        if (value == null) {
          unsetGetOrderSummaryVoReq();
        } else {
          setGetOrderSummaryVoReq((com.froad.thrift.vo.order.GetOrderSummaryVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GET_ORDER_SUMMARY_VO_REQ:
        return getGetOrderSummaryVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GET_ORDER_SUMMARY_VO_REQ:
        return isSetGetOrderSummaryVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrderList_args)
        return this.equals((getOrderList_args)that);
      return false;
    }

    public boolean equals(getOrderList_args that) {
      if (that == null)
        return false;

      boolean this_present_getOrderSummaryVoReq = true && this.isSetGetOrderSummaryVoReq();
      boolean that_present_getOrderSummaryVoReq = true && that.isSetGetOrderSummaryVoReq();
      if (this_present_getOrderSummaryVoReq || that_present_getOrderSummaryVoReq) {
        if (!(this_present_getOrderSummaryVoReq && that_present_getOrderSummaryVoReq))
          return false;
        if (!this.getOrderSummaryVoReq.equals(that.getOrderSummaryVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_getOrderSummaryVoReq = true && (isSetGetOrderSummaryVoReq());
      list.add(present_getOrderSummaryVoReq);
      if (present_getOrderSummaryVoReq)
        list.add(getOrderSummaryVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrderList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGetOrderSummaryVoReq()).compareTo(other.isSetGetOrderSummaryVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetOrderSummaryVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getOrderSummaryVoReq, other.getOrderSummaryVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrderList_args(");
      boolean first = true;

      sb.append("getOrderSummaryVoReq:");
      if (this.getOrderSummaryVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.getOrderSummaryVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (getOrderSummaryVoReq != null) {
        getOrderSummaryVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrderList_argsStandardSchemeFactory implements SchemeFactory {
      public getOrderList_argsStandardScheme getScheme() {
        return new getOrderList_argsStandardScheme();
      }
    }

    private static class getOrderList_argsStandardScheme extends StandardScheme<getOrderList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GET_ORDER_SUMMARY_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getOrderSummaryVoReq = new com.froad.thrift.vo.order.GetOrderSummaryVoReq();
                struct.getOrderSummaryVoReq.read(iprot);
                struct.setGetOrderSummaryVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.getOrderSummaryVoReq != null) {
          oprot.writeFieldBegin(GET_ORDER_SUMMARY_VO_REQ_FIELD_DESC);
          struct.getOrderSummaryVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrderList_argsTupleSchemeFactory implements SchemeFactory {
      public getOrderList_argsTupleScheme getScheme() {
        return new getOrderList_argsTupleScheme();
      }
    }

    private static class getOrderList_argsTupleScheme extends TupleScheme<getOrderList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGetOrderSummaryVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGetOrderSummaryVoReq()) {
          struct.getOrderSummaryVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.getOrderSummaryVoReq = new com.froad.thrift.vo.order.GetOrderSummaryVoReq();
          struct.getOrderSummaryVoReq.read(iprot);
          struct.setGetOrderSummaryVoReqIsSet(true);
        }
      }
    }

  }

  public static class getOrderList_result implements org.apache.thrift.TBase<getOrderList_result, getOrderList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrderList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrderList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetOrderSummaryVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetOrderSummaryVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderList_result.class, metaDataMap);
    }

    public getOrderList_result() {
    }

    public getOrderList_result(
      com.froad.thrift.vo.order.GetOrderSummaryVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrderList_result(getOrderList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.GetOrderSummaryVoRes(other.success);
      }
    }

    public getOrderList_result deepCopy() {
      return new getOrderList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.GetOrderSummaryVoRes getSuccess() {
      return this.success;
    }

    public getOrderList_result setSuccess(com.froad.thrift.vo.order.GetOrderSummaryVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.GetOrderSummaryVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrderList_result)
        return this.equals((getOrderList_result)that);
      return false;
    }

    public boolean equals(getOrderList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrderList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrderList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrderList_resultStandardSchemeFactory implements SchemeFactory {
      public getOrderList_resultStandardScheme getScheme() {
        return new getOrderList_resultStandardScheme();
      }
    }

    private static class getOrderList_resultStandardScheme extends StandardScheme<getOrderList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.GetOrderSummaryVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrderList_resultTupleSchemeFactory implements SchemeFactory {
      public getOrderList_resultTupleScheme getScheme() {
        return new getOrderList_resultTupleScheme();
      }
    }

    private static class getOrderList_resultTupleScheme extends TupleScheme<getOrderList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.GetOrderSummaryVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOrderDetail_args implements org.apache.thrift.TBase<getOrderDetail_args, getOrderDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderDetail_args");

    private static final org.apache.thrift.protocol.TField GET_ORDER_DETAIL_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("getOrderDetailVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrderDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrderDetail_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetOrderDetailVoReq getOrderDetailVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GET_ORDER_DETAIL_VO_REQ((short)1, "getOrderDetailVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GET_ORDER_DETAIL_VO_REQ
            return GET_ORDER_DETAIL_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GET_ORDER_DETAIL_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("getOrderDetailVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetOrderDetailVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderDetail_args.class, metaDataMap);
    }

    public getOrderDetail_args() {
    }

    public getOrderDetail_args(
      com.froad.thrift.vo.order.GetOrderDetailVoReq getOrderDetailVoReq)
    {
      this();
      this.getOrderDetailVoReq = getOrderDetailVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrderDetail_args(getOrderDetail_args other) {
      if (other.isSetGetOrderDetailVoReq()) {
        this.getOrderDetailVoReq = new com.froad.thrift.vo.order.GetOrderDetailVoReq(other.getOrderDetailVoReq);
      }
    }

    public getOrderDetail_args deepCopy() {
      return new getOrderDetail_args(this);
    }

    @Override
    public void clear() {
      this.getOrderDetailVoReq = null;
    }

    public com.froad.thrift.vo.order.GetOrderDetailVoReq getGetOrderDetailVoReq() {
      return this.getOrderDetailVoReq;
    }

    public getOrderDetail_args setGetOrderDetailVoReq(com.froad.thrift.vo.order.GetOrderDetailVoReq getOrderDetailVoReq) {
      this.getOrderDetailVoReq = getOrderDetailVoReq;
      return this;
    }

    public void unsetGetOrderDetailVoReq() {
      this.getOrderDetailVoReq = null;
    }

    /** Returns true if field getOrderDetailVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetGetOrderDetailVoReq() {
      return this.getOrderDetailVoReq != null;
    }

    public void setGetOrderDetailVoReqIsSet(boolean value) {
      if (!value) {
        this.getOrderDetailVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GET_ORDER_DETAIL_VO_REQ:
        if (value == null) {
          unsetGetOrderDetailVoReq();
        } else {
          setGetOrderDetailVoReq((com.froad.thrift.vo.order.GetOrderDetailVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GET_ORDER_DETAIL_VO_REQ:
        return getGetOrderDetailVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GET_ORDER_DETAIL_VO_REQ:
        return isSetGetOrderDetailVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrderDetail_args)
        return this.equals((getOrderDetail_args)that);
      return false;
    }

    public boolean equals(getOrderDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_getOrderDetailVoReq = true && this.isSetGetOrderDetailVoReq();
      boolean that_present_getOrderDetailVoReq = true && that.isSetGetOrderDetailVoReq();
      if (this_present_getOrderDetailVoReq || that_present_getOrderDetailVoReq) {
        if (!(this_present_getOrderDetailVoReq && that_present_getOrderDetailVoReq))
          return false;
        if (!this.getOrderDetailVoReq.equals(that.getOrderDetailVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_getOrderDetailVoReq = true && (isSetGetOrderDetailVoReq());
      list.add(present_getOrderDetailVoReq);
      if (present_getOrderDetailVoReq)
        list.add(getOrderDetailVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrderDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGetOrderDetailVoReq()).compareTo(other.isSetGetOrderDetailVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetOrderDetailVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getOrderDetailVoReq, other.getOrderDetailVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrderDetail_args(");
      boolean first = true;

      sb.append("getOrderDetailVoReq:");
      if (this.getOrderDetailVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.getOrderDetailVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (getOrderDetailVoReq != null) {
        getOrderDetailVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrderDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getOrderDetail_argsStandardScheme getScheme() {
        return new getOrderDetail_argsStandardScheme();
      }
    }

    private static class getOrderDetail_argsStandardScheme extends StandardScheme<getOrderDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GET_ORDER_DETAIL_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getOrderDetailVoReq = new com.froad.thrift.vo.order.GetOrderDetailVoReq();
                struct.getOrderDetailVoReq.read(iprot);
                struct.setGetOrderDetailVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.getOrderDetailVoReq != null) {
          oprot.writeFieldBegin(GET_ORDER_DETAIL_VO_REQ_FIELD_DESC);
          struct.getOrderDetailVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrderDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getOrderDetail_argsTupleScheme getScheme() {
        return new getOrderDetail_argsTupleScheme();
      }
    }

    private static class getOrderDetail_argsTupleScheme extends TupleScheme<getOrderDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGetOrderDetailVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGetOrderDetailVoReq()) {
          struct.getOrderDetailVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.getOrderDetailVoReq = new com.froad.thrift.vo.order.GetOrderDetailVoReq();
          struct.getOrderDetailVoReq.read(iprot);
          struct.setGetOrderDetailVoReqIsSet(true);
        }
      }
    }

  }

  public static class getOrderDetail_result implements org.apache.thrift.TBase<getOrderDetail_result, getOrderDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrderDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrderDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetOrderDetailVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetOrderDetailVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderDetail_result.class, metaDataMap);
    }

    public getOrderDetail_result() {
    }

    public getOrderDetail_result(
      com.froad.thrift.vo.order.GetOrderDetailVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrderDetail_result(getOrderDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.GetOrderDetailVoRes(other.success);
      }
    }

    public getOrderDetail_result deepCopy() {
      return new getOrderDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.GetOrderDetailVoRes getSuccess() {
      return this.success;
    }

    public getOrderDetail_result setSuccess(com.froad.thrift.vo.order.GetOrderDetailVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.GetOrderDetailVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrderDetail_result)
        return this.equals((getOrderDetail_result)that);
      return false;
    }

    public boolean equals(getOrderDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrderDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrderDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrderDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getOrderDetail_resultStandardScheme getScheme() {
        return new getOrderDetail_resultStandardScheme();
      }
    }

    private static class getOrderDetail_resultStandardScheme extends StandardScheme<getOrderDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.GetOrderDetailVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrderDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getOrderDetail_resultTupleScheme getScheme() {
        return new getOrderDetail_resultTupleScheme();
      }
    }

    private static class getOrderDetail_resultTupleScheme extends TupleScheme<getOrderDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.GetOrderDetailVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getQrcodeOrderList_args implements org.apache.thrift.TBase<getQrcodeOrderList_args, getQrcodeOrderList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getQrcodeOrderList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQrcodeOrderList_args");

    private static final org.apache.thrift.protocol.TField GET_QRCODE_ORDER_SUMMARY_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("getQrcodeOrderSummaryVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQrcodeOrderList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQrcodeOrderList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq getQrcodeOrderSummaryVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GET_QRCODE_ORDER_SUMMARY_VO_REQ((short)1, "getQrcodeOrderSummaryVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GET_QRCODE_ORDER_SUMMARY_VO_REQ
            return GET_QRCODE_ORDER_SUMMARY_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GET_QRCODE_ORDER_SUMMARY_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("getQrcodeOrderSummaryVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQrcodeOrderList_args.class, metaDataMap);
    }

    public getQrcodeOrderList_args() {
    }

    public getQrcodeOrderList_args(
      com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq getQrcodeOrderSummaryVoReq)
    {
      this();
      this.getQrcodeOrderSummaryVoReq = getQrcodeOrderSummaryVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQrcodeOrderList_args(getQrcodeOrderList_args other) {
      if (other.isSetGetQrcodeOrderSummaryVoReq()) {
        this.getQrcodeOrderSummaryVoReq = new com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq(other.getQrcodeOrderSummaryVoReq);
      }
    }

    public getQrcodeOrderList_args deepCopy() {
      return new getQrcodeOrderList_args(this);
    }

    @Override
    public void clear() {
      this.getQrcodeOrderSummaryVoReq = null;
    }

    public com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq getGetQrcodeOrderSummaryVoReq() {
      return this.getQrcodeOrderSummaryVoReq;
    }

    public getQrcodeOrderList_args setGetQrcodeOrderSummaryVoReq(com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq getQrcodeOrderSummaryVoReq) {
      this.getQrcodeOrderSummaryVoReq = getQrcodeOrderSummaryVoReq;
      return this;
    }

    public void unsetGetQrcodeOrderSummaryVoReq() {
      this.getQrcodeOrderSummaryVoReq = null;
    }

    /** Returns true if field getQrcodeOrderSummaryVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetGetQrcodeOrderSummaryVoReq() {
      return this.getQrcodeOrderSummaryVoReq != null;
    }

    public void setGetQrcodeOrderSummaryVoReqIsSet(boolean value) {
      if (!value) {
        this.getQrcodeOrderSummaryVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GET_QRCODE_ORDER_SUMMARY_VO_REQ:
        if (value == null) {
          unsetGetQrcodeOrderSummaryVoReq();
        } else {
          setGetQrcodeOrderSummaryVoReq((com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GET_QRCODE_ORDER_SUMMARY_VO_REQ:
        return getGetQrcodeOrderSummaryVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GET_QRCODE_ORDER_SUMMARY_VO_REQ:
        return isSetGetQrcodeOrderSummaryVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQrcodeOrderList_args)
        return this.equals((getQrcodeOrderList_args)that);
      return false;
    }

    public boolean equals(getQrcodeOrderList_args that) {
      if (that == null)
        return false;

      boolean this_present_getQrcodeOrderSummaryVoReq = true && this.isSetGetQrcodeOrderSummaryVoReq();
      boolean that_present_getQrcodeOrderSummaryVoReq = true && that.isSetGetQrcodeOrderSummaryVoReq();
      if (this_present_getQrcodeOrderSummaryVoReq || that_present_getQrcodeOrderSummaryVoReq) {
        if (!(this_present_getQrcodeOrderSummaryVoReq && that_present_getQrcodeOrderSummaryVoReq))
          return false;
        if (!this.getQrcodeOrderSummaryVoReq.equals(that.getQrcodeOrderSummaryVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_getQrcodeOrderSummaryVoReq = true && (isSetGetQrcodeOrderSummaryVoReq());
      list.add(present_getQrcodeOrderSummaryVoReq);
      if (present_getQrcodeOrderSummaryVoReq)
        list.add(getQrcodeOrderSummaryVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(getQrcodeOrderList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGetQrcodeOrderSummaryVoReq()).compareTo(other.isSetGetQrcodeOrderSummaryVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetQrcodeOrderSummaryVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getQrcodeOrderSummaryVoReq, other.getQrcodeOrderSummaryVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQrcodeOrderList_args(");
      boolean first = true;

      sb.append("getQrcodeOrderSummaryVoReq:");
      if (this.getQrcodeOrderSummaryVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.getQrcodeOrderSummaryVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (getQrcodeOrderSummaryVoReq != null) {
        getQrcodeOrderSummaryVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQrcodeOrderList_argsStandardSchemeFactory implements SchemeFactory {
      public getQrcodeOrderList_argsStandardScheme getScheme() {
        return new getQrcodeOrderList_argsStandardScheme();
      }
    }

    private static class getQrcodeOrderList_argsStandardScheme extends StandardScheme<getQrcodeOrderList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQrcodeOrderList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GET_QRCODE_ORDER_SUMMARY_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getQrcodeOrderSummaryVoReq = new com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq();
                struct.getQrcodeOrderSummaryVoReq.read(iprot);
                struct.setGetQrcodeOrderSummaryVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQrcodeOrderList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.getQrcodeOrderSummaryVoReq != null) {
          oprot.writeFieldBegin(GET_QRCODE_ORDER_SUMMARY_VO_REQ_FIELD_DESC);
          struct.getQrcodeOrderSummaryVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQrcodeOrderList_argsTupleSchemeFactory implements SchemeFactory {
      public getQrcodeOrderList_argsTupleScheme getScheme() {
        return new getQrcodeOrderList_argsTupleScheme();
      }
    }

    private static class getQrcodeOrderList_argsTupleScheme extends TupleScheme<getQrcodeOrderList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQrcodeOrderList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGetQrcodeOrderSummaryVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGetQrcodeOrderSummaryVoReq()) {
          struct.getQrcodeOrderSummaryVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQrcodeOrderList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.getQrcodeOrderSummaryVoReq = new com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoReq();
          struct.getQrcodeOrderSummaryVoReq.read(iprot);
          struct.setGetQrcodeOrderSummaryVoReqIsSet(true);
        }
      }
    }

  }

  public static class getQrcodeOrderList_result implements org.apache.thrift.TBase<getQrcodeOrderList_result, getQrcodeOrderList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getQrcodeOrderList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQrcodeOrderList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQrcodeOrderList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQrcodeOrderList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQrcodeOrderList_result.class, metaDataMap);
    }

    public getQrcodeOrderList_result() {
    }

    public getQrcodeOrderList_result(
      com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQrcodeOrderList_result(getQrcodeOrderList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes(other.success);
      }
    }

    public getQrcodeOrderList_result deepCopy() {
      return new getQrcodeOrderList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes getSuccess() {
      return this.success;
    }

    public getQrcodeOrderList_result setSuccess(com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQrcodeOrderList_result)
        return this.equals((getQrcodeOrderList_result)that);
      return false;
    }

    public boolean equals(getQrcodeOrderList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getQrcodeOrderList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQrcodeOrderList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQrcodeOrderList_resultStandardSchemeFactory implements SchemeFactory {
      public getQrcodeOrderList_resultStandardScheme getScheme() {
        return new getQrcodeOrderList_resultStandardScheme();
      }
    }

    private static class getQrcodeOrderList_resultStandardScheme extends StandardScheme<getQrcodeOrderList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQrcodeOrderList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQrcodeOrderList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQrcodeOrderList_resultTupleSchemeFactory implements SchemeFactory {
      public getQrcodeOrderList_resultTupleScheme getScheme() {
        return new getQrcodeOrderList_resultTupleScheme();
      }
    }

    private static class getQrcodeOrderList_resultTupleScheme extends TupleScheme<getQrcodeOrderList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQrcodeOrderList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQrcodeOrderList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.GetQrcodeOrderSummaryVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getQrcodeOrderDetail_args implements org.apache.thrift.TBase<getQrcodeOrderDetail_args, getQrcodeOrderDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getQrcodeOrderDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQrcodeOrderDetail_args");

    private static final org.apache.thrift.protocol.TField GET_QRCODE_ORDER_DETAIL_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("getQrcodeOrderDetailVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQrcodeOrderDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQrcodeOrderDetail_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq getQrcodeOrderDetailVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GET_QRCODE_ORDER_DETAIL_VO_REQ((short)1, "getQrcodeOrderDetailVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GET_QRCODE_ORDER_DETAIL_VO_REQ
            return GET_QRCODE_ORDER_DETAIL_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GET_QRCODE_ORDER_DETAIL_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("getQrcodeOrderDetailVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQrcodeOrderDetail_args.class, metaDataMap);
    }

    public getQrcodeOrderDetail_args() {
    }

    public getQrcodeOrderDetail_args(
      com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq getQrcodeOrderDetailVoReq)
    {
      this();
      this.getQrcodeOrderDetailVoReq = getQrcodeOrderDetailVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQrcodeOrderDetail_args(getQrcodeOrderDetail_args other) {
      if (other.isSetGetQrcodeOrderDetailVoReq()) {
        this.getQrcodeOrderDetailVoReq = new com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq(other.getQrcodeOrderDetailVoReq);
      }
    }

    public getQrcodeOrderDetail_args deepCopy() {
      return new getQrcodeOrderDetail_args(this);
    }

    @Override
    public void clear() {
      this.getQrcodeOrderDetailVoReq = null;
    }

    public com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq getGetQrcodeOrderDetailVoReq() {
      return this.getQrcodeOrderDetailVoReq;
    }

    public getQrcodeOrderDetail_args setGetQrcodeOrderDetailVoReq(com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq getQrcodeOrderDetailVoReq) {
      this.getQrcodeOrderDetailVoReq = getQrcodeOrderDetailVoReq;
      return this;
    }

    public void unsetGetQrcodeOrderDetailVoReq() {
      this.getQrcodeOrderDetailVoReq = null;
    }

    /** Returns true if field getQrcodeOrderDetailVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetGetQrcodeOrderDetailVoReq() {
      return this.getQrcodeOrderDetailVoReq != null;
    }

    public void setGetQrcodeOrderDetailVoReqIsSet(boolean value) {
      if (!value) {
        this.getQrcodeOrderDetailVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GET_QRCODE_ORDER_DETAIL_VO_REQ:
        if (value == null) {
          unsetGetQrcodeOrderDetailVoReq();
        } else {
          setGetQrcodeOrderDetailVoReq((com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GET_QRCODE_ORDER_DETAIL_VO_REQ:
        return getGetQrcodeOrderDetailVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GET_QRCODE_ORDER_DETAIL_VO_REQ:
        return isSetGetQrcodeOrderDetailVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQrcodeOrderDetail_args)
        return this.equals((getQrcodeOrderDetail_args)that);
      return false;
    }

    public boolean equals(getQrcodeOrderDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_getQrcodeOrderDetailVoReq = true && this.isSetGetQrcodeOrderDetailVoReq();
      boolean that_present_getQrcodeOrderDetailVoReq = true && that.isSetGetQrcodeOrderDetailVoReq();
      if (this_present_getQrcodeOrderDetailVoReq || that_present_getQrcodeOrderDetailVoReq) {
        if (!(this_present_getQrcodeOrderDetailVoReq && that_present_getQrcodeOrderDetailVoReq))
          return false;
        if (!this.getQrcodeOrderDetailVoReq.equals(that.getQrcodeOrderDetailVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_getQrcodeOrderDetailVoReq = true && (isSetGetQrcodeOrderDetailVoReq());
      list.add(present_getQrcodeOrderDetailVoReq);
      if (present_getQrcodeOrderDetailVoReq)
        list.add(getQrcodeOrderDetailVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(getQrcodeOrderDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGetQrcodeOrderDetailVoReq()).compareTo(other.isSetGetQrcodeOrderDetailVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetQrcodeOrderDetailVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getQrcodeOrderDetailVoReq, other.getQrcodeOrderDetailVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQrcodeOrderDetail_args(");
      boolean first = true;

      sb.append("getQrcodeOrderDetailVoReq:");
      if (this.getQrcodeOrderDetailVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.getQrcodeOrderDetailVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (getQrcodeOrderDetailVoReq != null) {
        getQrcodeOrderDetailVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQrcodeOrderDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getQrcodeOrderDetail_argsStandardScheme getScheme() {
        return new getQrcodeOrderDetail_argsStandardScheme();
      }
    }

    private static class getQrcodeOrderDetail_argsStandardScheme extends StandardScheme<getQrcodeOrderDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQrcodeOrderDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GET_QRCODE_ORDER_DETAIL_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getQrcodeOrderDetailVoReq = new com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq();
                struct.getQrcodeOrderDetailVoReq.read(iprot);
                struct.setGetQrcodeOrderDetailVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQrcodeOrderDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.getQrcodeOrderDetailVoReq != null) {
          oprot.writeFieldBegin(GET_QRCODE_ORDER_DETAIL_VO_REQ_FIELD_DESC);
          struct.getQrcodeOrderDetailVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQrcodeOrderDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getQrcodeOrderDetail_argsTupleScheme getScheme() {
        return new getQrcodeOrderDetail_argsTupleScheme();
      }
    }

    private static class getQrcodeOrderDetail_argsTupleScheme extends TupleScheme<getQrcodeOrderDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQrcodeOrderDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGetQrcodeOrderDetailVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGetQrcodeOrderDetailVoReq()) {
          struct.getQrcodeOrderDetailVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQrcodeOrderDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.getQrcodeOrderDetailVoReq = new com.froad.thrift.vo.order.GetQrcodeOrderDetailVoReq();
          struct.getQrcodeOrderDetailVoReq.read(iprot);
          struct.setGetQrcodeOrderDetailVoReqIsSet(true);
        }
      }
    }

  }

  public static class getQrcodeOrderDetail_result implements org.apache.thrift.TBase<getQrcodeOrderDetail_result, getQrcodeOrderDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getQrcodeOrderDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQrcodeOrderDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQrcodeOrderDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQrcodeOrderDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQrcodeOrderDetail_result.class, metaDataMap);
    }

    public getQrcodeOrderDetail_result() {
    }

    public getQrcodeOrderDetail_result(
      com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQrcodeOrderDetail_result(getQrcodeOrderDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes(other.success);
      }
    }

    public getQrcodeOrderDetail_result deepCopy() {
      return new getQrcodeOrderDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes getSuccess() {
      return this.success;
    }

    public getQrcodeOrderDetail_result setSuccess(com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQrcodeOrderDetail_result)
        return this.equals((getQrcodeOrderDetail_result)that);
      return false;
    }

    public boolean equals(getQrcodeOrderDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getQrcodeOrderDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQrcodeOrderDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQrcodeOrderDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getQrcodeOrderDetail_resultStandardScheme getScheme() {
        return new getQrcodeOrderDetail_resultStandardScheme();
      }
    }

    private static class getQrcodeOrderDetail_resultStandardScheme extends StandardScheme<getQrcodeOrderDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQrcodeOrderDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQrcodeOrderDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQrcodeOrderDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getQrcodeOrderDetail_resultTupleScheme getScheme() {
        return new getQrcodeOrderDetail_resultTupleScheme();
      }
    }

    private static class getQrcodeOrderDetail_resultTupleScheme extends TupleScheme<getQrcodeOrderDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQrcodeOrderDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQrcodeOrderDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.GetQrcodeOrderDetailVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteOrder_args implements org.apache.thrift.TBase<deleteOrder_args, deleteOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOrder_args");

    private static final org.apache.thrift.protocol.TField DELETE_ORDER_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("deleteOrderVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.DeleteOrderVoReq deleteOrderVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DELETE_ORDER_VO_REQ((short)1, "deleteOrderVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DELETE_ORDER_VO_REQ
            return DELETE_ORDER_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DELETE_ORDER_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("deleteOrderVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.DeleteOrderVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOrder_args.class, metaDataMap);
    }

    public deleteOrder_args() {
    }

    public deleteOrder_args(
      com.froad.thrift.vo.order.DeleteOrderVoReq deleteOrderVoReq)
    {
      this();
      this.deleteOrderVoReq = deleteOrderVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOrder_args(deleteOrder_args other) {
      if (other.isSetDeleteOrderVoReq()) {
        this.deleteOrderVoReq = new com.froad.thrift.vo.order.DeleteOrderVoReq(other.deleteOrderVoReq);
      }
    }

    public deleteOrder_args deepCopy() {
      return new deleteOrder_args(this);
    }

    @Override
    public void clear() {
      this.deleteOrderVoReq = null;
    }

    public com.froad.thrift.vo.order.DeleteOrderVoReq getDeleteOrderVoReq() {
      return this.deleteOrderVoReq;
    }

    public deleteOrder_args setDeleteOrderVoReq(com.froad.thrift.vo.order.DeleteOrderVoReq deleteOrderVoReq) {
      this.deleteOrderVoReq = deleteOrderVoReq;
      return this;
    }

    public void unsetDeleteOrderVoReq() {
      this.deleteOrderVoReq = null;
    }

    /** Returns true if field deleteOrderVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetDeleteOrderVoReq() {
      return this.deleteOrderVoReq != null;
    }

    public void setDeleteOrderVoReqIsSet(boolean value) {
      if (!value) {
        this.deleteOrderVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DELETE_ORDER_VO_REQ:
        if (value == null) {
          unsetDeleteOrderVoReq();
        } else {
          setDeleteOrderVoReq((com.froad.thrift.vo.order.DeleteOrderVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DELETE_ORDER_VO_REQ:
        return getDeleteOrderVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DELETE_ORDER_VO_REQ:
        return isSetDeleteOrderVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOrder_args)
        return this.equals((deleteOrder_args)that);
      return false;
    }

    public boolean equals(deleteOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_deleteOrderVoReq = true && this.isSetDeleteOrderVoReq();
      boolean that_present_deleteOrderVoReq = true && that.isSetDeleteOrderVoReq();
      if (this_present_deleteOrderVoReq || that_present_deleteOrderVoReq) {
        if (!(this_present_deleteOrderVoReq && that_present_deleteOrderVoReq))
          return false;
        if (!this.deleteOrderVoReq.equals(that.deleteOrderVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_deleteOrderVoReq = true && (isSetDeleteOrderVoReq());
      list.add(present_deleteOrderVoReq);
      if (present_deleteOrderVoReq)
        list.add(deleteOrderVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDeleteOrderVoReq()).compareTo(other.isSetDeleteOrderVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeleteOrderVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleteOrderVoReq, other.deleteOrderVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOrder_args(");
      boolean first = true;

      sb.append("deleteOrderVoReq:");
      if (this.deleteOrderVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.deleteOrderVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (deleteOrderVoReq != null) {
        deleteOrderVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOrder_argsStandardSchemeFactory implements SchemeFactory {
      public deleteOrder_argsStandardScheme getScheme() {
        return new deleteOrder_argsStandardScheme();
      }
    }

    private static class deleteOrder_argsStandardScheme extends StandardScheme<deleteOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DELETE_ORDER_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.deleteOrderVoReq = new com.froad.thrift.vo.order.DeleteOrderVoReq();
                struct.deleteOrderVoReq.read(iprot);
                struct.setDeleteOrderVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deleteOrderVoReq != null) {
          oprot.writeFieldBegin(DELETE_ORDER_VO_REQ_FIELD_DESC);
          struct.deleteOrderVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOrder_argsTupleSchemeFactory implements SchemeFactory {
      public deleteOrder_argsTupleScheme getScheme() {
        return new deleteOrder_argsTupleScheme();
      }
    }

    private static class deleteOrder_argsTupleScheme extends TupleScheme<deleteOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeleteOrderVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeleteOrderVoReq()) {
          struct.deleteOrderVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deleteOrderVoReq = new com.froad.thrift.vo.order.DeleteOrderVoReq();
          struct.deleteOrderVoReq.read(iprot);
          struct.setDeleteOrderVoReqIsSet(true);
        }
      }
    }

  }

  public static class deleteOrder_result implements org.apache.thrift.TBase<deleteOrder_result, deleteOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.DeleteOrderVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.DeleteOrderVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteOrder_result.class, metaDataMap);
    }

    public deleteOrder_result() {
    }

    public deleteOrder_result(
      com.froad.thrift.vo.order.DeleteOrderVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteOrder_result(deleteOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.DeleteOrderVoRes(other.success);
      }
    }

    public deleteOrder_result deepCopy() {
      return new deleteOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.DeleteOrderVoRes getSuccess() {
      return this.success;
    }

    public deleteOrder_result setSuccess(com.froad.thrift.vo.order.DeleteOrderVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.DeleteOrderVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteOrder_result)
        return this.equals((deleteOrder_result)that);
      return false;
    }

    public boolean equals(deleteOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteOrder_resultStandardSchemeFactory implements SchemeFactory {
      public deleteOrder_resultStandardScheme getScheme() {
        return new deleteOrder_resultStandardScheme();
      }
    }

    private static class deleteOrder_resultStandardScheme extends StandardScheme<deleteOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.DeleteOrderVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteOrder_resultTupleSchemeFactory implements SchemeFactory {
      public deleteOrder_resultTupleScheme getScheme() {
        return new deleteOrder_resultTupleScheme();
      }
    }

    private static class deleteOrder_resultTupleScheme extends TupleScheme<deleteOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.DeleteOrderVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class shippingOrder_args implements org.apache.thrift.TBase<shippingOrder_args, shippingOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<shippingOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shippingOrder_args");

    private static final org.apache.thrift.protocol.TField SHIPPING_ORDER_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("shippingOrderVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shippingOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shippingOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.ShippingOrderVoReq shippingOrderVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHIPPING_ORDER_VO_REQ((short)1, "shippingOrderVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHIPPING_ORDER_VO_REQ
            return SHIPPING_ORDER_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHIPPING_ORDER_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("shippingOrderVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.ShippingOrderVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shippingOrder_args.class, metaDataMap);
    }

    public shippingOrder_args() {
    }

    public shippingOrder_args(
      com.froad.thrift.vo.order.ShippingOrderVoReq shippingOrderVoReq)
    {
      this();
      this.shippingOrderVoReq = shippingOrderVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shippingOrder_args(shippingOrder_args other) {
      if (other.isSetShippingOrderVoReq()) {
        this.shippingOrderVoReq = new com.froad.thrift.vo.order.ShippingOrderVoReq(other.shippingOrderVoReq);
      }
    }

    public shippingOrder_args deepCopy() {
      return new shippingOrder_args(this);
    }

    @Override
    public void clear() {
      this.shippingOrderVoReq = null;
    }

    public com.froad.thrift.vo.order.ShippingOrderVoReq getShippingOrderVoReq() {
      return this.shippingOrderVoReq;
    }

    public shippingOrder_args setShippingOrderVoReq(com.froad.thrift.vo.order.ShippingOrderVoReq shippingOrderVoReq) {
      this.shippingOrderVoReq = shippingOrderVoReq;
      return this;
    }

    public void unsetShippingOrderVoReq() {
      this.shippingOrderVoReq = null;
    }

    /** Returns true if field shippingOrderVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetShippingOrderVoReq() {
      return this.shippingOrderVoReq != null;
    }

    public void setShippingOrderVoReqIsSet(boolean value) {
      if (!value) {
        this.shippingOrderVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHIPPING_ORDER_VO_REQ:
        if (value == null) {
          unsetShippingOrderVoReq();
        } else {
          setShippingOrderVoReq((com.froad.thrift.vo.order.ShippingOrderVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHIPPING_ORDER_VO_REQ:
        return getShippingOrderVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHIPPING_ORDER_VO_REQ:
        return isSetShippingOrderVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shippingOrder_args)
        return this.equals((shippingOrder_args)that);
      return false;
    }

    public boolean equals(shippingOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_shippingOrderVoReq = true && this.isSetShippingOrderVoReq();
      boolean that_present_shippingOrderVoReq = true && that.isSetShippingOrderVoReq();
      if (this_present_shippingOrderVoReq || that_present_shippingOrderVoReq) {
        if (!(this_present_shippingOrderVoReq && that_present_shippingOrderVoReq))
          return false;
        if (!this.shippingOrderVoReq.equals(that.shippingOrderVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_shippingOrderVoReq = true && (isSetShippingOrderVoReq());
      list.add(present_shippingOrderVoReq);
      if (present_shippingOrderVoReq)
        list.add(shippingOrderVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(shippingOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShippingOrderVoReq()).compareTo(other.isSetShippingOrderVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShippingOrderVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shippingOrderVoReq, other.shippingOrderVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shippingOrder_args(");
      boolean first = true;

      sb.append("shippingOrderVoReq:");
      if (this.shippingOrderVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.shippingOrderVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (shippingOrderVoReq != null) {
        shippingOrderVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shippingOrder_argsStandardSchemeFactory implements SchemeFactory {
      public shippingOrder_argsStandardScheme getScheme() {
        return new shippingOrder_argsStandardScheme();
      }
    }

    private static class shippingOrder_argsStandardScheme extends StandardScheme<shippingOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shippingOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHIPPING_ORDER_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shippingOrderVoReq = new com.froad.thrift.vo.order.ShippingOrderVoReq();
                struct.shippingOrderVoReq.read(iprot);
                struct.setShippingOrderVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shippingOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shippingOrderVoReq != null) {
          oprot.writeFieldBegin(SHIPPING_ORDER_VO_REQ_FIELD_DESC);
          struct.shippingOrderVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shippingOrder_argsTupleSchemeFactory implements SchemeFactory {
      public shippingOrder_argsTupleScheme getScheme() {
        return new shippingOrder_argsTupleScheme();
      }
    }

    private static class shippingOrder_argsTupleScheme extends TupleScheme<shippingOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shippingOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShippingOrderVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetShippingOrderVoReq()) {
          struct.shippingOrderVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shippingOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.shippingOrderVoReq = new com.froad.thrift.vo.order.ShippingOrderVoReq();
          struct.shippingOrderVoReq.read(iprot);
          struct.setShippingOrderVoReqIsSet(true);
        }
      }
    }

  }

  public static class shippingOrder_result implements org.apache.thrift.TBase<shippingOrder_result, shippingOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<shippingOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shippingOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new shippingOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new shippingOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.ShippingOrderVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.ShippingOrderVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shippingOrder_result.class, metaDataMap);
    }

    public shippingOrder_result() {
    }

    public shippingOrder_result(
      com.froad.thrift.vo.order.ShippingOrderVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shippingOrder_result(shippingOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.ShippingOrderVoRes(other.success);
      }
    }

    public shippingOrder_result deepCopy() {
      return new shippingOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.ShippingOrderVoRes getSuccess() {
      return this.success;
    }

    public shippingOrder_result setSuccess(com.froad.thrift.vo.order.ShippingOrderVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.ShippingOrderVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shippingOrder_result)
        return this.equals((shippingOrder_result)that);
      return false;
    }

    public boolean equals(shippingOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(shippingOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shippingOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shippingOrder_resultStandardSchemeFactory implements SchemeFactory {
      public shippingOrder_resultStandardScheme getScheme() {
        return new shippingOrder_resultStandardScheme();
      }
    }

    private static class shippingOrder_resultStandardScheme extends StandardScheme<shippingOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shippingOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.ShippingOrderVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shippingOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shippingOrder_resultTupleSchemeFactory implements SchemeFactory {
      public shippingOrder_resultTupleScheme getScheme() {
        return new shippingOrder_resultTupleScheme();
      }
    }

    private static class shippingOrder_resultTupleScheme extends TupleScheme<shippingOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shippingOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shippingOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.ShippingOrderVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class receiptOrder_args implements org.apache.thrift.TBase<receiptOrder_args, receiptOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<receiptOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiptOrder_args");

    private static final org.apache.thrift.protocol.TField RECEIPT_ORDER_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("receiptOrderReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiptOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiptOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.ReceiptOrderReq receiptOrderReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECEIPT_ORDER_REQ((short)1, "receiptOrderReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECEIPT_ORDER_REQ
            return RECEIPT_ORDER_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECEIPT_ORDER_REQ, new org.apache.thrift.meta_data.FieldMetaData("receiptOrderReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.ReceiptOrderReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiptOrder_args.class, metaDataMap);
    }

    public receiptOrder_args() {
    }

    public receiptOrder_args(
      com.froad.thrift.vo.order.ReceiptOrderReq receiptOrderReq)
    {
      this();
      this.receiptOrderReq = receiptOrderReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiptOrder_args(receiptOrder_args other) {
      if (other.isSetReceiptOrderReq()) {
        this.receiptOrderReq = new com.froad.thrift.vo.order.ReceiptOrderReq(other.receiptOrderReq);
      }
    }

    public receiptOrder_args deepCopy() {
      return new receiptOrder_args(this);
    }

    @Override
    public void clear() {
      this.receiptOrderReq = null;
    }

    public com.froad.thrift.vo.order.ReceiptOrderReq getReceiptOrderReq() {
      return this.receiptOrderReq;
    }

    public receiptOrder_args setReceiptOrderReq(com.froad.thrift.vo.order.ReceiptOrderReq receiptOrderReq) {
      this.receiptOrderReq = receiptOrderReq;
      return this;
    }

    public void unsetReceiptOrderReq() {
      this.receiptOrderReq = null;
    }

    /** Returns true if field receiptOrderReq is set (has been assigned a value) and false otherwise */
    public boolean isSetReceiptOrderReq() {
      return this.receiptOrderReq != null;
    }

    public void setReceiptOrderReqIsSet(boolean value) {
      if (!value) {
        this.receiptOrderReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECEIPT_ORDER_REQ:
        if (value == null) {
          unsetReceiptOrderReq();
        } else {
          setReceiptOrderReq((com.froad.thrift.vo.order.ReceiptOrderReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECEIPT_ORDER_REQ:
        return getReceiptOrderReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECEIPT_ORDER_REQ:
        return isSetReceiptOrderReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiptOrder_args)
        return this.equals((receiptOrder_args)that);
      return false;
    }

    public boolean equals(receiptOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_receiptOrderReq = true && this.isSetReceiptOrderReq();
      boolean that_present_receiptOrderReq = true && that.isSetReceiptOrderReq();
      if (this_present_receiptOrderReq || that_present_receiptOrderReq) {
        if (!(this_present_receiptOrderReq && that_present_receiptOrderReq))
          return false;
        if (!this.receiptOrderReq.equals(that.receiptOrderReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_receiptOrderReq = true && (isSetReceiptOrderReq());
      list.add(present_receiptOrderReq);
      if (present_receiptOrderReq)
        list.add(receiptOrderReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(receiptOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReceiptOrderReq()).compareTo(other.isSetReceiptOrderReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceiptOrderReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiptOrderReq, other.receiptOrderReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiptOrder_args(");
      boolean first = true;

      sb.append("receiptOrderReq:");
      if (this.receiptOrderReq == null) {
        sb.append("null");
      } else {
        sb.append(this.receiptOrderReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (receiptOrderReq != null) {
        receiptOrderReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiptOrder_argsStandardSchemeFactory implements SchemeFactory {
      public receiptOrder_argsStandardScheme getScheme() {
        return new receiptOrder_argsStandardScheme();
      }
    }

    private static class receiptOrder_argsStandardScheme extends StandardScheme<receiptOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiptOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECEIPT_ORDER_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.receiptOrderReq = new com.froad.thrift.vo.order.ReceiptOrderReq();
                struct.receiptOrderReq.read(iprot);
                struct.setReceiptOrderReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiptOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.receiptOrderReq != null) {
          oprot.writeFieldBegin(RECEIPT_ORDER_REQ_FIELD_DESC);
          struct.receiptOrderReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiptOrder_argsTupleSchemeFactory implements SchemeFactory {
      public receiptOrder_argsTupleScheme getScheme() {
        return new receiptOrder_argsTupleScheme();
      }
    }

    private static class receiptOrder_argsTupleScheme extends TupleScheme<receiptOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiptOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReceiptOrderReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReceiptOrderReq()) {
          struct.receiptOrderReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiptOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.receiptOrderReq = new com.froad.thrift.vo.order.ReceiptOrderReq();
          struct.receiptOrderReq.read(iprot);
          struct.setReceiptOrderReqIsSet(true);
        }
      }
    }

  }

  public static class receiptOrder_result implements org.apache.thrift.TBase<receiptOrder_result, receiptOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<receiptOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiptOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new receiptOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new receiptOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.ShippingOrderVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.ShippingOrderVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiptOrder_result.class, metaDataMap);
    }

    public receiptOrder_result() {
    }

    public receiptOrder_result(
      com.froad.thrift.vo.order.ShippingOrderVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiptOrder_result(receiptOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.ShippingOrderVoRes(other.success);
      }
    }

    public receiptOrder_result deepCopy() {
      return new receiptOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.ShippingOrderVoRes getSuccess() {
      return this.success;
    }

    public receiptOrder_result setSuccess(com.froad.thrift.vo.order.ShippingOrderVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.ShippingOrderVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof receiptOrder_result)
        return this.equals((receiptOrder_result)that);
      return false;
    }

    public boolean equals(receiptOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(receiptOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("receiptOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiptOrder_resultStandardSchemeFactory implements SchemeFactory {
      public receiptOrder_resultStandardScheme getScheme() {
        return new receiptOrder_resultStandardScheme();
      }
    }

    private static class receiptOrder_resultStandardScheme extends StandardScheme<receiptOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, receiptOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.ShippingOrderVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, receiptOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiptOrder_resultTupleSchemeFactory implements SchemeFactory {
      public receiptOrder_resultTupleScheme getScheme() {
        return new receiptOrder_resultTupleScheme();
      }
    }

    private static class receiptOrder_resultTupleScheme extends TupleScheme<receiptOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiptOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiptOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.ShippingOrderVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addQrcodeOrder_args implements org.apache.thrift.TBase<addQrcodeOrder_args, addQrcodeOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<addQrcodeOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addQrcodeOrder_args");

    private static final org.apache.thrift.protocol.TField ADD_QRCODE_ORDER_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("addQrcodeOrderVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addQrcodeOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addQrcodeOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.AddQrcodeOrderVoReq addQrcodeOrderVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADD_QRCODE_ORDER_VO_REQ((short)1, "addQrcodeOrderVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADD_QRCODE_ORDER_VO_REQ
            return ADD_QRCODE_ORDER_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADD_QRCODE_ORDER_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("addQrcodeOrderVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.AddQrcodeOrderVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addQrcodeOrder_args.class, metaDataMap);
    }

    public addQrcodeOrder_args() {
    }

    public addQrcodeOrder_args(
      com.froad.thrift.vo.order.AddQrcodeOrderVoReq addQrcodeOrderVoReq)
    {
      this();
      this.addQrcodeOrderVoReq = addQrcodeOrderVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addQrcodeOrder_args(addQrcodeOrder_args other) {
      if (other.isSetAddQrcodeOrderVoReq()) {
        this.addQrcodeOrderVoReq = new com.froad.thrift.vo.order.AddQrcodeOrderVoReq(other.addQrcodeOrderVoReq);
      }
    }

    public addQrcodeOrder_args deepCopy() {
      return new addQrcodeOrder_args(this);
    }

    @Override
    public void clear() {
      this.addQrcodeOrderVoReq = null;
    }

    public com.froad.thrift.vo.order.AddQrcodeOrderVoReq getAddQrcodeOrderVoReq() {
      return this.addQrcodeOrderVoReq;
    }

    public addQrcodeOrder_args setAddQrcodeOrderVoReq(com.froad.thrift.vo.order.AddQrcodeOrderVoReq addQrcodeOrderVoReq) {
      this.addQrcodeOrderVoReq = addQrcodeOrderVoReq;
      return this;
    }

    public void unsetAddQrcodeOrderVoReq() {
      this.addQrcodeOrderVoReq = null;
    }

    /** Returns true if field addQrcodeOrderVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetAddQrcodeOrderVoReq() {
      return this.addQrcodeOrderVoReq != null;
    }

    public void setAddQrcodeOrderVoReqIsSet(boolean value) {
      if (!value) {
        this.addQrcodeOrderVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADD_QRCODE_ORDER_VO_REQ:
        if (value == null) {
          unsetAddQrcodeOrderVoReq();
        } else {
          setAddQrcodeOrderVoReq((com.froad.thrift.vo.order.AddQrcodeOrderVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADD_QRCODE_ORDER_VO_REQ:
        return getAddQrcodeOrderVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADD_QRCODE_ORDER_VO_REQ:
        return isSetAddQrcodeOrderVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addQrcodeOrder_args)
        return this.equals((addQrcodeOrder_args)that);
      return false;
    }

    public boolean equals(addQrcodeOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_addQrcodeOrderVoReq = true && this.isSetAddQrcodeOrderVoReq();
      boolean that_present_addQrcodeOrderVoReq = true && that.isSetAddQrcodeOrderVoReq();
      if (this_present_addQrcodeOrderVoReq || that_present_addQrcodeOrderVoReq) {
        if (!(this_present_addQrcodeOrderVoReq && that_present_addQrcodeOrderVoReq))
          return false;
        if (!this.addQrcodeOrderVoReq.equals(that.addQrcodeOrderVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_addQrcodeOrderVoReq = true && (isSetAddQrcodeOrderVoReq());
      list.add(present_addQrcodeOrderVoReq);
      if (present_addQrcodeOrderVoReq)
        list.add(addQrcodeOrderVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(addQrcodeOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAddQrcodeOrderVoReq()).compareTo(other.isSetAddQrcodeOrderVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddQrcodeOrderVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addQrcodeOrderVoReq, other.addQrcodeOrderVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addQrcodeOrder_args(");
      boolean first = true;

      sb.append("addQrcodeOrderVoReq:");
      if (this.addQrcodeOrderVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.addQrcodeOrderVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (addQrcodeOrderVoReq != null) {
        addQrcodeOrderVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addQrcodeOrder_argsStandardSchemeFactory implements SchemeFactory {
      public addQrcodeOrder_argsStandardScheme getScheme() {
        return new addQrcodeOrder_argsStandardScheme();
      }
    }

    private static class addQrcodeOrder_argsStandardScheme extends StandardScheme<addQrcodeOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addQrcodeOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADD_QRCODE_ORDER_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.addQrcodeOrderVoReq = new com.froad.thrift.vo.order.AddQrcodeOrderVoReq();
                struct.addQrcodeOrderVoReq.read(iprot);
                struct.setAddQrcodeOrderVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addQrcodeOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.addQrcodeOrderVoReq != null) {
          oprot.writeFieldBegin(ADD_QRCODE_ORDER_VO_REQ_FIELD_DESC);
          struct.addQrcodeOrderVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addQrcodeOrder_argsTupleSchemeFactory implements SchemeFactory {
      public addQrcodeOrder_argsTupleScheme getScheme() {
        return new addQrcodeOrder_argsTupleScheme();
      }
    }

    private static class addQrcodeOrder_argsTupleScheme extends TupleScheme<addQrcodeOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addQrcodeOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAddQrcodeOrderVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAddQrcodeOrderVoReq()) {
          struct.addQrcodeOrderVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addQrcodeOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.addQrcodeOrderVoReq = new com.froad.thrift.vo.order.AddQrcodeOrderVoReq();
          struct.addQrcodeOrderVoReq.read(iprot);
          struct.setAddQrcodeOrderVoReqIsSet(true);
        }
      }
    }

  }

  public static class addQrcodeOrder_result implements org.apache.thrift.TBase<addQrcodeOrder_result, addQrcodeOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<addQrcodeOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addQrcodeOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addQrcodeOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addQrcodeOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.AddQrcodeOrderVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.AddQrcodeOrderVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addQrcodeOrder_result.class, metaDataMap);
    }

    public addQrcodeOrder_result() {
    }

    public addQrcodeOrder_result(
      com.froad.thrift.vo.order.AddQrcodeOrderVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addQrcodeOrder_result(addQrcodeOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.AddQrcodeOrderVoRes(other.success);
      }
    }

    public addQrcodeOrder_result deepCopy() {
      return new addQrcodeOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.AddQrcodeOrderVoRes getSuccess() {
      return this.success;
    }

    public addQrcodeOrder_result setSuccess(com.froad.thrift.vo.order.AddQrcodeOrderVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.AddQrcodeOrderVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addQrcodeOrder_result)
        return this.equals((addQrcodeOrder_result)that);
      return false;
    }

    public boolean equals(addQrcodeOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addQrcodeOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addQrcodeOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addQrcodeOrder_resultStandardSchemeFactory implements SchemeFactory {
      public addQrcodeOrder_resultStandardScheme getScheme() {
        return new addQrcodeOrder_resultStandardScheme();
      }
    }

    private static class addQrcodeOrder_resultStandardScheme extends StandardScheme<addQrcodeOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addQrcodeOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.AddQrcodeOrderVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addQrcodeOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addQrcodeOrder_resultTupleSchemeFactory implements SchemeFactory {
      public addQrcodeOrder_resultTupleScheme getScheme() {
        return new addQrcodeOrder_resultTupleScheme();
      }
    }

    private static class addQrcodeOrder_resultTupleScheme extends TupleScheme<addQrcodeOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addQrcodeOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addQrcodeOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.AddQrcodeOrderVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVipDiscount_args implements org.apache.thrift.TBase<getVipDiscount_args, getVipDiscount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVipDiscount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVipDiscount_args");

    private static final org.apache.thrift.protocol.TField GET_VIP_DISCOUNT_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("getVipDiscountVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVipDiscount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVipDiscount_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetVipDiscountVoReq getVipDiscountVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GET_VIP_DISCOUNT_VO_REQ((short)1, "getVipDiscountVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GET_VIP_DISCOUNT_VO_REQ
            return GET_VIP_DISCOUNT_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GET_VIP_DISCOUNT_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("getVipDiscountVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetVipDiscountVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVipDiscount_args.class, metaDataMap);
    }

    public getVipDiscount_args() {
    }

    public getVipDiscount_args(
      com.froad.thrift.vo.order.GetVipDiscountVoReq getVipDiscountVoReq)
    {
      this();
      this.getVipDiscountVoReq = getVipDiscountVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVipDiscount_args(getVipDiscount_args other) {
      if (other.isSetGetVipDiscountVoReq()) {
        this.getVipDiscountVoReq = new com.froad.thrift.vo.order.GetVipDiscountVoReq(other.getVipDiscountVoReq);
      }
    }

    public getVipDiscount_args deepCopy() {
      return new getVipDiscount_args(this);
    }

    @Override
    public void clear() {
      this.getVipDiscountVoReq = null;
    }

    public com.froad.thrift.vo.order.GetVipDiscountVoReq getGetVipDiscountVoReq() {
      return this.getVipDiscountVoReq;
    }

    public getVipDiscount_args setGetVipDiscountVoReq(com.froad.thrift.vo.order.GetVipDiscountVoReq getVipDiscountVoReq) {
      this.getVipDiscountVoReq = getVipDiscountVoReq;
      return this;
    }

    public void unsetGetVipDiscountVoReq() {
      this.getVipDiscountVoReq = null;
    }

    /** Returns true if field getVipDiscountVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetGetVipDiscountVoReq() {
      return this.getVipDiscountVoReq != null;
    }

    public void setGetVipDiscountVoReqIsSet(boolean value) {
      if (!value) {
        this.getVipDiscountVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GET_VIP_DISCOUNT_VO_REQ:
        if (value == null) {
          unsetGetVipDiscountVoReq();
        } else {
          setGetVipDiscountVoReq((com.froad.thrift.vo.order.GetVipDiscountVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GET_VIP_DISCOUNT_VO_REQ:
        return getGetVipDiscountVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GET_VIP_DISCOUNT_VO_REQ:
        return isSetGetVipDiscountVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVipDiscount_args)
        return this.equals((getVipDiscount_args)that);
      return false;
    }

    public boolean equals(getVipDiscount_args that) {
      if (that == null)
        return false;

      boolean this_present_getVipDiscountVoReq = true && this.isSetGetVipDiscountVoReq();
      boolean that_present_getVipDiscountVoReq = true && that.isSetGetVipDiscountVoReq();
      if (this_present_getVipDiscountVoReq || that_present_getVipDiscountVoReq) {
        if (!(this_present_getVipDiscountVoReq && that_present_getVipDiscountVoReq))
          return false;
        if (!this.getVipDiscountVoReq.equals(that.getVipDiscountVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_getVipDiscountVoReq = true && (isSetGetVipDiscountVoReq());
      list.add(present_getVipDiscountVoReq);
      if (present_getVipDiscountVoReq)
        list.add(getVipDiscountVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVipDiscount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGetVipDiscountVoReq()).compareTo(other.isSetGetVipDiscountVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetVipDiscountVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getVipDiscountVoReq, other.getVipDiscountVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVipDiscount_args(");
      boolean first = true;

      sb.append("getVipDiscountVoReq:");
      if (this.getVipDiscountVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.getVipDiscountVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (getVipDiscountVoReq != null) {
        getVipDiscountVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVipDiscount_argsStandardSchemeFactory implements SchemeFactory {
      public getVipDiscount_argsStandardScheme getScheme() {
        return new getVipDiscount_argsStandardScheme();
      }
    }

    private static class getVipDiscount_argsStandardScheme extends StandardScheme<getVipDiscount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVipDiscount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GET_VIP_DISCOUNT_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getVipDiscountVoReq = new com.froad.thrift.vo.order.GetVipDiscountVoReq();
                struct.getVipDiscountVoReq.read(iprot);
                struct.setGetVipDiscountVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVipDiscount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.getVipDiscountVoReq != null) {
          oprot.writeFieldBegin(GET_VIP_DISCOUNT_VO_REQ_FIELD_DESC);
          struct.getVipDiscountVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVipDiscount_argsTupleSchemeFactory implements SchemeFactory {
      public getVipDiscount_argsTupleScheme getScheme() {
        return new getVipDiscount_argsTupleScheme();
      }
    }

    private static class getVipDiscount_argsTupleScheme extends TupleScheme<getVipDiscount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVipDiscount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGetVipDiscountVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGetVipDiscountVoReq()) {
          struct.getVipDiscountVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVipDiscount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.getVipDiscountVoReq = new com.froad.thrift.vo.order.GetVipDiscountVoReq();
          struct.getVipDiscountVoReq.read(iprot);
          struct.setGetVipDiscountVoReqIsSet(true);
        }
      }
    }

  }

  public static class getVipDiscount_result implements org.apache.thrift.TBase<getVipDiscount_result, getVipDiscount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVipDiscount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVipDiscount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVipDiscount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVipDiscount_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetVipDiscountVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetVipDiscountVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVipDiscount_result.class, metaDataMap);
    }

    public getVipDiscount_result() {
    }

    public getVipDiscount_result(
      com.froad.thrift.vo.order.GetVipDiscountVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVipDiscount_result(getVipDiscount_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.GetVipDiscountVoRes(other.success);
      }
    }

    public getVipDiscount_result deepCopy() {
      return new getVipDiscount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.GetVipDiscountVoRes getSuccess() {
      return this.success;
    }

    public getVipDiscount_result setSuccess(com.froad.thrift.vo.order.GetVipDiscountVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.GetVipDiscountVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVipDiscount_result)
        return this.equals((getVipDiscount_result)that);
      return false;
    }

    public boolean equals(getVipDiscount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVipDiscount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVipDiscount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVipDiscount_resultStandardSchemeFactory implements SchemeFactory {
      public getVipDiscount_resultStandardScheme getScheme() {
        return new getVipDiscount_resultStandardScheme();
      }
    }

    private static class getVipDiscount_resultStandardScheme extends StandardScheme<getVipDiscount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVipDiscount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.GetVipDiscountVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVipDiscount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVipDiscount_resultTupleSchemeFactory implements SchemeFactory {
      public getVipDiscount_resultTupleScheme getScheme() {
        return new getVipDiscount_resultTupleScheme();
      }
    }

    private static class getVipDiscount_resultTupleScheme extends TupleScheme<getVipDiscount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVipDiscount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVipDiscount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.GetVipDiscountVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPointExchangeList_args implements org.apache.thrift.TBase<getPointExchangeList_args, getPointExchangeList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPointExchangeList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPointExchangeList_args");

    private static final org.apache.thrift.protocol.TField GET_POINT_EXCHANGE_LIST_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("getPointExchangeListVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPointExchangeList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPointExchangeList_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetPointExchangeListVoReq getPointExchangeListVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GET_POINT_EXCHANGE_LIST_VO_REQ((short)1, "getPointExchangeListVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GET_POINT_EXCHANGE_LIST_VO_REQ
            return GET_POINT_EXCHANGE_LIST_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GET_POINT_EXCHANGE_LIST_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("getPointExchangeListVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetPointExchangeListVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPointExchangeList_args.class, metaDataMap);
    }

    public getPointExchangeList_args() {
    }

    public getPointExchangeList_args(
      com.froad.thrift.vo.order.GetPointExchangeListVoReq getPointExchangeListVoReq)
    {
      this();
      this.getPointExchangeListVoReq = getPointExchangeListVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPointExchangeList_args(getPointExchangeList_args other) {
      if (other.isSetGetPointExchangeListVoReq()) {
        this.getPointExchangeListVoReq = new com.froad.thrift.vo.order.GetPointExchangeListVoReq(other.getPointExchangeListVoReq);
      }
    }

    public getPointExchangeList_args deepCopy() {
      return new getPointExchangeList_args(this);
    }

    @Override
    public void clear() {
      this.getPointExchangeListVoReq = null;
    }

    public com.froad.thrift.vo.order.GetPointExchangeListVoReq getGetPointExchangeListVoReq() {
      return this.getPointExchangeListVoReq;
    }

    public getPointExchangeList_args setGetPointExchangeListVoReq(com.froad.thrift.vo.order.GetPointExchangeListVoReq getPointExchangeListVoReq) {
      this.getPointExchangeListVoReq = getPointExchangeListVoReq;
      return this;
    }

    public void unsetGetPointExchangeListVoReq() {
      this.getPointExchangeListVoReq = null;
    }

    /** Returns true if field getPointExchangeListVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetGetPointExchangeListVoReq() {
      return this.getPointExchangeListVoReq != null;
    }

    public void setGetPointExchangeListVoReqIsSet(boolean value) {
      if (!value) {
        this.getPointExchangeListVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GET_POINT_EXCHANGE_LIST_VO_REQ:
        if (value == null) {
          unsetGetPointExchangeListVoReq();
        } else {
          setGetPointExchangeListVoReq((com.froad.thrift.vo.order.GetPointExchangeListVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GET_POINT_EXCHANGE_LIST_VO_REQ:
        return getGetPointExchangeListVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GET_POINT_EXCHANGE_LIST_VO_REQ:
        return isSetGetPointExchangeListVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPointExchangeList_args)
        return this.equals((getPointExchangeList_args)that);
      return false;
    }

    public boolean equals(getPointExchangeList_args that) {
      if (that == null)
        return false;

      boolean this_present_getPointExchangeListVoReq = true && this.isSetGetPointExchangeListVoReq();
      boolean that_present_getPointExchangeListVoReq = true && that.isSetGetPointExchangeListVoReq();
      if (this_present_getPointExchangeListVoReq || that_present_getPointExchangeListVoReq) {
        if (!(this_present_getPointExchangeListVoReq && that_present_getPointExchangeListVoReq))
          return false;
        if (!this.getPointExchangeListVoReq.equals(that.getPointExchangeListVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_getPointExchangeListVoReq = true && (isSetGetPointExchangeListVoReq());
      list.add(present_getPointExchangeListVoReq);
      if (present_getPointExchangeListVoReq)
        list.add(getPointExchangeListVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPointExchangeList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGetPointExchangeListVoReq()).compareTo(other.isSetGetPointExchangeListVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetPointExchangeListVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getPointExchangeListVoReq, other.getPointExchangeListVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPointExchangeList_args(");
      boolean first = true;

      sb.append("getPointExchangeListVoReq:");
      if (this.getPointExchangeListVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.getPointExchangeListVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (getPointExchangeListVoReq != null) {
        getPointExchangeListVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPointExchangeList_argsStandardSchemeFactory implements SchemeFactory {
      public getPointExchangeList_argsStandardScheme getScheme() {
        return new getPointExchangeList_argsStandardScheme();
      }
    }

    private static class getPointExchangeList_argsStandardScheme extends StandardScheme<getPointExchangeList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPointExchangeList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GET_POINT_EXCHANGE_LIST_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getPointExchangeListVoReq = new com.froad.thrift.vo.order.GetPointExchangeListVoReq();
                struct.getPointExchangeListVoReq.read(iprot);
                struct.setGetPointExchangeListVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPointExchangeList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.getPointExchangeListVoReq != null) {
          oprot.writeFieldBegin(GET_POINT_EXCHANGE_LIST_VO_REQ_FIELD_DESC);
          struct.getPointExchangeListVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPointExchangeList_argsTupleSchemeFactory implements SchemeFactory {
      public getPointExchangeList_argsTupleScheme getScheme() {
        return new getPointExchangeList_argsTupleScheme();
      }
    }

    private static class getPointExchangeList_argsTupleScheme extends TupleScheme<getPointExchangeList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPointExchangeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGetPointExchangeListVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGetPointExchangeListVoReq()) {
          struct.getPointExchangeListVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPointExchangeList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.getPointExchangeListVoReq = new com.froad.thrift.vo.order.GetPointExchangeListVoReq();
          struct.getPointExchangeListVoReq.read(iprot);
          struct.setGetPointExchangeListVoReqIsSet(true);
        }
      }
    }

  }

  public static class getPointExchangeList_result implements org.apache.thrift.TBase<getPointExchangeList_result, getPointExchangeList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPointExchangeList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPointExchangeList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPointExchangeList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPointExchangeList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetPointExchangeListVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetPointExchangeListVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPointExchangeList_result.class, metaDataMap);
    }

    public getPointExchangeList_result() {
    }

    public getPointExchangeList_result(
      com.froad.thrift.vo.order.GetPointExchangeListVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPointExchangeList_result(getPointExchangeList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.GetPointExchangeListVoRes(other.success);
      }
    }

    public getPointExchangeList_result deepCopy() {
      return new getPointExchangeList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.GetPointExchangeListVoRes getSuccess() {
      return this.success;
    }

    public getPointExchangeList_result setSuccess(com.froad.thrift.vo.order.GetPointExchangeListVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.GetPointExchangeListVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPointExchangeList_result)
        return this.equals((getPointExchangeList_result)that);
      return false;
    }

    public boolean equals(getPointExchangeList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPointExchangeList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPointExchangeList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPointExchangeList_resultStandardSchemeFactory implements SchemeFactory {
      public getPointExchangeList_resultStandardScheme getScheme() {
        return new getPointExchangeList_resultStandardScheme();
      }
    }

    private static class getPointExchangeList_resultStandardScheme extends StandardScheme<getPointExchangeList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPointExchangeList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.GetPointExchangeListVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPointExchangeList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPointExchangeList_resultTupleSchemeFactory implements SchemeFactory {
      public getPointExchangeList_resultTupleScheme getScheme() {
        return new getPointExchangeList_resultTupleScheme();
      }
    }

    private static class getPointExchangeList_resultTupleScheme extends TupleScheme<getPointExchangeList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPointExchangeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPointExchangeList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.GetPointExchangeListVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPointExchangeDetail_args implements org.apache.thrift.TBase<getPointExchangeDetail_args, getPointExchangeDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPointExchangeDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPointExchangeDetail_args");

    private static final org.apache.thrift.protocol.TField GET_POINT_EXCHANGE_DETAIL_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("getPointExchangeDetailVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPointExchangeDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPointExchangeDetail_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetPointExchangeDetailVoReq getPointExchangeDetailVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GET_POINT_EXCHANGE_DETAIL_VO_REQ((short)1, "getPointExchangeDetailVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GET_POINT_EXCHANGE_DETAIL_VO_REQ
            return GET_POINT_EXCHANGE_DETAIL_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GET_POINT_EXCHANGE_DETAIL_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("getPointExchangeDetailVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetPointExchangeDetailVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPointExchangeDetail_args.class, metaDataMap);
    }

    public getPointExchangeDetail_args() {
    }

    public getPointExchangeDetail_args(
      com.froad.thrift.vo.order.GetPointExchangeDetailVoReq getPointExchangeDetailVoReq)
    {
      this();
      this.getPointExchangeDetailVoReq = getPointExchangeDetailVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPointExchangeDetail_args(getPointExchangeDetail_args other) {
      if (other.isSetGetPointExchangeDetailVoReq()) {
        this.getPointExchangeDetailVoReq = new com.froad.thrift.vo.order.GetPointExchangeDetailVoReq(other.getPointExchangeDetailVoReq);
      }
    }

    public getPointExchangeDetail_args deepCopy() {
      return new getPointExchangeDetail_args(this);
    }

    @Override
    public void clear() {
      this.getPointExchangeDetailVoReq = null;
    }

    public com.froad.thrift.vo.order.GetPointExchangeDetailVoReq getGetPointExchangeDetailVoReq() {
      return this.getPointExchangeDetailVoReq;
    }

    public getPointExchangeDetail_args setGetPointExchangeDetailVoReq(com.froad.thrift.vo.order.GetPointExchangeDetailVoReq getPointExchangeDetailVoReq) {
      this.getPointExchangeDetailVoReq = getPointExchangeDetailVoReq;
      return this;
    }

    public void unsetGetPointExchangeDetailVoReq() {
      this.getPointExchangeDetailVoReq = null;
    }

    /** Returns true if field getPointExchangeDetailVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetGetPointExchangeDetailVoReq() {
      return this.getPointExchangeDetailVoReq != null;
    }

    public void setGetPointExchangeDetailVoReqIsSet(boolean value) {
      if (!value) {
        this.getPointExchangeDetailVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GET_POINT_EXCHANGE_DETAIL_VO_REQ:
        if (value == null) {
          unsetGetPointExchangeDetailVoReq();
        } else {
          setGetPointExchangeDetailVoReq((com.froad.thrift.vo.order.GetPointExchangeDetailVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GET_POINT_EXCHANGE_DETAIL_VO_REQ:
        return getGetPointExchangeDetailVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GET_POINT_EXCHANGE_DETAIL_VO_REQ:
        return isSetGetPointExchangeDetailVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPointExchangeDetail_args)
        return this.equals((getPointExchangeDetail_args)that);
      return false;
    }

    public boolean equals(getPointExchangeDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_getPointExchangeDetailVoReq = true && this.isSetGetPointExchangeDetailVoReq();
      boolean that_present_getPointExchangeDetailVoReq = true && that.isSetGetPointExchangeDetailVoReq();
      if (this_present_getPointExchangeDetailVoReq || that_present_getPointExchangeDetailVoReq) {
        if (!(this_present_getPointExchangeDetailVoReq && that_present_getPointExchangeDetailVoReq))
          return false;
        if (!this.getPointExchangeDetailVoReq.equals(that.getPointExchangeDetailVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_getPointExchangeDetailVoReq = true && (isSetGetPointExchangeDetailVoReq());
      list.add(present_getPointExchangeDetailVoReq);
      if (present_getPointExchangeDetailVoReq)
        list.add(getPointExchangeDetailVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPointExchangeDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGetPointExchangeDetailVoReq()).compareTo(other.isSetGetPointExchangeDetailVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetPointExchangeDetailVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getPointExchangeDetailVoReq, other.getPointExchangeDetailVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPointExchangeDetail_args(");
      boolean first = true;

      sb.append("getPointExchangeDetailVoReq:");
      if (this.getPointExchangeDetailVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.getPointExchangeDetailVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (getPointExchangeDetailVoReq != null) {
        getPointExchangeDetailVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPointExchangeDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getPointExchangeDetail_argsStandardScheme getScheme() {
        return new getPointExchangeDetail_argsStandardScheme();
      }
    }

    private static class getPointExchangeDetail_argsStandardScheme extends StandardScheme<getPointExchangeDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPointExchangeDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GET_POINT_EXCHANGE_DETAIL_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getPointExchangeDetailVoReq = new com.froad.thrift.vo.order.GetPointExchangeDetailVoReq();
                struct.getPointExchangeDetailVoReq.read(iprot);
                struct.setGetPointExchangeDetailVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPointExchangeDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.getPointExchangeDetailVoReq != null) {
          oprot.writeFieldBegin(GET_POINT_EXCHANGE_DETAIL_VO_REQ_FIELD_DESC);
          struct.getPointExchangeDetailVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPointExchangeDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getPointExchangeDetail_argsTupleScheme getScheme() {
        return new getPointExchangeDetail_argsTupleScheme();
      }
    }

    private static class getPointExchangeDetail_argsTupleScheme extends TupleScheme<getPointExchangeDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPointExchangeDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGetPointExchangeDetailVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGetPointExchangeDetailVoReq()) {
          struct.getPointExchangeDetailVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPointExchangeDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.getPointExchangeDetailVoReq = new com.froad.thrift.vo.order.GetPointExchangeDetailVoReq();
          struct.getPointExchangeDetailVoReq.read(iprot);
          struct.setGetPointExchangeDetailVoReqIsSet(true);
        }
      }
    }

  }

  public static class getPointExchangeDetail_result implements org.apache.thrift.TBase<getPointExchangeDetail_result, getPointExchangeDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPointExchangeDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPointExchangeDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPointExchangeDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPointExchangeDetail_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetPointExchangeDetailVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetPointExchangeDetailVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPointExchangeDetail_result.class, metaDataMap);
    }

    public getPointExchangeDetail_result() {
    }

    public getPointExchangeDetail_result(
      com.froad.thrift.vo.order.GetPointExchangeDetailVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPointExchangeDetail_result(getPointExchangeDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.GetPointExchangeDetailVoRes(other.success);
      }
    }

    public getPointExchangeDetail_result deepCopy() {
      return new getPointExchangeDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.GetPointExchangeDetailVoRes getSuccess() {
      return this.success;
    }

    public getPointExchangeDetail_result setSuccess(com.froad.thrift.vo.order.GetPointExchangeDetailVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.GetPointExchangeDetailVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPointExchangeDetail_result)
        return this.equals((getPointExchangeDetail_result)that);
      return false;
    }

    public boolean equals(getPointExchangeDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPointExchangeDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPointExchangeDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPointExchangeDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getPointExchangeDetail_resultStandardScheme getScheme() {
        return new getPointExchangeDetail_resultStandardScheme();
      }
    }

    private static class getPointExchangeDetail_resultStandardScheme extends StandardScheme<getPointExchangeDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPointExchangeDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.GetPointExchangeDetailVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPointExchangeDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPointExchangeDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getPointExchangeDetail_resultTupleScheme getScheme() {
        return new getPointExchangeDetail_resultTupleScheme();
      }
    }

    private static class getPointExchangeDetail_resultTupleScheme extends TupleScheme<getPointExchangeDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPointExchangeDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPointExchangeDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.GetPointExchangeDetailVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class storeProcess_args implements org.apache.thrift.TBase<storeProcess_args, storeProcess_args._Fields>, java.io.Serializable, Cloneable, Comparable<storeProcess_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeProcess_args");

    private static final org.apache.thrift.protocol.TField STORE_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("storeVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeProcess_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeProcess_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.StoreVoReq storeVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STORE_VO_REQ((short)1, "storeVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STORE_VO_REQ
            return STORE_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STORE_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("storeVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.StoreVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeProcess_args.class, metaDataMap);
    }

    public storeProcess_args() {
    }

    public storeProcess_args(
      com.froad.thrift.vo.order.StoreVoReq storeVoReq)
    {
      this();
      this.storeVoReq = storeVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeProcess_args(storeProcess_args other) {
      if (other.isSetStoreVoReq()) {
        this.storeVoReq = new com.froad.thrift.vo.order.StoreVoReq(other.storeVoReq);
      }
    }

    public storeProcess_args deepCopy() {
      return new storeProcess_args(this);
    }

    @Override
    public void clear() {
      this.storeVoReq = null;
    }

    public com.froad.thrift.vo.order.StoreVoReq getStoreVoReq() {
      return this.storeVoReq;
    }

    public storeProcess_args setStoreVoReq(com.froad.thrift.vo.order.StoreVoReq storeVoReq) {
      this.storeVoReq = storeVoReq;
      return this;
    }

    public void unsetStoreVoReq() {
      this.storeVoReq = null;
    }

    /** Returns true if field storeVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetStoreVoReq() {
      return this.storeVoReq != null;
    }

    public void setStoreVoReqIsSet(boolean value) {
      if (!value) {
        this.storeVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STORE_VO_REQ:
        if (value == null) {
          unsetStoreVoReq();
        } else {
          setStoreVoReq((com.froad.thrift.vo.order.StoreVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STORE_VO_REQ:
        return getStoreVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STORE_VO_REQ:
        return isSetStoreVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeProcess_args)
        return this.equals((storeProcess_args)that);
      return false;
    }

    public boolean equals(storeProcess_args that) {
      if (that == null)
        return false;

      boolean this_present_storeVoReq = true && this.isSetStoreVoReq();
      boolean that_present_storeVoReq = true && that.isSetStoreVoReq();
      if (this_present_storeVoReq || that_present_storeVoReq) {
        if (!(this_present_storeVoReq && that_present_storeVoReq))
          return false;
        if (!this.storeVoReq.equals(that.storeVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_storeVoReq = true && (isSetStoreVoReq());
      list.add(present_storeVoReq);
      if (present_storeVoReq)
        list.add(storeVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeProcess_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStoreVoReq()).compareTo(other.isSetStoreVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStoreVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeVoReq, other.storeVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeProcess_args(");
      boolean first = true;

      sb.append("storeVoReq:");
      if (this.storeVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.storeVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (storeVoReq != null) {
        storeVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeProcess_argsStandardSchemeFactory implements SchemeFactory {
      public storeProcess_argsStandardScheme getScheme() {
        return new storeProcess_argsStandardScheme();
      }
    }

    private static class storeProcess_argsStandardScheme extends StandardScheme<storeProcess_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeProcess_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STORE_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.storeVoReq = new com.froad.thrift.vo.order.StoreVoReq();
                struct.storeVoReq.read(iprot);
                struct.setStoreVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeProcess_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.storeVoReq != null) {
          oprot.writeFieldBegin(STORE_VO_REQ_FIELD_DESC);
          struct.storeVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeProcess_argsTupleSchemeFactory implements SchemeFactory {
      public storeProcess_argsTupleScheme getScheme() {
        return new storeProcess_argsTupleScheme();
      }
    }

    private static class storeProcess_argsTupleScheme extends TupleScheme<storeProcess_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeProcess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStoreVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStoreVoReq()) {
          struct.storeVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeProcess_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.storeVoReq = new com.froad.thrift.vo.order.StoreVoReq();
          struct.storeVoReq.read(iprot);
          struct.setStoreVoReqIsSet(true);
        }
      }
    }

  }

  public static class storeProcess_result implements org.apache.thrift.TBase<storeProcess_result, storeProcess_result._Fields>, java.io.Serializable, Cloneable, Comparable<storeProcess_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeProcess_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeProcess_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeProcess_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.StoreVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.StoreVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeProcess_result.class, metaDataMap);
    }

    public storeProcess_result() {
    }

    public storeProcess_result(
      com.froad.thrift.vo.order.StoreVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeProcess_result(storeProcess_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.StoreVoRes(other.success);
      }
    }

    public storeProcess_result deepCopy() {
      return new storeProcess_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.StoreVoRes getSuccess() {
      return this.success;
    }

    public storeProcess_result setSuccess(com.froad.thrift.vo.order.StoreVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.StoreVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeProcess_result)
        return this.equals((storeProcess_result)that);
      return false;
    }

    public boolean equals(storeProcess_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(storeProcess_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeProcess_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeProcess_resultStandardSchemeFactory implements SchemeFactory {
      public storeProcess_resultStandardScheme getScheme() {
        return new storeProcess_resultStandardScheme();
      }
    }

    private static class storeProcess_resultStandardScheme extends StandardScheme<storeProcess_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeProcess_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.StoreVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeProcess_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeProcess_resultTupleSchemeFactory implements SchemeFactory {
      public storeProcess_resultTupleScheme getScheme() {
        return new storeProcess_resultTupleScheme();
      }
    }

    private static class storeProcess_resultTupleScheme extends TupleScheme<storeProcess_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeProcess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeProcess_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.StoreVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSubOrderProduct_args implements org.apache.thrift.TBase<getSubOrderProduct_args, getSubOrderProduct_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSubOrderProduct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubOrderProduct_args");

    private static final org.apache.thrift.protocol.TField GET_SUB_ORDER_PRODUCT_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("getSubOrderProductVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSubOrderProduct_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSubOrderProduct_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetSubOrderProductVoReq getSubOrderProductVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GET_SUB_ORDER_PRODUCT_VO_REQ((short)1, "getSubOrderProductVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GET_SUB_ORDER_PRODUCT_VO_REQ
            return GET_SUB_ORDER_PRODUCT_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GET_SUB_ORDER_PRODUCT_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("getSubOrderProductVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetSubOrderProductVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubOrderProduct_args.class, metaDataMap);
    }

    public getSubOrderProduct_args() {
    }

    public getSubOrderProduct_args(
      com.froad.thrift.vo.order.GetSubOrderProductVoReq getSubOrderProductVoReq)
    {
      this();
      this.getSubOrderProductVoReq = getSubOrderProductVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubOrderProduct_args(getSubOrderProduct_args other) {
      if (other.isSetGetSubOrderProductVoReq()) {
        this.getSubOrderProductVoReq = new com.froad.thrift.vo.order.GetSubOrderProductVoReq(other.getSubOrderProductVoReq);
      }
    }

    public getSubOrderProduct_args deepCopy() {
      return new getSubOrderProduct_args(this);
    }

    @Override
    public void clear() {
      this.getSubOrderProductVoReq = null;
    }

    public com.froad.thrift.vo.order.GetSubOrderProductVoReq getGetSubOrderProductVoReq() {
      return this.getSubOrderProductVoReq;
    }

    public getSubOrderProduct_args setGetSubOrderProductVoReq(com.froad.thrift.vo.order.GetSubOrderProductVoReq getSubOrderProductVoReq) {
      this.getSubOrderProductVoReq = getSubOrderProductVoReq;
      return this;
    }

    public void unsetGetSubOrderProductVoReq() {
      this.getSubOrderProductVoReq = null;
    }

    /** Returns true if field getSubOrderProductVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetGetSubOrderProductVoReq() {
      return this.getSubOrderProductVoReq != null;
    }

    public void setGetSubOrderProductVoReqIsSet(boolean value) {
      if (!value) {
        this.getSubOrderProductVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GET_SUB_ORDER_PRODUCT_VO_REQ:
        if (value == null) {
          unsetGetSubOrderProductVoReq();
        } else {
          setGetSubOrderProductVoReq((com.froad.thrift.vo.order.GetSubOrderProductVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GET_SUB_ORDER_PRODUCT_VO_REQ:
        return getGetSubOrderProductVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GET_SUB_ORDER_PRODUCT_VO_REQ:
        return isSetGetSubOrderProductVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubOrderProduct_args)
        return this.equals((getSubOrderProduct_args)that);
      return false;
    }

    public boolean equals(getSubOrderProduct_args that) {
      if (that == null)
        return false;

      boolean this_present_getSubOrderProductVoReq = true && this.isSetGetSubOrderProductVoReq();
      boolean that_present_getSubOrderProductVoReq = true && that.isSetGetSubOrderProductVoReq();
      if (this_present_getSubOrderProductVoReq || that_present_getSubOrderProductVoReq) {
        if (!(this_present_getSubOrderProductVoReq && that_present_getSubOrderProductVoReq))
          return false;
        if (!this.getSubOrderProductVoReq.equals(that.getSubOrderProductVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_getSubOrderProductVoReq = true && (isSetGetSubOrderProductVoReq());
      list.add(present_getSubOrderProductVoReq);
      if (present_getSubOrderProductVoReq)
        list.add(getSubOrderProductVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSubOrderProduct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGetSubOrderProductVoReq()).compareTo(other.isSetGetSubOrderProductVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetSubOrderProductVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getSubOrderProductVoReq, other.getSubOrderProductVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubOrderProduct_args(");
      boolean first = true;

      sb.append("getSubOrderProductVoReq:");
      if (this.getSubOrderProductVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.getSubOrderProductVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (getSubOrderProductVoReq != null) {
        getSubOrderProductVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubOrderProduct_argsStandardSchemeFactory implements SchemeFactory {
      public getSubOrderProduct_argsStandardScheme getScheme() {
        return new getSubOrderProduct_argsStandardScheme();
      }
    }

    private static class getSubOrderProduct_argsStandardScheme extends StandardScheme<getSubOrderProduct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubOrderProduct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GET_SUB_ORDER_PRODUCT_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getSubOrderProductVoReq = new com.froad.thrift.vo.order.GetSubOrderProductVoReq();
                struct.getSubOrderProductVoReq.read(iprot);
                struct.setGetSubOrderProductVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubOrderProduct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.getSubOrderProductVoReq != null) {
          oprot.writeFieldBegin(GET_SUB_ORDER_PRODUCT_VO_REQ_FIELD_DESC);
          struct.getSubOrderProductVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubOrderProduct_argsTupleSchemeFactory implements SchemeFactory {
      public getSubOrderProduct_argsTupleScheme getScheme() {
        return new getSubOrderProduct_argsTupleScheme();
      }
    }

    private static class getSubOrderProduct_argsTupleScheme extends TupleScheme<getSubOrderProduct_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubOrderProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGetSubOrderProductVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGetSubOrderProductVoReq()) {
          struct.getSubOrderProductVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubOrderProduct_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.getSubOrderProductVoReq = new com.froad.thrift.vo.order.GetSubOrderProductVoReq();
          struct.getSubOrderProductVoReq.read(iprot);
          struct.setGetSubOrderProductVoReqIsSet(true);
        }
      }
    }

  }

  public static class getSubOrderProduct_result implements org.apache.thrift.TBase<getSubOrderProduct_result, getSubOrderProduct_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSubOrderProduct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubOrderProduct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSubOrderProduct_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSubOrderProduct_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetSubOrderProductVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetSubOrderProductVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubOrderProduct_result.class, metaDataMap);
    }

    public getSubOrderProduct_result() {
    }

    public getSubOrderProduct_result(
      com.froad.thrift.vo.order.GetSubOrderProductVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubOrderProduct_result(getSubOrderProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.GetSubOrderProductVoRes(other.success);
      }
    }

    public getSubOrderProduct_result deepCopy() {
      return new getSubOrderProduct_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.GetSubOrderProductVoRes getSuccess() {
      return this.success;
    }

    public getSubOrderProduct_result setSuccess(com.froad.thrift.vo.order.GetSubOrderProductVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.GetSubOrderProductVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubOrderProduct_result)
        return this.equals((getSubOrderProduct_result)that);
      return false;
    }

    public boolean equals(getSubOrderProduct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSubOrderProduct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubOrderProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubOrderProduct_resultStandardSchemeFactory implements SchemeFactory {
      public getSubOrderProduct_resultStandardScheme getScheme() {
        return new getSubOrderProduct_resultStandardScheme();
      }
    }

    private static class getSubOrderProduct_resultStandardScheme extends StandardScheme<getSubOrderProduct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubOrderProduct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.GetSubOrderProductVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubOrderProduct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubOrderProduct_resultTupleSchemeFactory implements SchemeFactory {
      public getSubOrderProduct_resultTupleScheme getScheme() {
        return new getSubOrderProduct_resultTupleScheme();
      }
    }

    private static class getSubOrderProduct_resultTupleScheme extends TupleScheme<getSubOrderProduct_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubOrderProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubOrderProduct_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.GetSubOrderProductVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOrderByQrcode_args implements org.apache.thrift.TBase<getOrderByQrcode_args, getOrderByQrcode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderByQrcode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderByQrcode_args");

    private static final org.apache.thrift.protocol.TField GET_ORDER_BY_QRCODE_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("getOrderByQrcodeVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrderByQrcode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrderByQrcode_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetOrderByQrcodeVoReq getOrderByQrcodeVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GET_ORDER_BY_QRCODE_VO_REQ((short)1, "getOrderByQrcodeVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GET_ORDER_BY_QRCODE_VO_REQ
            return GET_ORDER_BY_QRCODE_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GET_ORDER_BY_QRCODE_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("getOrderByQrcodeVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetOrderByQrcodeVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderByQrcode_args.class, metaDataMap);
    }

    public getOrderByQrcode_args() {
    }

    public getOrderByQrcode_args(
      com.froad.thrift.vo.order.GetOrderByQrcodeVoReq getOrderByQrcodeVoReq)
    {
      this();
      this.getOrderByQrcodeVoReq = getOrderByQrcodeVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrderByQrcode_args(getOrderByQrcode_args other) {
      if (other.isSetGetOrderByQrcodeVoReq()) {
        this.getOrderByQrcodeVoReq = new com.froad.thrift.vo.order.GetOrderByQrcodeVoReq(other.getOrderByQrcodeVoReq);
      }
    }

    public getOrderByQrcode_args deepCopy() {
      return new getOrderByQrcode_args(this);
    }

    @Override
    public void clear() {
      this.getOrderByQrcodeVoReq = null;
    }

    public com.froad.thrift.vo.order.GetOrderByQrcodeVoReq getGetOrderByQrcodeVoReq() {
      return this.getOrderByQrcodeVoReq;
    }

    public getOrderByQrcode_args setGetOrderByQrcodeVoReq(com.froad.thrift.vo.order.GetOrderByQrcodeVoReq getOrderByQrcodeVoReq) {
      this.getOrderByQrcodeVoReq = getOrderByQrcodeVoReq;
      return this;
    }

    public void unsetGetOrderByQrcodeVoReq() {
      this.getOrderByQrcodeVoReq = null;
    }

    /** Returns true if field getOrderByQrcodeVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetGetOrderByQrcodeVoReq() {
      return this.getOrderByQrcodeVoReq != null;
    }

    public void setGetOrderByQrcodeVoReqIsSet(boolean value) {
      if (!value) {
        this.getOrderByQrcodeVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GET_ORDER_BY_QRCODE_VO_REQ:
        if (value == null) {
          unsetGetOrderByQrcodeVoReq();
        } else {
          setGetOrderByQrcodeVoReq((com.froad.thrift.vo.order.GetOrderByQrcodeVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GET_ORDER_BY_QRCODE_VO_REQ:
        return getGetOrderByQrcodeVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GET_ORDER_BY_QRCODE_VO_REQ:
        return isSetGetOrderByQrcodeVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrderByQrcode_args)
        return this.equals((getOrderByQrcode_args)that);
      return false;
    }

    public boolean equals(getOrderByQrcode_args that) {
      if (that == null)
        return false;

      boolean this_present_getOrderByQrcodeVoReq = true && this.isSetGetOrderByQrcodeVoReq();
      boolean that_present_getOrderByQrcodeVoReq = true && that.isSetGetOrderByQrcodeVoReq();
      if (this_present_getOrderByQrcodeVoReq || that_present_getOrderByQrcodeVoReq) {
        if (!(this_present_getOrderByQrcodeVoReq && that_present_getOrderByQrcodeVoReq))
          return false;
        if (!this.getOrderByQrcodeVoReq.equals(that.getOrderByQrcodeVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_getOrderByQrcodeVoReq = true && (isSetGetOrderByQrcodeVoReq());
      list.add(present_getOrderByQrcodeVoReq);
      if (present_getOrderByQrcodeVoReq)
        list.add(getOrderByQrcodeVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrderByQrcode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGetOrderByQrcodeVoReq()).compareTo(other.isSetGetOrderByQrcodeVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetOrderByQrcodeVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getOrderByQrcodeVoReq, other.getOrderByQrcodeVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrderByQrcode_args(");
      boolean first = true;

      sb.append("getOrderByQrcodeVoReq:");
      if (this.getOrderByQrcodeVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.getOrderByQrcodeVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (getOrderByQrcodeVoReq != null) {
        getOrderByQrcodeVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrderByQrcode_argsStandardSchemeFactory implements SchemeFactory {
      public getOrderByQrcode_argsStandardScheme getScheme() {
        return new getOrderByQrcode_argsStandardScheme();
      }
    }

    private static class getOrderByQrcode_argsStandardScheme extends StandardScheme<getOrderByQrcode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderByQrcode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GET_ORDER_BY_QRCODE_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getOrderByQrcodeVoReq = new com.froad.thrift.vo.order.GetOrderByQrcodeVoReq();
                struct.getOrderByQrcodeVoReq.read(iprot);
                struct.setGetOrderByQrcodeVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderByQrcode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.getOrderByQrcodeVoReq != null) {
          oprot.writeFieldBegin(GET_ORDER_BY_QRCODE_VO_REQ_FIELD_DESC);
          struct.getOrderByQrcodeVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrderByQrcode_argsTupleSchemeFactory implements SchemeFactory {
      public getOrderByQrcode_argsTupleScheme getScheme() {
        return new getOrderByQrcode_argsTupleScheme();
      }
    }

    private static class getOrderByQrcode_argsTupleScheme extends TupleScheme<getOrderByQrcode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderByQrcode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGetOrderByQrcodeVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGetOrderByQrcodeVoReq()) {
          struct.getOrderByQrcodeVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderByQrcode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.getOrderByQrcodeVoReq = new com.froad.thrift.vo.order.GetOrderByQrcodeVoReq();
          struct.getOrderByQrcodeVoReq.read(iprot);
          struct.setGetOrderByQrcodeVoReqIsSet(true);
        }
      }
    }

  }

  public static class getOrderByQrcode_result implements org.apache.thrift.TBase<getOrderByQrcode_result, getOrderByQrcode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderByQrcode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderByQrcode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrderByQrcode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrderByQrcode_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetOrderByQrcodeVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetOrderByQrcodeVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderByQrcode_result.class, metaDataMap);
    }

    public getOrderByQrcode_result() {
    }

    public getOrderByQrcode_result(
      com.froad.thrift.vo.order.GetOrderByQrcodeVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrderByQrcode_result(getOrderByQrcode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.GetOrderByQrcodeVoRes(other.success);
      }
    }

    public getOrderByQrcode_result deepCopy() {
      return new getOrderByQrcode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.GetOrderByQrcodeVoRes getSuccess() {
      return this.success;
    }

    public getOrderByQrcode_result setSuccess(com.froad.thrift.vo.order.GetOrderByQrcodeVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.GetOrderByQrcodeVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrderByQrcode_result)
        return this.equals((getOrderByQrcode_result)that);
      return false;
    }

    public boolean equals(getOrderByQrcode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrderByQrcode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrderByQrcode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrderByQrcode_resultStandardSchemeFactory implements SchemeFactory {
      public getOrderByQrcode_resultStandardScheme getScheme() {
        return new getOrderByQrcode_resultStandardScheme();
      }
    }

    private static class getOrderByQrcode_resultStandardScheme extends StandardScheme<getOrderByQrcode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderByQrcode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.GetOrderByQrcodeVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderByQrcode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrderByQrcode_resultTupleSchemeFactory implements SchemeFactory {
      public getOrderByQrcode_resultTupleScheme getScheme() {
        return new getOrderByQrcode_resultTupleScheme();
      }
    }

    private static class getOrderByQrcode_resultTupleScheme extends TupleScheme<getOrderByQrcode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderByQrcode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderByQrcode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.GetOrderByQrcodeVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMemberBuyLimit_args implements org.apache.thrift.TBase<getMemberBuyLimit_args, getMemberBuyLimit_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMemberBuyLimit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMemberBuyLimit_args");

    private static final org.apache.thrift.protocol.TField GET_MEMBER_BUY_LIMIT_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("getMemberBuyLimitVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMemberBuyLimit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMemberBuyLimit_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetMemberBuyLimitVoReq getMemberBuyLimitVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GET_MEMBER_BUY_LIMIT_VO_REQ((short)1, "getMemberBuyLimitVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GET_MEMBER_BUY_LIMIT_VO_REQ
            return GET_MEMBER_BUY_LIMIT_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GET_MEMBER_BUY_LIMIT_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("getMemberBuyLimitVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetMemberBuyLimitVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMemberBuyLimit_args.class, metaDataMap);
    }

    public getMemberBuyLimit_args() {
    }

    public getMemberBuyLimit_args(
      com.froad.thrift.vo.order.GetMemberBuyLimitVoReq getMemberBuyLimitVoReq)
    {
      this();
      this.getMemberBuyLimitVoReq = getMemberBuyLimitVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMemberBuyLimit_args(getMemberBuyLimit_args other) {
      if (other.isSetGetMemberBuyLimitVoReq()) {
        this.getMemberBuyLimitVoReq = new com.froad.thrift.vo.order.GetMemberBuyLimitVoReq(other.getMemberBuyLimitVoReq);
      }
    }

    public getMemberBuyLimit_args deepCopy() {
      return new getMemberBuyLimit_args(this);
    }

    @Override
    public void clear() {
      this.getMemberBuyLimitVoReq = null;
    }

    public com.froad.thrift.vo.order.GetMemberBuyLimitVoReq getGetMemberBuyLimitVoReq() {
      return this.getMemberBuyLimitVoReq;
    }

    public getMemberBuyLimit_args setGetMemberBuyLimitVoReq(com.froad.thrift.vo.order.GetMemberBuyLimitVoReq getMemberBuyLimitVoReq) {
      this.getMemberBuyLimitVoReq = getMemberBuyLimitVoReq;
      return this;
    }

    public void unsetGetMemberBuyLimitVoReq() {
      this.getMemberBuyLimitVoReq = null;
    }

    /** Returns true if field getMemberBuyLimitVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetGetMemberBuyLimitVoReq() {
      return this.getMemberBuyLimitVoReq != null;
    }

    public void setGetMemberBuyLimitVoReqIsSet(boolean value) {
      if (!value) {
        this.getMemberBuyLimitVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GET_MEMBER_BUY_LIMIT_VO_REQ:
        if (value == null) {
          unsetGetMemberBuyLimitVoReq();
        } else {
          setGetMemberBuyLimitVoReq((com.froad.thrift.vo.order.GetMemberBuyLimitVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GET_MEMBER_BUY_LIMIT_VO_REQ:
        return getGetMemberBuyLimitVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GET_MEMBER_BUY_LIMIT_VO_REQ:
        return isSetGetMemberBuyLimitVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMemberBuyLimit_args)
        return this.equals((getMemberBuyLimit_args)that);
      return false;
    }

    public boolean equals(getMemberBuyLimit_args that) {
      if (that == null)
        return false;

      boolean this_present_getMemberBuyLimitVoReq = true && this.isSetGetMemberBuyLimitVoReq();
      boolean that_present_getMemberBuyLimitVoReq = true && that.isSetGetMemberBuyLimitVoReq();
      if (this_present_getMemberBuyLimitVoReq || that_present_getMemberBuyLimitVoReq) {
        if (!(this_present_getMemberBuyLimitVoReq && that_present_getMemberBuyLimitVoReq))
          return false;
        if (!this.getMemberBuyLimitVoReq.equals(that.getMemberBuyLimitVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_getMemberBuyLimitVoReq = true && (isSetGetMemberBuyLimitVoReq());
      list.add(present_getMemberBuyLimitVoReq);
      if (present_getMemberBuyLimitVoReq)
        list.add(getMemberBuyLimitVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMemberBuyLimit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGetMemberBuyLimitVoReq()).compareTo(other.isSetGetMemberBuyLimitVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetMemberBuyLimitVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getMemberBuyLimitVoReq, other.getMemberBuyLimitVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMemberBuyLimit_args(");
      boolean first = true;

      sb.append("getMemberBuyLimitVoReq:");
      if (this.getMemberBuyLimitVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.getMemberBuyLimitVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (getMemberBuyLimitVoReq != null) {
        getMemberBuyLimitVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMemberBuyLimit_argsStandardSchemeFactory implements SchemeFactory {
      public getMemberBuyLimit_argsStandardScheme getScheme() {
        return new getMemberBuyLimit_argsStandardScheme();
      }
    }

    private static class getMemberBuyLimit_argsStandardScheme extends StandardScheme<getMemberBuyLimit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMemberBuyLimit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GET_MEMBER_BUY_LIMIT_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getMemberBuyLimitVoReq = new com.froad.thrift.vo.order.GetMemberBuyLimitVoReq();
                struct.getMemberBuyLimitVoReq.read(iprot);
                struct.setGetMemberBuyLimitVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMemberBuyLimit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.getMemberBuyLimitVoReq != null) {
          oprot.writeFieldBegin(GET_MEMBER_BUY_LIMIT_VO_REQ_FIELD_DESC);
          struct.getMemberBuyLimitVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMemberBuyLimit_argsTupleSchemeFactory implements SchemeFactory {
      public getMemberBuyLimit_argsTupleScheme getScheme() {
        return new getMemberBuyLimit_argsTupleScheme();
      }
    }

    private static class getMemberBuyLimit_argsTupleScheme extends TupleScheme<getMemberBuyLimit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMemberBuyLimit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGetMemberBuyLimitVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGetMemberBuyLimitVoReq()) {
          struct.getMemberBuyLimitVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMemberBuyLimit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.getMemberBuyLimitVoReq = new com.froad.thrift.vo.order.GetMemberBuyLimitVoReq();
          struct.getMemberBuyLimitVoReq.read(iprot);
          struct.setGetMemberBuyLimitVoReqIsSet(true);
        }
      }
    }

  }

  public static class getMemberBuyLimit_result implements org.apache.thrift.TBase<getMemberBuyLimit_result, getMemberBuyLimit_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMemberBuyLimit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMemberBuyLimit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMemberBuyLimit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMemberBuyLimit_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetMemberBuyLimitVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetMemberBuyLimitVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMemberBuyLimit_result.class, metaDataMap);
    }

    public getMemberBuyLimit_result() {
    }

    public getMemberBuyLimit_result(
      com.froad.thrift.vo.order.GetMemberBuyLimitVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMemberBuyLimit_result(getMemberBuyLimit_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.GetMemberBuyLimitVoRes(other.success);
      }
    }

    public getMemberBuyLimit_result deepCopy() {
      return new getMemberBuyLimit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.GetMemberBuyLimitVoRes getSuccess() {
      return this.success;
    }

    public getMemberBuyLimit_result setSuccess(com.froad.thrift.vo.order.GetMemberBuyLimitVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.GetMemberBuyLimitVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMemberBuyLimit_result)
        return this.equals((getMemberBuyLimit_result)that);
      return false;
    }

    public boolean equals(getMemberBuyLimit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMemberBuyLimit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMemberBuyLimit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMemberBuyLimit_resultStandardSchemeFactory implements SchemeFactory {
      public getMemberBuyLimit_resultStandardScheme getScheme() {
        return new getMemberBuyLimit_resultStandardScheme();
      }
    }

    private static class getMemberBuyLimit_resultStandardScheme extends StandardScheme<getMemberBuyLimit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMemberBuyLimit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.GetMemberBuyLimitVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMemberBuyLimit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMemberBuyLimit_resultTupleSchemeFactory implements SchemeFactory {
      public getMemberBuyLimit_resultTupleScheme getScheme() {
        return new getMemberBuyLimit_resultTupleScheme();
      }
    }

    private static class getMemberBuyLimit_resultTupleScheme extends TupleScheme<getMemberBuyLimit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMemberBuyLimit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMemberBuyLimit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.GetMemberBuyLimitVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOrderPaymentResult_args implements org.apache.thrift.TBase<getOrderPaymentResult_args, getOrderPaymentResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderPaymentResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderPaymentResult_args");

    private static final org.apache.thrift.protocol.TField GET_ORDER_PAYMENT_RESULT_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("getOrderPaymentResultVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrderPaymentResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrderPaymentResult_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetOrderPaymentResultVoReq getOrderPaymentResultVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GET_ORDER_PAYMENT_RESULT_VO_REQ((short)1, "getOrderPaymentResultVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GET_ORDER_PAYMENT_RESULT_VO_REQ
            return GET_ORDER_PAYMENT_RESULT_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GET_ORDER_PAYMENT_RESULT_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("getOrderPaymentResultVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetOrderPaymentResultVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderPaymentResult_args.class, metaDataMap);
    }

    public getOrderPaymentResult_args() {
    }

    public getOrderPaymentResult_args(
      com.froad.thrift.vo.order.GetOrderPaymentResultVoReq getOrderPaymentResultVoReq)
    {
      this();
      this.getOrderPaymentResultVoReq = getOrderPaymentResultVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrderPaymentResult_args(getOrderPaymentResult_args other) {
      if (other.isSetGetOrderPaymentResultVoReq()) {
        this.getOrderPaymentResultVoReq = new com.froad.thrift.vo.order.GetOrderPaymentResultVoReq(other.getOrderPaymentResultVoReq);
      }
    }

    public getOrderPaymentResult_args deepCopy() {
      return new getOrderPaymentResult_args(this);
    }

    @Override
    public void clear() {
      this.getOrderPaymentResultVoReq = null;
    }

    public com.froad.thrift.vo.order.GetOrderPaymentResultVoReq getGetOrderPaymentResultVoReq() {
      return this.getOrderPaymentResultVoReq;
    }

    public getOrderPaymentResult_args setGetOrderPaymentResultVoReq(com.froad.thrift.vo.order.GetOrderPaymentResultVoReq getOrderPaymentResultVoReq) {
      this.getOrderPaymentResultVoReq = getOrderPaymentResultVoReq;
      return this;
    }

    public void unsetGetOrderPaymentResultVoReq() {
      this.getOrderPaymentResultVoReq = null;
    }

    /** Returns true if field getOrderPaymentResultVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetGetOrderPaymentResultVoReq() {
      return this.getOrderPaymentResultVoReq != null;
    }

    public void setGetOrderPaymentResultVoReqIsSet(boolean value) {
      if (!value) {
        this.getOrderPaymentResultVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GET_ORDER_PAYMENT_RESULT_VO_REQ:
        if (value == null) {
          unsetGetOrderPaymentResultVoReq();
        } else {
          setGetOrderPaymentResultVoReq((com.froad.thrift.vo.order.GetOrderPaymentResultVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GET_ORDER_PAYMENT_RESULT_VO_REQ:
        return getGetOrderPaymentResultVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GET_ORDER_PAYMENT_RESULT_VO_REQ:
        return isSetGetOrderPaymentResultVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrderPaymentResult_args)
        return this.equals((getOrderPaymentResult_args)that);
      return false;
    }

    public boolean equals(getOrderPaymentResult_args that) {
      if (that == null)
        return false;

      boolean this_present_getOrderPaymentResultVoReq = true && this.isSetGetOrderPaymentResultVoReq();
      boolean that_present_getOrderPaymentResultVoReq = true && that.isSetGetOrderPaymentResultVoReq();
      if (this_present_getOrderPaymentResultVoReq || that_present_getOrderPaymentResultVoReq) {
        if (!(this_present_getOrderPaymentResultVoReq && that_present_getOrderPaymentResultVoReq))
          return false;
        if (!this.getOrderPaymentResultVoReq.equals(that.getOrderPaymentResultVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_getOrderPaymentResultVoReq = true && (isSetGetOrderPaymentResultVoReq());
      list.add(present_getOrderPaymentResultVoReq);
      if (present_getOrderPaymentResultVoReq)
        list.add(getOrderPaymentResultVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrderPaymentResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGetOrderPaymentResultVoReq()).compareTo(other.isSetGetOrderPaymentResultVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetOrderPaymentResultVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getOrderPaymentResultVoReq, other.getOrderPaymentResultVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrderPaymentResult_args(");
      boolean first = true;

      sb.append("getOrderPaymentResultVoReq:");
      if (this.getOrderPaymentResultVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.getOrderPaymentResultVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (getOrderPaymentResultVoReq != null) {
        getOrderPaymentResultVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrderPaymentResult_argsStandardSchemeFactory implements SchemeFactory {
      public getOrderPaymentResult_argsStandardScheme getScheme() {
        return new getOrderPaymentResult_argsStandardScheme();
      }
    }

    private static class getOrderPaymentResult_argsStandardScheme extends StandardScheme<getOrderPaymentResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderPaymentResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GET_ORDER_PAYMENT_RESULT_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getOrderPaymentResultVoReq = new com.froad.thrift.vo.order.GetOrderPaymentResultVoReq();
                struct.getOrderPaymentResultVoReq.read(iprot);
                struct.setGetOrderPaymentResultVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderPaymentResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.getOrderPaymentResultVoReq != null) {
          oprot.writeFieldBegin(GET_ORDER_PAYMENT_RESULT_VO_REQ_FIELD_DESC);
          struct.getOrderPaymentResultVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrderPaymentResult_argsTupleSchemeFactory implements SchemeFactory {
      public getOrderPaymentResult_argsTupleScheme getScheme() {
        return new getOrderPaymentResult_argsTupleScheme();
      }
    }

    private static class getOrderPaymentResult_argsTupleScheme extends TupleScheme<getOrderPaymentResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderPaymentResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGetOrderPaymentResultVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGetOrderPaymentResultVoReq()) {
          struct.getOrderPaymentResultVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderPaymentResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.getOrderPaymentResultVoReq = new com.froad.thrift.vo.order.GetOrderPaymentResultVoReq();
          struct.getOrderPaymentResultVoReq.read(iprot);
          struct.setGetOrderPaymentResultVoReqIsSet(true);
        }
      }
    }

  }

  public static class getOrderPaymentResult_result implements org.apache.thrift.TBase<getOrderPaymentResult_result, getOrderPaymentResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderPaymentResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderPaymentResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrderPaymentResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrderPaymentResult_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetOrderPaymentResultVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetOrderPaymentResultVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderPaymentResult_result.class, metaDataMap);
    }

    public getOrderPaymentResult_result() {
    }

    public getOrderPaymentResult_result(
      com.froad.thrift.vo.order.GetOrderPaymentResultVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrderPaymentResult_result(getOrderPaymentResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.GetOrderPaymentResultVoRes(other.success);
      }
    }

    public getOrderPaymentResult_result deepCopy() {
      return new getOrderPaymentResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.GetOrderPaymentResultVoRes getSuccess() {
      return this.success;
    }

    public getOrderPaymentResult_result setSuccess(com.froad.thrift.vo.order.GetOrderPaymentResultVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.GetOrderPaymentResultVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrderPaymentResult_result)
        return this.equals((getOrderPaymentResult_result)that);
      return false;
    }

    public boolean equals(getOrderPaymentResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOrderPaymentResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrderPaymentResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrderPaymentResult_resultStandardSchemeFactory implements SchemeFactory {
      public getOrderPaymentResult_resultStandardScheme getScheme() {
        return new getOrderPaymentResult_resultStandardScheme();
      }
    }

    private static class getOrderPaymentResult_resultStandardScheme extends StandardScheme<getOrderPaymentResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderPaymentResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.GetOrderPaymentResultVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderPaymentResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrderPaymentResult_resultTupleSchemeFactory implements SchemeFactory {
      public getOrderPaymentResult_resultTupleScheme getScheme() {
        return new getOrderPaymentResult_resultTupleScheme();
      }
    }

    private static class getOrderPaymentResult_resultTupleScheme extends TupleScheme<getOrderPaymentResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderPaymentResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderPaymentResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.GetOrderPaymentResultVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addVIPOrder_args implements org.apache.thrift.TBase<addVIPOrder_args, addVIPOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<addVIPOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVIPOrder_args");

    private static final org.apache.thrift.protocol.TField ADD_VIPORDER_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("addVIPOrderVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVIPOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVIPOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.AddVIPOrderVoReq addVIPOrderVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADD_VIPORDER_VO_REQ((short)1, "addVIPOrderVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADD_VIPORDER_VO_REQ
            return ADD_VIPORDER_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADD_VIPORDER_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("addVIPOrderVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.AddVIPOrderVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVIPOrder_args.class, metaDataMap);
    }

    public addVIPOrder_args() {
    }

    public addVIPOrder_args(
      com.froad.thrift.vo.order.AddVIPOrderVoReq addVIPOrderVoReq)
    {
      this();
      this.addVIPOrderVoReq = addVIPOrderVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVIPOrder_args(addVIPOrder_args other) {
      if (other.isSetAddVIPOrderVoReq()) {
        this.addVIPOrderVoReq = new com.froad.thrift.vo.order.AddVIPOrderVoReq(other.addVIPOrderVoReq);
      }
    }

    public addVIPOrder_args deepCopy() {
      return new addVIPOrder_args(this);
    }

    @Override
    public void clear() {
      this.addVIPOrderVoReq = null;
    }

    public com.froad.thrift.vo.order.AddVIPOrderVoReq getAddVIPOrderVoReq() {
      return this.addVIPOrderVoReq;
    }

    public addVIPOrder_args setAddVIPOrderVoReq(com.froad.thrift.vo.order.AddVIPOrderVoReq addVIPOrderVoReq) {
      this.addVIPOrderVoReq = addVIPOrderVoReq;
      return this;
    }

    public void unsetAddVIPOrderVoReq() {
      this.addVIPOrderVoReq = null;
    }

    /** Returns true if field addVIPOrderVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetAddVIPOrderVoReq() {
      return this.addVIPOrderVoReq != null;
    }

    public void setAddVIPOrderVoReqIsSet(boolean value) {
      if (!value) {
        this.addVIPOrderVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADD_VIPORDER_VO_REQ:
        if (value == null) {
          unsetAddVIPOrderVoReq();
        } else {
          setAddVIPOrderVoReq((com.froad.thrift.vo.order.AddVIPOrderVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADD_VIPORDER_VO_REQ:
        return getAddVIPOrderVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADD_VIPORDER_VO_REQ:
        return isSetAddVIPOrderVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVIPOrder_args)
        return this.equals((addVIPOrder_args)that);
      return false;
    }

    public boolean equals(addVIPOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_addVIPOrderVoReq = true && this.isSetAddVIPOrderVoReq();
      boolean that_present_addVIPOrderVoReq = true && that.isSetAddVIPOrderVoReq();
      if (this_present_addVIPOrderVoReq || that_present_addVIPOrderVoReq) {
        if (!(this_present_addVIPOrderVoReq && that_present_addVIPOrderVoReq))
          return false;
        if (!this.addVIPOrderVoReq.equals(that.addVIPOrderVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_addVIPOrderVoReq = true && (isSetAddVIPOrderVoReq());
      list.add(present_addVIPOrderVoReq);
      if (present_addVIPOrderVoReq)
        list.add(addVIPOrderVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(addVIPOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAddVIPOrderVoReq()).compareTo(other.isSetAddVIPOrderVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddVIPOrderVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addVIPOrderVoReq, other.addVIPOrderVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVIPOrder_args(");
      boolean first = true;

      sb.append("addVIPOrderVoReq:");
      if (this.addVIPOrderVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.addVIPOrderVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (addVIPOrderVoReq != null) {
        addVIPOrderVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVIPOrder_argsStandardSchemeFactory implements SchemeFactory {
      public addVIPOrder_argsStandardScheme getScheme() {
        return new addVIPOrder_argsStandardScheme();
      }
    }

    private static class addVIPOrder_argsStandardScheme extends StandardScheme<addVIPOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVIPOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADD_VIPORDER_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.addVIPOrderVoReq = new com.froad.thrift.vo.order.AddVIPOrderVoReq();
                struct.addVIPOrderVoReq.read(iprot);
                struct.setAddVIPOrderVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVIPOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.addVIPOrderVoReq != null) {
          oprot.writeFieldBegin(ADD_VIPORDER_VO_REQ_FIELD_DESC);
          struct.addVIPOrderVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVIPOrder_argsTupleSchemeFactory implements SchemeFactory {
      public addVIPOrder_argsTupleScheme getScheme() {
        return new addVIPOrder_argsTupleScheme();
      }
    }

    private static class addVIPOrder_argsTupleScheme extends TupleScheme<addVIPOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVIPOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAddVIPOrderVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAddVIPOrderVoReq()) {
          struct.addVIPOrderVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVIPOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.addVIPOrderVoReq = new com.froad.thrift.vo.order.AddVIPOrderVoReq();
          struct.addVIPOrderVoReq.read(iprot);
          struct.setAddVIPOrderVoReqIsSet(true);
        }
      }
    }

  }

  public static class addVIPOrder_result implements org.apache.thrift.TBase<addVIPOrder_result, addVIPOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<addVIPOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVIPOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVIPOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVIPOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.AddVIPOrderVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.AddVIPOrderVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVIPOrder_result.class, metaDataMap);
    }

    public addVIPOrder_result() {
    }

    public addVIPOrder_result(
      com.froad.thrift.vo.order.AddVIPOrderVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVIPOrder_result(addVIPOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.AddVIPOrderVoRes(other.success);
      }
    }

    public addVIPOrder_result deepCopy() {
      return new addVIPOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.AddVIPOrderVoRes getSuccess() {
      return this.success;
    }

    public addVIPOrder_result setSuccess(com.froad.thrift.vo.order.AddVIPOrderVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.AddVIPOrderVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVIPOrder_result)
        return this.equals((addVIPOrder_result)that);
      return false;
    }

    public boolean equals(addVIPOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addVIPOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVIPOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVIPOrder_resultStandardSchemeFactory implements SchemeFactory {
      public addVIPOrder_resultStandardScheme getScheme() {
        return new addVIPOrder_resultStandardScheme();
      }
    }

    private static class addVIPOrder_resultStandardScheme extends StandardScheme<addVIPOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVIPOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.AddVIPOrderVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVIPOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVIPOrder_resultTupleSchemeFactory implements SchemeFactory {
      public addVIPOrder_resultTupleScheme getScheme() {
        return new addVIPOrder_resultTupleScheme();
      }
    }

    private static class addVIPOrder_resultTupleScheme extends TupleScheme<addVIPOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVIPOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVIPOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.AddVIPOrderVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSubOrder_args implements org.apache.thrift.TBase<getSubOrder_args, getSubOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSubOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubOrder_args");

    private static final org.apache.thrift.protocol.TField GET_SUB_ORDER_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("getSubOrderVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSubOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSubOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetSubOrderVoReq getSubOrderVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GET_SUB_ORDER_VO_REQ((short)1, "getSubOrderVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GET_SUB_ORDER_VO_REQ
            return GET_SUB_ORDER_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GET_SUB_ORDER_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("getSubOrderVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetSubOrderVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubOrder_args.class, metaDataMap);
    }

    public getSubOrder_args() {
    }

    public getSubOrder_args(
      com.froad.thrift.vo.order.GetSubOrderVoReq getSubOrderVoReq)
    {
      this();
      this.getSubOrderVoReq = getSubOrderVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubOrder_args(getSubOrder_args other) {
      if (other.isSetGetSubOrderVoReq()) {
        this.getSubOrderVoReq = new com.froad.thrift.vo.order.GetSubOrderVoReq(other.getSubOrderVoReq);
      }
    }

    public getSubOrder_args deepCopy() {
      return new getSubOrder_args(this);
    }

    @Override
    public void clear() {
      this.getSubOrderVoReq = null;
    }

    public com.froad.thrift.vo.order.GetSubOrderVoReq getGetSubOrderVoReq() {
      return this.getSubOrderVoReq;
    }

    public getSubOrder_args setGetSubOrderVoReq(com.froad.thrift.vo.order.GetSubOrderVoReq getSubOrderVoReq) {
      this.getSubOrderVoReq = getSubOrderVoReq;
      return this;
    }

    public void unsetGetSubOrderVoReq() {
      this.getSubOrderVoReq = null;
    }

    /** Returns true if field getSubOrderVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetGetSubOrderVoReq() {
      return this.getSubOrderVoReq != null;
    }

    public void setGetSubOrderVoReqIsSet(boolean value) {
      if (!value) {
        this.getSubOrderVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GET_SUB_ORDER_VO_REQ:
        if (value == null) {
          unsetGetSubOrderVoReq();
        } else {
          setGetSubOrderVoReq((com.froad.thrift.vo.order.GetSubOrderVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GET_SUB_ORDER_VO_REQ:
        return getGetSubOrderVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GET_SUB_ORDER_VO_REQ:
        return isSetGetSubOrderVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubOrder_args)
        return this.equals((getSubOrder_args)that);
      return false;
    }

    public boolean equals(getSubOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_getSubOrderVoReq = true && this.isSetGetSubOrderVoReq();
      boolean that_present_getSubOrderVoReq = true && that.isSetGetSubOrderVoReq();
      if (this_present_getSubOrderVoReq || that_present_getSubOrderVoReq) {
        if (!(this_present_getSubOrderVoReq && that_present_getSubOrderVoReq))
          return false;
        if (!this.getSubOrderVoReq.equals(that.getSubOrderVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_getSubOrderVoReq = true && (isSetGetSubOrderVoReq());
      list.add(present_getSubOrderVoReq);
      if (present_getSubOrderVoReq)
        list.add(getSubOrderVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSubOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGetSubOrderVoReq()).compareTo(other.isSetGetSubOrderVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetSubOrderVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getSubOrderVoReq, other.getSubOrderVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubOrder_args(");
      boolean first = true;

      sb.append("getSubOrderVoReq:");
      if (this.getSubOrderVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.getSubOrderVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (getSubOrderVoReq != null) {
        getSubOrderVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubOrder_argsStandardSchemeFactory implements SchemeFactory {
      public getSubOrder_argsStandardScheme getScheme() {
        return new getSubOrder_argsStandardScheme();
      }
    }

    private static class getSubOrder_argsStandardScheme extends StandardScheme<getSubOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GET_SUB_ORDER_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getSubOrderVoReq = new com.froad.thrift.vo.order.GetSubOrderVoReq();
                struct.getSubOrderVoReq.read(iprot);
                struct.setGetSubOrderVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.getSubOrderVoReq != null) {
          oprot.writeFieldBegin(GET_SUB_ORDER_VO_REQ_FIELD_DESC);
          struct.getSubOrderVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubOrder_argsTupleSchemeFactory implements SchemeFactory {
      public getSubOrder_argsTupleScheme getScheme() {
        return new getSubOrder_argsTupleScheme();
      }
    }

    private static class getSubOrder_argsTupleScheme extends TupleScheme<getSubOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGetSubOrderVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGetSubOrderVoReq()) {
          struct.getSubOrderVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.getSubOrderVoReq = new com.froad.thrift.vo.order.GetSubOrderVoReq();
          struct.getSubOrderVoReq.read(iprot);
          struct.setGetSubOrderVoReqIsSet(true);
        }
      }
    }

  }

  public static class getSubOrder_result implements org.apache.thrift.TBase<getSubOrder_result, getSubOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSubOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSubOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSubOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSubOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.GetSubOrderVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.GetSubOrderVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSubOrder_result.class, metaDataMap);
    }

    public getSubOrder_result() {
    }

    public getSubOrder_result(
      com.froad.thrift.vo.order.GetSubOrderVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSubOrder_result(getSubOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.GetSubOrderVoRes(other.success);
      }
    }

    public getSubOrder_result deepCopy() {
      return new getSubOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.GetSubOrderVoRes getSuccess() {
      return this.success;
    }

    public getSubOrder_result setSuccess(com.froad.thrift.vo.order.GetSubOrderVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.GetSubOrderVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSubOrder_result)
        return this.equals((getSubOrder_result)that);
      return false;
    }

    public boolean equals(getSubOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSubOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSubOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSubOrder_resultStandardSchemeFactory implements SchemeFactory {
      public getSubOrder_resultStandardScheme getScheme() {
        return new getSubOrder_resultStandardScheme();
      }
    }

    private static class getSubOrder_resultStandardScheme extends StandardScheme<getSubOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSubOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.GetSubOrderVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSubOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSubOrder_resultTupleSchemeFactory implements SchemeFactory {
      public getSubOrder_resultTupleScheme getScheme() {
        return new getSubOrder_resultTupleScheme();
      }
    }

    private static class getSubOrder_resultTupleScheme extends TupleScheme<getSubOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSubOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSubOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.GetSubOrderVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateSubOrderLogistic_args implements org.apache.thrift.TBase<updateSubOrderLogistic_args, updateSubOrderLogistic_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSubOrderLogistic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSubOrderLogistic_args");

    private static final org.apache.thrift.protocol.TField UPDATE_SUB_ORDER_LOGISTIC_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("updateSubOrderLogisticVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSubOrderLogistic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSubOrderLogistic_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq updateSubOrderLogisticVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPDATE_SUB_ORDER_LOGISTIC_VO_REQ((short)1, "updateSubOrderLogisticVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPDATE_SUB_ORDER_LOGISTIC_VO_REQ
            return UPDATE_SUB_ORDER_LOGISTIC_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPDATE_SUB_ORDER_LOGISTIC_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("updateSubOrderLogisticVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSubOrderLogistic_args.class, metaDataMap);
    }

    public updateSubOrderLogistic_args() {
    }

    public updateSubOrderLogistic_args(
      com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq updateSubOrderLogisticVoReq)
    {
      this();
      this.updateSubOrderLogisticVoReq = updateSubOrderLogisticVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSubOrderLogistic_args(updateSubOrderLogistic_args other) {
      if (other.isSetUpdateSubOrderLogisticVoReq()) {
        this.updateSubOrderLogisticVoReq = new com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq(other.updateSubOrderLogisticVoReq);
      }
    }

    public updateSubOrderLogistic_args deepCopy() {
      return new updateSubOrderLogistic_args(this);
    }

    @Override
    public void clear() {
      this.updateSubOrderLogisticVoReq = null;
    }

    public com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq getUpdateSubOrderLogisticVoReq() {
      return this.updateSubOrderLogisticVoReq;
    }

    public updateSubOrderLogistic_args setUpdateSubOrderLogisticVoReq(com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq updateSubOrderLogisticVoReq) {
      this.updateSubOrderLogisticVoReq = updateSubOrderLogisticVoReq;
      return this;
    }

    public void unsetUpdateSubOrderLogisticVoReq() {
      this.updateSubOrderLogisticVoReq = null;
    }

    /** Returns true if field updateSubOrderLogisticVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateSubOrderLogisticVoReq() {
      return this.updateSubOrderLogisticVoReq != null;
    }

    public void setUpdateSubOrderLogisticVoReqIsSet(boolean value) {
      if (!value) {
        this.updateSubOrderLogisticVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPDATE_SUB_ORDER_LOGISTIC_VO_REQ:
        if (value == null) {
          unsetUpdateSubOrderLogisticVoReq();
        } else {
          setUpdateSubOrderLogisticVoReq((com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPDATE_SUB_ORDER_LOGISTIC_VO_REQ:
        return getUpdateSubOrderLogisticVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPDATE_SUB_ORDER_LOGISTIC_VO_REQ:
        return isSetUpdateSubOrderLogisticVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSubOrderLogistic_args)
        return this.equals((updateSubOrderLogistic_args)that);
      return false;
    }

    public boolean equals(updateSubOrderLogistic_args that) {
      if (that == null)
        return false;

      boolean this_present_updateSubOrderLogisticVoReq = true && this.isSetUpdateSubOrderLogisticVoReq();
      boolean that_present_updateSubOrderLogisticVoReq = true && that.isSetUpdateSubOrderLogisticVoReq();
      if (this_present_updateSubOrderLogisticVoReq || that_present_updateSubOrderLogisticVoReq) {
        if (!(this_present_updateSubOrderLogisticVoReq && that_present_updateSubOrderLogisticVoReq))
          return false;
        if (!this.updateSubOrderLogisticVoReq.equals(that.updateSubOrderLogisticVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_updateSubOrderLogisticVoReq = true && (isSetUpdateSubOrderLogisticVoReq());
      list.add(present_updateSubOrderLogisticVoReq);
      if (present_updateSubOrderLogisticVoReq)
        list.add(updateSubOrderLogisticVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSubOrderLogistic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUpdateSubOrderLogisticVoReq()).compareTo(other.isSetUpdateSubOrderLogisticVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateSubOrderLogisticVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateSubOrderLogisticVoReq, other.updateSubOrderLogisticVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSubOrderLogistic_args(");
      boolean first = true;

      sb.append("updateSubOrderLogisticVoReq:");
      if (this.updateSubOrderLogisticVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.updateSubOrderLogisticVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (updateSubOrderLogisticVoReq != null) {
        updateSubOrderLogisticVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSubOrderLogistic_argsStandardSchemeFactory implements SchemeFactory {
      public updateSubOrderLogistic_argsStandardScheme getScheme() {
        return new updateSubOrderLogistic_argsStandardScheme();
      }
    }

    private static class updateSubOrderLogistic_argsStandardScheme extends StandardScheme<updateSubOrderLogistic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSubOrderLogistic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPDATE_SUB_ORDER_LOGISTIC_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.updateSubOrderLogisticVoReq = new com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq();
                struct.updateSubOrderLogisticVoReq.read(iprot);
                struct.setUpdateSubOrderLogisticVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSubOrderLogistic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.updateSubOrderLogisticVoReq != null) {
          oprot.writeFieldBegin(UPDATE_SUB_ORDER_LOGISTIC_VO_REQ_FIELD_DESC);
          struct.updateSubOrderLogisticVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSubOrderLogistic_argsTupleSchemeFactory implements SchemeFactory {
      public updateSubOrderLogistic_argsTupleScheme getScheme() {
        return new updateSubOrderLogistic_argsTupleScheme();
      }
    }

    private static class updateSubOrderLogistic_argsTupleScheme extends TupleScheme<updateSubOrderLogistic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSubOrderLogistic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUpdateSubOrderLogisticVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUpdateSubOrderLogisticVoReq()) {
          struct.updateSubOrderLogisticVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSubOrderLogistic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.updateSubOrderLogisticVoReq = new com.froad.thrift.vo.order.UpdateSubOrderLogisticVoReq();
          struct.updateSubOrderLogisticVoReq.read(iprot);
          struct.setUpdateSubOrderLogisticVoReqIsSet(true);
        }
      }
    }

  }

  public static class updateSubOrderLogistic_result implements org.apache.thrift.TBase<updateSubOrderLogistic_result, updateSubOrderLogistic_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSubOrderLogistic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSubOrderLogistic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSubOrderLogistic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSubOrderLogistic_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSubOrderLogistic_result.class, metaDataMap);
    }

    public updateSubOrderLogistic_result() {
    }

    public updateSubOrderLogistic_result(
      com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSubOrderLogistic_result(updateSubOrderLogistic_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes(other.success);
      }
    }

    public updateSubOrderLogistic_result deepCopy() {
      return new updateSubOrderLogistic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes getSuccess() {
      return this.success;
    }

    public updateSubOrderLogistic_result setSuccess(com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSubOrderLogistic_result)
        return this.equals((updateSubOrderLogistic_result)that);
      return false;
    }

    public boolean equals(updateSubOrderLogistic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSubOrderLogistic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSubOrderLogistic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSubOrderLogistic_resultStandardSchemeFactory implements SchemeFactory {
      public updateSubOrderLogistic_resultStandardScheme getScheme() {
        return new updateSubOrderLogistic_resultStandardScheme();
      }
    }

    private static class updateSubOrderLogistic_resultStandardScheme extends StandardScheme<updateSubOrderLogistic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSubOrderLogistic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSubOrderLogistic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSubOrderLogistic_resultTupleSchemeFactory implements SchemeFactory {
      public updateSubOrderLogistic_resultTupleScheme getScheme() {
        return new updateSubOrderLogistic_resultTupleScheme();
      }
    }

    private static class updateSubOrderLogistic_resultTupleScheme extends TupleScheme<updateSubOrderLogistic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSubOrderLogistic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSubOrderLogistic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.UpdateSubOrderLogisticVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkBeforeCashier_args implements org.apache.thrift.TBase<checkBeforeCashier_args, checkBeforeCashier_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkBeforeCashier_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkBeforeCashier_args");

    private static final org.apache.thrift.protocol.TField CASHIER_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("cashierVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkBeforeCashier_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkBeforeCashier_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.CashierVoReq cashierVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CASHIER_VO_REQ((short)1, "cashierVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CASHIER_VO_REQ
            return CASHIER_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CASHIER_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("cashierVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.CashierVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkBeforeCashier_args.class, metaDataMap);
    }

    public checkBeforeCashier_args() {
    }

    public checkBeforeCashier_args(
      com.froad.thrift.vo.order.CashierVoReq cashierVoReq)
    {
      this();
      this.cashierVoReq = cashierVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkBeforeCashier_args(checkBeforeCashier_args other) {
      if (other.isSetCashierVoReq()) {
        this.cashierVoReq = new com.froad.thrift.vo.order.CashierVoReq(other.cashierVoReq);
      }
    }

    public checkBeforeCashier_args deepCopy() {
      return new checkBeforeCashier_args(this);
    }

    @Override
    public void clear() {
      this.cashierVoReq = null;
    }

    public com.froad.thrift.vo.order.CashierVoReq getCashierVoReq() {
      return this.cashierVoReq;
    }

    public checkBeforeCashier_args setCashierVoReq(com.froad.thrift.vo.order.CashierVoReq cashierVoReq) {
      this.cashierVoReq = cashierVoReq;
      return this;
    }

    public void unsetCashierVoReq() {
      this.cashierVoReq = null;
    }

    /** Returns true if field cashierVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetCashierVoReq() {
      return this.cashierVoReq != null;
    }

    public void setCashierVoReqIsSet(boolean value) {
      if (!value) {
        this.cashierVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CASHIER_VO_REQ:
        if (value == null) {
          unsetCashierVoReq();
        } else {
          setCashierVoReq((com.froad.thrift.vo.order.CashierVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CASHIER_VO_REQ:
        return getCashierVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CASHIER_VO_REQ:
        return isSetCashierVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkBeforeCashier_args)
        return this.equals((checkBeforeCashier_args)that);
      return false;
    }

    public boolean equals(checkBeforeCashier_args that) {
      if (that == null)
        return false;

      boolean this_present_cashierVoReq = true && this.isSetCashierVoReq();
      boolean that_present_cashierVoReq = true && that.isSetCashierVoReq();
      if (this_present_cashierVoReq || that_present_cashierVoReq) {
        if (!(this_present_cashierVoReq && that_present_cashierVoReq))
          return false;
        if (!this.cashierVoReq.equals(that.cashierVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cashierVoReq = true && (isSetCashierVoReq());
      list.add(present_cashierVoReq);
      if (present_cashierVoReq)
        list.add(cashierVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkBeforeCashier_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCashierVoReq()).compareTo(other.isSetCashierVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCashierVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashierVoReq, other.cashierVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkBeforeCashier_args(");
      boolean first = true;

      sb.append("cashierVoReq:");
      if (this.cashierVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.cashierVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cashierVoReq != null) {
        cashierVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkBeforeCashier_argsStandardSchemeFactory implements SchemeFactory {
      public checkBeforeCashier_argsStandardScheme getScheme() {
        return new checkBeforeCashier_argsStandardScheme();
      }
    }

    private static class checkBeforeCashier_argsStandardScheme extends StandardScheme<checkBeforeCashier_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkBeforeCashier_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CASHIER_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cashierVoReq = new com.froad.thrift.vo.order.CashierVoReq();
                struct.cashierVoReq.read(iprot);
                struct.setCashierVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkBeforeCashier_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cashierVoReq != null) {
          oprot.writeFieldBegin(CASHIER_VO_REQ_FIELD_DESC);
          struct.cashierVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkBeforeCashier_argsTupleSchemeFactory implements SchemeFactory {
      public checkBeforeCashier_argsTupleScheme getScheme() {
        return new checkBeforeCashier_argsTupleScheme();
      }
    }

    private static class checkBeforeCashier_argsTupleScheme extends TupleScheme<checkBeforeCashier_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkBeforeCashier_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCashierVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCashierVoReq()) {
          struct.cashierVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkBeforeCashier_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cashierVoReq = new com.froad.thrift.vo.order.CashierVoReq();
          struct.cashierVoReq.read(iprot);
          struct.setCashierVoReqIsSet(true);
        }
      }
    }

  }

  public static class checkBeforeCashier_result implements org.apache.thrift.TBase<checkBeforeCashier_result, checkBeforeCashier_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkBeforeCashier_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkBeforeCashier_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkBeforeCashier_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkBeforeCashier_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.CashierVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.CashierVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkBeforeCashier_result.class, metaDataMap);
    }

    public checkBeforeCashier_result() {
    }

    public checkBeforeCashier_result(
      com.froad.thrift.vo.order.CashierVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkBeforeCashier_result(checkBeforeCashier_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.CashierVoRes(other.success);
      }
    }

    public checkBeforeCashier_result deepCopy() {
      return new checkBeforeCashier_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.CashierVoRes getSuccess() {
      return this.success;
    }

    public checkBeforeCashier_result setSuccess(com.froad.thrift.vo.order.CashierVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.CashierVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkBeforeCashier_result)
        return this.equals((checkBeforeCashier_result)that);
      return false;
    }

    public boolean equals(checkBeforeCashier_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkBeforeCashier_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkBeforeCashier_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkBeforeCashier_resultStandardSchemeFactory implements SchemeFactory {
      public checkBeforeCashier_resultStandardScheme getScheme() {
        return new checkBeforeCashier_resultStandardScheme();
      }
    }

    private static class checkBeforeCashier_resultStandardScheme extends StandardScheme<checkBeforeCashier_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkBeforeCashier_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.CashierVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkBeforeCashier_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkBeforeCashier_resultTupleSchemeFactory implements SchemeFactory {
      public checkBeforeCashier_resultTupleScheme getScheme() {
        return new checkBeforeCashier_resultTupleScheme();
      }
    }

    private static class checkBeforeCashier_resultTupleScheme extends TupleScheme<checkBeforeCashier_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkBeforeCashier_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkBeforeCashier_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.CashierVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addPrefPayOrder_args implements org.apache.thrift.TBase<addPrefPayOrder_args, addPrefPayOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPrefPayOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPrefPayOrder_args");

    private static final org.apache.thrift.protocol.TField ADD_PREF_PAY_ORDER_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("addPrefPayOrderReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPrefPayOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPrefPayOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.AddPrefPayOrderReq addPrefPayOrderReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADD_PREF_PAY_ORDER_REQ((short)1, "addPrefPayOrderReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADD_PREF_PAY_ORDER_REQ
            return ADD_PREF_PAY_ORDER_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADD_PREF_PAY_ORDER_REQ, new org.apache.thrift.meta_data.FieldMetaData("addPrefPayOrderReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.AddPrefPayOrderReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPrefPayOrder_args.class, metaDataMap);
    }

    public addPrefPayOrder_args() {
    }

    public addPrefPayOrder_args(
      com.froad.thrift.vo.order.AddPrefPayOrderReq addPrefPayOrderReq)
    {
      this();
      this.addPrefPayOrderReq = addPrefPayOrderReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPrefPayOrder_args(addPrefPayOrder_args other) {
      if (other.isSetAddPrefPayOrderReq()) {
        this.addPrefPayOrderReq = new com.froad.thrift.vo.order.AddPrefPayOrderReq(other.addPrefPayOrderReq);
      }
    }

    public addPrefPayOrder_args deepCopy() {
      return new addPrefPayOrder_args(this);
    }

    @Override
    public void clear() {
      this.addPrefPayOrderReq = null;
    }

    public com.froad.thrift.vo.order.AddPrefPayOrderReq getAddPrefPayOrderReq() {
      return this.addPrefPayOrderReq;
    }

    public addPrefPayOrder_args setAddPrefPayOrderReq(com.froad.thrift.vo.order.AddPrefPayOrderReq addPrefPayOrderReq) {
      this.addPrefPayOrderReq = addPrefPayOrderReq;
      return this;
    }

    public void unsetAddPrefPayOrderReq() {
      this.addPrefPayOrderReq = null;
    }

    /** Returns true if field addPrefPayOrderReq is set (has been assigned a value) and false otherwise */
    public boolean isSetAddPrefPayOrderReq() {
      return this.addPrefPayOrderReq != null;
    }

    public void setAddPrefPayOrderReqIsSet(boolean value) {
      if (!value) {
        this.addPrefPayOrderReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADD_PREF_PAY_ORDER_REQ:
        if (value == null) {
          unsetAddPrefPayOrderReq();
        } else {
          setAddPrefPayOrderReq((com.froad.thrift.vo.order.AddPrefPayOrderReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADD_PREF_PAY_ORDER_REQ:
        return getAddPrefPayOrderReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADD_PREF_PAY_ORDER_REQ:
        return isSetAddPrefPayOrderReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPrefPayOrder_args)
        return this.equals((addPrefPayOrder_args)that);
      return false;
    }

    public boolean equals(addPrefPayOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_addPrefPayOrderReq = true && this.isSetAddPrefPayOrderReq();
      boolean that_present_addPrefPayOrderReq = true && that.isSetAddPrefPayOrderReq();
      if (this_present_addPrefPayOrderReq || that_present_addPrefPayOrderReq) {
        if (!(this_present_addPrefPayOrderReq && that_present_addPrefPayOrderReq))
          return false;
        if (!this.addPrefPayOrderReq.equals(that.addPrefPayOrderReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_addPrefPayOrderReq = true && (isSetAddPrefPayOrderReq());
      list.add(present_addPrefPayOrderReq);
      if (present_addPrefPayOrderReq)
        list.add(addPrefPayOrderReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(addPrefPayOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAddPrefPayOrderReq()).compareTo(other.isSetAddPrefPayOrderReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddPrefPayOrderReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addPrefPayOrderReq, other.addPrefPayOrderReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPrefPayOrder_args(");
      boolean first = true;

      sb.append("addPrefPayOrderReq:");
      if (this.addPrefPayOrderReq == null) {
        sb.append("null");
      } else {
        sb.append(this.addPrefPayOrderReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (addPrefPayOrderReq != null) {
        addPrefPayOrderReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPrefPayOrder_argsStandardSchemeFactory implements SchemeFactory {
      public addPrefPayOrder_argsStandardScheme getScheme() {
        return new addPrefPayOrder_argsStandardScheme();
      }
    }

    private static class addPrefPayOrder_argsStandardScheme extends StandardScheme<addPrefPayOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPrefPayOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADD_PREF_PAY_ORDER_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.addPrefPayOrderReq = new com.froad.thrift.vo.order.AddPrefPayOrderReq();
                struct.addPrefPayOrderReq.read(iprot);
                struct.setAddPrefPayOrderReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPrefPayOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.addPrefPayOrderReq != null) {
          oprot.writeFieldBegin(ADD_PREF_PAY_ORDER_REQ_FIELD_DESC);
          struct.addPrefPayOrderReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPrefPayOrder_argsTupleSchemeFactory implements SchemeFactory {
      public addPrefPayOrder_argsTupleScheme getScheme() {
        return new addPrefPayOrder_argsTupleScheme();
      }
    }

    private static class addPrefPayOrder_argsTupleScheme extends TupleScheme<addPrefPayOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPrefPayOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAddPrefPayOrderReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAddPrefPayOrderReq()) {
          struct.addPrefPayOrderReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPrefPayOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.addPrefPayOrderReq = new com.froad.thrift.vo.order.AddPrefPayOrderReq();
          struct.addPrefPayOrderReq.read(iprot);
          struct.setAddPrefPayOrderReqIsSet(true);
        }
      }
    }

  }

  public static class addPrefPayOrder_result implements org.apache.thrift.TBase<addPrefPayOrder_result, addPrefPayOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPrefPayOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPrefPayOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPrefPayOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPrefPayOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.AddPrefPayOrderRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.AddPrefPayOrderRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPrefPayOrder_result.class, metaDataMap);
    }

    public addPrefPayOrder_result() {
    }

    public addPrefPayOrder_result(
      com.froad.thrift.vo.order.AddPrefPayOrderRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPrefPayOrder_result(addPrefPayOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.AddPrefPayOrderRes(other.success);
      }
    }

    public addPrefPayOrder_result deepCopy() {
      return new addPrefPayOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.AddPrefPayOrderRes getSuccess() {
      return this.success;
    }

    public addPrefPayOrder_result setSuccess(com.froad.thrift.vo.order.AddPrefPayOrderRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.AddPrefPayOrderRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPrefPayOrder_result)
        return this.equals((addPrefPayOrder_result)that);
      return false;
    }

    public boolean equals(addPrefPayOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addPrefPayOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPrefPayOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPrefPayOrder_resultStandardSchemeFactory implements SchemeFactory {
      public addPrefPayOrder_resultStandardScheme getScheme() {
        return new addPrefPayOrder_resultStandardScheme();
      }
    }

    private static class addPrefPayOrder_resultStandardScheme extends StandardScheme<addPrefPayOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPrefPayOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.AddPrefPayOrderRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPrefPayOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPrefPayOrder_resultTupleSchemeFactory implements SchemeFactory {
      public addPrefPayOrder_resultTupleScheme getScheme() {
        return new addPrefPayOrder_resultTupleScheme();
      }
    }

    private static class addPrefPayOrder_resultTupleScheme extends TupleScheme<addPrefPayOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPrefPayOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPrefPayOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.AddPrefPayOrderRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class closeOrder_args implements org.apache.thrift.TBase<closeOrder_args, closeOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeOrder_args");

    private static final org.apache.thrift.protocol.TField CLOSE_ORDER_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("closeOrderVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.CloseOrderVoReq closeOrderVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOSE_ORDER_VO_REQ((short)1, "closeOrderVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOSE_ORDER_VO_REQ
            return CLOSE_ORDER_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOSE_ORDER_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("closeOrderVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.CloseOrderVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeOrder_args.class, metaDataMap);
    }

    public closeOrder_args() {
    }

    public closeOrder_args(
      com.froad.thrift.vo.order.CloseOrderVoReq closeOrderVoReq)
    {
      this();
      this.closeOrderVoReq = closeOrderVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeOrder_args(closeOrder_args other) {
      if (other.isSetCloseOrderVoReq()) {
        this.closeOrderVoReq = new com.froad.thrift.vo.order.CloseOrderVoReq(other.closeOrderVoReq);
      }
    }

    public closeOrder_args deepCopy() {
      return new closeOrder_args(this);
    }

    @Override
    public void clear() {
      this.closeOrderVoReq = null;
    }

    public com.froad.thrift.vo.order.CloseOrderVoReq getCloseOrderVoReq() {
      return this.closeOrderVoReq;
    }

    public closeOrder_args setCloseOrderVoReq(com.froad.thrift.vo.order.CloseOrderVoReq closeOrderVoReq) {
      this.closeOrderVoReq = closeOrderVoReq;
      return this;
    }

    public void unsetCloseOrderVoReq() {
      this.closeOrderVoReq = null;
    }

    /** Returns true if field closeOrderVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetCloseOrderVoReq() {
      return this.closeOrderVoReq != null;
    }

    public void setCloseOrderVoReqIsSet(boolean value) {
      if (!value) {
        this.closeOrderVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLOSE_ORDER_VO_REQ:
        if (value == null) {
          unsetCloseOrderVoReq();
        } else {
          setCloseOrderVoReq((com.froad.thrift.vo.order.CloseOrderVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOSE_ORDER_VO_REQ:
        return getCloseOrderVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLOSE_ORDER_VO_REQ:
        return isSetCloseOrderVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeOrder_args)
        return this.equals((closeOrder_args)that);
      return false;
    }

    public boolean equals(closeOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_closeOrderVoReq = true && this.isSetCloseOrderVoReq();
      boolean that_present_closeOrderVoReq = true && that.isSetCloseOrderVoReq();
      if (this_present_closeOrderVoReq || that_present_closeOrderVoReq) {
        if (!(this_present_closeOrderVoReq && that_present_closeOrderVoReq))
          return false;
        if (!this.closeOrderVoReq.equals(that.closeOrderVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_closeOrderVoReq = true && (isSetCloseOrderVoReq());
      list.add(present_closeOrderVoReq);
      if (present_closeOrderVoReq)
        list.add(closeOrderVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCloseOrderVoReq()).compareTo(other.isSetCloseOrderVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloseOrderVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeOrderVoReq, other.closeOrderVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeOrder_args(");
      boolean first = true;

      sb.append("closeOrderVoReq:");
      if (this.closeOrderVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.closeOrderVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (closeOrderVoReq != null) {
        closeOrderVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeOrder_argsStandardSchemeFactory implements SchemeFactory {
      public closeOrder_argsStandardScheme getScheme() {
        return new closeOrder_argsStandardScheme();
      }
    }

    private static class closeOrder_argsStandardScheme extends StandardScheme<closeOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOSE_ORDER_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.closeOrderVoReq = new com.froad.thrift.vo.order.CloseOrderVoReq();
                struct.closeOrderVoReq.read(iprot);
                struct.setCloseOrderVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.closeOrderVoReq != null) {
          oprot.writeFieldBegin(CLOSE_ORDER_VO_REQ_FIELD_DESC);
          struct.closeOrderVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeOrder_argsTupleSchemeFactory implements SchemeFactory {
      public closeOrder_argsTupleScheme getScheme() {
        return new closeOrder_argsTupleScheme();
      }
    }

    private static class closeOrder_argsTupleScheme extends TupleScheme<closeOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCloseOrderVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCloseOrderVoReq()) {
          struct.closeOrderVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.closeOrderVoReq = new com.froad.thrift.vo.order.CloseOrderVoReq();
          struct.closeOrderVoReq.read(iprot);
          struct.setCloseOrderVoReqIsSet(true);
        }
      }
    }

  }

  public static class closeOrder_result implements org.apache.thrift.TBase<closeOrder_result, closeOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<closeOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new closeOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new closeOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.CloseOrderVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.CloseOrderVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeOrder_result.class, metaDataMap);
    }

    public closeOrder_result() {
    }

    public closeOrder_result(
      com.froad.thrift.vo.order.CloseOrderVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeOrder_result(closeOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.CloseOrderVoRes(other.success);
      }
    }

    public closeOrder_result deepCopy() {
      return new closeOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.CloseOrderVoRes getSuccess() {
      return this.success;
    }

    public closeOrder_result setSuccess(com.froad.thrift.vo.order.CloseOrderVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.CloseOrderVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeOrder_result)
        return this.equals((closeOrder_result)that);
      return false;
    }

    public boolean equals(closeOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(closeOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("closeOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeOrder_resultStandardSchemeFactory implements SchemeFactory {
      public closeOrder_resultStandardScheme getScheme() {
        return new closeOrder_resultStandardScheme();
      }
    }

    private static class closeOrder_resultStandardScheme extends StandardScheme<closeOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, closeOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.CloseOrderVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, closeOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeOrder_resultTupleSchemeFactory implements SchemeFactory {
      public closeOrder_resultTupleScheme getScheme() {
        return new closeOrder_resultTupleScheme();
      }
    }

    private static class closeOrder_resultTupleScheme extends TupleScheme<closeOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.CloseOrderVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVipOrderId_args implements org.apache.thrift.TBase<getVipOrderId_args, getVipOrderId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVipOrderId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVipOrderId_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVipOrderId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVipOrderId_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public long memberCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      MEMBER_CODE((short)2, "memberCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // MEMBER_CODE
            return MEMBER_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVipOrderId_args.class, metaDataMap);
    }

    public getVipOrderId_args() {
    }

    public getVipOrderId_args(
      String clientId,
      long memberCode)
    {
      this();
      this.clientId = clientId;
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVipOrderId_args(getVipOrderId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.memberCode = other.memberCode;
    }

    public getVipOrderId_args deepCopy() {
      return new getVipOrderId_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setMemberCodeIsSet(false);
      this.memberCode = 0;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getVipOrderId_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public getVipOrderId_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case MEMBER_CODE:
        return isSetMemberCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVipOrderId_args)
        return this.equals((getVipOrderId_args)that);
      return false;
    }

    public boolean equals(getVipOrderId_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVipOrderId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVipOrderId_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVipOrderId_argsStandardSchemeFactory implements SchemeFactory {
      public getVipOrderId_argsStandardScheme getScheme() {
        return new getVipOrderId_argsStandardScheme();
      }
    }

    private static class getVipOrderId_argsStandardScheme extends StandardScheme<getVipOrderId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVipOrderId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVipOrderId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVipOrderId_argsTupleSchemeFactory implements SchemeFactory {
      public getVipOrderId_argsTupleScheme getScheme() {
        return new getVipOrderId_argsTupleScheme();
      }
    }

    private static class getVipOrderId_argsTupleScheme extends TupleScheme<getVipOrderId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVipOrderId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetMemberCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVipOrderId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
      }
    }

  }

  public static class getVipOrderId_result implements org.apache.thrift.TBase<getVipOrderId_result, getVipOrderId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVipOrderId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVipOrderId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVipOrderId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVipOrderId_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVipOrderId_result.class, metaDataMap);
    }

    public getVipOrderId_result() {
    }

    public getVipOrderId_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVipOrderId_result(getVipOrderId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getVipOrderId_result deepCopy() {
      return new getVipOrderId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getVipOrderId_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVipOrderId_result)
        return this.equals((getVipOrderId_result)that);
      return false;
    }

    public boolean equals(getVipOrderId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVipOrderId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVipOrderId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVipOrderId_resultStandardSchemeFactory implements SchemeFactory {
      public getVipOrderId_resultStandardScheme getScheme() {
        return new getVipOrderId_resultStandardScheme();
      }
    }

    private static class getVipOrderId_resultStandardScheme extends StandardScheme<getVipOrderId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVipOrderId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVipOrderId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVipOrderId_resultTupleSchemeFactory implements SchemeFactory {
      public getVipOrderId_resultTupleScheme getScheme() {
        return new getVipOrderId_resultTupleScheme();
      }
    }

    private static class getVipOrderId_resultTupleScheme extends TupleScheme<getVipOrderId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVipOrderId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVipOrderId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class refundPayingOrder_args implements org.apache.thrift.TBase<refundPayingOrder_args, refundPayingOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<refundPayingOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refundPayingOrder_args");

    private static final org.apache.thrift.protocol.TField REFUND_PAYING_ORDER_VO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("refundPayingOrderVoReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refundPayingOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refundPayingOrder_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.RefundPayingOrderVoReq refundPayingOrderVoReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_PAYING_ORDER_VO_REQ((short)1, "refundPayingOrderVoReq");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_PAYING_ORDER_VO_REQ
            return REFUND_PAYING_ORDER_VO_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_PAYING_ORDER_VO_REQ, new org.apache.thrift.meta_data.FieldMetaData("refundPayingOrderVoReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.RefundPayingOrderVoReq.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refundPayingOrder_args.class, metaDataMap);
    }

    public refundPayingOrder_args() {
    }

    public refundPayingOrder_args(
      com.froad.thrift.vo.order.RefundPayingOrderVoReq refundPayingOrderVoReq)
    {
      this();
      this.refundPayingOrderVoReq = refundPayingOrderVoReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refundPayingOrder_args(refundPayingOrder_args other) {
      if (other.isSetRefundPayingOrderVoReq()) {
        this.refundPayingOrderVoReq = new com.froad.thrift.vo.order.RefundPayingOrderVoReq(other.refundPayingOrderVoReq);
      }
    }

    public refundPayingOrder_args deepCopy() {
      return new refundPayingOrder_args(this);
    }

    @Override
    public void clear() {
      this.refundPayingOrderVoReq = null;
    }

    public com.froad.thrift.vo.order.RefundPayingOrderVoReq getRefundPayingOrderVoReq() {
      return this.refundPayingOrderVoReq;
    }

    public refundPayingOrder_args setRefundPayingOrderVoReq(com.froad.thrift.vo.order.RefundPayingOrderVoReq refundPayingOrderVoReq) {
      this.refundPayingOrderVoReq = refundPayingOrderVoReq;
      return this;
    }

    public void unsetRefundPayingOrderVoReq() {
      this.refundPayingOrderVoReq = null;
    }

    /** Returns true if field refundPayingOrderVoReq is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundPayingOrderVoReq() {
      return this.refundPayingOrderVoReq != null;
    }

    public void setRefundPayingOrderVoReqIsSet(boolean value) {
      if (!value) {
        this.refundPayingOrderVoReq = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_PAYING_ORDER_VO_REQ:
        if (value == null) {
          unsetRefundPayingOrderVoReq();
        } else {
          setRefundPayingOrderVoReq((com.froad.thrift.vo.order.RefundPayingOrderVoReq)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_PAYING_ORDER_VO_REQ:
        return getRefundPayingOrderVoReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_PAYING_ORDER_VO_REQ:
        return isSetRefundPayingOrderVoReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refundPayingOrder_args)
        return this.equals((refundPayingOrder_args)that);
      return false;
    }

    public boolean equals(refundPayingOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_refundPayingOrderVoReq = true && this.isSetRefundPayingOrderVoReq();
      boolean that_present_refundPayingOrderVoReq = true && that.isSetRefundPayingOrderVoReq();
      if (this_present_refundPayingOrderVoReq || that_present_refundPayingOrderVoReq) {
        if (!(this_present_refundPayingOrderVoReq && that_present_refundPayingOrderVoReq))
          return false;
        if (!this.refundPayingOrderVoReq.equals(that.refundPayingOrderVoReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_refundPayingOrderVoReq = true && (isSetRefundPayingOrderVoReq());
      list.add(present_refundPayingOrderVoReq);
      if (present_refundPayingOrderVoReq)
        list.add(refundPayingOrderVoReq);

      return list.hashCode();
    }

    @Override
    public int compareTo(refundPayingOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRefundPayingOrderVoReq()).compareTo(other.isSetRefundPayingOrderVoReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundPayingOrderVoReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundPayingOrderVoReq, other.refundPayingOrderVoReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refundPayingOrder_args(");
      boolean first = true;

      sb.append("refundPayingOrderVoReq:");
      if (this.refundPayingOrderVoReq == null) {
        sb.append("null");
      } else {
        sb.append(this.refundPayingOrderVoReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundPayingOrderVoReq != null) {
        refundPayingOrderVoReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refundPayingOrder_argsStandardSchemeFactory implements SchemeFactory {
      public refundPayingOrder_argsStandardScheme getScheme() {
        return new refundPayingOrder_argsStandardScheme();
      }
    }

    private static class refundPayingOrder_argsStandardScheme extends StandardScheme<refundPayingOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refundPayingOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_PAYING_ORDER_VO_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundPayingOrderVoReq = new com.froad.thrift.vo.order.RefundPayingOrderVoReq();
                struct.refundPayingOrderVoReq.read(iprot);
                struct.setRefundPayingOrderVoReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refundPayingOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundPayingOrderVoReq != null) {
          oprot.writeFieldBegin(REFUND_PAYING_ORDER_VO_REQ_FIELD_DESC);
          struct.refundPayingOrderVoReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refundPayingOrder_argsTupleSchemeFactory implements SchemeFactory {
      public refundPayingOrder_argsTupleScheme getScheme() {
        return new refundPayingOrder_argsTupleScheme();
      }
    }

    private static class refundPayingOrder_argsTupleScheme extends TupleScheme<refundPayingOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refundPayingOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundPayingOrderVoReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundPayingOrderVoReq()) {
          struct.refundPayingOrderVoReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refundPayingOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundPayingOrderVoReq = new com.froad.thrift.vo.order.RefundPayingOrderVoReq();
          struct.refundPayingOrderVoReq.read(iprot);
          struct.setRefundPayingOrderVoReqIsSet(true);
        }
      }
    }

  }

  public static class refundPayingOrder_result implements org.apache.thrift.TBase<refundPayingOrder_result, refundPayingOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<refundPayingOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refundPayingOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refundPayingOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refundPayingOrder_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.order.RefundPayingOrderVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.order.RefundPayingOrderVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refundPayingOrder_result.class, metaDataMap);
    }

    public refundPayingOrder_result() {
    }

    public refundPayingOrder_result(
      com.froad.thrift.vo.order.RefundPayingOrderVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refundPayingOrder_result(refundPayingOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.order.RefundPayingOrderVoRes(other.success);
      }
    }

    public refundPayingOrder_result deepCopy() {
      return new refundPayingOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.order.RefundPayingOrderVoRes getSuccess() {
      return this.success;
    }

    public refundPayingOrder_result setSuccess(com.froad.thrift.vo.order.RefundPayingOrderVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.order.RefundPayingOrderVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refundPayingOrder_result)
        return this.equals((refundPayingOrder_result)that);
      return false;
    }

    public boolean equals(refundPayingOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(refundPayingOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refundPayingOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refundPayingOrder_resultStandardSchemeFactory implements SchemeFactory {
      public refundPayingOrder_resultStandardScheme getScheme() {
        return new refundPayingOrder_resultStandardScheme();
      }
    }

    private static class refundPayingOrder_resultStandardScheme extends StandardScheme<refundPayingOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refundPayingOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.order.RefundPayingOrderVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refundPayingOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refundPayingOrder_resultTupleSchemeFactory implements SchemeFactory {
      public refundPayingOrder_resultTupleScheme getScheme() {
        return new refundPayingOrder_resultTupleScheme();
      }
    }

    private static class refundPayingOrder_resultTupleScheme extends TupleScheme<refundPayingOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refundPayingOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refundPayingOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.order.RefundPayingOrderVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
