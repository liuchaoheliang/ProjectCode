/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class BossSenseWordsService {

  /**
   * Boss敏感词 服务
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 BossSenseWords
     * @param bossSenseWords
     * @return long    主键ID
     * 
     * @param originVo
     * @param bossSenseWordsVo
     */
    public com.froad.thrift.vo.AddResultVo addBossSenseWords(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) throws org.apache.thrift.TException;

    /**
     * 删除 BossSenseWords
     * @param bossSenseWords
     * @return boolean
     * 
     * @param originVo
     * @param bossSenseWordsVo
     */
    public com.froad.thrift.vo.ResultVo deleteBossSenseWords(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) throws org.apache.thrift.TException;

    /**
     * 修改 BossSenseWords
     * @param bossSenseWords
     * @return boolean
     * 
     * @param originVo
     * @param bossSenseWordsVo
     */
    public com.froad.thrift.vo.ResultVo updateBossSenseWords(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) throws org.apache.thrift.TException;

    /**
     * 查询 BossSenseWords
     * @param bossSenseWords
     * @return List<BossSenseWordsVo>
     * 
     * @param bossSenseWordsVo
     */
    public List<com.froad.thrift.vo.BossSenseWordsVo> getBossSenseWords(com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 BossSenseWords
     * @param bossSenseWords
     * @return BossSenseWordsPageVoRes
     * 
     * @param page
     * @param bossSenseWordsVo
     */
    public com.froad.thrift.vo.BossSenseWordsPageVoRes getBossSenseWordsByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addBossSenseWords(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteBossSenseWords(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateBossSenseWords(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBossSenseWords(com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBossSenseWordsByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.AddResultVo addBossSenseWords(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) throws org.apache.thrift.TException
    {
      send_addBossSenseWords(originVo, bossSenseWordsVo);
      return recv_addBossSenseWords();
    }

    public void send_addBossSenseWords(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) throws org.apache.thrift.TException
    {
      addBossSenseWords_args args = new addBossSenseWords_args();
      args.setOriginVo(originVo);
      args.setBossSenseWordsVo(bossSenseWordsVo);
      sendBase("addBossSenseWords", args);
    }

    public com.froad.thrift.vo.AddResultVo recv_addBossSenseWords() throws org.apache.thrift.TException
    {
      addBossSenseWords_result result = new addBossSenseWords_result();
      receiveBase(result, "addBossSenseWords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addBossSenseWords failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteBossSenseWords(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) throws org.apache.thrift.TException
    {
      send_deleteBossSenseWords(originVo, bossSenseWordsVo);
      return recv_deleteBossSenseWords();
    }

    public void send_deleteBossSenseWords(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) throws org.apache.thrift.TException
    {
      deleteBossSenseWords_args args = new deleteBossSenseWords_args();
      args.setOriginVo(originVo);
      args.setBossSenseWordsVo(bossSenseWordsVo);
      sendBase("deleteBossSenseWords", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteBossSenseWords() throws org.apache.thrift.TException
    {
      deleteBossSenseWords_result result = new deleteBossSenseWords_result();
      receiveBase(result, "deleteBossSenseWords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteBossSenseWords failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateBossSenseWords(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) throws org.apache.thrift.TException
    {
      send_updateBossSenseWords(originVo, bossSenseWordsVo);
      return recv_updateBossSenseWords();
    }

    public void send_updateBossSenseWords(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) throws org.apache.thrift.TException
    {
      updateBossSenseWords_args args = new updateBossSenseWords_args();
      args.setOriginVo(originVo);
      args.setBossSenseWordsVo(bossSenseWordsVo);
      sendBase("updateBossSenseWords", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateBossSenseWords() throws org.apache.thrift.TException
    {
      updateBossSenseWords_result result = new updateBossSenseWords_result();
      receiveBase(result, "updateBossSenseWords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateBossSenseWords failed: unknown result");
    }

    public List<com.froad.thrift.vo.BossSenseWordsVo> getBossSenseWords(com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) throws org.apache.thrift.TException
    {
      send_getBossSenseWords(bossSenseWordsVo);
      return recv_getBossSenseWords();
    }

    public void send_getBossSenseWords(com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) throws org.apache.thrift.TException
    {
      getBossSenseWords_args args = new getBossSenseWords_args();
      args.setBossSenseWordsVo(bossSenseWordsVo);
      sendBase("getBossSenseWords", args);
    }

    public List<com.froad.thrift.vo.BossSenseWordsVo> recv_getBossSenseWords() throws org.apache.thrift.TException
    {
      getBossSenseWords_result result = new getBossSenseWords_result();
      receiveBase(result, "getBossSenseWords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBossSenseWords failed: unknown result");
    }

    public com.froad.thrift.vo.BossSenseWordsPageVoRes getBossSenseWordsByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) throws org.apache.thrift.TException
    {
      send_getBossSenseWordsByPage(page, bossSenseWordsVo);
      return recv_getBossSenseWordsByPage();
    }

    public void send_getBossSenseWordsByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) throws org.apache.thrift.TException
    {
      getBossSenseWordsByPage_args args = new getBossSenseWordsByPage_args();
      args.setPage(page);
      args.setBossSenseWordsVo(bossSenseWordsVo);
      sendBase("getBossSenseWordsByPage", args);
    }

    public com.froad.thrift.vo.BossSenseWordsPageVoRes recv_getBossSenseWordsByPage() throws org.apache.thrift.TException
    {
      getBossSenseWordsByPage_result result = new getBossSenseWordsByPage_result();
      receiveBase(result, "getBossSenseWordsByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBossSenseWordsByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addBossSenseWords(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addBossSenseWords_call method_call = new addBossSenseWords_call(originVo, bossSenseWordsVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addBossSenseWords_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo;
      public addBossSenseWords_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bossSenseWordsVo = bossSenseWordsVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addBossSenseWords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addBossSenseWords_args args = new addBossSenseWords_args();
        args.setOriginVo(originVo);
        args.setBossSenseWordsVo(bossSenseWordsVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.AddResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addBossSenseWords();
      }
    }

    public void deleteBossSenseWords(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteBossSenseWords_call method_call = new deleteBossSenseWords_call(originVo, bossSenseWordsVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteBossSenseWords_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo;
      public deleteBossSenseWords_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bossSenseWordsVo = bossSenseWordsVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteBossSenseWords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteBossSenseWords_args args = new deleteBossSenseWords_args();
        args.setOriginVo(originVo);
        args.setBossSenseWordsVo(bossSenseWordsVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteBossSenseWords();
      }
    }

    public void updateBossSenseWords(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateBossSenseWords_call method_call = new updateBossSenseWords_call(originVo, bossSenseWordsVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateBossSenseWords_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo;
      public updateBossSenseWords_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.bossSenseWordsVo = bossSenseWordsVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateBossSenseWords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateBossSenseWords_args args = new updateBossSenseWords_args();
        args.setOriginVo(originVo);
        args.setBossSenseWordsVo(bossSenseWordsVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateBossSenseWords();
      }
    }

    public void getBossSenseWords(com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBossSenseWords_call method_call = new getBossSenseWords_call(bossSenseWordsVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBossSenseWords_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo;
      public getBossSenseWords_call(com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bossSenseWordsVo = bossSenseWordsVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBossSenseWords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBossSenseWords_args args = new getBossSenseWords_args();
        args.setBossSenseWordsVo(bossSenseWordsVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.BossSenseWordsVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBossSenseWords();
      }
    }

    public void getBossSenseWordsByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBossSenseWordsByPage_call method_call = new getBossSenseWordsByPage_call(page, bossSenseWordsVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBossSenseWordsByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo;
      public getBossSenseWordsByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.bossSenseWordsVo = bossSenseWordsVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBossSenseWordsByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBossSenseWordsByPage_args args = new getBossSenseWordsByPage_args();
        args.setPage(page);
        args.setBossSenseWordsVo(bossSenseWordsVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.BossSenseWordsPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBossSenseWordsByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addBossSenseWords", new addBossSenseWords());
      processMap.put("deleteBossSenseWords", new deleteBossSenseWords());
      processMap.put("updateBossSenseWords", new updateBossSenseWords());
      processMap.put("getBossSenseWords", new getBossSenseWords());
      processMap.put("getBossSenseWordsByPage", new getBossSenseWordsByPage());
      return processMap;
    }

    public static class addBossSenseWords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addBossSenseWords_args> {
      public addBossSenseWords() {
        super("addBossSenseWords");
      }

      public addBossSenseWords_args getEmptyArgsInstance() {
        return new addBossSenseWords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addBossSenseWords_result getResult(I iface, addBossSenseWords_args args) throws org.apache.thrift.TException {
        addBossSenseWords_result result = new addBossSenseWords_result();
        result.success = iface.addBossSenseWords(args.originVo, args.bossSenseWordsVo);
        return result;
      }
    }

    public static class deleteBossSenseWords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteBossSenseWords_args> {
      public deleteBossSenseWords() {
        super("deleteBossSenseWords");
      }

      public deleteBossSenseWords_args getEmptyArgsInstance() {
        return new deleteBossSenseWords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteBossSenseWords_result getResult(I iface, deleteBossSenseWords_args args) throws org.apache.thrift.TException {
        deleteBossSenseWords_result result = new deleteBossSenseWords_result();
        result.success = iface.deleteBossSenseWords(args.originVo, args.bossSenseWordsVo);
        return result;
      }
    }

    public static class updateBossSenseWords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateBossSenseWords_args> {
      public updateBossSenseWords() {
        super("updateBossSenseWords");
      }

      public updateBossSenseWords_args getEmptyArgsInstance() {
        return new updateBossSenseWords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateBossSenseWords_result getResult(I iface, updateBossSenseWords_args args) throws org.apache.thrift.TException {
        updateBossSenseWords_result result = new updateBossSenseWords_result();
        result.success = iface.updateBossSenseWords(args.originVo, args.bossSenseWordsVo);
        return result;
      }
    }

    public static class getBossSenseWords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBossSenseWords_args> {
      public getBossSenseWords() {
        super("getBossSenseWords");
      }

      public getBossSenseWords_args getEmptyArgsInstance() {
        return new getBossSenseWords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBossSenseWords_result getResult(I iface, getBossSenseWords_args args) throws org.apache.thrift.TException {
        getBossSenseWords_result result = new getBossSenseWords_result();
        result.success = iface.getBossSenseWords(args.bossSenseWordsVo);
        return result;
      }
    }

    public static class getBossSenseWordsByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBossSenseWordsByPage_args> {
      public getBossSenseWordsByPage() {
        super("getBossSenseWordsByPage");
      }

      public getBossSenseWordsByPage_args getEmptyArgsInstance() {
        return new getBossSenseWordsByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBossSenseWordsByPage_result getResult(I iface, getBossSenseWordsByPage_args args) throws org.apache.thrift.TException {
        getBossSenseWordsByPage_result result = new getBossSenseWordsByPage_result();
        result.success = iface.getBossSenseWordsByPage(args.page, args.bossSenseWordsVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addBossSenseWords", new addBossSenseWords());
      processMap.put("deleteBossSenseWords", new deleteBossSenseWords());
      processMap.put("updateBossSenseWords", new updateBossSenseWords());
      processMap.put("getBossSenseWords", new getBossSenseWords());
      processMap.put("getBossSenseWordsByPage", new getBossSenseWordsByPage());
      return processMap;
    }

    public static class addBossSenseWords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addBossSenseWords_args, com.froad.thrift.vo.AddResultVo> {
      public addBossSenseWords() {
        super("addBossSenseWords");
      }

      public addBossSenseWords_args getEmptyArgsInstance() {
        return new addBossSenseWords_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.AddResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.AddResultVo>() { 
          public void onComplete(com.froad.thrift.vo.AddResultVo o) {
            addBossSenseWords_result result = new addBossSenseWords_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addBossSenseWords_result result = new addBossSenseWords_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addBossSenseWords_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.AddResultVo> resultHandler) throws TException {
        iface.addBossSenseWords(args.originVo, args.bossSenseWordsVo,resultHandler);
      }
    }

    public static class deleteBossSenseWords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteBossSenseWords_args, com.froad.thrift.vo.ResultVo> {
      public deleteBossSenseWords() {
        super("deleteBossSenseWords");
      }

      public deleteBossSenseWords_args getEmptyArgsInstance() {
        return new deleteBossSenseWords_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteBossSenseWords_result result = new deleteBossSenseWords_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteBossSenseWords_result result = new deleteBossSenseWords_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteBossSenseWords_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteBossSenseWords(args.originVo, args.bossSenseWordsVo,resultHandler);
      }
    }

    public static class updateBossSenseWords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateBossSenseWords_args, com.froad.thrift.vo.ResultVo> {
      public updateBossSenseWords() {
        super("updateBossSenseWords");
      }

      public updateBossSenseWords_args getEmptyArgsInstance() {
        return new updateBossSenseWords_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateBossSenseWords_result result = new updateBossSenseWords_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateBossSenseWords_result result = new updateBossSenseWords_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateBossSenseWords_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateBossSenseWords(args.originVo, args.bossSenseWordsVo,resultHandler);
      }
    }

    public static class getBossSenseWords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBossSenseWords_args, List<com.froad.thrift.vo.BossSenseWordsVo>> {
      public getBossSenseWords() {
        super("getBossSenseWords");
      }

      public getBossSenseWords_args getEmptyArgsInstance() {
        return new getBossSenseWords_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.BossSenseWordsVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.BossSenseWordsVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.BossSenseWordsVo> o) {
            getBossSenseWords_result result = new getBossSenseWords_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBossSenseWords_result result = new getBossSenseWords_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBossSenseWords_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.BossSenseWordsVo>> resultHandler) throws TException {
        iface.getBossSenseWords(args.bossSenseWordsVo,resultHandler);
      }
    }

    public static class getBossSenseWordsByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBossSenseWordsByPage_args, com.froad.thrift.vo.BossSenseWordsPageVoRes> {
      public getBossSenseWordsByPage() {
        super("getBossSenseWordsByPage");
      }

      public getBossSenseWordsByPage_args getEmptyArgsInstance() {
        return new getBossSenseWordsByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.BossSenseWordsPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.BossSenseWordsPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.BossSenseWordsPageVoRes o) {
            getBossSenseWordsByPage_result result = new getBossSenseWordsByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBossSenseWordsByPage_result result = new getBossSenseWordsByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBossSenseWordsByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.BossSenseWordsPageVoRes> resultHandler) throws TException {
        iface.getBossSenseWordsByPage(args.page, args.bossSenseWordsVo,resultHandler);
      }
    }

  }

  public static class addBossSenseWords_args implements org.apache.thrift.TBase<addBossSenseWords_args, addBossSenseWords_args._Fields>, java.io.Serializable, Cloneable, Comparable<addBossSenseWords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBossSenseWords_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BOSS_SENSE_WORDS_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bossSenseWordsVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBossSenseWords_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBossSenseWords_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BOSS_SENSE_WORDS_VO((short)2, "bossSenseWordsVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BOSS_SENSE_WORDS_VO
            return BOSS_SENSE_WORDS_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BOSS_SENSE_WORDS_VO, new org.apache.thrift.meta_data.FieldMetaData("bossSenseWordsVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BossSenseWordsVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBossSenseWords_args.class, metaDataMap);
    }

    public addBossSenseWords_args() {
    }

    public addBossSenseWords_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo)
    {
      this();
      this.originVo = originVo;
      this.bossSenseWordsVo = bossSenseWordsVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBossSenseWords_args(addBossSenseWords_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBossSenseWordsVo()) {
        this.bossSenseWordsVo = new com.froad.thrift.vo.BossSenseWordsVo(other.bossSenseWordsVo);
      }
    }

    public addBossSenseWords_args deepCopy() {
      return new addBossSenseWords_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bossSenseWordsVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addBossSenseWords_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BossSenseWordsVo getBossSenseWordsVo() {
      return this.bossSenseWordsVo;
    }

    public addBossSenseWords_args setBossSenseWordsVo(com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) {
      this.bossSenseWordsVo = bossSenseWordsVo;
      return this;
    }

    public void unsetBossSenseWordsVo() {
      this.bossSenseWordsVo = null;
    }

    /** Returns true if field bossSenseWordsVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBossSenseWordsVo() {
      return this.bossSenseWordsVo != null;
    }

    public void setBossSenseWordsVoIsSet(boolean value) {
      if (!value) {
        this.bossSenseWordsVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BOSS_SENSE_WORDS_VO:
        if (value == null) {
          unsetBossSenseWordsVo();
        } else {
          setBossSenseWordsVo((com.froad.thrift.vo.BossSenseWordsVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BOSS_SENSE_WORDS_VO:
        return getBossSenseWordsVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BOSS_SENSE_WORDS_VO:
        return isSetBossSenseWordsVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBossSenseWords_args)
        return this.equals((addBossSenseWords_args)that);
      return false;
    }

    public boolean equals(addBossSenseWords_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bossSenseWordsVo = true && this.isSetBossSenseWordsVo();
      boolean that_present_bossSenseWordsVo = true && that.isSetBossSenseWordsVo();
      if (this_present_bossSenseWordsVo || that_present_bossSenseWordsVo) {
        if (!(this_present_bossSenseWordsVo && that_present_bossSenseWordsVo))
          return false;
        if (!this.bossSenseWordsVo.equals(that.bossSenseWordsVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bossSenseWordsVo = true && (isSetBossSenseWordsVo());
      list.add(present_bossSenseWordsVo);
      if (present_bossSenseWordsVo)
        list.add(bossSenseWordsVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBossSenseWords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBossSenseWordsVo()).compareTo(other.isSetBossSenseWordsVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBossSenseWordsVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bossSenseWordsVo, other.bossSenseWordsVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBossSenseWords_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bossSenseWordsVo:");
      if (this.bossSenseWordsVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bossSenseWordsVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bossSenseWordsVo != null) {
        bossSenseWordsVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBossSenseWords_argsStandardSchemeFactory implements SchemeFactory {
      public addBossSenseWords_argsStandardScheme getScheme() {
        return new addBossSenseWords_argsStandardScheme();
      }
    }

    private static class addBossSenseWords_argsStandardScheme extends StandardScheme<addBossSenseWords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBossSenseWords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOSS_SENSE_WORDS_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bossSenseWordsVo = new com.froad.thrift.vo.BossSenseWordsVo();
                struct.bossSenseWordsVo.read(iprot);
                struct.setBossSenseWordsVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBossSenseWords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bossSenseWordsVo != null) {
          oprot.writeFieldBegin(BOSS_SENSE_WORDS_VO_FIELD_DESC);
          struct.bossSenseWordsVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBossSenseWords_argsTupleSchemeFactory implements SchemeFactory {
      public addBossSenseWords_argsTupleScheme getScheme() {
        return new addBossSenseWords_argsTupleScheme();
      }
    }

    private static class addBossSenseWords_argsTupleScheme extends TupleScheme<addBossSenseWords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBossSenseWords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBossSenseWordsVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBossSenseWordsVo()) {
          struct.bossSenseWordsVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBossSenseWords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bossSenseWordsVo = new com.froad.thrift.vo.BossSenseWordsVo();
          struct.bossSenseWordsVo.read(iprot);
          struct.setBossSenseWordsVoIsSet(true);
        }
      }
    }

  }

  public static class addBossSenseWords_result implements org.apache.thrift.TBase<addBossSenseWords_result, addBossSenseWords_result._Fields>, java.io.Serializable, Cloneable, Comparable<addBossSenseWords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addBossSenseWords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addBossSenseWords_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addBossSenseWords_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.AddResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.AddResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addBossSenseWords_result.class, metaDataMap);
    }

    public addBossSenseWords_result() {
    }

    public addBossSenseWords_result(
      com.froad.thrift.vo.AddResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBossSenseWords_result(addBossSenseWords_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.AddResultVo(other.success);
      }
    }

    public addBossSenseWords_result deepCopy() {
      return new addBossSenseWords_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.AddResultVo getSuccess() {
      return this.success;
    }

    public addBossSenseWords_result setSuccess(com.froad.thrift.vo.AddResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.AddResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBossSenseWords_result)
        return this.equals((addBossSenseWords_result)that);
      return false;
    }

    public boolean equals(addBossSenseWords_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addBossSenseWords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addBossSenseWords_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addBossSenseWords_resultStandardSchemeFactory implements SchemeFactory {
      public addBossSenseWords_resultStandardScheme getScheme() {
        return new addBossSenseWords_resultStandardScheme();
      }
    }

    private static class addBossSenseWords_resultStandardScheme extends StandardScheme<addBossSenseWords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addBossSenseWords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.AddResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addBossSenseWords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addBossSenseWords_resultTupleSchemeFactory implements SchemeFactory {
      public addBossSenseWords_resultTupleScheme getScheme() {
        return new addBossSenseWords_resultTupleScheme();
      }
    }

    private static class addBossSenseWords_resultTupleScheme extends TupleScheme<addBossSenseWords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addBossSenseWords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addBossSenseWords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.AddResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteBossSenseWords_args implements org.apache.thrift.TBase<deleteBossSenseWords_args, deleteBossSenseWords_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBossSenseWords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBossSenseWords_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BOSS_SENSE_WORDS_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bossSenseWordsVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBossSenseWords_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBossSenseWords_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BOSS_SENSE_WORDS_VO((short)2, "bossSenseWordsVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BOSS_SENSE_WORDS_VO
            return BOSS_SENSE_WORDS_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BOSS_SENSE_WORDS_VO, new org.apache.thrift.meta_data.FieldMetaData("bossSenseWordsVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BossSenseWordsVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBossSenseWords_args.class, metaDataMap);
    }

    public deleteBossSenseWords_args() {
    }

    public deleteBossSenseWords_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo)
    {
      this();
      this.originVo = originVo;
      this.bossSenseWordsVo = bossSenseWordsVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBossSenseWords_args(deleteBossSenseWords_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBossSenseWordsVo()) {
        this.bossSenseWordsVo = new com.froad.thrift.vo.BossSenseWordsVo(other.bossSenseWordsVo);
      }
    }

    public deleteBossSenseWords_args deepCopy() {
      return new deleteBossSenseWords_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bossSenseWordsVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteBossSenseWords_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BossSenseWordsVo getBossSenseWordsVo() {
      return this.bossSenseWordsVo;
    }

    public deleteBossSenseWords_args setBossSenseWordsVo(com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) {
      this.bossSenseWordsVo = bossSenseWordsVo;
      return this;
    }

    public void unsetBossSenseWordsVo() {
      this.bossSenseWordsVo = null;
    }

    /** Returns true if field bossSenseWordsVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBossSenseWordsVo() {
      return this.bossSenseWordsVo != null;
    }

    public void setBossSenseWordsVoIsSet(boolean value) {
      if (!value) {
        this.bossSenseWordsVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BOSS_SENSE_WORDS_VO:
        if (value == null) {
          unsetBossSenseWordsVo();
        } else {
          setBossSenseWordsVo((com.froad.thrift.vo.BossSenseWordsVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BOSS_SENSE_WORDS_VO:
        return getBossSenseWordsVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BOSS_SENSE_WORDS_VO:
        return isSetBossSenseWordsVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBossSenseWords_args)
        return this.equals((deleteBossSenseWords_args)that);
      return false;
    }

    public boolean equals(deleteBossSenseWords_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bossSenseWordsVo = true && this.isSetBossSenseWordsVo();
      boolean that_present_bossSenseWordsVo = true && that.isSetBossSenseWordsVo();
      if (this_present_bossSenseWordsVo || that_present_bossSenseWordsVo) {
        if (!(this_present_bossSenseWordsVo && that_present_bossSenseWordsVo))
          return false;
        if (!this.bossSenseWordsVo.equals(that.bossSenseWordsVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bossSenseWordsVo = true && (isSetBossSenseWordsVo());
      list.add(present_bossSenseWordsVo);
      if (present_bossSenseWordsVo)
        list.add(bossSenseWordsVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBossSenseWords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBossSenseWordsVo()).compareTo(other.isSetBossSenseWordsVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBossSenseWordsVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bossSenseWordsVo, other.bossSenseWordsVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBossSenseWords_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bossSenseWordsVo:");
      if (this.bossSenseWordsVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bossSenseWordsVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bossSenseWordsVo != null) {
        bossSenseWordsVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBossSenseWords_argsStandardSchemeFactory implements SchemeFactory {
      public deleteBossSenseWords_argsStandardScheme getScheme() {
        return new deleteBossSenseWords_argsStandardScheme();
      }
    }

    private static class deleteBossSenseWords_argsStandardScheme extends StandardScheme<deleteBossSenseWords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBossSenseWords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOSS_SENSE_WORDS_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bossSenseWordsVo = new com.froad.thrift.vo.BossSenseWordsVo();
                struct.bossSenseWordsVo.read(iprot);
                struct.setBossSenseWordsVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBossSenseWords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bossSenseWordsVo != null) {
          oprot.writeFieldBegin(BOSS_SENSE_WORDS_VO_FIELD_DESC);
          struct.bossSenseWordsVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBossSenseWords_argsTupleSchemeFactory implements SchemeFactory {
      public deleteBossSenseWords_argsTupleScheme getScheme() {
        return new deleteBossSenseWords_argsTupleScheme();
      }
    }

    private static class deleteBossSenseWords_argsTupleScheme extends TupleScheme<deleteBossSenseWords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBossSenseWords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBossSenseWordsVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBossSenseWordsVo()) {
          struct.bossSenseWordsVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBossSenseWords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bossSenseWordsVo = new com.froad.thrift.vo.BossSenseWordsVo();
          struct.bossSenseWordsVo.read(iprot);
          struct.setBossSenseWordsVoIsSet(true);
        }
      }
    }

  }

  public static class deleteBossSenseWords_result implements org.apache.thrift.TBase<deleteBossSenseWords_result, deleteBossSenseWords_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteBossSenseWords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteBossSenseWords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteBossSenseWords_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteBossSenseWords_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteBossSenseWords_result.class, metaDataMap);
    }

    public deleteBossSenseWords_result() {
    }

    public deleteBossSenseWords_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteBossSenseWords_result(deleteBossSenseWords_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteBossSenseWords_result deepCopy() {
      return new deleteBossSenseWords_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteBossSenseWords_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteBossSenseWords_result)
        return this.equals((deleteBossSenseWords_result)that);
      return false;
    }

    public boolean equals(deleteBossSenseWords_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteBossSenseWords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteBossSenseWords_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteBossSenseWords_resultStandardSchemeFactory implements SchemeFactory {
      public deleteBossSenseWords_resultStandardScheme getScheme() {
        return new deleteBossSenseWords_resultStandardScheme();
      }
    }

    private static class deleteBossSenseWords_resultStandardScheme extends StandardScheme<deleteBossSenseWords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteBossSenseWords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteBossSenseWords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteBossSenseWords_resultTupleSchemeFactory implements SchemeFactory {
      public deleteBossSenseWords_resultTupleScheme getScheme() {
        return new deleteBossSenseWords_resultTupleScheme();
      }
    }

    private static class deleteBossSenseWords_resultTupleScheme extends TupleScheme<deleteBossSenseWords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteBossSenseWords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteBossSenseWords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateBossSenseWords_args implements org.apache.thrift.TBase<updateBossSenseWords_args, updateBossSenseWords_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateBossSenseWords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBossSenseWords_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BOSS_SENSE_WORDS_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bossSenseWordsVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBossSenseWords_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBossSenseWords_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      BOSS_SENSE_WORDS_VO((short)2, "bossSenseWordsVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // BOSS_SENSE_WORDS_VO
            return BOSS_SENSE_WORDS_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.BOSS_SENSE_WORDS_VO, new org.apache.thrift.meta_data.FieldMetaData("bossSenseWordsVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BossSenseWordsVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBossSenseWords_args.class, metaDataMap);
    }

    public updateBossSenseWords_args() {
    }

    public updateBossSenseWords_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo)
    {
      this();
      this.originVo = originVo;
      this.bossSenseWordsVo = bossSenseWordsVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBossSenseWords_args(updateBossSenseWords_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetBossSenseWordsVo()) {
        this.bossSenseWordsVo = new com.froad.thrift.vo.BossSenseWordsVo(other.bossSenseWordsVo);
      }
    }

    public updateBossSenseWords_args deepCopy() {
      return new updateBossSenseWords_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.bossSenseWordsVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateBossSenseWords_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.BossSenseWordsVo getBossSenseWordsVo() {
      return this.bossSenseWordsVo;
    }

    public updateBossSenseWords_args setBossSenseWordsVo(com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) {
      this.bossSenseWordsVo = bossSenseWordsVo;
      return this;
    }

    public void unsetBossSenseWordsVo() {
      this.bossSenseWordsVo = null;
    }

    /** Returns true if field bossSenseWordsVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBossSenseWordsVo() {
      return this.bossSenseWordsVo != null;
    }

    public void setBossSenseWordsVoIsSet(boolean value) {
      if (!value) {
        this.bossSenseWordsVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case BOSS_SENSE_WORDS_VO:
        if (value == null) {
          unsetBossSenseWordsVo();
        } else {
          setBossSenseWordsVo((com.froad.thrift.vo.BossSenseWordsVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case BOSS_SENSE_WORDS_VO:
        return getBossSenseWordsVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case BOSS_SENSE_WORDS_VO:
        return isSetBossSenseWordsVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBossSenseWords_args)
        return this.equals((updateBossSenseWords_args)that);
      return false;
    }

    public boolean equals(updateBossSenseWords_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_bossSenseWordsVo = true && this.isSetBossSenseWordsVo();
      boolean that_present_bossSenseWordsVo = true && that.isSetBossSenseWordsVo();
      if (this_present_bossSenseWordsVo || that_present_bossSenseWordsVo) {
        if (!(this_present_bossSenseWordsVo && that_present_bossSenseWordsVo))
          return false;
        if (!this.bossSenseWordsVo.equals(that.bossSenseWordsVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_bossSenseWordsVo = true && (isSetBossSenseWordsVo());
      list.add(present_bossSenseWordsVo);
      if (present_bossSenseWordsVo)
        list.add(bossSenseWordsVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBossSenseWords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBossSenseWordsVo()).compareTo(other.isSetBossSenseWordsVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBossSenseWordsVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bossSenseWordsVo, other.bossSenseWordsVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBossSenseWords_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bossSenseWordsVo:");
      if (this.bossSenseWordsVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bossSenseWordsVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (bossSenseWordsVo != null) {
        bossSenseWordsVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBossSenseWords_argsStandardSchemeFactory implements SchemeFactory {
      public updateBossSenseWords_argsStandardScheme getScheme() {
        return new updateBossSenseWords_argsStandardScheme();
      }
    }

    private static class updateBossSenseWords_argsStandardScheme extends StandardScheme<updateBossSenseWords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBossSenseWords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOSS_SENSE_WORDS_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bossSenseWordsVo = new com.froad.thrift.vo.BossSenseWordsVo();
                struct.bossSenseWordsVo.read(iprot);
                struct.setBossSenseWordsVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBossSenseWords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bossSenseWordsVo != null) {
          oprot.writeFieldBegin(BOSS_SENSE_WORDS_VO_FIELD_DESC);
          struct.bossSenseWordsVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBossSenseWords_argsTupleSchemeFactory implements SchemeFactory {
      public updateBossSenseWords_argsTupleScheme getScheme() {
        return new updateBossSenseWords_argsTupleScheme();
      }
    }

    private static class updateBossSenseWords_argsTupleScheme extends TupleScheme<updateBossSenseWords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBossSenseWords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetBossSenseWordsVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetBossSenseWordsVo()) {
          struct.bossSenseWordsVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBossSenseWords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bossSenseWordsVo = new com.froad.thrift.vo.BossSenseWordsVo();
          struct.bossSenseWordsVo.read(iprot);
          struct.setBossSenseWordsVoIsSet(true);
        }
      }
    }

  }

  public static class updateBossSenseWords_result implements org.apache.thrift.TBase<updateBossSenseWords_result, updateBossSenseWords_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateBossSenseWords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateBossSenseWords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateBossSenseWords_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateBossSenseWords_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateBossSenseWords_result.class, metaDataMap);
    }

    public updateBossSenseWords_result() {
    }

    public updateBossSenseWords_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBossSenseWords_result(updateBossSenseWords_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateBossSenseWords_result deepCopy() {
      return new updateBossSenseWords_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateBossSenseWords_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBossSenseWords_result)
        return this.equals((updateBossSenseWords_result)that);
      return false;
    }

    public boolean equals(updateBossSenseWords_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateBossSenseWords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateBossSenseWords_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateBossSenseWords_resultStandardSchemeFactory implements SchemeFactory {
      public updateBossSenseWords_resultStandardScheme getScheme() {
        return new updateBossSenseWords_resultStandardScheme();
      }
    }

    private static class updateBossSenseWords_resultStandardScheme extends StandardScheme<updateBossSenseWords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateBossSenseWords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateBossSenseWords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateBossSenseWords_resultTupleSchemeFactory implements SchemeFactory {
      public updateBossSenseWords_resultTupleScheme getScheme() {
        return new updateBossSenseWords_resultTupleScheme();
      }
    }

    private static class updateBossSenseWords_resultTupleScheme extends TupleScheme<updateBossSenseWords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateBossSenseWords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateBossSenseWords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBossSenseWords_args implements org.apache.thrift.TBase<getBossSenseWords_args, getBossSenseWords_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBossSenseWords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBossSenseWords_args");

    private static final org.apache.thrift.protocol.TField BOSS_SENSE_WORDS_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bossSenseWordsVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBossSenseWords_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBossSenseWords_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOSS_SENSE_WORDS_VO((short)1, "bossSenseWordsVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOSS_SENSE_WORDS_VO
            return BOSS_SENSE_WORDS_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOSS_SENSE_WORDS_VO, new org.apache.thrift.meta_data.FieldMetaData("bossSenseWordsVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BossSenseWordsVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBossSenseWords_args.class, metaDataMap);
    }

    public getBossSenseWords_args() {
    }

    public getBossSenseWords_args(
      com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo)
    {
      this();
      this.bossSenseWordsVo = bossSenseWordsVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBossSenseWords_args(getBossSenseWords_args other) {
      if (other.isSetBossSenseWordsVo()) {
        this.bossSenseWordsVo = new com.froad.thrift.vo.BossSenseWordsVo(other.bossSenseWordsVo);
      }
    }

    public getBossSenseWords_args deepCopy() {
      return new getBossSenseWords_args(this);
    }

    @Override
    public void clear() {
      this.bossSenseWordsVo = null;
    }

    public com.froad.thrift.vo.BossSenseWordsVo getBossSenseWordsVo() {
      return this.bossSenseWordsVo;
    }

    public getBossSenseWords_args setBossSenseWordsVo(com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) {
      this.bossSenseWordsVo = bossSenseWordsVo;
      return this;
    }

    public void unsetBossSenseWordsVo() {
      this.bossSenseWordsVo = null;
    }

    /** Returns true if field bossSenseWordsVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBossSenseWordsVo() {
      return this.bossSenseWordsVo != null;
    }

    public void setBossSenseWordsVoIsSet(boolean value) {
      if (!value) {
        this.bossSenseWordsVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOSS_SENSE_WORDS_VO:
        if (value == null) {
          unsetBossSenseWordsVo();
        } else {
          setBossSenseWordsVo((com.froad.thrift.vo.BossSenseWordsVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOSS_SENSE_WORDS_VO:
        return getBossSenseWordsVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOSS_SENSE_WORDS_VO:
        return isSetBossSenseWordsVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBossSenseWords_args)
        return this.equals((getBossSenseWords_args)that);
      return false;
    }

    public boolean equals(getBossSenseWords_args that) {
      if (that == null)
        return false;

      boolean this_present_bossSenseWordsVo = true && this.isSetBossSenseWordsVo();
      boolean that_present_bossSenseWordsVo = true && that.isSetBossSenseWordsVo();
      if (this_present_bossSenseWordsVo || that_present_bossSenseWordsVo) {
        if (!(this_present_bossSenseWordsVo && that_present_bossSenseWordsVo))
          return false;
        if (!this.bossSenseWordsVo.equals(that.bossSenseWordsVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bossSenseWordsVo = true && (isSetBossSenseWordsVo());
      list.add(present_bossSenseWordsVo);
      if (present_bossSenseWordsVo)
        list.add(bossSenseWordsVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBossSenseWords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBossSenseWordsVo()).compareTo(other.isSetBossSenseWordsVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBossSenseWordsVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bossSenseWordsVo, other.bossSenseWordsVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBossSenseWords_args(");
      boolean first = true;

      sb.append("bossSenseWordsVo:");
      if (this.bossSenseWordsVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bossSenseWordsVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bossSenseWordsVo != null) {
        bossSenseWordsVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBossSenseWords_argsStandardSchemeFactory implements SchemeFactory {
      public getBossSenseWords_argsStandardScheme getScheme() {
        return new getBossSenseWords_argsStandardScheme();
      }
    }

    private static class getBossSenseWords_argsStandardScheme extends StandardScheme<getBossSenseWords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBossSenseWords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOSS_SENSE_WORDS_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bossSenseWordsVo = new com.froad.thrift.vo.BossSenseWordsVo();
                struct.bossSenseWordsVo.read(iprot);
                struct.setBossSenseWordsVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBossSenseWords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bossSenseWordsVo != null) {
          oprot.writeFieldBegin(BOSS_SENSE_WORDS_VO_FIELD_DESC);
          struct.bossSenseWordsVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBossSenseWords_argsTupleSchemeFactory implements SchemeFactory {
      public getBossSenseWords_argsTupleScheme getScheme() {
        return new getBossSenseWords_argsTupleScheme();
      }
    }

    private static class getBossSenseWords_argsTupleScheme extends TupleScheme<getBossSenseWords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBossSenseWords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBossSenseWordsVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBossSenseWordsVo()) {
          struct.bossSenseWordsVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBossSenseWords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bossSenseWordsVo = new com.froad.thrift.vo.BossSenseWordsVo();
          struct.bossSenseWordsVo.read(iprot);
          struct.setBossSenseWordsVoIsSet(true);
        }
      }
    }

  }

  public static class getBossSenseWords_result implements org.apache.thrift.TBase<getBossSenseWords_result, getBossSenseWords_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBossSenseWords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBossSenseWords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBossSenseWords_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBossSenseWords_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.BossSenseWordsVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BossSenseWordsVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBossSenseWords_result.class, metaDataMap);
    }

    public getBossSenseWords_result() {
    }

    public getBossSenseWords_result(
      List<com.froad.thrift.vo.BossSenseWordsVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBossSenseWords_result(getBossSenseWords_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.BossSenseWordsVo> __this__success = new ArrayList<com.froad.thrift.vo.BossSenseWordsVo>(other.success.size());
        for (com.froad.thrift.vo.BossSenseWordsVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.BossSenseWordsVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getBossSenseWords_result deepCopy() {
      return new getBossSenseWords_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.BossSenseWordsVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.BossSenseWordsVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.BossSenseWordsVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.BossSenseWordsVo> getSuccess() {
      return this.success;
    }

    public getBossSenseWords_result setSuccess(List<com.froad.thrift.vo.BossSenseWordsVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.BossSenseWordsVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBossSenseWords_result)
        return this.equals((getBossSenseWords_result)that);
      return false;
    }

    public boolean equals(getBossSenseWords_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBossSenseWords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBossSenseWords_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBossSenseWords_resultStandardSchemeFactory implements SchemeFactory {
      public getBossSenseWords_resultStandardScheme getScheme() {
        return new getBossSenseWords_resultStandardScheme();
      }
    }

    private static class getBossSenseWords_resultStandardScheme extends StandardScheme<getBossSenseWords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBossSenseWords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list122 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.BossSenseWordsVo>(_list122.size);
                  com.froad.thrift.vo.BossSenseWordsVo _elem123;
                  for (int _i124 = 0; _i124 < _list122.size; ++_i124)
                  {
                    _elem123 = new com.froad.thrift.vo.BossSenseWordsVo();
                    _elem123.read(iprot);
                    struct.success.add(_elem123);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBossSenseWords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.BossSenseWordsVo _iter125 : struct.success)
            {
              _iter125.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBossSenseWords_resultTupleSchemeFactory implements SchemeFactory {
      public getBossSenseWords_resultTupleScheme getScheme() {
        return new getBossSenseWords_resultTupleScheme();
      }
    }

    private static class getBossSenseWords_resultTupleScheme extends TupleScheme<getBossSenseWords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBossSenseWords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.BossSenseWordsVo _iter126 : struct.success)
            {
              _iter126.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBossSenseWords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.BossSenseWordsVo>(_list127.size);
            com.froad.thrift.vo.BossSenseWordsVo _elem128;
            for (int _i129 = 0; _i129 < _list127.size; ++_i129)
            {
              _elem128 = new com.froad.thrift.vo.BossSenseWordsVo();
              _elem128.read(iprot);
              struct.success.add(_elem128);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBossSenseWordsByPage_args implements org.apache.thrift.TBase<getBossSenseWordsByPage_args, getBossSenseWordsByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBossSenseWordsByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBossSenseWordsByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BOSS_SENSE_WORDS_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("bossSenseWordsVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBossSenseWordsByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBossSenseWordsByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      BOSS_SENSE_WORDS_VO((short)2, "bossSenseWordsVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // BOSS_SENSE_WORDS_VO
            return BOSS_SENSE_WORDS_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.BOSS_SENSE_WORDS_VO, new org.apache.thrift.meta_data.FieldMetaData("bossSenseWordsVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BossSenseWordsVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBossSenseWordsByPage_args.class, metaDataMap);
    }

    public getBossSenseWordsByPage_args() {
    }

    public getBossSenseWordsByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo)
    {
      this();
      this.page = page;
      this.bossSenseWordsVo = bossSenseWordsVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBossSenseWordsByPage_args(getBossSenseWordsByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetBossSenseWordsVo()) {
        this.bossSenseWordsVo = new com.froad.thrift.vo.BossSenseWordsVo(other.bossSenseWordsVo);
      }
    }

    public getBossSenseWordsByPage_args deepCopy() {
      return new getBossSenseWordsByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.bossSenseWordsVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getBossSenseWordsByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.BossSenseWordsVo getBossSenseWordsVo() {
      return this.bossSenseWordsVo;
    }

    public getBossSenseWordsByPage_args setBossSenseWordsVo(com.froad.thrift.vo.BossSenseWordsVo bossSenseWordsVo) {
      this.bossSenseWordsVo = bossSenseWordsVo;
      return this;
    }

    public void unsetBossSenseWordsVo() {
      this.bossSenseWordsVo = null;
    }

    /** Returns true if field bossSenseWordsVo is set (has been assigned a value) and false otherwise */
    public boolean isSetBossSenseWordsVo() {
      return this.bossSenseWordsVo != null;
    }

    public void setBossSenseWordsVoIsSet(boolean value) {
      if (!value) {
        this.bossSenseWordsVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case BOSS_SENSE_WORDS_VO:
        if (value == null) {
          unsetBossSenseWordsVo();
        } else {
          setBossSenseWordsVo((com.froad.thrift.vo.BossSenseWordsVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case BOSS_SENSE_WORDS_VO:
        return getBossSenseWordsVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case BOSS_SENSE_WORDS_VO:
        return isSetBossSenseWordsVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBossSenseWordsByPage_args)
        return this.equals((getBossSenseWordsByPage_args)that);
      return false;
    }

    public boolean equals(getBossSenseWordsByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_bossSenseWordsVo = true && this.isSetBossSenseWordsVo();
      boolean that_present_bossSenseWordsVo = true && that.isSetBossSenseWordsVo();
      if (this_present_bossSenseWordsVo || that_present_bossSenseWordsVo) {
        if (!(this_present_bossSenseWordsVo && that_present_bossSenseWordsVo))
          return false;
        if (!this.bossSenseWordsVo.equals(that.bossSenseWordsVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_bossSenseWordsVo = true && (isSetBossSenseWordsVo());
      list.add(present_bossSenseWordsVo);
      if (present_bossSenseWordsVo)
        list.add(bossSenseWordsVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBossSenseWordsByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBossSenseWordsVo()).compareTo(other.isSetBossSenseWordsVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBossSenseWordsVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bossSenseWordsVo, other.bossSenseWordsVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBossSenseWordsByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bossSenseWordsVo:");
      if (this.bossSenseWordsVo == null) {
        sb.append("null");
      } else {
        sb.append(this.bossSenseWordsVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (bossSenseWordsVo != null) {
        bossSenseWordsVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBossSenseWordsByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getBossSenseWordsByPage_argsStandardScheme getScheme() {
        return new getBossSenseWordsByPage_argsStandardScheme();
      }
    }

    private static class getBossSenseWordsByPage_argsStandardScheme extends StandardScheme<getBossSenseWordsByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBossSenseWordsByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOSS_SENSE_WORDS_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bossSenseWordsVo = new com.froad.thrift.vo.BossSenseWordsVo();
                struct.bossSenseWordsVo.read(iprot);
                struct.setBossSenseWordsVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBossSenseWordsByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bossSenseWordsVo != null) {
          oprot.writeFieldBegin(BOSS_SENSE_WORDS_VO_FIELD_DESC);
          struct.bossSenseWordsVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBossSenseWordsByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getBossSenseWordsByPage_argsTupleScheme getScheme() {
        return new getBossSenseWordsByPage_argsTupleScheme();
      }
    }

    private static class getBossSenseWordsByPage_argsTupleScheme extends TupleScheme<getBossSenseWordsByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBossSenseWordsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetBossSenseWordsVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetBossSenseWordsVo()) {
          struct.bossSenseWordsVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBossSenseWordsByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bossSenseWordsVo = new com.froad.thrift.vo.BossSenseWordsVo();
          struct.bossSenseWordsVo.read(iprot);
          struct.setBossSenseWordsVoIsSet(true);
        }
      }
    }

  }

  public static class getBossSenseWordsByPage_result implements org.apache.thrift.TBase<getBossSenseWordsByPage_result, getBossSenseWordsByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBossSenseWordsByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBossSenseWordsByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBossSenseWordsByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBossSenseWordsByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BossSenseWordsPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BossSenseWordsPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBossSenseWordsByPage_result.class, metaDataMap);
    }

    public getBossSenseWordsByPage_result() {
    }

    public getBossSenseWordsByPage_result(
      com.froad.thrift.vo.BossSenseWordsPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBossSenseWordsByPage_result(getBossSenseWordsByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.BossSenseWordsPageVoRes(other.success);
      }
    }

    public getBossSenseWordsByPage_result deepCopy() {
      return new getBossSenseWordsByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.BossSenseWordsPageVoRes getSuccess() {
      return this.success;
    }

    public getBossSenseWordsByPage_result setSuccess(com.froad.thrift.vo.BossSenseWordsPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.BossSenseWordsPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBossSenseWordsByPage_result)
        return this.equals((getBossSenseWordsByPage_result)that);
      return false;
    }

    public boolean equals(getBossSenseWordsByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBossSenseWordsByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBossSenseWordsByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBossSenseWordsByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getBossSenseWordsByPage_resultStandardScheme getScheme() {
        return new getBossSenseWordsByPage_resultStandardScheme();
      }
    }

    private static class getBossSenseWordsByPage_resultStandardScheme extends StandardScheme<getBossSenseWordsByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBossSenseWordsByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.BossSenseWordsPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBossSenseWordsByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBossSenseWordsByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getBossSenseWordsByPage_resultTupleScheme getScheme() {
        return new getBossSenseWordsByPage_resultTupleScheme();
      }
    }

    private static class getBossSenseWordsByPage_resultTupleScheme extends TupleScheme<getBossSenseWordsByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBossSenseWordsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBossSenseWordsByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.BossSenseWordsPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
