/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 商户销售月底统计
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class MerchantMonthCountVo implements org.apache.thrift.TBase<MerchantMonthCountVo, MerchantMonthCountVo._Fields>, java.io.Serializable, Cloneable, Comparable<MerchantMonthCountVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MerchantMonthCountVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("month", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MONTH_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("monthMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField GROUP_ORDER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("groupOrderCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SELL_ORDER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("sellOrderCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField FACE_ORDER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("faceOrderCount", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MAX_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCount", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField GROUP_ORDER_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("groupOrderMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField SELL_ORDER_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("sellOrderMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField FACE_ORDER_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("faceOrderMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField MAX_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("maxMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MerchantMonthCountVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MerchantMonthCountVoTupleSchemeFactory());
  }

  /**
   * 主键
   */
  public long id; // required
  /**
   * 客户端ID
   */
  public String clientId; // required
  /**
   * 商户ID
   */
  public String merchantId; // required
  /**
   * 年
   */
  public String year; // required
  /**
   * 月
   */
  public String month; // required
  /**
   * 月销售额
   */
  public double monthMoney; // required
  /**
   * 月团购订单数
   */
  public int groupOrderCount; // required
  /**
   * 月名优特惠订单数
   */
  public int sellOrderCount; // required
  /**
   * 月面对面订单数
   */
  public int faceOrderCount; // required
  /**
   * 商品ID
   */
  public String productId; // required
  /**
   * 最高月销售量
   */
  public int maxCount; // required
  /**
   * 月团购销售额
   */
  public double groupOrderMoney; // required
  /**
   * 月名优特惠销售额
   */
  public double sellOrderMoney; // required
  /**
   * 月面对面销售额
   */
  public double faceOrderMoney; // required
  /**
   * 商品名称
   */
  public String productName; // required
  /**
   * 最高月销售额
   */
  public double maxMoney; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键
     */
    ID((short)1, "id"),
    /**
     * 客户端ID
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 商户ID
     */
    MERCHANT_ID((short)3, "merchantId"),
    /**
     * 年
     */
    YEAR((short)4, "year"),
    /**
     * 月
     */
    MONTH((short)5, "month"),
    /**
     * 月销售额
     */
    MONTH_MONEY((short)6, "monthMoney"),
    /**
     * 月团购订单数
     */
    GROUP_ORDER_COUNT((short)7, "groupOrderCount"),
    /**
     * 月名优特惠订单数
     */
    SELL_ORDER_COUNT((short)8, "sellOrderCount"),
    /**
     * 月面对面订单数
     */
    FACE_ORDER_COUNT((short)9, "faceOrderCount"),
    /**
     * 商品ID
     */
    PRODUCT_ID((short)10, "productId"),
    /**
     * 最高月销售量
     */
    MAX_COUNT((short)11, "maxCount"),
    /**
     * 月团购销售额
     */
    GROUP_ORDER_MONEY((short)12, "groupOrderMoney"),
    /**
     * 月名优特惠销售额
     */
    SELL_ORDER_MONEY((short)13, "sellOrderMoney"),
    /**
     * 月面对面销售额
     */
    FACE_ORDER_MONEY((short)14, "faceOrderMoney"),
    /**
     * 商品名称
     */
    PRODUCT_NAME((short)15, "productName"),
    /**
     * 最高月销售额
     */
    MAX_MONEY((short)16, "maxMoney");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // MERCHANT_ID
          return MERCHANT_ID;
        case 4: // YEAR
          return YEAR;
        case 5: // MONTH
          return MONTH;
        case 6: // MONTH_MONEY
          return MONTH_MONEY;
        case 7: // GROUP_ORDER_COUNT
          return GROUP_ORDER_COUNT;
        case 8: // SELL_ORDER_COUNT
          return SELL_ORDER_COUNT;
        case 9: // FACE_ORDER_COUNT
          return FACE_ORDER_COUNT;
        case 10: // PRODUCT_ID
          return PRODUCT_ID;
        case 11: // MAX_COUNT
          return MAX_COUNT;
        case 12: // GROUP_ORDER_MONEY
          return GROUP_ORDER_MONEY;
        case 13: // SELL_ORDER_MONEY
          return SELL_ORDER_MONEY;
        case 14: // FACE_ORDER_MONEY
          return FACE_ORDER_MONEY;
        case 15: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 16: // MAX_MONEY
          return MAX_MONEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MONTHMONEY_ISSET_ID = 1;
  private static final int __GROUPORDERCOUNT_ISSET_ID = 2;
  private static final int __SELLORDERCOUNT_ISSET_ID = 3;
  private static final int __FACEORDERCOUNT_ISSET_ID = 4;
  private static final int __MAXCOUNT_ISSET_ID = 5;
  private static final int __GROUPORDERMONEY_ISSET_ID = 6;
  private static final int __SELLORDERMONEY_ISSET_ID = 7;
  private static final int __FACEORDERMONEY_ISSET_ID = 8;
  private static final int __MAXMONEY_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONTH, new org.apache.thrift.meta_data.FieldMetaData("month", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONTH_MONEY, new org.apache.thrift.meta_data.FieldMetaData("monthMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GROUP_ORDER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("groupOrderCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SELL_ORDER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("sellOrderCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FACE_ORDER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("faceOrderCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_ORDER_MONEY, new org.apache.thrift.meta_data.FieldMetaData("groupOrderMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELL_ORDER_MONEY, new org.apache.thrift.meta_data.FieldMetaData("sellOrderMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FACE_ORDER_MONEY, new org.apache.thrift.meta_data.FieldMetaData("faceOrderMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_MONEY, new org.apache.thrift.meta_data.FieldMetaData("maxMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MerchantMonthCountVo.class, metaDataMap);
  }

  public MerchantMonthCountVo() {
  }

  public MerchantMonthCountVo(
    long id,
    String clientId,
    String merchantId,
    String year,
    String month,
    double monthMoney,
    int groupOrderCount,
    int sellOrderCount,
    int faceOrderCount,
    String productId,
    int maxCount,
    double groupOrderMoney,
    double sellOrderMoney,
    double faceOrderMoney,
    String productName,
    double maxMoney)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.clientId = clientId;
    this.merchantId = merchantId;
    this.year = year;
    this.month = month;
    this.monthMoney = monthMoney;
    setMonthMoneyIsSet(true);
    this.groupOrderCount = groupOrderCount;
    setGroupOrderCountIsSet(true);
    this.sellOrderCount = sellOrderCount;
    setSellOrderCountIsSet(true);
    this.faceOrderCount = faceOrderCount;
    setFaceOrderCountIsSet(true);
    this.productId = productId;
    this.maxCount = maxCount;
    setMaxCountIsSet(true);
    this.groupOrderMoney = groupOrderMoney;
    setGroupOrderMoneyIsSet(true);
    this.sellOrderMoney = sellOrderMoney;
    setSellOrderMoneyIsSet(true);
    this.faceOrderMoney = faceOrderMoney;
    setFaceOrderMoneyIsSet(true);
    this.productName = productName;
    this.maxMoney = maxMoney;
    setMaxMoneyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MerchantMonthCountVo(MerchantMonthCountVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetMerchantId()) {
      this.merchantId = other.merchantId;
    }
    if (other.isSetYear()) {
      this.year = other.year;
    }
    if (other.isSetMonth()) {
      this.month = other.month;
    }
    this.monthMoney = other.monthMoney;
    this.groupOrderCount = other.groupOrderCount;
    this.sellOrderCount = other.sellOrderCount;
    this.faceOrderCount = other.faceOrderCount;
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    this.maxCount = other.maxCount;
    this.groupOrderMoney = other.groupOrderMoney;
    this.sellOrderMoney = other.sellOrderMoney;
    this.faceOrderMoney = other.faceOrderMoney;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.maxMoney = other.maxMoney;
  }

  public MerchantMonthCountVo deepCopy() {
    return new MerchantMonthCountVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientId = null;
    this.merchantId = null;
    this.year = null;
    this.month = null;
    setMonthMoneyIsSet(false);
    this.monthMoney = 0.0;
    setGroupOrderCountIsSet(false);
    this.groupOrderCount = 0;
    setSellOrderCountIsSet(false);
    this.sellOrderCount = 0;
    setFaceOrderCountIsSet(false);
    this.faceOrderCount = 0;
    this.productId = null;
    setMaxCountIsSet(false);
    this.maxCount = 0;
    setGroupOrderMoneyIsSet(false);
    this.groupOrderMoney = 0.0;
    setSellOrderMoneyIsSet(false);
    this.sellOrderMoney = 0.0;
    setFaceOrderMoneyIsSet(false);
    this.faceOrderMoney = 0.0;
    this.productName = null;
    setMaxMoneyIsSet(false);
    this.maxMoney = 0.0;
  }

  /**
   * 主键
   */
  public long getId() {
    return this.id;
  }

  /**
   * 主键
   */
  public MerchantMonthCountVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public MerchantMonthCountVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 商户ID
   */
  public String getMerchantId() {
    return this.merchantId;
  }

  /**
   * 商户ID
   */
  public MerchantMonthCountVo setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  public void unsetMerchantId() {
    this.merchantId = null;
  }

  /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
  public boolean isSetMerchantId() {
    return this.merchantId != null;
  }

  public void setMerchantIdIsSet(boolean value) {
    if (!value) {
      this.merchantId = null;
    }
  }

  /**
   * 年
   */
  public String getYear() {
    return this.year;
  }

  /**
   * 年
   */
  public MerchantMonthCountVo setYear(String year) {
    this.year = year;
    return this;
  }

  public void unsetYear() {
    this.year = null;
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean isSetYear() {
    return this.year != null;
  }

  public void setYearIsSet(boolean value) {
    if (!value) {
      this.year = null;
    }
  }

  /**
   * 月
   */
  public String getMonth() {
    return this.month;
  }

  /**
   * 月
   */
  public MerchantMonthCountVo setMonth(String month) {
    this.month = month;
    return this;
  }

  public void unsetMonth() {
    this.month = null;
  }

  /** Returns true if field month is set (has been assigned a value) and false otherwise */
  public boolean isSetMonth() {
    return this.month != null;
  }

  public void setMonthIsSet(boolean value) {
    if (!value) {
      this.month = null;
    }
  }

  /**
   * 月销售额
   */
  public double getMonthMoney() {
    return this.monthMoney;
  }

  /**
   * 月销售额
   */
  public MerchantMonthCountVo setMonthMoney(double monthMoney) {
    this.monthMoney = monthMoney;
    setMonthMoneyIsSet(true);
    return this;
  }

  public void unsetMonthMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHMONEY_ISSET_ID);
  }

  /** Returns true if field monthMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHMONEY_ISSET_ID);
  }

  public void setMonthMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHMONEY_ISSET_ID, value);
  }

  /**
   * 月团购订单数
   */
  public int getGroupOrderCount() {
    return this.groupOrderCount;
  }

  /**
   * 月团购订单数
   */
  public MerchantMonthCountVo setGroupOrderCount(int groupOrderCount) {
    this.groupOrderCount = groupOrderCount;
    setGroupOrderCountIsSet(true);
    return this;
  }

  public void unsetGroupOrderCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPORDERCOUNT_ISSET_ID);
  }

  /** Returns true if field groupOrderCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupOrderCount() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPORDERCOUNT_ISSET_ID);
  }

  public void setGroupOrderCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPORDERCOUNT_ISSET_ID, value);
  }

  /**
   * 月名优特惠订单数
   */
  public int getSellOrderCount() {
    return this.sellOrderCount;
  }

  /**
   * 月名优特惠订单数
   */
  public MerchantMonthCountVo setSellOrderCount(int sellOrderCount) {
    this.sellOrderCount = sellOrderCount;
    setSellOrderCountIsSet(true);
    return this;
  }

  public void unsetSellOrderCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLORDERCOUNT_ISSET_ID);
  }

  /** Returns true if field sellOrderCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSellOrderCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLORDERCOUNT_ISSET_ID);
  }

  public void setSellOrderCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLORDERCOUNT_ISSET_ID, value);
  }

  /**
   * 月面对面订单数
   */
  public int getFaceOrderCount() {
    return this.faceOrderCount;
  }

  /**
   * 月面对面订单数
   */
  public MerchantMonthCountVo setFaceOrderCount(int faceOrderCount) {
    this.faceOrderCount = faceOrderCount;
    setFaceOrderCountIsSet(true);
    return this;
  }

  public void unsetFaceOrderCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACEORDERCOUNT_ISSET_ID);
  }

  /** Returns true if field faceOrderCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceOrderCount() {
    return EncodingUtils.testBit(__isset_bitfield, __FACEORDERCOUNT_ISSET_ID);
  }

  public void setFaceOrderCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACEORDERCOUNT_ISSET_ID, value);
  }

  /**
   * 商品ID
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 商品ID
   */
  public MerchantMonthCountVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 最高月销售量
   */
  public int getMaxCount() {
    return this.maxCount;
  }

  /**
   * 最高月销售量
   */
  public MerchantMonthCountVo setMaxCount(int maxCount) {
    this.maxCount = maxCount;
    setMaxCountIsSet(true);
    return this;
  }

  public void unsetMaxCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXCOUNT_ISSET_ID);
  }

  /** Returns true if field maxCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXCOUNT_ISSET_ID);
  }

  public void setMaxCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXCOUNT_ISSET_ID, value);
  }

  /**
   * 月团购销售额
   */
  public double getGroupOrderMoney() {
    return this.groupOrderMoney;
  }

  /**
   * 月团购销售额
   */
  public MerchantMonthCountVo setGroupOrderMoney(double groupOrderMoney) {
    this.groupOrderMoney = groupOrderMoney;
    setGroupOrderMoneyIsSet(true);
    return this;
  }

  public void unsetGroupOrderMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPORDERMONEY_ISSET_ID);
  }

  /** Returns true if field groupOrderMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupOrderMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPORDERMONEY_ISSET_ID);
  }

  public void setGroupOrderMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPORDERMONEY_ISSET_ID, value);
  }

  /**
   * 月名优特惠销售额
   */
  public double getSellOrderMoney() {
    return this.sellOrderMoney;
  }

  /**
   * 月名优特惠销售额
   */
  public MerchantMonthCountVo setSellOrderMoney(double sellOrderMoney) {
    this.sellOrderMoney = sellOrderMoney;
    setSellOrderMoneyIsSet(true);
    return this;
  }

  public void unsetSellOrderMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLORDERMONEY_ISSET_ID);
  }

  /** Returns true if field sellOrderMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetSellOrderMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLORDERMONEY_ISSET_ID);
  }

  public void setSellOrderMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLORDERMONEY_ISSET_ID, value);
  }

  /**
   * 月面对面销售额
   */
  public double getFaceOrderMoney() {
    return this.faceOrderMoney;
  }

  /**
   * 月面对面销售额
   */
  public MerchantMonthCountVo setFaceOrderMoney(double faceOrderMoney) {
    this.faceOrderMoney = faceOrderMoney;
    setFaceOrderMoneyIsSet(true);
    return this;
  }

  public void unsetFaceOrderMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FACEORDERMONEY_ISSET_ID);
  }

  /** Returns true if field faceOrderMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetFaceOrderMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FACEORDERMONEY_ISSET_ID);
  }

  public void setFaceOrderMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FACEORDERMONEY_ISSET_ID, value);
  }

  /**
   * 商品名称
   */
  public String getProductName() {
    return this.productName;
  }

  /**
   * 商品名称
   */
  public MerchantMonthCountVo setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  /**
   * 最高月销售额
   */
  public double getMaxMoney() {
    return this.maxMoney;
  }

  /**
   * 最高月销售额
   */
  public MerchantMonthCountVo setMaxMoney(double maxMoney) {
    this.maxMoney = maxMoney;
    setMaxMoneyIsSet(true);
    return this;
  }

  public void unsetMaxMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXMONEY_ISSET_ID);
  }

  /** Returns true if field maxMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXMONEY_ISSET_ID);
  }

  public void setMaxMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXMONEY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case MERCHANT_ID:
      if (value == null) {
        unsetMerchantId();
      } else {
        setMerchantId((String)value);
      }
      break;

    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((String)value);
      }
      break;

    case MONTH:
      if (value == null) {
        unsetMonth();
      } else {
        setMonth((String)value);
      }
      break;

    case MONTH_MONEY:
      if (value == null) {
        unsetMonthMoney();
      } else {
        setMonthMoney((Double)value);
      }
      break;

    case GROUP_ORDER_COUNT:
      if (value == null) {
        unsetGroupOrderCount();
      } else {
        setGroupOrderCount((Integer)value);
      }
      break;

    case SELL_ORDER_COUNT:
      if (value == null) {
        unsetSellOrderCount();
      } else {
        setSellOrderCount((Integer)value);
      }
      break;

    case FACE_ORDER_COUNT:
      if (value == null) {
        unsetFaceOrderCount();
      } else {
        setFaceOrderCount((Integer)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case MAX_COUNT:
      if (value == null) {
        unsetMaxCount();
      } else {
        setMaxCount((Integer)value);
      }
      break;

    case GROUP_ORDER_MONEY:
      if (value == null) {
        unsetGroupOrderMoney();
      } else {
        setGroupOrderMoney((Double)value);
      }
      break;

    case SELL_ORDER_MONEY:
      if (value == null) {
        unsetSellOrderMoney();
      } else {
        setSellOrderMoney((Double)value);
      }
      break;

    case FACE_ORDER_MONEY:
      if (value == null) {
        unsetFaceOrderMoney();
      } else {
        setFaceOrderMoney((Double)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case MAX_MONEY:
      if (value == null) {
        unsetMaxMoney();
      } else {
        setMaxMoney((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CLIENT_ID:
      return getClientId();

    case MERCHANT_ID:
      return getMerchantId();

    case YEAR:
      return getYear();

    case MONTH:
      return getMonth();

    case MONTH_MONEY:
      return Double.valueOf(getMonthMoney());

    case GROUP_ORDER_COUNT:
      return Integer.valueOf(getGroupOrderCount());

    case SELL_ORDER_COUNT:
      return Integer.valueOf(getSellOrderCount());

    case FACE_ORDER_COUNT:
      return Integer.valueOf(getFaceOrderCount());

    case PRODUCT_ID:
      return getProductId();

    case MAX_COUNT:
      return Integer.valueOf(getMaxCount());

    case GROUP_ORDER_MONEY:
      return Double.valueOf(getGroupOrderMoney());

    case SELL_ORDER_MONEY:
      return Double.valueOf(getSellOrderMoney());

    case FACE_ORDER_MONEY:
      return Double.valueOf(getFaceOrderMoney());

    case PRODUCT_NAME:
      return getProductName();

    case MAX_MONEY:
      return Double.valueOf(getMaxMoney());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_ID:
      return isSetClientId();
    case MERCHANT_ID:
      return isSetMerchantId();
    case YEAR:
      return isSetYear();
    case MONTH:
      return isSetMonth();
    case MONTH_MONEY:
      return isSetMonthMoney();
    case GROUP_ORDER_COUNT:
      return isSetGroupOrderCount();
    case SELL_ORDER_COUNT:
      return isSetSellOrderCount();
    case FACE_ORDER_COUNT:
      return isSetFaceOrderCount();
    case PRODUCT_ID:
      return isSetProductId();
    case MAX_COUNT:
      return isSetMaxCount();
    case GROUP_ORDER_MONEY:
      return isSetGroupOrderMoney();
    case SELL_ORDER_MONEY:
      return isSetSellOrderMoney();
    case FACE_ORDER_MONEY:
      return isSetFaceOrderMoney();
    case PRODUCT_NAME:
      return isSetProductName();
    case MAX_MONEY:
      return isSetMaxMoney();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MerchantMonthCountVo)
      return this.equals((MerchantMonthCountVo)that);
    return false;
  }

  public boolean equals(MerchantMonthCountVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_merchantId = true && this.isSetMerchantId();
    boolean that_present_merchantId = true && that.isSetMerchantId();
    if (this_present_merchantId || that_present_merchantId) {
      if (!(this_present_merchantId && that_present_merchantId))
        return false;
      if (!this.merchantId.equals(that.merchantId))
        return false;
    }

    boolean this_present_year = true && this.isSetYear();
    boolean that_present_year = true && that.isSetYear();
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (!this.year.equals(that.year))
        return false;
    }

    boolean this_present_month = true && this.isSetMonth();
    boolean that_present_month = true && that.isSetMonth();
    if (this_present_month || that_present_month) {
      if (!(this_present_month && that_present_month))
        return false;
      if (!this.month.equals(that.month))
        return false;
    }

    boolean this_present_monthMoney = true;
    boolean that_present_monthMoney = true;
    if (this_present_monthMoney || that_present_monthMoney) {
      if (!(this_present_monthMoney && that_present_monthMoney))
        return false;
      if (this.monthMoney != that.monthMoney)
        return false;
    }

    boolean this_present_groupOrderCount = true;
    boolean that_present_groupOrderCount = true;
    if (this_present_groupOrderCount || that_present_groupOrderCount) {
      if (!(this_present_groupOrderCount && that_present_groupOrderCount))
        return false;
      if (this.groupOrderCount != that.groupOrderCount)
        return false;
    }

    boolean this_present_sellOrderCount = true;
    boolean that_present_sellOrderCount = true;
    if (this_present_sellOrderCount || that_present_sellOrderCount) {
      if (!(this_present_sellOrderCount && that_present_sellOrderCount))
        return false;
      if (this.sellOrderCount != that.sellOrderCount)
        return false;
    }

    boolean this_present_faceOrderCount = true;
    boolean that_present_faceOrderCount = true;
    if (this_present_faceOrderCount || that_present_faceOrderCount) {
      if (!(this_present_faceOrderCount && that_present_faceOrderCount))
        return false;
      if (this.faceOrderCount != that.faceOrderCount)
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_maxCount = true;
    boolean that_present_maxCount = true;
    if (this_present_maxCount || that_present_maxCount) {
      if (!(this_present_maxCount && that_present_maxCount))
        return false;
      if (this.maxCount != that.maxCount)
        return false;
    }

    boolean this_present_groupOrderMoney = true;
    boolean that_present_groupOrderMoney = true;
    if (this_present_groupOrderMoney || that_present_groupOrderMoney) {
      if (!(this_present_groupOrderMoney && that_present_groupOrderMoney))
        return false;
      if (this.groupOrderMoney != that.groupOrderMoney)
        return false;
    }

    boolean this_present_sellOrderMoney = true;
    boolean that_present_sellOrderMoney = true;
    if (this_present_sellOrderMoney || that_present_sellOrderMoney) {
      if (!(this_present_sellOrderMoney && that_present_sellOrderMoney))
        return false;
      if (this.sellOrderMoney != that.sellOrderMoney)
        return false;
    }

    boolean this_present_faceOrderMoney = true;
    boolean that_present_faceOrderMoney = true;
    if (this_present_faceOrderMoney || that_present_faceOrderMoney) {
      if (!(this_present_faceOrderMoney && that_present_faceOrderMoney))
        return false;
      if (this.faceOrderMoney != that.faceOrderMoney)
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_maxMoney = true;
    boolean that_present_maxMoney = true;
    if (this_present_maxMoney || that_present_maxMoney) {
      if (!(this_present_maxMoney && that_present_maxMoney))
        return false;
      if (this.maxMoney != that.maxMoney)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_merchantId = true && (isSetMerchantId());
    list.add(present_merchantId);
    if (present_merchantId)
      list.add(merchantId);

    boolean present_year = true && (isSetYear());
    list.add(present_year);
    if (present_year)
      list.add(year);

    boolean present_month = true && (isSetMonth());
    list.add(present_month);
    if (present_month)
      list.add(month);

    boolean present_monthMoney = true;
    list.add(present_monthMoney);
    if (present_monthMoney)
      list.add(monthMoney);

    boolean present_groupOrderCount = true;
    list.add(present_groupOrderCount);
    if (present_groupOrderCount)
      list.add(groupOrderCount);

    boolean present_sellOrderCount = true;
    list.add(present_sellOrderCount);
    if (present_sellOrderCount)
      list.add(sellOrderCount);

    boolean present_faceOrderCount = true;
    list.add(present_faceOrderCount);
    if (present_faceOrderCount)
      list.add(faceOrderCount);

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_maxCount = true;
    list.add(present_maxCount);
    if (present_maxCount)
      list.add(maxCount);

    boolean present_groupOrderMoney = true;
    list.add(present_groupOrderMoney);
    if (present_groupOrderMoney)
      list.add(groupOrderMoney);

    boolean present_sellOrderMoney = true;
    list.add(present_sellOrderMoney);
    if (present_sellOrderMoney)
      list.add(sellOrderMoney);

    boolean present_faceOrderMoney = true;
    list.add(present_faceOrderMoney);
    if (present_faceOrderMoney)
      list.add(faceOrderMoney);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_maxMoney = true;
    list.add(present_maxMoney);
    if (present_maxMoney)
      list.add(maxMoney);

    return list.hashCode();
  }

  @Override
  public int compareTo(MerchantMonthCountVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerchantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonth()).compareTo(other.isSetMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month, other.month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthMoney()).compareTo(other.isSetMonthMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthMoney, other.monthMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupOrderCount()).compareTo(other.isSetGroupOrderCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupOrderCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupOrderCount, other.groupOrderCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellOrderCount()).compareTo(other.isSetSellOrderCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellOrderCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellOrderCount, other.sellOrderCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaceOrderCount()).compareTo(other.isSetFaceOrderCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceOrderCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceOrderCount, other.faceOrderCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxCount()).compareTo(other.isSetMaxCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCount, other.maxCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupOrderMoney()).compareTo(other.isSetGroupOrderMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupOrderMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupOrderMoney, other.groupOrderMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellOrderMoney()).compareTo(other.isSetSellOrderMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellOrderMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellOrderMoney, other.sellOrderMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFaceOrderMoney()).compareTo(other.isSetFaceOrderMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFaceOrderMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.faceOrderMoney, other.faceOrderMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxMoney()).compareTo(other.isSetMaxMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxMoney, other.maxMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MerchantMonthCountVo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merchantId:");
    if (this.merchantId == null) {
      sb.append("null");
    } else {
      sb.append(this.merchantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("year:");
    if (this.year == null) {
      sb.append("null");
    } else {
      sb.append(this.year);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("month:");
    if (this.month == null) {
      sb.append("null");
    } else {
      sb.append(this.month);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthMoney:");
    sb.append(this.monthMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupOrderCount:");
    sb.append(this.groupOrderCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellOrderCount:");
    sb.append(this.sellOrderCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("faceOrderCount:");
    sb.append(this.faceOrderCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxCount:");
    sb.append(this.maxCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupOrderMoney:");
    sb.append(this.groupOrderMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellOrderMoney:");
    sb.append(this.sellOrderMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("faceOrderMoney:");
    sb.append(this.faceOrderMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxMoney:");
    sb.append(this.maxMoney);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MerchantMonthCountVoStandardSchemeFactory implements SchemeFactory {
    public MerchantMonthCountVoStandardScheme getScheme() {
      return new MerchantMonthCountVoStandardScheme();
    }
  }

  private static class MerchantMonthCountVoStandardScheme extends StandardScheme<MerchantMonthCountVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MerchantMonthCountVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MERCHANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.merchantId = iprot.readString();
              struct.setMerchantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.year = iprot.readString();
              struct.setYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.month = iprot.readString();
              struct.setMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MONTH_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthMoney = iprot.readDouble();
              struct.setMonthMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GROUP_ORDER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupOrderCount = iprot.readI32();
              struct.setGroupOrderCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SELL_ORDER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sellOrderCount = iprot.readI32();
              struct.setSellOrderCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FACE_ORDER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.faceOrderCount = iprot.readI32();
              struct.setFaceOrderCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAX_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxCount = iprot.readI32();
              struct.setMaxCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // GROUP_ORDER_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.groupOrderMoney = iprot.readDouble();
              struct.setGroupOrderMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SELL_ORDER_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sellOrderMoney = iprot.readDouble();
              struct.setSellOrderMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FACE_ORDER_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.faceOrderMoney = iprot.readDouble();
              struct.setFaceOrderMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MAX_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maxMoney = iprot.readDouble();
              struct.setMaxMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MerchantMonthCountVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.merchantId != null) {
        oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
        oprot.writeString(struct.merchantId);
        oprot.writeFieldEnd();
      }
      if (struct.year != null) {
        oprot.writeFieldBegin(YEAR_FIELD_DESC);
        oprot.writeString(struct.year);
        oprot.writeFieldEnd();
      }
      if (struct.month != null) {
        oprot.writeFieldBegin(MONTH_FIELD_DESC);
        oprot.writeString(struct.month);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MONTH_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.monthMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_ORDER_COUNT_FIELD_DESC);
      oprot.writeI32(struct.groupOrderCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELL_ORDER_COUNT_FIELD_DESC);
      oprot.writeI32(struct.sellOrderCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FACE_ORDER_COUNT_FIELD_DESC);
      oprot.writeI32(struct.faceOrderCount);
      oprot.writeFieldEnd();
      if (struct.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(struct.productId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_COUNT_FIELD_DESC);
      oprot.writeI32(struct.maxCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_ORDER_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.groupOrderMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELL_ORDER_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.sellOrderMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FACE_ORDER_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.faceOrderMoney);
      oprot.writeFieldEnd();
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.maxMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MerchantMonthCountVoTupleSchemeFactory implements SchemeFactory {
    public MerchantMonthCountVoTupleScheme getScheme() {
      return new MerchantMonthCountVoTupleScheme();
    }
  }

  private static class MerchantMonthCountVoTupleScheme extends TupleScheme<MerchantMonthCountVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MerchantMonthCountVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetMerchantId()) {
        optionals.set(2);
      }
      if (struct.isSetYear()) {
        optionals.set(3);
      }
      if (struct.isSetMonth()) {
        optionals.set(4);
      }
      if (struct.isSetMonthMoney()) {
        optionals.set(5);
      }
      if (struct.isSetGroupOrderCount()) {
        optionals.set(6);
      }
      if (struct.isSetSellOrderCount()) {
        optionals.set(7);
      }
      if (struct.isSetFaceOrderCount()) {
        optionals.set(8);
      }
      if (struct.isSetProductId()) {
        optionals.set(9);
      }
      if (struct.isSetMaxCount()) {
        optionals.set(10);
      }
      if (struct.isSetGroupOrderMoney()) {
        optionals.set(11);
      }
      if (struct.isSetSellOrderMoney()) {
        optionals.set(12);
      }
      if (struct.isSetFaceOrderMoney()) {
        optionals.set(13);
      }
      if (struct.isSetProductName()) {
        optionals.set(14);
      }
      if (struct.isSetMaxMoney()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetMerchantId()) {
        oprot.writeString(struct.merchantId);
      }
      if (struct.isSetYear()) {
        oprot.writeString(struct.year);
      }
      if (struct.isSetMonth()) {
        oprot.writeString(struct.month);
      }
      if (struct.isSetMonthMoney()) {
        oprot.writeDouble(struct.monthMoney);
      }
      if (struct.isSetGroupOrderCount()) {
        oprot.writeI32(struct.groupOrderCount);
      }
      if (struct.isSetSellOrderCount()) {
        oprot.writeI32(struct.sellOrderCount);
      }
      if (struct.isSetFaceOrderCount()) {
        oprot.writeI32(struct.faceOrderCount);
      }
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetMaxCount()) {
        oprot.writeI32(struct.maxCount);
      }
      if (struct.isSetGroupOrderMoney()) {
        oprot.writeDouble(struct.groupOrderMoney);
      }
      if (struct.isSetSellOrderMoney()) {
        oprot.writeDouble(struct.sellOrderMoney);
      }
      if (struct.isSetFaceOrderMoney()) {
        oprot.writeDouble(struct.faceOrderMoney);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetMaxMoney()) {
        oprot.writeDouble(struct.maxMoney);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MerchantMonthCountVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.merchantId = iprot.readString();
        struct.setMerchantIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.year = iprot.readString();
        struct.setYearIsSet(true);
      }
      if (incoming.get(4)) {
        struct.month = iprot.readString();
        struct.setMonthIsSet(true);
      }
      if (incoming.get(5)) {
        struct.monthMoney = iprot.readDouble();
        struct.setMonthMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.groupOrderCount = iprot.readI32();
        struct.setGroupOrderCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sellOrderCount = iprot.readI32();
        struct.setSellOrderCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.faceOrderCount = iprot.readI32();
        struct.setFaceOrderCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.maxCount = iprot.readI32();
        struct.setMaxCountIsSet(true);
      }
      if (incoming.get(11)) {
        struct.groupOrderMoney = iprot.readDouble();
        struct.setGroupOrderMoneyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.sellOrderMoney = iprot.readDouble();
        struct.setSellOrderMoneyIsSet(true);
      }
      if (incoming.get(13)) {
        struct.faceOrderMoney = iprot.readDouble();
        struct.setFaceOrderMoneyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.maxMoney = iprot.readDouble();
        struct.setMaxMoneyIsSet(true);
      }
    }
  }

}

