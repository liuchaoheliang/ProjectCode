/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 商品排序
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class FiledSort implements org.apache.thrift.TBase<FiledSort, FiledSort._Fields>, java.io.Serializable, Cloneable, Comparable<FiledSort> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FiledSort");

  private static final org.apache.thrift.protocol.TField SORT_PRIOR_FIELD_DESC = new org.apache.thrift.protocol.TField("sortPrior", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sortName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SORT_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("sortBy", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FiledSortStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FiledSortTupleSchemeFactory());
  }

  /**
   * 排序优先级  数字从小到大排序，sortPrior越小的优先排序
   */
  public int sortPrior; // required
  /**
   * 排序字段名称: 'storeCount'人气排序(收藏数排序);'distance'距离排序
   */
  public String sortName; // required
  /**
   * 排序规则 负数代表降序，整数代表升序
   */
  public int sortBy; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 排序优先级  数字从小到大排序，sortPrior越小的优先排序
     */
    SORT_PRIOR((short)1, "sortPrior"),
    /**
     * 排序字段名称: 'storeCount'人气排序(收藏数排序);'distance'距离排序
     */
    SORT_NAME((short)2, "sortName"),
    /**
     * 排序规则 负数代表降序，整数代表升序
     */
    SORT_BY((short)3, "sortBy");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SORT_PRIOR
          return SORT_PRIOR;
        case 2: // SORT_NAME
          return SORT_NAME;
        case 3: // SORT_BY
          return SORT_BY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SORTPRIOR_ISSET_ID = 0;
  private static final int __SORTBY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SORT_PRIOR, new org.apache.thrift.meta_data.FieldMetaData("sortPrior", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("sortName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORT_BY, new org.apache.thrift.meta_data.FieldMetaData("sortBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FiledSort.class, metaDataMap);
  }

  public FiledSort() {
  }

  public FiledSort(
    int sortPrior,
    String sortName,
    int sortBy)
  {
    this();
    this.sortPrior = sortPrior;
    setSortPriorIsSet(true);
    this.sortName = sortName;
    this.sortBy = sortBy;
    setSortByIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FiledSort(FiledSort other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sortPrior = other.sortPrior;
    if (other.isSetSortName()) {
      this.sortName = other.sortName;
    }
    this.sortBy = other.sortBy;
  }

  public FiledSort deepCopy() {
    return new FiledSort(this);
  }

  @Override
  public void clear() {
    setSortPriorIsSet(false);
    this.sortPrior = 0;
    this.sortName = null;
    setSortByIsSet(false);
    this.sortBy = 0;
  }

  /**
   * 排序优先级  数字从小到大排序，sortPrior越小的优先排序
   */
  public int getSortPrior() {
    return this.sortPrior;
  }

  /**
   * 排序优先级  数字从小到大排序，sortPrior越小的优先排序
   */
  public FiledSort setSortPrior(int sortPrior) {
    this.sortPrior = sortPrior;
    setSortPriorIsSet(true);
    return this;
  }

  public void unsetSortPrior() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SORTPRIOR_ISSET_ID);
  }

  /** Returns true if field sortPrior is set (has been assigned a value) and false otherwise */
  public boolean isSetSortPrior() {
    return EncodingUtils.testBit(__isset_bitfield, __SORTPRIOR_ISSET_ID);
  }

  public void setSortPriorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SORTPRIOR_ISSET_ID, value);
  }

  /**
   * 排序字段名称: 'storeCount'人气排序(收藏数排序);'distance'距离排序
   */
  public String getSortName() {
    return this.sortName;
  }

  /**
   * 排序字段名称: 'storeCount'人气排序(收藏数排序);'distance'距离排序
   */
  public FiledSort setSortName(String sortName) {
    this.sortName = sortName;
    return this;
  }

  public void unsetSortName() {
    this.sortName = null;
  }

  /** Returns true if field sortName is set (has been assigned a value) and false otherwise */
  public boolean isSetSortName() {
    return this.sortName != null;
  }

  public void setSortNameIsSet(boolean value) {
    if (!value) {
      this.sortName = null;
    }
  }

  /**
   * 排序规则 负数代表降序，整数代表升序
   */
  public int getSortBy() {
    return this.sortBy;
  }

  /**
   * 排序规则 负数代表降序，整数代表升序
   */
  public FiledSort setSortBy(int sortBy) {
    this.sortBy = sortBy;
    setSortByIsSet(true);
    return this;
  }

  public void unsetSortBy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SORTBY_ISSET_ID);
  }

  /** Returns true if field sortBy is set (has been assigned a value) and false otherwise */
  public boolean isSetSortBy() {
    return EncodingUtils.testBit(__isset_bitfield, __SORTBY_ISSET_ID);
  }

  public void setSortByIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SORTBY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SORT_PRIOR:
      if (value == null) {
        unsetSortPrior();
      } else {
        setSortPrior((Integer)value);
      }
      break;

    case SORT_NAME:
      if (value == null) {
        unsetSortName();
      } else {
        setSortName((String)value);
      }
      break;

    case SORT_BY:
      if (value == null) {
        unsetSortBy();
      } else {
        setSortBy((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SORT_PRIOR:
      return Integer.valueOf(getSortPrior());

    case SORT_NAME:
      return getSortName();

    case SORT_BY:
      return Integer.valueOf(getSortBy());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SORT_PRIOR:
      return isSetSortPrior();
    case SORT_NAME:
      return isSetSortName();
    case SORT_BY:
      return isSetSortBy();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FiledSort)
      return this.equals((FiledSort)that);
    return false;
  }

  public boolean equals(FiledSort that) {
    if (that == null)
      return false;

    boolean this_present_sortPrior = true;
    boolean that_present_sortPrior = true;
    if (this_present_sortPrior || that_present_sortPrior) {
      if (!(this_present_sortPrior && that_present_sortPrior))
        return false;
      if (this.sortPrior != that.sortPrior)
        return false;
    }

    boolean this_present_sortName = true && this.isSetSortName();
    boolean that_present_sortName = true && that.isSetSortName();
    if (this_present_sortName || that_present_sortName) {
      if (!(this_present_sortName && that_present_sortName))
        return false;
      if (!this.sortName.equals(that.sortName))
        return false;
    }

    boolean this_present_sortBy = true;
    boolean that_present_sortBy = true;
    if (this_present_sortBy || that_present_sortBy) {
      if (!(this_present_sortBy && that_present_sortBy))
        return false;
      if (this.sortBy != that.sortBy)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sortPrior = true;
    list.add(present_sortPrior);
    if (present_sortPrior)
      list.add(sortPrior);

    boolean present_sortName = true && (isSetSortName());
    list.add(present_sortName);
    if (present_sortName)
      list.add(sortName);

    boolean present_sortBy = true;
    list.add(present_sortBy);
    if (present_sortBy)
      list.add(sortBy);

    return list.hashCode();
  }

  @Override
  public int compareTo(FiledSort other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSortPrior()).compareTo(other.isSetSortPrior());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortPrior()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortPrior, other.sortPrior);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortName()).compareTo(other.isSetSortName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortName, other.sortName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortBy()).compareTo(other.isSetSortBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortBy, other.sortBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FiledSort(");
    boolean first = true;

    sb.append("sortPrior:");
    sb.append(this.sortPrior);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortName:");
    if (this.sortName == null) {
      sb.append("null");
    } else {
      sb.append(this.sortName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortBy:");
    sb.append(this.sortBy);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FiledSortStandardSchemeFactory implements SchemeFactory {
    public FiledSortStandardScheme getScheme() {
      return new FiledSortStandardScheme();
    }
  }

  private static class FiledSortStandardScheme extends StandardScheme<FiledSort> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FiledSort struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SORT_PRIOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortPrior = iprot.readI32();
              struct.setSortPriorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SORT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sortName = iprot.readString();
              struct.setSortNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SORT_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortBy = iprot.readI32();
              struct.setSortByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FiledSort struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SORT_PRIOR_FIELD_DESC);
      oprot.writeI32(struct.sortPrior);
      oprot.writeFieldEnd();
      if (struct.sortName != null) {
        oprot.writeFieldBegin(SORT_NAME_FIELD_DESC);
        oprot.writeString(struct.sortName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SORT_BY_FIELD_DESC);
      oprot.writeI32(struct.sortBy);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FiledSortTupleSchemeFactory implements SchemeFactory {
    public FiledSortTupleScheme getScheme() {
      return new FiledSortTupleScheme();
    }
  }

  private static class FiledSortTupleScheme extends TupleScheme<FiledSort> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FiledSort struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSortPrior()) {
        optionals.set(0);
      }
      if (struct.isSetSortName()) {
        optionals.set(1);
      }
      if (struct.isSetSortBy()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSortPrior()) {
        oprot.writeI32(struct.sortPrior);
      }
      if (struct.isSetSortName()) {
        oprot.writeString(struct.sortName);
      }
      if (struct.isSetSortBy()) {
        oprot.writeI32(struct.sortBy);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FiledSort struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.sortPrior = iprot.readI32();
        struct.setSortPriorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sortName = iprot.readString();
        struct.setSortNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sortBy = iprot.readI32();
        struct.setSortByIsSet(true);
      }
    }
  }

}

