/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class MerchantCategoryService {

  /**
   * MerchantCategoryService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 MerchantCategory
     * @return MerchantCategoryAddVoRes
     * 
     * @param originVo
     * @param merchantCategoryVo
     */
    public com.froad.thrift.vo.MerchantCategoryAddVoRes addMerchantCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException;

    /**
     * 删除 MerchantCategory
     * @return ResultVo
     * 
     * @param originVo
     * @param merchantCategoryVo
     */
    public com.froad.thrift.vo.ResultVo deleteMerchantCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException;

    /**
     * 修改 MerchantCategory
     * @return ResultVo
     * 
     * @param originVo
     * @param merchantCategoryVo
     */
    public com.froad.thrift.vo.ResultVo updateMerchantCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException;

    /**
     * 根据id查询 MerchantCategory
     * @param clientId 客户端id
     * @param id 分类id
     * @return MerchantCategoryVo
     * 
     * @param clientId
     * @param id
     */
    public com.froad.thrift.vo.MerchantCategoryVo getMerchantCategoryById(String clientId, long id) throws org.apache.thrift.TException;

    /**
     * 查询 MerchantCategory
     * @param merchantCategory
     * @return List<MerchantCategoryVo>
     * 
     * @param merchantCategoryVo
     */
    public List<com.froad.thrift.vo.MerchantCategoryVo> getMerchantCategory(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 MerchantCategory
     * @param merchantCategory
     * @return List<MerchantCategoryVo>
     * 
     * @param page
     * @param merchantCategoryVo
     */
    public com.froad.thrift.vo.MerchantCategoryPageVoRes getMerchantCategoryByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException;

    /**
     * 查询 MerchantCategoryVo
     * @param merchantCategory
     * @return List<MerchantCategoryVo>
     * 
     * @param clientId
     * @param categoryIdList
     */
    public List<com.froad.thrift.vo.MerchantCategoryVo> getMerchantCategoryByCategoryIdList(String clientId, List<Long> categoryIdList) throws org.apache.thrift.TException;

    /**
     * 获取商户分类
     * @param merchantCategory
     * @return List<MerchantCategoryVo>
     * 
     * @param merchantCategoryVo
     */
    public List<com.froad.thrift.vo.MerchantCategoryVo> getMerchantCategoryByH5(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addMerchantCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteMerchantCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMerchantCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantCategoryById(String clientId, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantCategory(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantCategoryByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantCategoryByCategoryIdList(String clientId, List<Long> categoryIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantCategoryByH5(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.MerchantCategoryAddVoRes addMerchantCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException
    {
      send_addMerchantCategory(originVo, merchantCategoryVo);
      return recv_addMerchantCategory();
    }

    public void send_addMerchantCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException
    {
      addMerchantCategory_args args = new addMerchantCategory_args();
      args.setOriginVo(originVo);
      args.setMerchantCategoryVo(merchantCategoryVo);
      sendBase("addMerchantCategory", args);
    }

    public com.froad.thrift.vo.MerchantCategoryAddVoRes recv_addMerchantCategory() throws org.apache.thrift.TException
    {
      addMerchantCategory_result result = new addMerchantCategory_result();
      receiveBase(result, "addMerchantCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMerchantCategory failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo deleteMerchantCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException
    {
      send_deleteMerchantCategory(originVo, merchantCategoryVo);
      return recv_deleteMerchantCategory();
    }

    public void send_deleteMerchantCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException
    {
      deleteMerchantCategory_args args = new deleteMerchantCategory_args();
      args.setOriginVo(originVo);
      args.setMerchantCategoryVo(merchantCategoryVo);
      sendBase("deleteMerchantCategory", args);
    }

    public com.froad.thrift.vo.ResultVo recv_deleteMerchantCategory() throws org.apache.thrift.TException
    {
      deleteMerchantCategory_result result = new deleteMerchantCategory_result();
      receiveBase(result, "deleteMerchantCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteMerchantCategory failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateMerchantCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException
    {
      send_updateMerchantCategory(originVo, merchantCategoryVo);
      return recv_updateMerchantCategory();
    }

    public void send_updateMerchantCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException
    {
      updateMerchantCategory_args args = new updateMerchantCategory_args();
      args.setOriginVo(originVo);
      args.setMerchantCategoryVo(merchantCategoryVo);
      sendBase("updateMerchantCategory", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateMerchantCategory() throws org.apache.thrift.TException
    {
      updateMerchantCategory_result result = new updateMerchantCategory_result();
      receiveBase(result, "updateMerchantCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMerchantCategory failed: unknown result");
    }

    public com.froad.thrift.vo.MerchantCategoryVo getMerchantCategoryById(String clientId, long id) throws org.apache.thrift.TException
    {
      send_getMerchantCategoryById(clientId, id);
      return recv_getMerchantCategoryById();
    }

    public void send_getMerchantCategoryById(String clientId, long id) throws org.apache.thrift.TException
    {
      getMerchantCategoryById_args args = new getMerchantCategoryById_args();
      args.setClientId(clientId);
      args.setId(id);
      sendBase("getMerchantCategoryById", args);
    }

    public com.froad.thrift.vo.MerchantCategoryVo recv_getMerchantCategoryById() throws org.apache.thrift.TException
    {
      getMerchantCategoryById_result result = new getMerchantCategoryById_result();
      receiveBase(result, "getMerchantCategoryById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantCategoryById failed: unknown result");
    }

    public List<com.froad.thrift.vo.MerchantCategoryVo> getMerchantCategory(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException
    {
      send_getMerchantCategory(merchantCategoryVo);
      return recv_getMerchantCategory();
    }

    public void send_getMerchantCategory(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException
    {
      getMerchantCategory_args args = new getMerchantCategory_args();
      args.setMerchantCategoryVo(merchantCategoryVo);
      sendBase("getMerchantCategory", args);
    }

    public List<com.froad.thrift.vo.MerchantCategoryVo> recv_getMerchantCategory() throws org.apache.thrift.TException
    {
      getMerchantCategory_result result = new getMerchantCategory_result();
      receiveBase(result, "getMerchantCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantCategory failed: unknown result");
    }

    public com.froad.thrift.vo.MerchantCategoryPageVoRes getMerchantCategoryByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException
    {
      send_getMerchantCategoryByPage(page, merchantCategoryVo);
      return recv_getMerchantCategoryByPage();
    }

    public void send_getMerchantCategoryByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException
    {
      getMerchantCategoryByPage_args args = new getMerchantCategoryByPage_args();
      args.setPage(page);
      args.setMerchantCategoryVo(merchantCategoryVo);
      sendBase("getMerchantCategoryByPage", args);
    }

    public com.froad.thrift.vo.MerchantCategoryPageVoRes recv_getMerchantCategoryByPage() throws org.apache.thrift.TException
    {
      getMerchantCategoryByPage_result result = new getMerchantCategoryByPage_result();
      receiveBase(result, "getMerchantCategoryByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantCategoryByPage failed: unknown result");
    }

    public List<com.froad.thrift.vo.MerchantCategoryVo> getMerchantCategoryByCategoryIdList(String clientId, List<Long> categoryIdList) throws org.apache.thrift.TException
    {
      send_getMerchantCategoryByCategoryIdList(clientId, categoryIdList);
      return recv_getMerchantCategoryByCategoryIdList();
    }

    public void send_getMerchantCategoryByCategoryIdList(String clientId, List<Long> categoryIdList) throws org.apache.thrift.TException
    {
      getMerchantCategoryByCategoryIdList_args args = new getMerchantCategoryByCategoryIdList_args();
      args.setClientId(clientId);
      args.setCategoryIdList(categoryIdList);
      sendBase("getMerchantCategoryByCategoryIdList", args);
    }

    public List<com.froad.thrift.vo.MerchantCategoryVo> recv_getMerchantCategoryByCategoryIdList() throws org.apache.thrift.TException
    {
      getMerchantCategoryByCategoryIdList_result result = new getMerchantCategoryByCategoryIdList_result();
      receiveBase(result, "getMerchantCategoryByCategoryIdList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantCategoryByCategoryIdList failed: unknown result");
    }

    public List<com.froad.thrift.vo.MerchantCategoryVo> getMerchantCategoryByH5(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException
    {
      send_getMerchantCategoryByH5(merchantCategoryVo);
      return recv_getMerchantCategoryByH5();
    }

    public void send_getMerchantCategoryByH5(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) throws org.apache.thrift.TException
    {
      getMerchantCategoryByH5_args args = new getMerchantCategoryByH5_args();
      args.setMerchantCategoryVo(merchantCategoryVo);
      sendBase("getMerchantCategoryByH5", args);
    }

    public List<com.froad.thrift.vo.MerchantCategoryVo> recv_getMerchantCategoryByH5() throws org.apache.thrift.TException
    {
      getMerchantCategoryByH5_result result = new getMerchantCategoryByH5_result();
      receiveBase(result, "getMerchantCategoryByH5");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantCategoryByH5 failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addMerchantCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMerchantCategory_call method_call = new addMerchantCategory_call(originVo, merchantCategoryVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMerchantCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo;
      public addMerchantCategory_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantCategoryVo = merchantCategoryVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMerchantCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMerchantCategory_args args = new addMerchantCategory_args();
        args.setOriginVo(originVo);
        args.setMerchantCategoryVo(merchantCategoryVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantCategoryAddVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addMerchantCategory();
      }
    }

    public void deleteMerchantCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteMerchantCategory_call method_call = new deleteMerchantCategory_call(originVo, merchantCategoryVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteMerchantCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo;
      public deleteMerchantCategory_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantCategoryVo = merchantCategoryVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteMerchantCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteMerchantCategory_args args = new deleteMerchantCategory_args();
        args.setOriginVo(originVo);
        args.setMerchantCategoryVo(merchantCategoryVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteMerchantCategory();
      }
    }

    public void updateMerchantCategory(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMerchantCategory_call method_call = new updateMerchantCategory_call(originVo, merchantCategoryVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMerchantCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo;
      public updateMerchantCategory_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantCategoryVo = merchantCategoryVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMerchantCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMerchantCategory_args args = new updateMerchantCategory_args();
        args.setOriginVo(originVo);
        args.setMerchantCategoryVo(merchantCategoryVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMerchantCategory();
      }
    }

    public void getMerchantCategoryById(String clientId, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantCategoryById_call method_call = new getMerchantCategoryById_call(clientId, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantCategoryById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private long id;
      public getMerchantCategoryById_call(String clientId, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantCategoryById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantCategoryById_args args = new getMerchantCategoryById_args();
        args.setClientId(clientId);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantCategoryVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantCategoryById();
      }
    }

    public void getMerchantCategory(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantCategory_call method_call = new getMerchantCategory_call(merchantCategoryVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo;
      public getMerchantCategory_call(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantCategoryVo = merchantCategoryVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantCategory_args args = new getMerchantCategory_args();
        args.setMerchantCategoryVo(merchantCategoryVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.MerchantCategoryVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantCategory();
      }
    }

    public void getMerchantCategoryByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantCategoryByPage_call method_call = new getMerchantCategoryByPage_call(page, merchantCategoryVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantCategoryByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo;
      public getMerchantCategoryByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.merchantCategoryVo = merchantCategoryVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantCategoryByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantCategoryByPage_args args = new getMerchantCategoryByPage_args();
        args.setPage(page);
        args.setMerchantCategoryVo(merchantCategoryVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantCategoryPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantCategoryByPage();
      }
    }

    public void getMerchantCategoryByCategoryIdList(String clientId, List<Long> categoryIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantCategoryByCategoryIdList_call method_call = new getMerchantCategoryByCategoryIdList_call(clientId, categoryIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantCategoryByCategoryIdList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private List<Long> categoryIdList;
      public getMerchantCategoryByCategoryIdList_call(String clientId, List<Long> categoryIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.categoryIdList = categoryIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantCategoryByCategoryIdList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantCategoryByCategoryIdList_args args = new getMerchantCategoryByCategoryIdList_args();
        args.setClientId(clientId);
        args.setCategoryIdList(categoryIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.MerchantCategoryVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantCategoryByCategoryIdList();
      }
    }

    public void getMerchantCategoryByH5(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantCategoryByH5_call method_call = new getMerchantCategoryByH5_call(merchantCategoryVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantCategoryByH5_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo;
      public getMerchantCategoryByH5_call(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantCategoryVo = merchantCategoryVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantCategoryByH5", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantCategoryByH5_args args = new getMerchantCategoryByH5_args();
        args.setMerchantCategoryVo(merchantCategoryVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.MerchantCategoryVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantCategoryByH5();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addMerchantCategory", new addMerchantCategory());
      processMap.put("deleteMerchantCategory", new deleteMerchantCategory());
      processMap.put("updateMerchantCategory", new updateMerchantCategory());
      processMap.put("getMerchantCategoryById", new getMerchantCategoryById());
      processMap.put("getMerchantCategory", new getMerchantCategory());
      processMap.put("getMerchantCategoryByPage", new getMerchantCategoryByPage());
      processMap.put("getMerchantCategoryByCategoryIdList", new getMerchantCategoryByCategoryIdList());
      processMap.put("getMerchantCategoryByH5", new getMerchantCategoryByH5());
      return processMap;
    }

    public static class addMerchantCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMerchantCategory_args> {
      public addMerchantCategory() {
        super("addMerchantCategory");
      }

      public addMerchantCategory_args getEmptyArgsInstance() {
        return new addMerchantCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addMerchantCategory_result getResult(I iface, addMerchantCategory_args args) throws org.apache.thrift.TException {
        addMerchantCategory_result result = new addMerchantCategory_result();
        result.success = iface.addMerchantCategory(args.originVo, args.merchantCategoryVo);
        return result;
      }
    }

    public static class deleteMerchantCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteMerchantCategory_args> {
      public deleteMerchantCategory() {
        super("deleteMerchantCategory");
      }

      public deleteMerchantCategory_args getEmptyArgsInstance() {
        return new deleteMerchantCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteMerchantCategory_result getResult(I iface, deleteMerchantCategory_args args) throws org.apache.thrift.TException {
        deleteMerchantCategory_result result = new deleteMerchantCategory_result();
        result.success = iface.deleteMerchantCategory(args.originVo, args.merchantCategoryVo);
        return result;
      }
    }

    public static class updateMerchantCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMerchantCategory_args> {
      public updateMerchantCategory() {
        super("updateMerchantCategory");
      }

      public updateMerchantCategory_args getEmptyArgsInstance() {
        return new updateMerchantCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMerchantCategory_result getResult(I iface, updateMerchantCategory_args args) throws org.apache.thrift.TException {
        updateMerchantCategory_result result = new updateMerchantCategory_result();
        result.success = iface.updateMerchantCategory(args.originVo, args.merchantCategoryVo);
        return result;
      }
    }

    public static class getMerchantCategoryById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantCategoryById_args> {
      public getMerchantCategoryById() {
        super("getMerchantCategoryById");
      }

      public getMerchantCategoryById_args getEmptyArgsInstance() {
        return new getMerchantCategoryById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantCategoryById_result getResult(I iface, getMerchantCategoryById_args args) throws org.apache.thrift.TException {
        getMerchantCategoryById_result result = new getMerchantCategoryById_result();
        result.success = iface.getMerchantCategoryById(args.clientId, args.id);
        return result;
      }
    }

    public static class getMerchantCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantCategory_args> {
      public getMerchantCategory() {
        super("getMerchantCategory");
      }

      public getMerchantCategory_args getEmptyArgsInstance() {
        return new getMerchantCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantCategory_result getResult(I iface, getMerchantCategory_args args) throws org.apache.thrift.TException {
        getMerchantCategory_result result = new getMerchantCategory_result();
        result.success = iface.getMerchantCategory(args.merchantCategoryVo);
        return result;
      }
    }

    public static class getMerchantCategoryByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantCategoryByPage_args> {
      public getMerchantCategoryByPage() {
        super("getMerchantCategoryByPage");
      }

      public getMerchantCategoryByPage_args getEmptyArgsInstance() {
        return new getMerchantCategoryByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantCategoryByPage_result getResult(I iface, getMerchantCategoryByPage_args args) throws org.apache.thrift.TException {
        getMerchantCategoryByPage_result result = new getMerchantCategoryByPage_result();
        result.success = iface.getMerchantCategoryByPage(args.page, args.merchantCategoryVo);
        return result;
      }
    }

    public static class getMerchantCategoryByCategoryIdList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantCategoryByCategoryIdList_args> {
      public getMerchantCategoryByCategoryIdList() {
        super("getMerchantCategoryByCategoryIdList");
      }

      public getMerchantCategoryByCategoryIdList_args getEmptyArgsInstance() {
        return new getMerchantCategoryByCategoryIdList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantCategoryByCategoryIdList_result getResult(I iface, getMerchantCategoryByCategoryIdList_args args) throws org.apache.thrift.TException {
        getMerchantCategoryByCategoryIdList_result result = new getMerchantCategoryByCategoryIdList_result();
        result.success = iface.getMerchantCategoryByCategoryIdList(args.clientId, args.categoryIdList);
        return result;
      }
    }

    public static class getMerchantCategoryByH5<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantCategoryByH5_args> {
      public getMerchantCategoryByH5() {
        super("getMerchantCategoryByH5");
      }

      public getMerchantCategoryByH5_args getEmptyArgsInstance() {
        return new getMerchantCategoryByH5_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantCategoryByH5_result getResult(I iface, getMerchantCategoryByH5_args args) throws org.apache.thrift.TException {
        getMerchantCategoryByH5_result result = new getMerchantCategoryByH5_result();
        result.success = iface.getMerchantCategoryByH5(args.merchantCategoryVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addMerchantCategory", new addMerchantCategory());
      processMap.put("deleteMerchantCategory", new deleteMerchantCategory());
      processMap.put("updateMerchantCategory", new updateMerchantCategory());
      processMap.put("getMerchantCategoryById", new getMerchantCategoryById());
      processMap.put("getMerchantCategory", new getMerchantCategory());
      processMap.put("getMerchantCategoryByPage", new getMerchantCategoryByPage());
      processMap.put("getMerchantCategoryByCategoryIdList", new getMerchantCategoryByCategoryIdList());
      processMap.put("getMerchantCategoryByH5", new getMerchantCategoryByH5());
      return processMap;
    }

    public static class addMerchantCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMerchantCategory_args, com.froad.thrift.vo.MerchantCategoryAddVoRes> {
      public addMerchantCategory() {
        super("addMerchantCategory");
      }

      public addMerchantCategory_args getEmptyArgsInstance() {
        return new addMerchantCategory_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantCategoryAddVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantCategoryAddVoRes>() { 
          public void onComplete(com.froad.thrift.vo.MerchantCategoryAddVoRes o) {
            addMerchantCategory_result result = new addMerchantCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addMerchantCategory_result result = new addMerchantCategory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addMerchantCategory_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantCategoryAddVoRes> resultHandler) throws TException {
        iface.addMerchantCategory(args.originVo, args.merchantCategoryVo,resultHandler);
      }
    }

    public static class deleteMerchantCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteMerchantCategory_args, com.froad.thrift.vo.ResultVo> {
      public deleteMerchantCategory() {
        super("deleteMerchantCategory");
      }

      public deleteMerchantCategory_args getEmptyArgsInstance() {
        return new deleteMerchantCategory_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            deleteMerchantCategory_result result = new deleteMerchantCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteMerchantCategory_result result = new deleteMerchantCategory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteMerchantCategory_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.deleteMerchantCategory(args.originVo, args.merchantCategoryVo,resultHandler);
      }
    }

    public static class updateMerchantCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMerchantCategory_args, com.froad.thrift.vo.ResultVo> {
      public updateMerchantCategory() {
        super("updateMerchantCategory");
      }

      public updateMerchantCategory_args getEmptyArgsInstance() {
        return new updateMerchantCategory_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateMerchantCategory_result result = new updateMerchantCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMerchantCategory_result result = new updateMerchantCategory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMerchantCategory_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateMerchantCategory(args.originVo, args.merchantCategoryVo,resultHandler);
      }
    }

    public static class getMerchantCategoryById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantCategoryById_args, com.froad.thrift.vo.MerchantCategoryVo> {
      public getMerchantCategoryById() {
        super("getMerchantCategoryById");
      }

      public getMerchantCategoryById_args getEmptyArgsInstance() {
        return new getMerchantCategoryById_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantCategoryVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantCategoryVo>() { 
          public void onComplete(com.froad.thrift.vo.MerchantCategoryVo o) {
            getMerchantCategoryById_result result = new getMerchantCategoryById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantCategoryById_result result = new getMerchantCategoryById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantCategoryById_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantCategoryVo> resultHandler) throws TException {
        iface.getMerchantCategoryById(args.clientId, args.id,resultHandler);
      }
    }

    public static class getMerchantCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantCategory_args, List<com.froad.thrift.vo.MerchantCategoryVo>> {
      public getMerchantCategory() {
        super("getMerchantCategory");
      }

      public getMerchantCategory_args getEmptyArgsInstance() {
        return new getMerchantCategory_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.MerchantCategoryVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.MerchantCategoryVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.MerchantCategoryVo> o) {
            getMerchantCategory_result result = new getMerchantCategory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantCategory_result result = new getMerchantCategory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantCategory_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.MerchantCategoryVo>> resultHandler) throws TException {
        iface.getMerchantCategory(args.merchantCategoryVo,resultHandler);
      }
    }

    public static class getMerchantCategoryByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantCategoryByPage_args, com.froad.thrift.vo.MerchantCategoryPageVoRes> {
      public getMerchantCategoryByPage() {
        super("getMerchantCategoryByPage");
      }

      public getMerchantCategoryByPage_args getEmptyArgsInstance() {
        return new getMerchantCategoryByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantCategoryPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantCategoryPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.MerchantCategoryPageVoRes o) {
            getMerchantCategoryByPage_result result = new getMerchantCategoryByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantCategoryByPage_result result = new getMerchantCategoryByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantCategoryByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantCategoryPageVoRes> resultHandler) throws TException {
        iface.getMerchantCategoryByPage(args.page, args.merchantCategoryVo,resultHandler);
      }
    }

    public static class getMerchantCategoryByCategoryIdList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantCategoryByCategoryIdList_args, List<com.froad.thrift.vo.MerchantCategoryVo>> {
      public getMerchantCategoryByCategoryIdList() {
        super("getMerchantCategoryByCategoryIdList");
      }

      public getMerchantCategoryByCategoryIdList_args getEmptyArgsInstance() {
        return new getMerchantCategoryByCategoryIdList_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.MerchantCategoryVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.MerchantCategoryVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.MerchantCategoryVo> o) {
            getMerchantCategoryByCategoryIdList_result result = new getMerchantCategoryByCategoryIdList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantCategoryByCategoryIdList_result result = new getMerchantCategoryByCategoryIdList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantCategoryByCategoryIdList_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.MerchantCategoryVo>> resultHandler) throws TException {
        iface.getMerchantCategoryByCategoryIdList(args.clientId, args.categoryIdList,resultHandler);
      }
    }

    public static class getMerchantCategoryByH5<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantCategoryByH5_args, List<com.froad.thrift.vo.MerchantCategoryVo>> {
      public getMerchantCategoryByH5() {
        super("getMerchantCategoryByH5");
      }

      public getMerchantCategoryByH5_args getEmptyArgsInstance() {
        return new getMerchantCategoryByH5_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.MerchantCategoryVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.MerchantCategoryVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.MerchantCategoryVo> o) {
            getMerchantCategoryByH5_result result = new getMerchantCategoryByH5_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantCategoryByH5_result result = new getMerchantCategoryByH5_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantCategoryByH5_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.MerchantCategoryVo>> resultHandler) throws TException {
        iface.getMerchantCategoryByH5(args.merchantCategoryVo,resultHandler);
      }
    }

  }

  public static class addMerchantCategory_args implements org.apache.thrift.TBase<addMerchantCategory_args, addMerchantCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantCategory_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_CATEGORY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantCategoryVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantCategory_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_CATEGORY_VO((short)2, "merchantCategoryVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_CATEGORY_VO
            return MERCHANT_CATEGORY_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_CATEGORY_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantCategoryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantCategoryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantCategory_args.class, metaDataMap);
    }

    public addMerchantCategory_args() {
    }

    public addMerchantCategory_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo)
    {
      this();
      this.originVo = originVo;
      this.merchantCategoryVo = merchantCategoryVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantCategory_args(addMerchantCategory_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantCategoryVo()) {
        this.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo(other.merchantCategoryVo);
      }
    }

    public addMerchantCategory_args deepCopy() {
      return new addMerchantCategory_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantCategoryVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addMerchantCategory_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.MerchantCategoryVo getMerchantCategoryVo() {
      return this.merchantCategoryVo;
    }

    public addMerchantCategory_args setMerchantCategoryVo(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) {
      this.merchantCategoryVo = merchantCategoryVo;
      return this;
    }

    public void unsetMerchantCategoryVo() {
      this.merchantCategoryVo = null;
    }

    /** Returns true if field merchantCategoryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantCategoryVo() {
      return this.merchantCategoryVo != null;
    }

    public void setMerchantCategoryVoIsSet(boolean value) {
      if (!value) {
        this.merchantCategoryVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_CATEGORY_VO:
        if (value == null) {
          unsetMerchantCategoryVo();
        } else {
          setMerchantCategoryVo((com.froad.thrift.vo.MerchantCategoryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_CATEGORY_VO:
        return getMerchantCategoryVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_CATEGORY_VO:
        return isSetMerchantCategoryVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantCategory_args)
        return this.equals((addMerchantCategory_args)that);
      return false;
    }

    public boolean equals(addMerchantCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantCategoryVo = true && this.isSetMerchantCategoryVo();
      boolean that_present_merchantCategoryVo = true && that.isSetMerchantCategoryVo();
      if (this_present_merchantCategoryVo || that_present_merchantCategoryVo) {
        if (!(this_present_merchantCategoryVo && that_present_merchantCategoryVo))
          return false;
        if (!this.merchantCategoryVo.equals(that.merchantCategoryVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantCategoryVo = true && (isSetMerchantCategoryVo());
      list.add(present_merchantCategoryVo);
      if (present_merchantCategoryVo)
        list.add(merchantCategoryVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantCategoryVo()).compareTo(other.isSetMerchantCategoryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantCategoryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantCategoryVo, other.merchantCategoryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantCategory_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantCategoryVo:");
      if (this.merchantCategoryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantCategoryVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (merchantCategoryVo != null) {
        merchantCategoryVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantCategory_argsStandardSchemeFactory implements SchemeFactory {
      public addMerchantCategory_argsStandardScheme getScheme() {
        return new addMerchantCategory_argsStandardScheme();
      }
    }

    private static class addMerchantCategory_argsStandardScheme extends StandardScheme<addMerchantCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_CATEGORY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo();
                struct.merchantCategoryVo.read(iprot);
                struct.setMerchantCategoryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantCategoryVo != null) {
          oprot.writeFieldBegin(MERCHANT_CATEGORY_VO_FIELD_DESC);
          struct.merchantCategoryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantCategory_argsTupleSchemeFactory implements SchemeFactory {
      public addMerchantCategory_argsTupleScheme getScheme() {
        return new addMerchantCategory_argsTupleScheme();
      }
    }

    private static class addMerchantCategory_argsTupleScheme extends TupleScheme<addMerchantCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantCategoryVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantCategoryVo()) {
          struct.merchantCategoryVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo();
          struct.merchantCategoryVo.read(iprot);
          struct.setMerchantCategoryVoIsSet(true);
        }
      }
    }

  }

  public static class addMerchantCategory_result implements org.apache.thrift.TBase<addMerchantCategory_result, addMerchantCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantCategory_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantCategoryAddVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantCategoryAddVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantCategory_result.class, metaDataMap);
    }

    public addMerchantCategory_result() {
    }

    public addMerchantCategory_result(
      com.froad.thrift.vo.MerchantCategoryAddVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantCategory_result(addMerchantCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantCategoryAddVoRes(other.success);
      }
    }

    public addMerchantCategory_result deepCopy() {
      return new addMerchantCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantCategoryAddVoRes getSuccess() {
      return this.success;
    }

    public addMerchantCategory_result setSuccess(com.froad.thrift.vo.MerchantCategoryAddVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantCategoryAddVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantCategory_result)
        return this.equals((addMerchantCategory_result)that);
      return false;
    }

    public boolean equals(addMerchantCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantCategory_resultStandardSchemeFactory implements SchemeFactory {
      public addMerchantCategory_resultStandardScheme getScheme() {
        return new addMerchantCategory_resultStandardScheme();
      }
    }

    private static class addMerchantCategory_resultStandardScheme extends StandardScheme<addMerchantCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantCategoryAddVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantCategory_resultTupleSchemeFactory implements SchemeFactory {
      public addMerchantCategory_resultTupleScheme getScheme() {
        return new addMerchantCategory_resultTupleScheme();
      }
    }

    private static class addMerchantCategory_resultTupleScheme extends TupleScheme<addMerchantCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantCategoryAddVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteMerchantCategory_args implements org.apache.thrift.TBase<deleteMerchantCategory_args, deleteMerchantCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMerchantCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMerchantCategory_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_CATEGORY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantCategoryVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteMerchantCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteMerchantCategory_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_CATEGORY_VO((short)2, "merchantCategoryVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_CATEGORY_VO
            return MERCHANT_CATEGORY_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_CATEGORY_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantCategoryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantCategoryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMerchantCategory_args.class, metaDataMap);
    }

    public deleteMerchantCategory_args() {
    }

    public deleteMerchantCategory_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo)
    {
      this();
      this.originVo = originVo;
      this.merchantCategoryVo = merchantCategoryVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMerchantCategory_args(deleteMerchantCategory_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantCategoryVo()) {
        this.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo(other.merchantCategoryVo);
      }
    }

    public deleteMerchantCategory_args deepCopy() {
      return new deleteMerchantCategory_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantCategoryVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public deleteMerchantCategory_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.MerchantCategoryVo getMerchantCategoryVo() {
      return this.merchantCategoryVo;
    }

    public deleteMerchantCategory_args setMerchantCategoryVo(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) {
      this.merchantCategoryVo = merchantCategoryVo;
      return this;
    }

    public void unsetMerchantCategoryVo() {
      this.merchantCategoryVo = null;
    }

    /** Returns true if field merchantCategoryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantCategoryVo() {
      return this.merchantCategoryVo != null;
    }

    public void setMerchantCategoryVoIsSet(boolean value) {
      if (!value) {
        this.merchantCategoryVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_CATEGORY_VO:
        if (value == null) {
          unsetMerchantCategoryVo();
        } else {
          setMerchantCategoryVo((com.froad.thrift.vo.MerchantCategoryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_CATEGORY_VO:
        return getMerchantCategoryVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_CATEGORY_VO:
        return isSetMerchantCategoryVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMerchantCategory_args)
        return this.equals((deleteMerchantCategory_args)that);
      return false;
    }

    public boolean equals(deleteMerchantCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantCategoryVo = true && this.isSetMerchantCategoryVo();
      boolean that_present_merchantCategoryVo = true && that.isSetMerchantCategoryVo();
      if (this_present_merchantCategoryVo || that_present_merchantCategoryVo) {
        if (!(this_present_merchantCategoryVo && that_present_merchantCategoryVo))
          return false;
        if (!this.merchantCategoryVo.equals(that.merchantCategoryVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantCategoryVo = true && (isSetMerchantCategoryVo());
      list.add(present_merchantCategoryVo);
      if (present_merchantCategoryVo)
        list.add(merchantCategoryVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteMerchantCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantCategoryVo()).compareTo(other.isSetMerchantCategoryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantCategoryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantCategoryVo, other.merchantCategoryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteMerchantCategory_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantCategoryVo:");
      if (this.merchantCategoryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantCategoryVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (merchantCategoryVo != null) {
        merchantCategoryVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMerchantCategory_argsStandardSchemeFactory implements SchemeFactory {
      public deleteMerchantCategory_argsStandardScheme getScheme() {
        return new deleteMerchantCategory_argsStandardScheme();
      }
    }

    private static class deleteMerchantCategory_argsStandardScheme extends StandardScheme<deleteMerchantCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteMerchantCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_CATEGORY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo();
                struct.merchantCategoryVo.read(iprot);
                struct.setMerchantCategoryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteMerchantCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantCategoryVo != null) {
          oprot.writeFieldBegin(MERCHANT_CATEGORY_VO_FIELD_DESC);
          struct.merchantCategoryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMerchantCategory_argsTupleSchemeFactory implements SchemeFactory {
      public deleteMerchantCategory_argsTupleScheme getScheme() {
        return new deleteMerchantCategory_argsTupleScheme();
      }
    }

    private static class deleteMerchantCategory_argsTupleScheme extends TupleScheme<deleteMerchantCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteMerchantCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantCategoryVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantCategoryVo()) {
          struct.merchantCategoryVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteMerchantCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo();
          struct.merchantCategoryVo.read(iprot);
          struct.setMerchantCategoryVoIsSet(true);
        }
      }
    }

  }

  public static class deleteMerchantCategory_result implements org.apache.thrift.TBase<deleteMerchantCategory_result, deleteMerchantCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMerchantCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMerchantCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteMerchantCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteMerchantCategory_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMerchantCategory_result.class, metaDataMap);
    }

    public deleteMerchantCategory_result() {
    }

    public deleteMerchantCategory_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMerchantCategory_result(deleteMerchantCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public deleteMerchantCategory_result deepCopy() {
      return new deleteMerchantCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public deleteMerchantCategory_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMerchantCategory_result)
        return this.equals((deleteMerchantCategory_result)that);
      return false;
    }

    public boolean equals(deleteMerchantCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteMerchantCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteMerchantCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMerchantCategory_resultStandardSchemeFactory implements SchemeFactory {
      public deleteMerchantCategory_resultStandardScheme getScheme() {
        return new deleteMerchantCategory_resultStandardScheme();
      }
    }

    private static class deleteMerchantCategory_resultStandardScheme extends StandardScheme<deleteMerchantCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteMerchantCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteMerchantCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMerchantCategory_resultTupleSchemeFactory implements SchemeFactory {
      public deleteMerchantCategory_resultTupleScheme getScheme() {
        return new deleteMerchantCategory_resultTupleScheme();
      }
    }

    private static class deleteMerchantCategory_resultTupleScheme extends TupleScheme<deleteMerchantCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteMerchantCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteMerchantCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateMerchantCategory_args implements org.apache.thrift.TBase<updateMerchantCategory_args, updateMerchantCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMerchantCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMerchantCategory_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_CATEGORY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantCategoryVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMerchantCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMerchantCategory_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_CATEGORY_VO((short)2, "merchantCategoryVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_CATEGORY_VO
            return MERCHANT_CATEGORY_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_CATEGORY_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantCategoryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantCategoryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMerchantCategory_args.class, metaDataMap);
    }

    public updateMerchantCategory_args() {
    }

    public updateMerchantCategory_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo)
    {
      this();
      this.originVo = originVo;
      this.merchantCategoryVo = merchantCategoryVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMerchantCategory_args(updateMerchantCategory_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantCategoryVo()) {
        this.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo(other.merchantCategoryVo);
      }
    }

    public updateMerchantCategory_args deepCopy() {
      return new updateMerchantCategory_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantCategoryVo = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateMerchantCategory_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.MerchantCategoryVo getMerchantCategoryVo() {
      return this.merchantCategoryVo;
    }

    public updateMerchantCategory_args setMerchantCategoryVo(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) {
      this.merchantCategoryVo = merchantCategoryVo;
      return this;
    }

    public void unsetMerchantCategoryVo() {
      this.merchantCategoryVo = null;
    }

    /** Returns true if field merchantCategoryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantCategoryVo() {
      return this.merchantCategoryVo != null;
    }

    public void setMerchantCategoryVoIsSet(boolean value) {
      if (!value) {
        this.merchantCategoryVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_CATEGORY_VO:
        if (value == null) {
          unsetMerchantCategoryVo();
        } else {
          setMerchantCategoryVo((com.froad.thrift.vo.MerchantCategoryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_CATEGORY_VO:
        return getMerchantCategoryVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_CATEGORY_VO:
        return isSetMerchantCategoryVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMerchantCategory_args)
        return this.equals((updateMerchantCategory_args)that);
      return false;
    }

    public boolean equals(updateMerchantCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantCategoryVo = true && this.isSetMerchantCategoryVo();
      boolean that_present_merchantCategoryVo = true && that.isSetMerchantCategoryVo();
      if (this_present_merchantCategoryVo || that_present_merchantCategoryVo) {
        if (!(this_present_merchantCategoryVo && that_present_merchantCategoryVo))
          return false;
        if (!this.merchantCategoryVo.equals(that.merchantCategoryVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantCategoryVo = true && (isSetMerchantCategoryVo());
      list.add(present_merchantCategoryVo);
      if (present_merchantCategoryVo)
        list.add(merchantCategoryVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMerchantCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantCategoryVo()).compareTo(other.isSetMerchantCategoryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantCategoryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantCategoryVo, other.merchantCategoryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMerchantCategory_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantCategoryVo:");
      if (this.merchantCategoryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantCategoryVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (merchantCategoryVo != null) {
        merchantCategoryVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMerchantCategory_argsStandardSchemeFactory implements SchemeFactory {
      public updateMerchantCategory_argsStandardScheme getScheme() {
        return new updateMerchantCategory_argsStandardScheme();
      }
    }

    private static class updateMerchantCategory_argsStandardScheme extends StandardScheme<updateMerchantCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMerchantCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_CATEGORY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo();
                struct.merchantCategoryVo.read(iprot);
                struct.setMerchantCategoryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMerchantCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantCategoryVo != null) {
          oprot.writeFieldBegin(MERCHANT_CATEGORY_VO_FIELD_DESC);
          struct.merchantCategoryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMerchantCategory_argsTupleSchemeFactory implements SchemeFactory {
      public updateMerchantCategory_argsTupleScheme getScheme() {
        return new updateMerchantCategory_argsTupleScheme();
      }
    }

    private static class updateMerchantCategory_argsTupleScheme extends TupleScheme<updateMerchantCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMerchantCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantCategoryVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantCategoryVo()) {
          struct.merchantCategoryVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMerchantCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo();
          struct.merchantCategoryVo.read(iprot);
          struct.setMerchantCategoryVoIsSet(true);
        }
      }
    }

  }

  public static class updateMerchantCategory_result implements org.apache.thrift.TBase<updateMerchantCategory_result, updateMerchantCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMerchantCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMerchantCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMerchantCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMerchantCategory_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMerchantCategory_result.class, metaDataMap);
    }

    public updateMerchantCategory_result() {
    }

    public updateMerchantCategory_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMerchantCategory_result(updateMerchantCategory_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateMerchantCategory_result deepCopy() {
      return new updateMerchantCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateMerchantCategory_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMerchantCategory_result)
        return this.equals((updateMerchantCategory_result)that);
      return false;
    }

    public boolean equals(updateMerchantCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMerchantCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMerchantCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMerchantCategory_resultStandardSchemeFactory implements SchemeFactory {
      public updateMerchantCategory_resultStandardScheme getScheme() {
        return new updateMerchantCategory_resultStandardScheme();
      }
    }

    private static class updateMerchantCategory_resultStandardScheme extends StandardScheme<updateMerchantCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMerchantCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMerchantCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMerchantCategory_resultTupleSchemeFactory implements SchemeFactory {
      public updateMerchantCategory_resultTupleScheme getScheme() {
        return new updateMerchantCategory_resultTupleScheme();
      }
    }

    private static class updateMerchantCategory_resultTupleScheme extends TupleScheme<updateMerchantCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMerchantCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMerchantCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantCategoryById_args implements org.apache.thrift.TBase<getMerchantCategoryById_args, getMerchantCategoryById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantCategoryById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantCategoryById_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantCategoryById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantCategoryById_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantCategoryById_args.class, metaDataMap);
    }

    public getMerchantCategoryById_args() {
    }

    public getMerchantCategoryById_args(
      String clientId,
      long id)
    {
      this();
      this.clientId = clientId;
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantCategoryById_args(getMerchantCategoryById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.id = other.id;
    }

    public getMerchantCategoryById_args deepCopy() {
      return new getMerchantCategoryById_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setIdIsSet(false);
      this.id = 0;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getMerchantCategoryById_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getId() {
      return this.id;
    }

    public getMerchantCategoryById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantCategoryById_args)
        return this.equals((getMerchantCategoryById_args)that);
      return false;
    }

    public boolean equals(getMerchantCategoryById_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantCategoryById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantCategoryById_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantCategoryById_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantCategoryById_argsStandardScheme getScheme() {
        return new getMerchantCategoryById_argsStandardScheme();
      }
    }

    private static class getMerchantCategoryById_argsStandardScheme extends StandardScheme<getMerchantCategoryById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantCategoryById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantCategoryById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantCategoryById_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantCategoryById_argsTupleScheme getScheme() {
        return new getMerchantCategoryById_argsTupleScheme();
      }
    }

    private static class getMerchantCategoryById_argsTupleScheme extends TupleScheme<getMerchantCategoryById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getMerchantCategoryById_result implements org.apache.thrift.TBase<getMerchantCategoryById_result, getMerchantCategoryById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantCategoryById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantCategoryById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantCategoryById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantCategoryById_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantCategoryVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantCategoryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantCategoryById_result.class, metaDataMap);
    }

    public getMerchantCategoryById_result() {
    }

    public getMerchantCategoryById_result(
      com.froad.thrift.vo.MerchantCategoryVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantCategoryById_result(getMerchantCategoryById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantCategoryVo(other.success);
      }
    }

    public getMerchantCategoryById_result deepCopy() {
      return new getMerchantCategoryById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantCategoryVo getSuccess() {
      return this.success;
    }

    public getMerchantCategoryById_result setSuccess(com.froad.thrift.vo.MerchantCategoryVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantCategoryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantCategoryById_result)
        return this.equals((getMerchantCategoryById_result)that);
      return false;
    }

    public boolean equals(getMerchantCategoryById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantCategoryById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantCategoryById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantCategoryById_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantCategoryById_resultStandardScheme getScheme() {
        return new getMerchantCategoryById_resultStandardScheme();
      }
    }

    private static class getMerchantCategoryById_resultStandardScheme extends StandardScheme<getMerchantCategoryById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantCategoryById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantCategoryVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantCategoryById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantCategoryById_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantCategoryById_resultTupleScheme getScheme() {
        return new getMerchantCategoryById_resultTupleScheme();
      }
    }

    private static class getMerchantCategoryById_resultTupleScheme extends TupleScheme<getMerchantCategoryById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantCategoryVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantCategory_args implements org.apache.thrift.TBase<getMerchantCategory_args, getMerchantCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantCategory_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_CATEGORY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantCategoryVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantCategory_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_CATEGORY_VO((short)1, "merchantCategoryVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_CATEGORY_VO
            return MERCHANT_CATEGORY_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_CATEGORY_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantCategoryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantCategoryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantCategory_args.class, metaDataMap);
    }

    public getMerchantCategory_args() {
    }

    public getMerchantCategory_args(
      com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo)
    {
      this();
      this.merchantCategoryVo = merchantCategoryVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantCategory_args(getMerchantCategory_args other) {
      if (other.isSetMerchantCategoryVo()) {
        this.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo(other.merchantCategoryVo);
      }
    }

    public getMerchantCategory_args deepCopy() {
      return new getMerchantCategory_args(this);
    }

    @Override
    public void clear() {
      this.merchantCategoryVo = null;
    }

    public com.froad.thrift.vo.MerchantCategoryVo getMerchantCategoryVo() {
      return this.merchantCategoryVo;
    }

    public getMerchantCategory_args setMerchantCategoryVo(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) {
      this.merchantCategoryVo = merchantCategoryVo;
      return this;
    }

    public void unsetMerchantCategoryVo() {
      this.merchantCategoryVo = null;
    }

    /** Returns true if field merchantCategoryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantCategoryVo() {
      return this.merchantCategoryVo != null;
    }

    public void setMerchantCategoryVoIsSet(boolean value) {
      if (!value) {
        this.merchantCategoryVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_CATEGORY_VO:
        if (value == null) {
          unsetMerchantCategoryVo();
        } else {
          setMerchantCategoryVo((com.froad.thrift.vo.MerchantCategoryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_CATEGORY_VO:
        return getMerchantCategoryVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_CATEGORY_VO:
        return isSetMerchantCategoryVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantCategory_args)
        return this.equals((getMerchantCategory_args)that);
      return false;
    }

    public boolean equals(getMerchantCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantCategoryVo = true && this.isSetMerchantCategoryVo();
      boolean that_present_merchantCategoryVo = true && that.isSetMerchantCategoryVo();
      if (this_present_merchantCategoryVo || that_present_merchantCategoryVo) {
        if (!(this_present_merchantCategoryVo && that_present_merchantCategoryVo))
          return false;
        if (!this.merchantCategoryVo.equals(that.merchantCategoryVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantCategoryVo = true && (isSetMerchantCategoryVo());
      list.add(present_merchantCategoryVo);
      if (present_merchantCategoryVo)
        list.add(merchantCategoryVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantCategoryVo()).compareTo(other.isSetMerchantCategoryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantCategoryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantCategoryVo, other.merchantCategoryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantCategory_args(");
      boolean first = true;

      sb.append("merchantCategoryVo:");
      if (this.merchantCategoryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantCategoryVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (merchantCategoryVo != null) {
        merchantCategoryVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantCategory_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantCategory_argsStandardScheme getScheme() {
        return new getMerchantCategory_argsStandardScheme();
      }
    }

    private static class getMerchantCategory_argsStandardScheme extends StandardScheme<getMerchantCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_CATEGORY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo();
                struct.merchantCategoryVo.read(iprot);
                struct.setMerchantCategoryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantCategoryVo != null) {
          oprot.writeFieldBegin(MERCHANT_CATEGORY_VO_FIELD_DESC);
          struct.merchantCategoryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantCategory_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantCategory_argsTupleScheme getScheme() {
        return new getMerchantCategory_argsTupleScheme();
      }
    }

    private static class getMerchantCategory_argsTupleScheme extends TupleScheme<getMerchantCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantCategoryVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantCategoryVo()) {
          struct.merchantCategoryVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo();
          struct.merchantCategoryVo.read(iprot);
          struct.setMerchantCategoryVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantCategory_result implements org.apache.thrift.TBase<getMerchantCategory_result, getMerchantCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantCategory_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.MerchantCategoryVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantCategoryVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantCategory_result.class, metaDataMap);
    }

    public getMerchantCategory_result() {
    }

    public getMerchantCategory_result(
      List<com.froad.thrift.vo.MerchantCategoryVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantCategory_result(getMerchantCategory_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.MerchantCategoryVo> __this__success = new ArrayList<com.froad.thrift.vo.MerchantCategoryVo>(other.success.size());
        for (com.froad.thrift.vo.MerchantCategoryVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.MerchantCategoryVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMerchantCategory_result deepCopy() {
      return new getMerchantCategory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.MerchantCategoryVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.MerchantCategoryVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.MerchantCategoryVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.MerchantCategoryVo> getSuccess() {
      return this.success;
    }

    public getMerchantCategory_result setSuccess(List<com.froad.thrift.vo.MerchantCategoryVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.MerchantCategoryVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantCategory_result)
        return this.equals((getMerchantCategory_result)that);
      return false;
    }

    public boolean equals(getMerchantCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantCategory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantCategory_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantCategory_resultStandardScheme getScheme() {
        return new getMerchantCategory_resultStandardScheme();
      }
    }

    private static class getMerchantCategory_resultStandardScheme extends StandardScheme<getMerchantCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.MerchantCategoryVo>(_list0.size);
                  com.froad.thrift.vo.MerchantCategoryVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.MerchantCategoryVo();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.MerchantCategoryVo _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantCategory_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantCategory_resultTupleScheme getScheme() {
        return new getMerchantCategory_resultTupleScheme();
      }
    }

    private static class getMerchantCategory_resultTupleScheme extends TupleScheme<getMerchantCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.MerchantCategoryVo _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.MerchantCategoryVo>(_list5.size);
            com.froad.thrift.vo.MerchantCategoryVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.MerchantCategoryVo();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantCategoryByPage_args implements org.apache.thrift.TBase<getMerchantCategoryByPage_args, getMerchantCategoryByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantCategoryByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantCategoryByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_CATEGORY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantCategoryVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantCategoryByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantCategoryByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      MERCHANT_CATEGORY_VO((short)2, "merchantCategoryVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // MERCHANT_CATEGORY_VO
            return MERCHANT_CATEGORY_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.MERCHANT_CATEGORY_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantCategoryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantCategoryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantCategoryByPage_args.class, metaDataMap);
    }

    public getMerchantCategoryByPage_args() {
    }

    public getMerchantCategoryByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo)
    {
      this();
      this.page = page;
      this.merchantCategoryVo = merchantCategoryVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantCategoryByPage_args(getMerchantCategoryByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetMerchantCategoryVo()) {
        this.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo(other.merchantCategoryVo);
      }
    }

    public getMerchantCategoryByPage_args deepCopy() {
      return new getMerchantCategoryByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.merchantCategoryVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getMerchantCategoryByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.MerchantCategoryVo getMerchantCategoryVo() {
      return this.merchantCategoryVo;
    }

    public getMerchantCategoryByPage_args setMerchantCategoryVo(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) {
      this.merchantCategoryVo = merchantCategoryVo;
      return this;
    }

    public void unsetMerchantCategoryVo() {
      this.merchantCategoryVo = null;
    }

    /** Returns true if field merchantCategoryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantCategoryVo() {
      return this.merchantCategoryVo != null;
    }

    public void setMerchantCategoryVoIsSet(boolean value) {
      if (!value) {
        this.merchantCategoryVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case MERCHANT_CATEGORY_VO:
        if (value == null) {
          unsetMerchantCategoryVo();
        } else {
          setMerchantCategoryVo((com.froad.thrift.vo.MerchantCategoryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case MERCHANT_CATEGORY_VO:
        return getMerchantCategoryVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case MERCHANT_CATEGORY_VO:
        return isSetMerchantCategoryVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantCategoryByPage_args)
        return this.equals((getMerchantCategoryByPage_args)that);
      return false;
    }

    public boolean equals(getMerchantCategoryByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_merchantCategoryVo = true && this.isSetMerchantCategoryVo();
      boolean that_present_merchantCategoryVo = true && that.isSetMerchantCategoryVo();
      if (this_present_merchantCategoryVo || that_present_merchantCategoryVo) {
        if (!(this_present_merchantCategoryVo && that_present_merchantCategoryVo))
          return false;
        if (!this.merchantCategoryVo.equals(that.merchantCategoryVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_merchantCategoryVo = true && (isSetMerchantCategoryVo());
      list.add(present_merchantCategoryVo);
      if (present_merchantCategoryVo)
        list.add(merchantCategoryVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantCategoryByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantCategoryVo()).compareTo(other.isSetMerchantCategoryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantCategoryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantCategoryVo, other.merchantCategoryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantCategoryByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantCategoryVo:");
      if (this.merchantCategoryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantCategoryVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (merchantCategoryVo != null) {
        merchantCategoryVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantCategoryByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantCategoryByPage_argsStandardScheme getScheme() {
        return new getMerchantCategoryByPage_argsStandardScheme();
      }
    }

    private static class getMerchantCategoryByPage_argsStandardScheme extends StandardScheme<getMerchantCategoryByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantCategoryByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_CATEGORY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo();
                struct.merchantCategoryVo.read(iprot);
                struct.setMerchantCategoryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantCategoryByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantCategoryVo != null) {
          oprot.writeFieldBegin(MERCHANT_CATEGORY_VO_FIELD_DESC);
          struct.merchantCategoryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantCategoryByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantCategoryByPage_argsTupleScheme getScheme() {
        return new getMerchantCategoryByPage_argsTupleScheme();
      }
    }

    private static class getMerchantCategoryByPage_argsTupleScheme extends TupleScheme<getMerchantCategoryByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantCategoryVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetMerchantCategoryVo()) {
          struct.merchantCategoryVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo();
          struct.merchantCategoryVo.read(iprot);
          struct.setMerchantCategoryVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantCategoryByPage_result implements org.apache.thrift.TBase<getMerchantCategoryByPage_result, getMerchantCategoryByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantCategoryByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantCategoryByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantCategoryByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantCategoryByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantCategoryPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantCategoryPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantCategoryByPage_result.class, metaDataMap);
    }

    public getMerchantCategoryByPage_result() {
    }

    public getMerchantCategoryByPage_result(
      com.froad.thrift.vo.MerchantCategoryPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantCategoryByPage_result(getMerchantCategoryByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantCategoryPageVoRes(other.success);
      }
    }

    public getMerchantCategoryByPage_result deepCopy() {
      return new getMerchantCategoryByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantCategoryPageVoRes getSuccess() {
      return this.success;
    }

    public getMerchantCategoryByPage_result setSuccess(com.froad.thrift.vo.MerchantCategoryPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantCategoryPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantCategoryByPage_result)
        return this.equals((getMerchantCategoryByPage_result)that);
      return false;
    }

    public boolean equals(getMerchantCategoryByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantCategoryByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantCategoryByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantCategoryByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantCategoryByPage_resultStandardScheme getScheme() {
        return new getMerchantCategoryByPage_resultStandardScheme();
      }
    }

    private static class getMerchantCategoryByPage_resultStandardScheme extends StandardScheme<getMerchantCategoryByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantCategoryByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantCategoryPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantCategoryByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantCategoryByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantCategoryByPage_resultTupleScheme getScheme() {
        return new getMerchantCategoryByPage_resultTupleScheme();
      }
    }

    private static class getMerchantCategoryByPage_resultTupleScheme extends TupleScheme<getMerchantCategoryByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantCategoryPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantCategoryByCategoryIdList_args implements org.apache.thrift.TBase<getMerchantCategoryByCategoryIdList_args, getMerchantCategoryByCategoryIdList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantCategoryByCategoryIdList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantCategoryByCategoryIdList_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CATEGORY_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryIdList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantCategoryByCategoryIdList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantCategoryByCategoryIdList_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public List<Long> categoryIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      CATEGORY_ID_LIST((short)2, "categoryIdList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // CATEGORY_ID_LIST
            return CATEGORY_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CATEGORY_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("categoryIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantCategoryByCategoryIdList_args.class, metaDataMap);
    }

    public getMerchantCategoryByCategoryIdList_args() {
    }

    public getMerchantCategoryByCategoryIdList_args(
      String clientId,
      List<Long> categoryIdList)
    {
      this();
      this.clientId = clientId;
      this.categoryIdList = categoryIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantCategoryByCategoryIdList_args(getMerchantCategoryByCategoryIdList_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetCategoryIdList()) {
        List<Long> __this__categoryIdList = new ArrayList<Long>(other.categoryIdList);
        this.categoryIdList = __this__categoryIdList;
      }
    }

    public getMerchantCategoryByCategoryIdList_args deepCopy() {
      return new getMerchantCategoryByCategoryIdList_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.categoryIdList = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getMerchantCategoryByCategoryIdList_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public int getCategoryIdListSize() {
      return (this.categoryIdList == null) ? 0 : this.categoryIdList.size();
    }

    public java.util.Iterator<Long> getCategoryIdListIterator() {
      return (this.categoryIdList == null) ? null : this.categoryIdList.iterator();
    }

    public void addToCategoryIdList(long elem) {
      if (this.categoryIdList == null) {
        this.categoryIdList = new ArrayList<Long>();
      }
      this.categoryIdList.add(elem);
    }

    public List<Long> getCategoryIdList() {
      return this.categoryIdList;
    }

    public getMerchantCategoryByCategoryIdList_args setCategoryIdList(List<Long> categoryIdList) {
      this.categoryIdList = categoryIdList;
      return this;
    }

    public void unsetCategoryIdList() {
      this.categoryIdList = null;
    }

    /** Returns true if field categoryIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryIdList() {
      return this.categoryIdList != null;
    }

    public void setCategoryIdListIsSet(boolean value) {
      if (!value) {
        this.categoryIdList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case CATEGORY_ID_LIST:
        if (value == null) {
          unsetCategoryIdList();
        } else {
          setCategoryIdList((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case CATEGORY_ID_LIST:
        return getCategoryIdList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case CATEGORY_ID_LIST:
        return isSetCategoryIdList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantCategoryByCategoryIdList_args)
        return this.equals((getMerchantCategoryByCategoryIdList_args)that);
      return false;
    }

    public boolean equals(getMerchantCategoryByCategoryIdList_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_categoryIdList = true && this.isSetCategoryIdList();
      boolean that_present_categoryIdList = true && that.isSetCategoryIdList();
      if (this_present_categoryIdList || that_present_categoryIdList) {
        if (!(this_present_categoryIdList && that_present_categoryIdList))
          return false;
        if (!this.categoryIdList.equals(that.categoryIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_categoryIdList = true && (isSetCategoryIdList());
      list.add(present_categoryIdList);
      if (present_categoryIdList)
        list.add(categoryIdList);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantCategoryByCategoryIdList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategoryIdList()).compareTo(other.isSetCategoryIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryIdList, other.categoryIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantCategoryByCategoryIdList_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("categoryIdList:");
      if (this.categoryIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantCategoryByCategoryIdList_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantCategoryByCategoryIdList_argsStandardScheme getScheme() {
        return new getMerchantCategoryByCategoryIdList_argsStandardScheme();
      }
    }

    private static class getMerchantCategoryByCategoryIdList_argsStandardScheme extends StandardScheme<getMerchantCategoryByCategoryIdList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantCategoryByCategoryIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CATEGORY_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.categoryIdList = new ArrayList<Long>(_list8.size);
                  long _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readI64();
                    struct.categoryIdList.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setCategoryIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantCategoryByCategoryIdList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.categoryIdList != null) {
          oprot.writeFieldBegin(CATEGORY_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.categoryIdList.size()));
            for (long _iter11 : struct.categoryIdList)
            {
              oprot.writeI64(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantCategoryByCategoryIdList_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantCategoryByCategoryIdList_argsTupleScheme getScheme() {
        return new getMerchantCategoryByCategoryIdList_argsTupleScheme();
      }
    }

    private static class getMerchantCategoryByCategoryIdList_argsTupleScheme extends TupleScheme<getMerchantCategoryByCategoryIdList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryByCategoryIdList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetCategoryIdList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetCategoryIdList()) {
          {
            oprot.writeI32(struct.categoryIdList.size());
            for (long _iter12 : struct.categoryIdList)
            {
              oprot.writeI64(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryByCategoryIdList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.categoryIdList = new ArrayList<Long>(_list13.size);
            long _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readI64();
              struct.categoryIdList.add(_elem14);
            }
          }
          struct.setCategoryIdListIsSet(true);
        }
      }
    }

  }

  public static class getMerchantCategoryByCategoryIdList_result implements org.apache.thrift.TBase<getMerchantCategoryByCategoryIdList_result, getMerchantCategoryByCategoryIdList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantCategoryByCategoryIdList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantCategoryByCategoryIdList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantCategoryByCategoryIdList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantCategoryByCategoryIdList_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.MerchantCategoryVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantCategoryVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantCategoryByCategoryIdList_result.class, metaDataMap);
    }

    public getMerchantCategoryByCategoryIdList_result() {
    }

    public getMerchantCategoryByCategoryIdList_result(
      List<com.froad.thrift.vo.MerchantCategoryVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantCategoryByCategoryIdList_result(getMerchantCategoryByCategoryIdList_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.MerchantCategoryVo> __this__success = new ArrayList<com.froad.thrift.vo.MerchantCategoryVo>(other.success.size());
        for (com.froad.thrift.vo.MerchantCategoryVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.MerchantCategoryVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMerchantCategoryByCategoryIdList_result deepCopy() {
      return new getMerchantCategoryByCategoryIdList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.MerchantCategoryVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.MerchantCategoryVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.MerchantCategoryVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.MerchantCategoryVo> getSuccess() {
      return this.success;
    }

    public getMerchantCategoryByCategoryIdList_result setSuccess(List<com.froad.thrift.vo.MerchantCategoryVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.MerchantCategoryVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantCategoryByCategoryIdList_result)
        return this.equals((getMerchantCategoryByCategoryIdList_result)that);
      return false;
    }

    public boolean equals(getMerchantCategoryByCategoryIdList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantCategoryByCategoryIdList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantCategoryByCategoryIdList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantCategoryByCategoryIdList_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantCategoryByCategoryIdList_resultStandardScheme getScheme() {
        return new getMerchantCategoryByCategoryIdList_resultStandardScheme();
      }
    }

    private static class getMerchantCategoryByCategoryIdList_resultStandardScheme extends StandardScheme<getMerchantCategoryByCategoryIdList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantCategoryByCategoryIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.MerchantCategoryVo>(_list16.size);
                  com.froad.thrift.vo.MerchantCategoryVo _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.froad.thrift.vo.MerchantCategoryVo();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantCategoryByCategoryIdList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.MerchantCategoryVo _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantCategoryByCategoryIdList_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantCategoryByCategoryIdList_resultTupleScheme getScheme() {
        return new getMerchantCategoryByCategoryIdList_resultTupleScheme();
      }
    }

    private static class getMerchantCategoryByCategoryIdList_resultTupleScheme extends TupleScheme<getMerchantCategoryByCategoryIdList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryByCategoryIdList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.MerchantCategoryVo _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryByCategoryIdList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.MerchantCategoryVo>(_list21.size);
            com.froad.thrift.vo.MerchantCategoryVo _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new com.froad.thrift.vo.MerchantCategoryVo();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantCategoryByH5_args implements org.apache.thrift.TBase<getMerchantCategoryByH5_args, getMerchantCategoryByH5_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantCategoryByH5_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantCategoryByH5_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_CATEGORY_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantCategoryVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantCategoryByH5_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantCategoryByH5_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_CATEGORY_VO((short)1, "merchantCategoryVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_CATEGORY_VO
            return MERCHANT_CATEGORY_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_CATEGORY_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantCategoryVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantCategoryVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantCategoryByH5_args.class, metaDataMap);
    }

    public getMerchantCategoryByH5_args() {
    }

    public getMerchantCategoryByH5_args(
      com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo)
    {
      this();
      this.merchantCategoryVo = merchantCategoryVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantCategoryByH5_args(getMerchantCategoryByH5_args other) {
      if (other.isSetMerchantCategoryVo()) {
        this.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo(other.merchantCategoryVo);
      }
    }

    public getMerchantCategoryByH5_args deepCopy() {
      return new getMerchantCategoryByH5_args(this);
    }

    @Override
    public void clear() {
      this.merchantCategoryVo = null;
    }

    public com.froad.thrift.vo.MerchantCategoryVo getMerchantCategoryVo() {
      return this.merchantCategoryVo;
    }

    public getMerchantCategoryByH5_args setMerchantCategoryVo(com.froad.thrift.vo.MerchantCategoryVo merchantCategoryVo) {
      this.merchantCategoryVo = merchantCategoryVo;
      return this;
    }

    public void unsetMerchantCategoryVo() {
      this.merchantCategoryVo = null;
    }

    /** Returns true if field merchantCategoryVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantCategoryVo() {
      return this.merchantCategoryVo != null;
    }

    public void setMerchantCategoryVoIsSet(boolean value) {
      if (!value) {
        this.merchantCategoryVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_CATEGORY_VO:
        if (value == null) {
          unsetMerchantCategoryVo();
        } else {
          setMerchantCategoryVo((com.froad.thrift.vo.MerchantCategoryVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_CATEGORY_VO:
        return getMerchantCategoryVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_CATEGORY_VO:
        return isSetMerchantCategoryVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantCategoryByH5_args)
        return this.equals((getMerchantCategoryByH5_args)that);
      return false;
    }

    public boolean equals(getMerchantCategoryByH5_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantCategoryVo = true && this.isSetMerchantCategoryVo();
      boolean that_present_merchantCategoryVo = true && that.isSetMerchantCategoryVo();
      if (this_present_merchantCategoryVo || that_present_merchantCategoryVo) {
        if (!(this_present_merchantCategoryVo && that_present_merchantCategoryVo))
          return false;
        if (!this.merchantCategoryVo.equals(that.merchantCategoryVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantCategoryVo = true && (isSetMerchantCategoryVo());
      list.add(present_merchantCategoryVo);
      if (present_merchantCategoryVo)
        list.add(merchantCategoryVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantCategoryByH5_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantCategoryVo()).compareTo(other.isSetMerchantCategoryVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantCategoryVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantCategoryVo, other.merchantCategoryVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantCategoryByH5_args(");
      boolean first = true;

      sb.append("merchantCategoryVo:");
      if (this.merchantCategoryVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantCategoryVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (merchantCategoryVo != null) {
        merchantCategoryVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantCategoryByH5_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantCategoryByH5_argsStandardScheme getScheme() {
        return new getMerchantCategoryByH5_argsStandardScheme();
      }
    }

    private static class getMerchantCategoryByH5_argsStandardScheme extends StandardScheme<getMerchantCategoryByH5_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantCategoryByH5_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_CATEGORY_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo();
                struct.merchantCategoryVo.read(iprot);
                struct.setMerchantCategoryVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantCategoryByH5_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantCategoryVo != null) {
          oprot.writeFieldBegin(MERCHANT_CATEGORY_VO_FIELD_DESC);
          struct.merchantCategoryVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantCategoryByH5_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantCategoryByH5_argsTupleScheme getScheme() {
        return new getMerchantCategoryByH5_argsTupleScheme();
      }
    }

    private static class getMerchantCategoryByH5_argsTupleScheme extends TupleScheme<getMerchantCategoryByH5_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryByH5_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantCategoryVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantCategoryVo()) {
          struct.merchantCategoryVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryByH5_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantCategoryVo = new com.froad.thrift.vo.MerchantCategoryVo();
          struct.merchantCategoryVo.read(iprot);
          struct.setMerchantCategoryVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantCategoryByH5_result implements org.apache.thrift.TBase<getMerchantCategoryByH5_result, getMerchantCategoryByH5_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantCategoryByH5_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantCategoryByH5_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantCategoryByH5_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantCategoryByH5_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.MerchantCategoryVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantCategoryVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantCategoryByH5_result.class, metaDataMap);
    }

    public getMerchantCategoryByH5_result() {
    }

    public getMerchantCategoryByH5_result(
      List<com.froad.thrift.vo.MerchantCategoryVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantCategoryByH5_result(getMerchantCategoryByH5_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.MerchantCategoryVo> __this__success = new ArrayList<com.froad.thrift.vo.MerchantCategoryVo>(other.success.size());
        for (com.froad.thrift.vo.MerchantCategoryVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.MerchantCategoryVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMerchantCategoryByH5_result deepCopy() {
      return new getMerchantCategoryByH5_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.MerchantCategoryVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.MerchantCategoryVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.MerchantCategoryVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.MerchantCategoryVo> getSuccess() {
      return this.success;
    }

    public getMerchantCategoryByH5_result setSuccess(List<com.froad.thrift.vo.MerchantCategoryVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.MerchantCategoryVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantCategoryByH5_result)
        return this.equals((getMerchantCategoryByH5_result)that);
      return false;
    }

    public boolean equals(getMerchantCategoryByH5_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantCategoryByH5_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantCategoryByH5_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantCategoryByH5_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantCategoryByH5_resultStandardScheme getScheme() {
        return new getMerchantCategoryByH5_resultStandardScheme();
      }
    }

    private static class getMerchantCategoryByH5_resultStandardScheme extends StandardScheme<getMerchantCategoryByH5_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantCategoryByH5_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.MerchantCategoryVo>(_list24.size);
                  com.froad.thrift.vo.MerchantCategoryVo _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.froad.thrift.vo.MerchantCategoryVo();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantCategoryByH5_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.MerchantCategoryVo _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantCategoryByH5_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantCategoryByH5_resultTupleScheme getScheme() {
        return new getMerchantCategoryByH5_resultTupleScheme();
      }
    }

    private static class getMerchantCategoryByH5_resultTupleScheme extends TupleScheme<getMerchantCategoryByH5_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryByH5_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.MerchantCategoryVo _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantCategoryByH5_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.MerchantCategoryVo>(_list29.size);
            com.froad.thrift.vo.MerchantCategoryVo _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new com.froad.thrift.vo.MerchantCategoryVo();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
