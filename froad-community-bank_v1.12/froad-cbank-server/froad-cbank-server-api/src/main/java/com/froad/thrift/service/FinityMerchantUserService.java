/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class FinityMerchantUserService {

  /**
   * MerchantUserService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 增加 MerchantUser
     * @param merchantUser
     * @return MerchantUserAddVoRes
     * 
     * @param originVo
     * @param merchantUserVo
     * @param resourceIds
     */
    public com.froad.thrift.vo.CommonAddVoRes addMerchantUser(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantUserVo merchantUserVo, List<Long> resourceIds) throws org.apache.thrift.TException;

    /**
     * 修改 MerchantUser
     * @param merchantUser
     * @return boolean
     * 
     * @param originVo
     * @param merchantUserVo
     * @param resourceIds
     */
    public com.froad.thrift.vo.ResultVo updateMerchantUser(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantUserVo merchantUserVo, List<Long> resourceIds) throws org.apache.thrift.TException;

    /**
     * 查询 MerchantUser
     * @param merchantUser
     * @return List<MerchantUserVo>
     * 
     * @param merchantUserVo
     */
    public List<com.froad.thrift.vo.MerchantUserVo> getMerchantUser(com.froad.thrift.vo.MerchantUserVo merchantUserVo) throws org.apache.thrift.TException;

    /**
     * 分页查询 MerchantUser
     * @param merchantUser
     * @return List<MerchantUserVo>
     * 
     * @param page
     * @param merchantUserVo
     */
    public com.froad.thrift.vo.MerchantUserPageVoRes getMerchantUserByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantUserVo merchantUserVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void addMerchantUser(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantUserVo merchantUserVo, List<Long> resourceIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMerchantUser(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantUserVo merchantUserVo, List<Long> resourceIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantUser(com.froad.thrift.vo.MerchantUserVo merchantUserVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMerchantUserByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantUserVo merchantUserVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.CommonAddVoRes addMerchantUser(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantUserVo merchantUserVo, List<Long> resourceIds) throws org.apache.thrift.TException
    {
      send_addMerchantUser(originVo, merchantUserVo, resourceIds);
      return recv_addMerchantUser();
    }

    public void send_addMerchantUser(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantUserVo merchantUserVo, List<Long> resourceIds) throws org.apache.thrift.TException
    {
      addMerchantUser_args args = new addMerchantUser_args();
      args.setOriginVo(originVo);
      args.setMerchantUserVo(merchantUserVo);
      args.setResourceIds(resourceIds);
      sendBase("addMerchantUser", args);
    }

    public com.froad.thrift.vo.CommonAddVoRes recv_addMerchantUser() throws org.apache.thrift.TException
    {
      addMerchantUser_result result = new addMerchantUser_result();
      receiveBase(result, "addMerchantUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMerchantUser failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateMerchantUser(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantUserVo merchantUserVo, List<Long> resourceIds) throws org.apache.thrift.TException
    {
      send_updateMerchantUser(originVo, merchantUserVo, resourceIds);
      return recv_updateMerchantUser();
    }

    public void send_updateMerchantUser(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantUserVo merchantUserVo, List<Long> resourceIds) throws org.apache.thrift.TException
    {
      updateMerchantUser_args args = new updateMerchantUser_args();
      args.setOriginVo(originVo);
      args.setMerchantUserVo(merchantUserVo);
      args.setResourceIds(resourceIds);
      sendBase("updateMerchantUser", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateMerchantUser() throws org.apache.thrift.TException
    {
      updateMerchantUser_result result = new updateMerchantUser_result();
      receiveBase(result, "updateMerchantUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMerchantUser failed: unknown result");
    }

    public List<com.froad.thrift.vo.MerchantUserVo> getMerchantUser(com.froad.thrift.vo.MerchantUserVo merchantUserVo) throws org.apache.thrift.TException
    {
      send_getMerchantUser(merchantUserVo);
      return recv_getMerchantUser();
    }

    public void send_getMerchantUser(com.froad.thrift.vo.MerchantUserVo merchantUserVo) throws org.apache.thrift.TException
    {
      getMerchantUser_args args = new getMerchantUser_args();
      args.setMerchantUserVo(merchantUserVo);
      sendBase("getMerchantUser", args);
    }

    public List<com.froad.thrift.vo.MerchantUserVo> recv_getMerchantUser() throws org.apache.thrift.TException
    {
      getMerchantUser_result result = new getMerchantUser_result();
      receiveBase(result, "getMerchantUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantUser failed: unknown result");
    }

    public com.froad.thrift.vo.MerchantUserPageVoRes getMerchantUserByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantUserVo merchantUserVo) throws org.apache.thrift.TException
    {
      send_getMerchantUserByPage(page, merchantUserVo);
      return recv_getMerchantUserByPage();
    }

    public void send_getMerchantUserByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantUserVo merchantUserVo) throws org.apache.thrift.TException
    {
      getMerchantUserByPage_args args = new getMerchantUserByPage_args();
      args.setPage(page);
      args.setMerchantUserVo(merchantUserVo);
      sendBase("getMerchantUserByPage", args);
    }

    public com.froad.thrift.vo.MerchantUserPageVoRes recv_getMerchantUserByPage() throws org.apache.thrift.TException
    {
      getMerchantUserByPage_result result = new getMerchantUserByPage_result();
      receiveBase(result, "getMerchantUserByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantUserByPage failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addMerchantUser(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantUserVo merchantUserVo, List<Long> resourceIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMerchantUser_call method_call = new addMerchantUser_call(originVo, merchantUserVo, resourceIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMerchantUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.MerchantUserVo merchantUserVo;
      private List<Long> resourceIds;
      public addMerchantUser_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantUserVo merchantUserVo, List<Long> resourceIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantUserVo = merchantUserVo;
        this.resourceIds = resourceIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMerchantUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMerchantUser_args args = new addMerchantUser_args();
        args.setOriginVo(originVo);
        args.setMerchantUserVo(merchantUserVo);
        args.setResourceIds(resourceIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.CommonAddVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addMerchantUser();
      }
    }

    public void updateMerchantUser(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantUserVo merchantUserVo, List<Long> resourceIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMerchantUser_call method_call = new updateMerchantUser_call(originVo, merchantUserVo, resourceIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMerchantUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private com.froad.thrift.vo.MerchantUserVo merchantUserVo;
      private List<Long> resourceIds;
      public updateMerchantUser_call(com.froad.thrift.vo.OriginVo originVo, com.froad.thrift.vo.MerchantUserVo merchantUserVo, List<Long> resourceIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.merchantUserVo = merchantUserVo;
        this.resourceIds = resourceIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMerchantUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMerchantUser_args args = new updateMerchantUser_args();
        args.setOriginVo(originVo);
        args.setMerchantUserVo(merchantUserVo);
        args.setResourceIds(resourceIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMerchantUser();
      }
    }

    public void getMerchantUser(com.froad.thrift.vo.MerchantUserVo merchantUserVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantUser_call method_call = new getMerchantUser_call(merchantUserVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.MerchantUserVo merchantUserVo;
      public getMerchantUser_call(com.froad.thrift.vo.MerchantUserVo merchantUserVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantUserVo = merchantUserVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantUser_args args = new getMerchantUser_args();
        args.setMerchantUserVo(merchantUserVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.froad.thrift.vo.MerchantUserVo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantUser();
      }
    }

    public void getMerchantUserByPage(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantUserVo merchantUserVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantUserByPage_call method_call = new getMerchantUserByPage_call(page, merchantUserVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantUserByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.PageVo page;
      private com.froad.thrift.vo.MerchantUserVo merchantUserVo;
      public getMerchantUserByPage_call(com.froad.thrift.vo.PageVo page, com.froad.thrift.vo.MerchantUserVo merchantUserVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.merchantUserVo = merchantUserVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantUserByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantUserByPage_args args = new getMerchantUserByPage_args();
        args.setPage(page);
        args.setMerchantUserVo(merchantUserVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantUserPageVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantUserByPage();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addMerchantUser", new addMerchantUser());
      processMap.put("updateMerchantUser", new updateMerchantUser());
      processMap.put("getMerchantUser", new getMerchantUser());
      processMap.put("getMerchantUserByPage", new getMerchantUserByPage());
      return processMap;
    }

    public static class addMerchantUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMerchantUser_args> {
      public addMerchantUser() {
        super("addMerchantUser");
      }

      public addMerchantUser_args getEmptyArgsInstance() {
        return new addMerchantUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addMerchantUser_result getResult(I iface, addMerchantUser_args args) throws org.apache.thrift.TException {
        addMerchantUser_result result = new addMerchantUser_result();
        result.success = iface.addMerchantUser(args.originVo, args.merchantUserVo, args.resourceIds);
        return result;
      }
    }

    public static class updateMerchantUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMerchantUser_args> {
      public updateMerchantUser() {
        super("updateMerchantUser");
      }

      public updateMerchantUser_args getEmptyArgsInstance() {
        return new updateMerchantUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMerchantUser_result getResult(I iface, updateMerchantUser_args args) throws org.apache.thrift.TException {
        updateMerchantUser_result result = new updateMerchantUser_result();
        result.success = iface.updateMerchantUser(args.originVo, args.merchantUserVo, args.resourceIds);
        return result;
      }
    }

    public static class getMerchantUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantUser_args> {
      public getMerchantUser() {
        super("getMerchantUser");
      }

      public getMerchantUser_args getEmptyArgsInstance() {
        return new getMerchantUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantUser_result getResult(I iface, getMerchantUser_args args) throws org.apache.thrift.TException {
        getMerchantUser_result result = new getMerchantUser_result();
        result.success = iface.getMerchantUser(args.merchantUserVo);
        return result;
      }
    }

    public static class getMerchantUserByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantUserByPage_args> {
      public getMerchantUserByPage() {
        super("getMerchantUserByPage");
      }

      public getMerchantUserByPage_args getEmptyArgsInstance() {
        return new getMerchantUserByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantUserByPage_result getResult(I iface, getMerchantUserByPage_args args) throws org.apache.thrift.TException {
        getMerchantUserByPage_result result = new getMerchantUserByPage_result();
        result.success = iface.getMerchantUserByPage(args.page, args.merchantUserVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addMerchantUser", new addMerchantUser());
      processMap.put("updateMerchantUser", new updateMerchantUser());
      processMap.put("getMerchantUser", new getMerchantUser());
      processMap.put("getMerchantUserByPage", new getMerchantUserByPage());
      return processMap;
    }

    public static class addMerchantUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMerchantUser_args, com.froad.thrift.vo.CommonAddVoRes> {
      public addMerchantUser() {
        super("addMerchantUser");
      }

      public addMerchantUser_args getEmptyArgsInstance() {
        return new addMerchantUser_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes>() { 
          public void onComplete(com.froad.thrift.vo.CommonAddVoRes o) {
            addMerchantUser_result result = new addMerchantUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addMerchantUser_result result = new addMerchantUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addMerchantUser_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.CommonAddVoRes> resultHandler) throws TException {
        iface.addMerchantUser(args.originVo, args.merchantUserVo, args.resourceIds,resultHandler);
      }
    }

    public static class updateMerchantUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMerchantUser_args, com.froad.thrift.vo.ResultVo> {
      public updateMerchantUser() {
        super("updateMerchantUser");
      }

      public updateMerchantUser_args getEmptyArgsInstance() {
        return new updateMerchantUser_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateMerchantUser_result result = new updateMerchantUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMerchantUser_result result = new updateMerchantUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMerchantUser_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateMerchantUser(args.originVo, args.merchantUserVo, args.resourceIds,resultHandler);
      }
    }

    public static class getMerchantUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantUser_args, List<com.froad.thrift.vo.MerchantUserVo>> {
      public getMerchantUser() {
        super("getMerchantUser");
      }

      public getMerchantUser_args getEmptyArgsInstance() {
        return new getMerchantUser_args();
      }

      public AsyncMethodCallback<List<com.froad.thrift.vo.MerchantUserVo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.froad.thrift.vo.MerchantUserVo>>() { 
          public void onComplete(List<com.froad.thrift.vo.MerchantUserVo> o) {
            getMerchantUser_result result = new getMerchantUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantUser_result result = new getMerchantUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantUser_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.froad.thrift.vo.MerchantUserVo>> resultHandler) throws TException {
        iface.getMerchantUser(args.merchantUserVo,resultHandler);
      }
    }

    public static class getMerchantUserByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantUserByPage_args, com.froad.thrift.vo.MerchantUserPageVoRes> {
      public getMerchantUserByPage() {
        super("getMerchantUserByPage");
      }

      public getMerchantUserByPage_args getEmptyArgsInstance() {
        return new getMerchantUserByPage_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantUserPageVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantUserPageVoRes>() { 
          public void onComplete(com.froad.thrift.vo.MerchantUserPageVoRes o) {
            getMerchantUserByPage_result result = new getMerchantUserByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantUserByPage_result result = new getMerchantUserByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantUserByPage_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantUserPageVoRes> resultHandler) throws TException {
        iface.getMerchantUserByPage(args.page, args.merchantUserVo,resultHandler);
      }
    }

  }

  public static class addMerchantUser_args implements org.apache.thrift.TBase<addMerchantUser_args, addMerchantUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantUser_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_USER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantUserVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RESOURCE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceIds", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantUser_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.MerchantUserVo merchantUserVo; // required
    public List<Long> resourceIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_USER_VO((short)2, "merchantUserVo"),
      RESOURCE_IDS((short)3, "resourceIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_USER_VO
            return MERCHANT_USER_VO;
          case 3: // RESOURCE_IDS
            return RESOURCE_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_USER_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantUserVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantUserVo.class)));
      tmpMap.put(_Fields.RESOURCE_IDS, new org.apache.thrift.meta_data.FieldMetaData("resourceIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantUser_args.class, metaDataMap);
    }

    public addMerchantUser_args() {
    }

    public addMerchantUser_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.MerchantUserVo merchantUserVo,
      List<Long> resourceIds)
    {
      this();
      this.originVo = originVo;
      this.merchantUserVo = merchantUserVo;
      this.resourceIds = resourceIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantUser_args(addMerchantUser_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantUserVo()) {
        this.merchantUserVo = new com.froad.thrift.vo.MerchantUserVo(other.merchantUserVo);
      }
      if (other.isSetResourceIds()) {
        List<Long> __this__resourceIds = new ArrayList<Long>(other.resourceIds);
        this.resourceIds = __this__resourceIds;
      }
    }

    public addMerchantUser_args deepCopy() {
      return new addMerchantUser_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantUserVo = null;
      this.resourceIds = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public addMerchantUser_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.MerchantUserVo getMerchantUserVo() {
      return this.merchantUserVo;
    }

    public addMerchantUser_args setMerchantUserVo(com.froad.thrift.vo.MerchantUserVo merchantUserVo) {
      this.merchantUserVo = merchantUserVo;
      return this;
    }

    public void unsetMerchantUserVo() {
      this.merchantUserVo = null;
    }

    /** Returns true if field merchantUserVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantUserVo() {
      return this.merchantUserVo != null;
    }

    public void setMerchantUserVoIsSet(boolean value) {
      if (!value) {
        this.merchantUserVo = null;
      }
    }

    public int getResourceIdsSize() {
      return (this.resourceIds == null) ? 0 : this.resourceIds.size();
    }

    public java.util.Iterator<Long> getResourceIdsIterator() {
      return (this.resourceIds == null) ? null : this.resourceIds.iterator();
    }

    public void addToResourceIds(long elem) {
      if (this.resourceIds == null) {
        this.resourceIds = new ArrayList<Long>();
      }
      this.resourceIds.add(elem);
    }

    public List<Long> getResourceIds() {
      return this.resourceIds;
    }

    public addMerchantUser_args setResourceIds(List<Long> resourceIds) {
      this.resourceIds = resourceIds;
      return this;
    }

    public void unsetResourceIds() {
      this.resourceIds = null;
    }

    /** Returns true if field resourceIds is set (has been assigned a value) and false otherwise */
    public boolean isSetResourceIds() {
      return this.resourceIds != null;
    }

    public void setResourceIdsIsSet(boolean value) {
      if (!value) {
        this.resourceIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_USER_VO:
        if (value == null) {
          unsetMerchantUserVo();
        } else {
          setMerchantUserVo((com.froad.thrift.vo.MerchantUserVo)value);
        }
        break;

      case RESOURCE_IDS:
        if (value == null) {
          unsetResourceIds();
        } else {
          setResourceIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_USER_VO:
        return getMerchantUserVo();

      case RESOURCE_IDS:
        return getResourceIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_USER_VO:
        return isSetMerchantUserVo();
      case RESOURCE_IDS:
        return isSetResourceIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantUser_args)
        return this.equals((addMerchantUser_args)that);
      return false;
    }

    public boolean equals(addMerchantUser_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantUserVo = true && this.isSetMerchantUserVo();
      boolean that_present_merchantUserVo = true && that.isSetMerchantUserVo();
      if (this_present_merchantUserVo || that_present_merchantUserVo) {
        if (!(this_present_merchantUserVo && that_present_merchantUserVo))
          return false;
        if (!this.merchantUserVo.equals(that.merchantUserVo))
          return false;
      }

      boolean this_present_resourceIds = true && this.isSetResourceIds();
      boolean that_present_resourceIds = true && that.isSetResourceIds();
      if (this_present_resourceIds || that_present_resourceIds) {
        if (!(this_present_resourceIds && that_present_resourceIds))
          return false;
        if (!this.resourceIds.equals(that.resourceIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantUserVo = true && (isSetMerchantUserVo());
      list.add(present_merchantUserVo);
      if (present_merchantUserVo)
        list.add(merchantUserVo);

      boolean present_resourceIds = true && (isSetResourceIds());
      list.add(present_resourceIds);
      if (present_resourceIds)
        list.add(resourceIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantUserVo()).compareTo(other.isSetMerchantUserVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantUserVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantUserVo, other.merchantUserVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResourceIds()).compareTo(other.isSetResourceIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResourceIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceIds, other.resourceIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantUser_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantUserVo:");
      if (this.merchantUserVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantUserVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resourceIds:");
      if (this.resourceIds == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (merchantUserVo != null) {
        merchantUserVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantUser_argsStandardSchemeFactory implements SchemeFactory {
      public addMerchantUser_argsStandardScheme getScheme() {
        return new addMerchantUser_argsStandardScheme();
      }
    }

    private static class addMerchantUser_argsStandardScheme extends StandardScheme<addMerchantUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_USER_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantUserVo = new com.froad.thrift.vo.MerchantUserVo();
                struct.merchantUserVo.read(iprot);
                struct.setMerchantUserVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RESOURCE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.resourceIds = new ArrayList<Long>(_list0.size);
                  long _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readI64();
                    struct.resourceIds.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setResourceIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantUserVo != null) {
          oprot.writeFieldBegin(MERCHANT_USER_VO_FIELD_DESC);
          struct.merchantUserVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.resourceIds != null) {
          oprot.writeFieldBegin(RESOURCE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.resourceIds.size()));
            for (long _iter3 : struct.resourceIds)
            {
              oprot.writeI64(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantUser_argsTupleSchemeFactory implements SchemeFactory {
      public addMerchantUser_argsTupleScheme getScheme() {
        return new addMerchantUser_argsTupleScheme();
      }
    }

    private static class addMerchantUser_argsTupleScheme extends TupleScheme<addMerchantUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantUserVo()) {
          optionals.set(1);
        }
        if (struct.isSetResourceIds()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantUserVo()) {
          struct.merchantUserVo.write(oprot);
        }
        if (struct.isSetResourceIds()) {
          {
            oprot.writeI32(struct.resourceIds.size());
            for (long _iter4 : struct.resourceIds)
            {
              oprot.writeI64(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantUserVo = new com.froad.thrift.vo.MerchantUserVo();
          struct.merchantUserVo.read(iprot);
          struct.setMerchantUserVoIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.resourceIds = new ArrayList<Long>(_list5.size);
            long _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readI64();
              struct.resourceIds.add(_elem6);
            }
          }
          struct.setResourceIdsIsSet(true);
        }
      }
    }

  }

  public static class addMerchantUser_result implements org.apache.thrift.TBase<addMerchantUser_result, addMerchantUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMerchantUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMerchantUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMerchantUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMerchantUser_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.CommonAddVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.CommonAddVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMerchantUser_result.class, metaDataMap);
    }

    public addMerchantUser_result() {
    }

    public addMerchantUser_result(
      com.froad.thrift.vo.CommonAddVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMerchantUser_result(addMerchantUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.CommonAddVoRes(other.success);
      }
    }

    public addMerchantUser_result deepCopy() {
      return new addMerchantUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.CommonAddVoRes getSuccess() {
      return this.success;
    }

    public addMerchantUser_result setSuccess(com.froad.thrift.vo.CommonAddVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.CommonAddVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMerchantUser_result)
        return this.equals((addMerchantUser_result)that);
      return false;
    }

    public boolean equals(addMerchantUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMerchantUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMerchantUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMerchantUser_resultStandardSchemeFactory implements SchemeFactory {
      public addMerchantUser_resultStandardScheme getScheme() {
        return new addMerchantUser_resultStandardScheme();
      }
    }

    private static class addMerchantUser_resultStandardScheme extends StandardScheme<addMerchantUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMerchantUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.CommonAddVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMerchantUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMerchantUser_resultTupleSchemeFactory implements SchemeFactory {
      public addMerchantUser_resultTupleScheme getScheme() {
        return new addMerchantUser_resultTupleScheme();
      }
    }

    private static class addMerchantUser_resultTupleScheme extends TupleScheme<addMerchantUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMerchantUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMerchantUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.CommonAddVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateMerchantUser_args implements org.apache.thrift.TBase<updateMerchantUser_args, updateMerchantUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMerchantUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMerchantUser_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_USER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantUserVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RESOURCE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceIds", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMerchantUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMerchantUser_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public com.froad.thrift.vo.MerchantUserVo merchantUserVo; // required
    public List<Long> resourceIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      MERCHANT_USER_VO((short)2, "merchantUserVo"),
      RESOURCE_IDS((short)3, "resourceIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // MERCHANT_USER_VO
            return MERCHANT_USER_VO;
          case 3: // RESOURCE_IDS
            return RESOURCE_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.MERCHANT_USER_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantUserVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantUserVo.class)));
      tmpMap.put(_Fields.RESOURCE_IDS, new org.apache.thrift.meta_data.FieldMetaData("resourceIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMerchantUser_args.class, metaDataMap);
    }

    public updateMerchantUser_args() {
    }

    public updateMerchantUser_args(
      com.froad.thrift.vo.OriginVo originVo,
      com.froad.thrift.vo.MerchantUserVo merchantUserVo,
      List<Long> resourceIds)
    {
      this();
      this.originVo = originVo;
      this.merchantUserVo = merchantUserVo;
      this.resourceIds = resourceIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMerchantUser_args(updateMerchantUser_args other) {
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      if (other.isSetMerchantUserVo()) {
        this.merchantUserVo = new com.froad.thrift.vo.MerchantUserVo(other.merchantUserVo);
      }
      if (other.isSetResourceIds()) {
        List<Long> __this__resourceIds = new ArrayList<Long>(other.resourceIds);
        this.resourceIds = __this__resourceIds;
      }
    }

    public updateMerchantUser_args deepCopy() {
      return new updateMerchantUser_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      this.merchantUserVo = null;
      this.resourceIds = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public updateMerchantUser_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public com.froad.thrift.vo.MerchantUserVo getMerchantUserVo() {
      return this.merchantUserVo;
    }

    public updateMerchantUser_args setMerchantUserVo(com.froad.thrift.vo.MerchantUserVo merchantUserVo) {
      this.merchantUserVo = merchantUserVo;
      return this;
    }

    public void unsetMerchantUserVo() {
      this.merchantUserVo = null;
    }

    /** Returns true if field merchantUserVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantUserVo() {
      return this.merchantUserVo != null;
    }

    public void setMerchantUserVoIsSet(boolean value) {
      if (!value) {
        this.merchantUserVo = null;
      }
    }

    public int getResourceIdsSize() {
      return (this.resourceIds == null) ? 0 : this.resourceIds.size();
    }

    public java.util.Iterator<Long> getResourceIdsIterator() {
      return (this.resourceIds == null) ? null : this.resourceIds.iterator();
    }

    public void addToResourceIds(long elem) {
      if (this.resourceIds == null) {
        this.resourceIds = new ArrayList<Long>();
      }
      this.resourceIds.add(elem);
    }

    public List<Long> getResourceIds() {
      return this.resourceIds;
    }

    public updateMerchantUser_args setResourceIds(List<Long> resourceIds) {
      this.resourceIds = resourceIds;
      return this;
    }

    public void unsetResourceIds() {
      this.resourceIds = null;
    }

    /** Returns true if field resourceIds is set (has been assigned a value) and false otherwise */
    public boolean isSetResourceIds() {
      return this.resourceIds != null;
    }

    public void setResourceIdsIsSet(boolean value) {
      if (!value) {
        this.resourceIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case MERCHANT_USER_VO:
        if (value == null) {
          unsetMerchantUserVo();
        } else {
          setMerchantUserVo((com.froad.thrift.vo.MerchantUserVo)value);
        }
        break;

      case RESOURCE_IDS:
        if (value == null) {
          unsetResourceIds();
        } else {
          setResourceIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case MERCHANT_USER_VO:
        return getMerchantUserVo();

      case RESOURCE_IDS:
        return getResourceIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case MERCHANT_USER_VO:
        return isSetMerchantUserVo();
      case RESOURCE_IDS:
        return isSetResourceIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMerchantUser_args)
        return this.equals((updateMerchantUser_args)that);
      return false;
    }

    public boolean equals(updateMerchantUser_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_merchantUserVo = true && this.isSetMerchantUserVo();
      boolean that_present_merchantUserVo = true && that.isSetMerchantUserVo();
      if (this_present_merchantUserVo || that_present_merchantUserVo) {
        if (!(this_present_merchantUserVo && that_present_merchantUserVo))
          return false;
        if (!this.merchantUserVo.equals(that.merchantUserVo))
          return false;
      }

      boolean this_present_resourceIds = true && this.isSetResourceIds();
      boolean that_present_resourceIds = true && that.isSetResourceIds();
      if (this_present_resourceIds || that_present_resourceIds) {
        if (!(this_present_resourceIds && that_present_resourceIds))
          return false;
        if (!this.resourceIds.equals(that.resourceIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_merchantUserVo = true && (isSetMerchantUserVo());
      list.add(present_merchantUserVo);
      if (present_merchantUserVo)
        list.add(merchantUserVo);

      boolean present_resourceIds = true && (isSetResourceIds());
      list.add(present_resourceIds);
      if (present_resourceIds)
        list.add(resourceIds);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMerchantUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantUserVo()).compareTo(other.isSetMerchantUserVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantUserVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantUserVo, other.merchantUserVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetResourceIds()).compareTo(other.isSetResourceIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResourceIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceIds, other.resourceIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMerchantUser_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantUserVo:");
      if (this.merchantUserVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantUserVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resourceIds:");
      if (this.resourceIds == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
      if (merchantUserVo != null) {
        merchantUserVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMerchantUser_argsStandardSchemeFactory implements SchemeFactory {
      public updateMerchantUser_argsStandardScheme getScheme() {
        return new updateMerchantUser_argsStandardScheme();
      }
    }

    private static class updateMerchantUser_argsStandardScheme extends StandardScheme<updateMerchantUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMerchantUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_USER_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantUserVo = new com.froad.thrift.vo.MerchantUserVo();
                struct.merchantUserVo.read(iprot);
                struct.setMerchantUserVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RESOURCE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.resourceIds = new ArrayList<Long>(_list8.size);
                  long _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readI64();
                    struct.resourceIds.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setResourceIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMerchantUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantUserVo != null) {
          oprot.writeFieldBegin(MERCHANT_USER_VO_FIELD_DESC);
          struct.merchantUserVo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.resourceIds != null) {
          oprot.writeFieldBegin(RESOURCE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.resourceIds.size()));
            for (long _iter11 : struct.resourceIds)
            {
              oprot.writeI64(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMerchantUser_argsTupleSchemeFactory implements SchemeFactory {
      public updateMerchantUser_argsTupleScheme getScheme() {
        return new updateMerchantUser_argsTupleScheme();
      }
    }

    private static class updateMerchantUser_argsTupleScheme extends TupleScheme<updateMerchantUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMerchantUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantUserVo()) {
          optionals.set(1);
        }
        if (struct.isSetResourceIds()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetMerchantUserVo()) {
          struct.merchantUserVo.write(oprot);
        }
        if (struct.isSetResourceIds()) {
          {
            oprot.writeI32(struct.resourceIds.size());
            for (long _iter12 : struct.resourceIds)
            {
              oprot.writeI64(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMerchantUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantUserVo = new com.froad.thrift.vo.MerchantUserVo();
          struct.merchantUserVo.read(iprot);
          struct.setMerchantUserVoIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.resourceIds = new ArrayList<Long>(_list13.size);
            long _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readI64();
              struct.resourceIds.add(_elem14);
            }
          }
          struct.setResourceIdsIsSet(true);
        }
      }
    }

  }

  public static class updateMerchantUser_result implements org.apache.thrift.TBase<updateMerchantUser_result, updateMerchantUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMerchantUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMerchantUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMerchantUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMerchantUser_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMerchantUser_result.class, metaDataMap);
    }

    public updateMerchantUser_result() {
    }

    public updateMerchantUser_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMerchantUser_result(updateMerchantUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateMerchantUser_result deepCopy() {
      return new updateMerchantUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateMerchantUser_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMerchantUser_result)
        return this.equals((updateMerchantUser_result)that);
      return false;
    }

    public boolean equals(updateMerchantUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMerchantUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMerchantUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMerchantUser_resultStandardSchemeFactory implements SchemeFactory {
      public updateMerchantUser_resultStandardScheme getScheme() {
        return new updateMerchantUser_resultStandardScheme();
      }
    }

    private static class updateMerchantUser_resultStandardScheme extends StandardScheme<updateMerchantUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMerchantUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMerchantUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMerchantUser_resultTupleSchemeFactory implements SchemeFactory {
      public updateMerchantUser_resultTupleScheme getScheme() {
        return new updateMerchantUser_resultTupleScheme();
      }
    }

    private static class updateMerchantUser_resultTupleScheme extends TupleScheme<updateMerchantUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMerchantUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMerchantUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantUser_args implements org.apache.thrift.TBase<getMerchantUser_args, getMerchantUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantUser_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_USER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantUserVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantUser_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantUserVo merchantUserVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_USER_VO((short)1, "merchantUserVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_USER_VO
            return MERCHANT_USER_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_USER_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantUserVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantUserVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantUser_args.class, metaDataMap);
    }

    public getMerchantUser_args() {
    }

    public getMerchantUser_args(
      com.froad.thrift.vo.MerchantUserVo merchantUserVo)
    {
      this();
      this.merchantUserVo = merchantUserVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantUser_args(getMerchantUser_args other) {
      if (other.isSetMerchantUserVo()) {
        this.merchantUserVo = new com.froad.thrift.vo.MerchantUserVo(other.merchantUserVo);
      }
    }

    public getMerchantUser_args deepCopy() {
      return new getMerchantUser_args(this);
    }

    @Override
    public void clear() {
      this.merchantUserVo = null;
    }

    public com.froad.thrift.vo.MerchantUserVo getMerchantUserVo() {
      return this.merchantUserVo;
    }

    public getMerchantUser_args setMerchantUserVo(com.froad.thrift.vo.MerchantUserVo merchantUserVo) {
      this.merchantUserVo = merchantUserVo;
      return this;
    }

    public void unsetMerchantUserVo() {
      this.merchantUserVo = null;
    }

    /** Returns true if field merchantUserVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantUserVo() {
      return this.merchantUserVo != null;
    }

    public void setMerchantUserVoIsSet(boolean value) {
      if (!value) {
        this.merchantUserVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_USER_VO:
        if (value == null) {
          unsetMerchantUserVo();
        } else {
          setMerchantUserVo((com.froad.thrift.vo.MerchantUserVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_USER_VO:
        return getMerchantUserVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_USER_VO:
        return isSetMerchantUserVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantUser_args)
        return this.equals((getMerchantUser_args)that);
      return false;
    }

    public boolean equals(getMerchantUser_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantUserVo = true && this.isSetMerchantUserVo();
      boolean that_present_merchantUserVo = true && that.isSetMerchantUserVo();
      if (this_present_merchantUserVo || that_present_merchantUserVo) {
        if (!(this_present_merchantUserVo && that_present_merchantUserVo))
          return false;
        if (!this.merchantUserVo.equals(that.merchantUserVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantUserVo = true && (isSetMerchantUserVo());
      list.add(present_merchantUserVo);
      if (present_merchantUserVo)
        list.add(merchantUserVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantUserVo()).compareTo(other.isSetMerchantUserVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantUserVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantUserVo, other.merchantUserVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantUser_args(");
      boolean first = true;

      sb.append("merchantUserVo:");
      if (this.merchantUserVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantUserVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (merchantUserVo != null) {
        merchantUserVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantUser_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantUser_argsStandardScheme getScheme() {
        return new getMerchantUser_argsStandardScheme();
      }
    }

    private static class getMerchantUser_argsStandardScheme extends StandardScheme<getMerchantUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_USER_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantUserVo = new com.froad.thrift.vo.MerchantUserVo();
                struct.merchantUserVo.read(iprot);
                struct.setMerchantUserVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantUserVo != null) {
          oprot.writeFieldBegin(MERCHANT_USER_VO_FIELD_DESC);
          struct.merchantUserVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantUser_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantUser_argsTupleScheme getScheme() {
        return new getMerchantUser_argsTupleScheme();
      }
    }

    private static class getMerchantUser_argsTupleScheme extends TupleScheme<getMerchantUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantUserVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantUserVo()) {
          struct.merchantUserVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantUserVo = new com.froad.thrift.vo.MerchantUserVo();
          struct.merchantUserVo.read(iprot);
          struct.setMerchantUserVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantUser_result implements org.apache.thrift.TBase<getMerchantUser_result, getMerchantUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantUser_resultTupleSchemeFactory());
    }

    public List<com.froad.thrift.vo.MerchantUserVo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantUserVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantUser_result.class, metaDataMap);
    }

    public getMerchantUser_result() {
    }

    public getMerchantUser_result(
      List<com.froad.thrift.vo.MerchantUserVo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantUser_result(getMerchantUser_result other) {
      if (other.isSetSuccess()) {
        List<com.froad.thrift.vo.MerchantUserVo> __this__success = new ArrayList<com.froad.thrift.vo.MerchantUserVo>(other.success.size());
        for (com.froad.thrift.vo.MerchantUserVo other_element : other.success) {
          __this__success.add(new com.froad.thrift.vo.MerchantUserVo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMerchantUser_result deepCopy() {
      return new getMerchantUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.MerchantUserVo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.froad.thrift.vo.MerchantUserVo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.froad.thrift.vo.MerchantUserVo>();
      }
      this.success.add(elem);
    }

    public List<com.froad.thrift.vo.MerchantUserVo> getSuccess() {
      return this.success;
    }

    public getMerchantUser_result setSuccess(List<com.froad.thrift.vo.MerchantUserVo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.froad.thrift.vo.MerchantUserVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantUser_result)
        return this.equals((getMerchantUser_result)that);
      return false;
    }

    public boolean equals(getMerchantUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantUser_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantUser_resultStandardScheme getScheme() {
        return new getMerchantUser_resultStandardScheme();
      }
    }

    private static class getMerchantUser_resultStandardScheme extends StandardScheme<getMerchantUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.froad.thrift.vo.MerchantUserVo>(_list16.size);
                  com.froad.thrift.vo.MerchantUserVo _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.froad.thrift.vo.MerchantUserVo();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.froad.thrift.vo.MerchantUserVo _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantUser_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantUser_resultTupleScheme getScheme() {
        return new getMerchantUser_resultTupleScheme();
      }
    }

    private static class getMerchantUser_resultTupleScheme extends TupleScheme<getMerchantUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.froad.thrift.vo.MerchantUserVo _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.froad.thrift.vo.MerchantUserVo>(_list21.size);
            com.froad.thrift.vo.MerchantUserVo _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new com.froad.thrift.vo.MerchantUserVo();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMerchantUserByPage_args implements org.apache.thrift.TBase<getMerchantUserByPage_args, getMerchantUserByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantUserByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantUserByPage_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_USER_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantUserVo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantUserByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantUserByPage_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PageVo page; // required
    public com.froad.thrift.vo.MerchantUserVo merchantUserVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      MERCHANT_USER_VO((short)2, "merchantUserVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // MERCHANT_USER_VO
            return MERCHANT_USER_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PageVo.class)));
      tmpMap.put(_Fields.MERCHANT_USER_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantUserVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantUserVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantUserByPage_args.class, metaDataMap);
    }

    public getMerchantUserByPage_args() {
    }

    public getMerchantUserByPage_args(
      com.froad.thrift.vo.PageVo page,
      com.froad.thrift.vo.MerchantUserVo merchantUserVo)
    {
      this();
      this.page = page;
      this.merchantUserVo = merchantUserVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantUserByPage_args(getMerchantUserByPage_args other) {
      if (other.isSetPage()) {
        this.page = new com.froad.thrift.vo.PageVo(other.page);
      }
      if (other.isSetMerchantUserVo()) {
        this.merchantUserVo = new com.froad.thrift.vo.MerchantUserVo(other.merchantUserVo);
      }
    }

    public getMerchantUserByPage_args deepCopy() {
      return new getMerchantUserByPage_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.merchantUserVo = null;
    }

    public com.froad.thrift.vo.PageVo getPage() {
      return this.page;
    }

    public getMerchantUserByPage_args setPage(com.froad.thrift.vo.PageVo page) {
      this.page = page;
      return this;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.froad.thrift.vo.MerchantUserVo getMerchantUserVo() {
      return this.merchantUserVo;
    }

    public getMerchantUserByPage_args setMerchantUserVo(com.froad.thrift.vo.MerchantUserVo merchantUserVo) {
      this.merchantUserVo = merchantUserVo;
      return this;
    }

    public void unsetMerchantUserVo() {
      this.merchantUserVo = null;
    }

    /** Returns true if field merchantUserVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantUserVo() {
      return this.merchantUserVo != null;
    }

    public void setMerchantUserVoIsSet(boolean value) {
      if (!value) {
        this.merchantUserVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.froad.thrift.vo.PageVo)value);
        }
        break;

      case MERCHANT_USER_VO:
        if (value == null) {
          unsetMerchantUserVo();
        } else {
          setMerchantUserVo((com.froad.thrift.vo.MerchantUserVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case MERCHANT_USER_VO:
        return getMerchantUserVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case MERCHANT_USER_VO:
        return isSetMerchantUserVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantUserByPage_args)
        return this.equals((getMerchantUserByPage_args)that);
      return false;
    }

    public boolean equals(getMerchantUserByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_merchantUserVo = true && this.isSetMerchantUserVo();
      boolean that_present_merchantUserVo = true && that.isSetMerchantUserVo();
      if (this_present_merchantUserVo || that_present_merchantUserVo) {
        if (!(this_present_merchantUserVo && that_present_merchantUserVo))
          return false;
        if (!this.merchantUserVo.equals(that.merchantUserVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_merchantUserVo = true && (isSetMerchantUserVo());
      list.add(present_merchantUserVo);
      if (present_merchantUserVo)
        list.add(merchantUserVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantUserByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantUserVo()).compareTo(other.isSetMerchantUserVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantUserVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantUserVo, other.merchantUserVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantUserByPage_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantUserVo:");
      if (this.merchantUserVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantUserVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (merchantUserVo != null) {
        merchantUserVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantUserByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantUserByPage_argsStandardScheme getScheme() {
        return new getMerchantUserByPage_argsStandardScheme();
      }
    }

    private static class getMerchantUserByPage_argsStandardScheme extends StandardScheme<getMerchantUserByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantUserByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.froad.thrift.vo.PageVo();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_USER_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantUserVo = new com.froad.thrift.vo.MerchantUserVo();
                struct.merchantUserVo.read(iprot);
                struct.setMerchantUserVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantUserByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.merchantUserVo != null) {
          oprot.writeFieldBegin(MERCHANT_USER_VO_FIELD_DESC);
          struct.merchantUserVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantUserByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantUserByPage_argsTupleScheme getScheme() {
        return new getMerchantUserByPage_argsTupleScheme();
      }
    }

    private static class getMerchantUserByPage_argsTupleScheme extends TupleScheme<getMerchantUserByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantUserByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantUserVo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetMerchantUserVo()) {
          struct.merchantUserVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantUserByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.froad.thrift.vo.PageVo();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantUserVo = new com.froad.thrift.vo.MerchantUserVo();
          struct.merchantUserVo.read(iprot);
          struct.setMerchantUserVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantUserByPage_result implements org.apache.thrift.TBase<getMerchantUserByPage_result, getMerchantUserByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantUserByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantUserByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantUserByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantUserByPage_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantUserPageVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantUserPageVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantUserByPage_result.class, metaDataMap);
    }

    public getMerchantUserByPage_result() {
    }

    public getMerchantUserByPage_result(
      com.froad.thrift.vo.MerchantUserPageVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantUserByPage_result(getMerchantUserByPage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantUserPageVoRes(other.success);
      }
    }

    public getMerchantUserByPage_result deepCopy() {
      return new getMerchantUserByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantUserPageVoRes getSuccess() {
      return this.success;
    }

    public getMerchantUserByPage_result setSuccess(com.froad.thrift.vo.MerchantUserPageVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantUserPageVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantUserByPage_result)
        return this.equals((getMerchantUserByPage_result)that);
      return false;
    }

    public boolean equals(getMerchantUserByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantUserByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantUserByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantUserByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantUserByPage_resultStandardScheme getScheme() {
        return new getMerchantUserByPage_resultStandardScheme();
      }
    }

    private static class getMerchantUserByPage_resultStandardScheme extends StandardScheme<getMerchantUserByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantUserByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantUserPageVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantUserByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantUserByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantUserByPage_resultTupleScheme getScheme() {
        return new getMerchantUserByPage_resultTupleScheme();
      }
    }

    private static class getMerchantUserByPage_resultTupleScheme extends TupleScheme<getMerchantUserByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantUserByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantUserByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantUserPageVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
