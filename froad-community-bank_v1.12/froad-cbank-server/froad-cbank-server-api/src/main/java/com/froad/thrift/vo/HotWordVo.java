/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 热词
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class HotWordVo implements org.apache.thrift.TBase<HotWordVo, HotWordVo._Fields>, java.io.Serializable, Cloneable, Comparable<HotWordVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HotWordVo");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOT_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hotWord", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AREA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("areaId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SEARCH_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("searchCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SEARCH_COUNT_RESUL_FIELD_DESC = new org.apache.thrift.protocol.TField("searchCountResul", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CATEGORY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HotWordVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HotWordVoTupleSchemeFactory());
  }

  public String clientId; // required
  /**
   * 热词
   */
  public String hotWord; // required
  /**
   * 地区id
   */
  public long areaId; // required
  /**
   * 搜索总次数
   */
  public int searchCount; // required
  /**
   * 搜索有结果次数
   */
  public int searchCountResul; // required
  /**
   * 类型0 全部1 商品2商户
   */
  public int categoryType; // required
  /**
   * 0 全部1手工插入2系统统计
   */
  public int type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLIENT_ID((short)1, "clientId"),
    /**
     * 热词
     */
    HOT_WORD((short)2, "hotWord"),
    /**
     * 地区id
     */
    AREA_ID((short)3, "areaId"),
    /**
     * 搜索总次数
     */
    SEARCH_COUNT((short)4, "searchCount"),
    /**
     * 搜索有结果次数
     */
    SEARCH_COUNT_RESUL((short)5, "searchCountResul"),
    /**
     * 类型0 全部1 商品2商户
     */
    CATEGORY_TYPE((short)6, "categoryType"),
    /**
     * 0 全部1手工插入2系统统计
     */
    TYPE((short)7, "type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // HOT_WORD
          return HOT_WORD;
        case 3: // AREA_ID
          return AREA_ID;
        case 4: // SEARCH_COUNT
          return SEARCH_COUNT;
        case 5: // SEARCH_COUNT_RESUL
          return SEARCH_COUNT_RESUL;
        case 6: // CATEGORY_TYPE
          return CATEGORY_TYPE;
        case 7: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AREAID_ISSET_ID = 0;
  private static final int __SEARCHCOUNT_ISSET_ID = 1;
  private static final int __SEARCHCOUNTRESUL_ISSET_ID = 2;
  private static final int __CATEGORYTYPE_ISSET_ID = 3;
  private static final int __TYPE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOT_WORD, new org.apache.thrift.meta_data.FieldMetaData("hotWord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA_ID, new org.apache.thrift.meta_data.FieldMetaData("areaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEARCH_COUNT, new org.apache.thrift.meta_data.FieldMetaData("searchCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEARCH_COUNT_RESUL, new org.apache.thrift.meta_data.FieldMetaData("searchCountResul", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CATEGORY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("categoryType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HotWordVo.class, metaDataMap);
  }

  public HotWordVo() {
  }

  public HotWordVo(
    String clientId,
    String hotWord,
    long areaId,
    int searchCount,
    int searchCountResul,
    int categoryType,
    int type)
  {
    this();
    this.clientId = clientId;
    this.hotWord = hotWord;
    this.areaId = areaId;
    setAreaIdIsSet(true);
    this.searchCount = searchCount;
    setSearchCountIsSet(true);
    this.searchCountResul = searchCountResul;
    setSearchCountResulIsSet(true);
    this.categoryType = categoryType;
    setCategoryTypeIsSet(true);
    this.type = type;
    setTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HotWordVo(HotWordVo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetHotWord()) {
      this.hotWord = other.hotWord;
    }
    this.areaId = other.areaId;
    this.searchCount = other.searchCount;
    this.searchCountResul = other.searchCountResul;
    this.categoryType = other.categoryType;
    this.type = other.type;
  }

  public HotWordVo deepCopy() {
    return new HotWordVo(this);
  }

  @Override
  public void clear() {
    this.clientId = null;
    this.hotWord = null;
    setAreaIdIsSet(false);
    this.areaId = 0;
    setSearchCountIsSet(false);
    this.searchCount = 0;
    setSearchCountResulIsSet(false);
    this.searchCountResul = 0;
    setCategoryTypeIsSet(false);
    this.categoryType = 0;
    setTypeIsSet(false);
    this.type = 0;
  }

  public String getClientId() {
    return this.clientId;
  }

  public HotWordVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 热词
   */
  public String getHotWord() {
    return this.hotWord;
  }

  /**
   * 热词
   */
  public HotWordVo setHotWord(String hotWord) {
    this.hotWord = hotWord;
    return this;
  }

  public void unsetHotWord() {
    this.hotWord = null;
  }

  /** Returns true if field hotWord is set (has been assigned a value) and false otherwise */
  public boolean isSetHotWord() {
    return this.hotWord != null;
  }

  public void setHotWordIsSet(boolean value) {
    if (!value) {
      this.hotWord = null;
    }
  }

  /**
   * 地区id
   */
  public long getAreaId() {
    return this.areaId;
  }

  /**
   * 地区id
   */
  public HotWordVo setAreaId(long areaId) {
    this.areaId = areaId;
    setAreaIdIsSet(true);
    return this;
  }

  public void unsetAreaId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AREAID_ISSET_ID);
  }

  /** Returns true if field areaId is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaId() {
    return EncodingUtils.testBit(__isset_bitfield, __AREAID_ISSET_ID);
  }

  public void setAreaIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AREAID_ISSET_ID, value);
  }

  /**
   * 搜索总次数
   */
  public int getSearchCount() {
    return this.searchCount;
  }

  /**
   * 搜索总次数
   */
  public HotWordVo setSearchCount(int searchCount) {
    this.searchCount = searchCount;
    setSearchCountIsSet(true);
    return this;
  }

  public void unsetSearchCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEARCHCOUNT_ISSET_ID);
  }

  /** Returns true if field searchCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SEARCHCOUNT_ISSET_ID);
  }

  public void setSearchCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEARCHCOUNT_ISSET_ID, value);
  }

  /**
   * 搜索有结果次数
   */
  public int getSearchCountResul() {
    return this.searchCountResul;
  }

  /**
   * 搜索有结果次数
   */
  public HotWordVo setSearchCountResul(int searchCountResul) {
    this.searchCountResul = searchCountResul;
    setSearchCountResulIsSet(true);
    return this;
  }

  public void unsetSearchCountResul() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEARCHCOUNTRESUL_ISSET_ID);
  }

  /** Returns true if field searchCountResul is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchCountResul() {
    return EncodingUtils.testBit(__isset_bitfield, __SEARCHCOUNTRESUL_ISSET_ID);
  }

  public void setSearchCountResulIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEARCHCOUNTRESUL_ISSET_ID, value);
  }

  /**
   * 类型0 全部1 商品2商户
   */
  public int getCategoryType() {
    return this.categoryType;
  }

  /**
   * 类型0 全部1 商品2商户
   */
  public HotWordVo setCategoryType(int categoryType) {
    this.categoryType = categoryType;
    setCategoryTypeIsSet(true);
    return this;
  }

  public void unsetCategoryType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYTYPE_ISSET_ID);
  }

  /** Returns true if field categoryType is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryType() {
    return EncodingUtils.testBit(__isset_bitfield, __CATEGORYTYPE_ISSET_ID);
  }

  public void setCategoryTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYTYPE_ISSET_ID, value);
  }

  /**
   * 0 全部1手工插入2系统统计
   */
  public int getType() {
    return this.type;
  }

  /**
   * 0 全部1手工插入2系统统计
   */
  public HotWordVo setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case HOT_WORD:
      if (value == null) {
        unsetHotWord();
      } else {
        setHotWord((String)value);
      }
      break;

    case AREA_ID:
      if (value == null) {
        unsetAreaId();
      } else {
        setAreaId((Long)value);
      }
      break;

    case SEARCH_COUNT:
      if (value == null) {
        unsetSearchCount();
      } else {
        setSearchCount((Integer)value);
      }
      break;

    case SEARCH_COUNT_RESUL:
      if (value == null) {
        unsetSearchCountResul();
      } else {
        setSearchCountResul((Integer)value);
      }
      break;

    case CATEGORY_TYPE:
      if (value == null) {
        unsetCategoryType();
      } else {
        setCategoryType((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case HOT_WORD:
      return getHotWord();

    case AREA_ID:
      return Long.valueOf(getAreaId());

    case SEARCH_COUNT:
      return Integer.valueOf(getSearchCount());

    case SEARCH_COUNT_RESUL:
      return Integer.valueOf(getSearchCountResul());

    case CATEGORY_TYPE:
      return Integer.valueOf(getCategoryType());

    case TYPE:
      return Integer.valueOf(getType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case HOT_WORD:
      return isSetHotWord();
    case AREA_ID:
      return isSetAreaId();
    case SEARCH_COUNT:
      return isSetSearchCount();
    case SEARCH_COUNT_RESUL:
      return isSetSearchCountResul();
    case CATEGORY_TYPE:
      return isSetCategoryType();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HotWordVo)
      return this.equals((HotWordVo)that);
    return false;
  }

  public boolean equals(HotWordVo that) {
    if (that == null)
      return false;

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_hotWord = true && this.isSetHotWord();
    boolean that_present_hotWord = true && that.isSetHotWord();
    if (this_present_hotWord || that_present_hotWord) {
      if (!(this_present_hotWord && that_present_hotWord))
        return false;
      if (!this.hotWord.equals(that.hotWord))
        return false;
    }

    boolean this_present_areaId = true;
    boolean that_present_areaId = true;
    if (this_present_areaId || that_present_areaId) {
      if (!(this_present_areaId && that_present_areaId))
        return false;
      if (this.areaId != that.areaId)
        return false;
    }

    boolean this_present_searchCount = true;
    boolean that_present_searchCount = true;
    if (this_present_searchCount || that_present_searchCount) {
      if (!(this_present_searchCount && that_present_searchCount))
        return false;
      if (this.searchCount != that.searchCount)
        return false;
    }

    boolean this_present_searchCountResul = true;
    boolean that_present_searchCountResul = true;
    if (this_present_searchCountResul || that_present_searchCountResul) {
      if (!(this_present_searchCountResul && that_present_searchCountResul))
        return false;
      if (this.searchCountResul != that.searchCountResul)
        return false;
    }

    boolean this_present_categoryType = true;
    boolean that_present_categoryType = true;
    if (this_present_categoryType || that_present_categoryType) {
      if (!(this_present_categoryType && that_present_categoryType))
        return false;
      if (this.categoryType != that.categoryType)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_hotWord = true && (isSetHotWord());
    list.add(present_hotWord);
    if (present_hotWord)
      list.add(hotWord);

    boolean present_areaId = true;
    list.add(present_areaId);
    if (present_areaId)
      list.add(areaId);

    boolean present_searchCount = true;
    list.add(present_searchCount);
    if (present_searchCount)
      list.add(searchCount);

    boolean present_searchCountResul = true;
    list.add(present_searchCountResul);
    if (present_searchCountResul)
      list.add(searchCountResul);

    boolean present_categoryType = true;
    list.add(present_categoryType);
    if (present_categoryType)
      list.add(categoryType);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    return list.hashCode();
  }

  @Override
  public int compareTo(HotWordVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHotWord()).compareTo(other.isSetHotWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHotWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotWord, other.hotWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaId()).compareTo(other.isSetAreaId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaId, other.areaId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchCount()).compareTo(other.isSetSearchCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchCount, other.searchCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchCountResul()).compareTo(other.isSetSearchCountResul());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchCountResul()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchCountResul, other.searchCountResul);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoryType()).compareTo(other.isSetCategoryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryType, other.categoryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HotWordVo(");
    boolean first = true;

    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hotWord:");
    if (this.hotWord == null) {
      sb.append("null");
    } else {
      sb.append(this.hotWord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("areaId:");
    sb.append(this.areaId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchCount:");
    sb.append(this.searchCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchCountResul:");
    sb.append(this.searchCountResul);
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryType:");
    sb.append(this.categoryType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HotWordVoStandardSchemeFactory implements SchemeFactory {
    public HotWordVoStandardScheme getScheme() {
      return new HotWordVoStandardScheme();
    }
  }

  private static class HotWordVoStandardScheme extends StandardScheme<HotWordVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HotWordVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOT_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hotWord = iprot.readString();
              struct.setHotWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AREA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.areaId = iprot.readI64();
              struct.setAreaIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEARCH_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.searchCount = iprot.readI32();
              struct.setSearchCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEARCH_COUNT_RESUL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.searchCountResul = iprot.readI32();
              struct.setSearchCountResulIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CATEGORY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.categoryType = iprot.readI32();
              struct.setCategoryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HotWordVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.hotWord != null) {
        oprot.writeFieldBegin(HOT_WORD_FIELD_DESC);
        oprot.writeString(struct.hotWord);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AREA_ID_FIELD_DESC);
      oprot.writeI64(struct.areaId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEARCH_COUNT_FIELD_DESC);
      oprot.writeI32(struct.searchCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEARCH_COUNT_RESUL_FIELD_DESC);
      oprot.writeI32(struct.searchCountResul);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CATEGORY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.categoryType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HotWordVoTupleSchemeFactory implements SchemeFactory {
    public HotWordVoTupleScheme getScheme() {
      return new HotWordVoTupleScheme();
    }
  }

  private static class HotWordVoTupleScheme extends TupleScheme<HotWordVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HotWordVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientId()) {
        optionals.set(0);
      }
      if (struct.isSetHotWord()) {
        optionals.set(1);
      }
      if (struct.isSetAreaId()) {
        optionals.set(2);
      }
      if (struct.isSetSearchCount()) {
        optionals.set(3);
      }
      if (struct.isSetSearchCountResul()) {
        optionals.set(4);
      }
      if (struct.isSetCategoryType()) {
        optionals.set(5);
      }
      if (struct.isSetType()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetHotWord()) {
        oprot.writeString(struct.hotWord);
      }
      if (struct.isSetAreaId()) {
        oprot.writeI64(struct.areaId);
      }
      if (struct.isSetSearchCount()) {
        oprot.writeI32(struct.searchCount);
      }
      if (struct.isSetSearchCountResul()) {
        oprot.writeI32(struct.searchCountResul);
      }
      if (struct.isSetCategoryType()) {
        oprot.writeI32(struct.categoryType);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HotWordVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hotWord = iprot.readString();
        struct.setHotWordIsSet(true);
      }
      if (incoming.get(2)) {
        struct.areaId = iprot.readI64();
        struct.setAreaIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.searchCount = iprot.readI32();
        struct.setSearchCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.searchCountResul = iprot.readI32();
        struct.setSearchCountResulIsSet(true);
      }
      if (incoming.get(5)) {
        struct.categoryType = iprot.readI32();
        struct.setCategoryTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
    }
  }

}

