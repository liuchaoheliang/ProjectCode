/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.order;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 15.获取指定用户商品限购数量响应
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class GetMemberBuyLimitVoRes implements org.apache.thrift.TBase<GetMemberBuyLimitVoRes, GetMemberBuyLimitVoRes._Fields>, java.io.Serializable, Cloneable, Comparable<GetMemberBuyLimitVoRes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMemberBuyLimitVoRes");

  private static final org.apache.thrift.protocol.TField RESULT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("resultVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField VIP_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("vipQuantity", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalQuantity", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetMemberBuyLimitVoResStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetMemberBuyLimitVoResTupleSchemeFactory());
  }

  /**
   * 结果信息
   */
  public com.froad.thrift.vo.ResultVo resultVo; // required
  /**
   * 会员价可购买数量
   */
  public int vipQuantity; // required
  /**
   * 普通价购买数量
   */
  public int quantity; // required
  /**
   * 总共可购买数量
   */
  public int totalQuantity; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 结果信息
     */
    RESULT_VO((short)1, "resultVo"),
    /**
     * 会员价可购买数量
     */
    VIP_QUANTITY((short)2, "vipQuantity"),
    /**
     * 普通价购买数量
     */
    QUANTITY((short)3, "quantity"),
    /**
     * 总共可购买数量
     */
    TOTAL_QUANTITY((short)4, "totalQuantity");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT_VO
          return RESULT_VO;
        case 2: // VIP_QUANTITY
          return VIP_QUANTITY;
        case 3: // QUANTITY
          return QUANTITY;
        case 4: // TOTAL_QUANTITY
          return TOTAL_QUANTITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VIPQUANTITY_ISSET_ID = 0;
  private static final int __QUANTITY_ISSET_ID = 1;
  private static final int __TOTALQUANTITY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT_VO, new org.apache.thrift.meta_data.FieldMetaData("resultVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
    tmpMap.put(_Fields.VIP_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("vipQuantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("totalQuantity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMemberBuyLimitVoRes.class, metaDataMap);
  }

  public GetMemberBuyLimitVoRes() {
  }

  public GetMemberBuyLimitVoRes(
    com.froad.thrift.vo.ResultVo resultVo,
    int vipQuantity,
    int quantity,
    int totalQuantity)
  {
    this();
    this.resultVo = resultVo;
    this.vipQuantity = vipQuantity;
    setVipQuantityIsSet(true);
    this.quantity = quantity;
    setQuantityIsSet(true);
    this.totalQuantity = totalQuantity;
    setTotalQuantityIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetMemberBuyLimitVoRes(GetMemberBuyLimitVoRes other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResultVo()) {
      this.resultVo = new com.froad.thrift.vo.ResultVo(other.resultVo);
    }
    this.vipQuantity = other.vipQuantity;
    this.quantity = other.quantity;
    this.totalQuantity = other.totalQuantity;
  }

  public GetMemberBuyLimitVoRes deepCopy() {
    return new GetMemberBuyLimitVoRes(this);
  }

  @Override
  public void clear() {
    this.resultVo = null;
    setVipQuantityIsSet(false);
    this.vipQuantity = 0;
    setQuantityIsSet(false);
    this.quantity = 0;
    setTotalQuantityIsSet(false);
    this.totalQuantity = 0;
  }

  /**
   * 结果信息
   */
  public com.froad.thrift.vo.ResultVo getResultVo() {
    return this.resultVo;
  }

  /**
   * 结果信息
   */
  public GetMemberBuyLimitVoRes setResultVo(com.froad.thrift.vo.ResultVo resultVo) {
    this.resultVo = resultVo;
    return this;
  }

  public void unsetResultVo() {
    this.resultVo = null;
  }

  /** Returns true if field resultVo is set (has been assigned a value) and false otherwise */
  public boolean isSetResultVo() {
    return this.resultVo != null;
  }

  public void setResultVoIsSet(boolean value) {
    if (!value) {
      this.resultVo = null;
    }
  }

  /**
   * 会员价可购买数量
   */
  public int getVipQuantity() {
    return this.vipQuantity;
  }

  /**
   * 会员价可购买数量
   */
  public GetMemberBuyLimitVoRes setVipQuantity(int vipQuantity) {
    this.vipQuantity = vipQuantity;
    setVipQuantityIsSet(true);
    return this;
  }

  public void unsetVipQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIPQUANTITY_ISSET_ID);
  }

  /** Returns true if field vipQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetVipQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __VIPQUANTITY_ISSET_ID);
  }

  public void setVipQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIPQUANTITY_ISSET_ID, value);
  }

  /**
   * 普通价购买数量
   */
  public int getQuantity() {
    return this.quantity;
  }

  /**
   * 普通价购买数量
   */
  public GetMemberBuyLimitVoRes setQuantity(int quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  /**
   * 总共可购买数量
   */
  public int getTotalQuantity() {
    return this.totalQuantity;
  }

  /**
   * 总共可购买数量
   */
  public GetMemberBuyLimitVoRes setTotalQuantity(int totalQuantity) {
    this.totalQuantity = totalQuantity;
    setTotalQuantityIsSet(true);
    return this;
  }

  public void unsetTotalQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALQUANTITY_ISSET_ID);
  }

  /** Returns true if field totalQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALQUANTITY_ISSET_ID);
  }

  public void setTotalQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALQUANTITY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT_VO:
      if (value == null) {
        unsetResultVo();
      } else {
        setResultVo((com.froad.thrift.vo.ResultVo)value);
      }
      break;

    case VIP_QUANTITY:
      if (value == null) {
        unsetVipQuantity();
      } else {
        setVipQuantity((Integer)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Integer)value);
      }
      break;

    case TOTAL_QUANTITY:
      if (value == null) {
        unsetTotalQuantity();
      } else {
        setTotalQuantity((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT_VO:
      return getResultVo();

    case VIP_QUANTITY:
      return Integer.valueOf(getVipQuantity());

    case QUANTITY:
      return Integer.valueOf(getQuantity());

    case TOTAL_QUANTITY:
      return Integer.valueOf(getTotalQuantity());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT_VO:
      return isSetResultVo();
    case VIP_QUANTITY:
      return isSetVipQuantity();
    case QUANTITY:
      return isSetQuantity();
    case TOTAL_QUANTITY:
      return isSetTotalQuantity();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetMemberBuyLimitVoRes)
      return this.equals((GetMemberBuyLimitVoRes)that);
    return false;
  }

  public boolean equals(GetMemberBuyLimitVoRes that) {
    if (that == null)
      return false;

    boolean this_present_resultVo = true && this.isSetResultVo();
    boolean that_present_resultVo = true && that.isSetResultVo();
    if (this_present_resultVo || that_present_resultVo) {
      if (!(this_present_resultVo && that_present_resultVo))
        return false;
      if (!this.resultVo.equals(that.resultVo))
        return false;
    }

    boolean this_present_vipQuantity = true;
    boolean that_present_vipQuantity = true;
    if (this_present_vipQuantity || that_present_vipQuantity) {
      if (!(this_present_vipQuantity && that_present_vipQuantity))
        return false;
      if (this.vipQuantity != that.vipQuantity)
        return false;
    }

    boolean this_present_quantity = true;
    boolean that_present_quantity = true;
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_totalQuantity = true;
    boolean that_present_totalQuantity = true;
    if (this_present_totalQuantity || that_present_totalQuantity) {
      if (!(this_present_totalQuantity && that_present_totalQuantity))
        return false;
      if (this.totalQuantity != that.totalQuantity)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resultVo = true && (isSetResultVo());
    list.add(present_resultVo);
    if (present_resultVo)
      list.add(resultVo);

    boolean present_vipQuantity = true;
    list.add(present_vipQuantity);
    if (present_vipQuantity)
      list.add(vipQuantity);

    boolean present_quantity = true;
    list.add(present_quantity);
    if (present_quantity)
      list.add(quantity);

    boolean present_totalQuantity = true;
    list.add(present_totalQuantity);
    if (present_totalQuantity)
      list.add(totalQuantity);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetMemberBuyLimitVoRes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResultVo()).compareTo(other.isSetResultVo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultVo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultVo, other.resultVo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVipQuantity()).compareTo(other.isSetVipQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVipQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipQuantity, other.vipQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalQuantity()).compareTo(other.isSetTotalQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalQuantity, other.totalQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetMemberBuyLimitVoRes(");
    boolean first = true;

    sb.append("resultVo:");
    if (this.resultVo == null) {
      sb.append("null");
    } else {
      sb.append(this.resultVo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vipQuantity:");
    sb.append(this.vipQuantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quantity:");
    sb.append(this.quantity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalQuantity:");
    sb.append(this.totalQuantity);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (resultVo != null) {
      resultVo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetMemberBuyLimitVoResStandardSchemeFactory implements SchemeFactory {
    public GetMemberBuyLimitVoResStandardScheme getScheme() {
      return new GetMemberBuyLimitVoResStandardScheme();
    }
  }

  private static class GetMemberBuyLimitVoResStandardScheme extends StandardScheme<GetMemberBuyLimitVoRes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetMemberBuyLimitVoRes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT_VO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resultVo = new com.froad.thrift.vo.ResultVo();
              struct.resultVo.read(iprot);
              struct.setResultVoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VIP_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vipQuantity = iprot.readI32();
              struct.setVipQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalQuantity = iprot.readI32();
              struct.setTotalQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetMemberBuyLimitVoRes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resultVo != null) {
        oprot.writeFieldBegin(RESULT_VO_FIELD_DESC);
        struct.resultVo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VIP_QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.vipQuantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.quantity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_QUANTITY_FIELD_DESC);
      oprot.writeI32(struct.totalQuantity);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetMemberBuyLimitVoResTupleSchemeFactory implements SchemeFactory {
    public GetMemberBuyLimitVoResTupleScheme getScheme() {
      return new GetMemberBuyLimitVoResTupleScheme();
    }
  }

  private static class GetMemberBuyLimitVoResTupleScheme extends TupleScheme<GetMemberBuyLimitVoRes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetMemberBuyLimitVoRes struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResultVo()) {
        optionals.set(0);
      }
      if (struct.isSetVipQuantity()) {
        optionals.set(1);
      }
      if (struct.isSetQuantity()) {
        optionals.set(2);
      }
      if (struct.isSetTotalQuantity()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetResultVo()) {
        struct.resultVo.write(oprot);
      }
      if (struct.isSetVipQuantity()) {
        oprot.writeI32(struct.vipQuantity);
      }
      if (struct.isSetQuantity()) {
        oprot.writeI32(struct.quantity);
      }
      if (struct.isSetTotalQuantity()) {
        oprot.writeI32(struct.totalQuantity);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetMemberBuyLimitVoRes struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.resultVo = new com.froad.thrift.vo.ResultVo();
        struct.resultVo.read(iprot);
        struct.setResultVoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.vipQuantity = iprot.readI32();
        struct.setVipQuantityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.quantity = iprot.readI32();
        struct.setQuantityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.totalQuantity = iprot.readI32();
        struct.setTotalQuantityIsSet(true);
      }
    }
  }

}

