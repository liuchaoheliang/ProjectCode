/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo.active;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 营销活动详细规则
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class ActiveDetailRuleVo implements org.apache.thrift.TBase<ActiveDetailRuleVo, ActiveDetailRuleVo._Fields>, java.io.Serializable, Cloneable, Comparable<ActiveDetailRuleVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ActiveDetailRuleVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activeId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MIN_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("minLimit", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCount", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField IS_PER_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isPerDay", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField PER_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("perDay", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("perCount", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField IS_TOTAL_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isTotalDay", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField TOTAL_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("totalDay", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField IS_PAPER_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isPaperPay", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField IS_PRE_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isPrePay", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField RET_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("retMoney", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField MAX_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("maxMoney", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField PRE_PAY_ACTIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("prePayActiveId", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PRODUCT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("productCount", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("point", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField POINT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("pointType", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField POINT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pointCount", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField PAY_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("payMethod", org.apache.thrift.protocol.TType.STRING, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActiveDetailRuleVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActiveDetailRuleVoTupleSchemeFactory());
  }

  /**
   * 主键ID
   */
  public long id; // required
  /**
   * 客户端ID
   */
  public String clientId; // required
  /**
   * 活动ID
   */
  public String activeId; // required
  /**
   * 金额下限
   */
  public long minLimit; // required
  /**
   * 活动奖励人次限制
   */
  public long maxCount; // required
  /**
   * 每人时间间隔单位为时或者日
   */
  public boolean isPerDay; // required
  /**
   * 每人限定的间隔量
   */
  public int perDay; // required
  /**
   * 每人间隔量限定的次数
   */
  public long perCount; // required
  /**
   * 全局时间间隔为时或者日
   */
  public boolean isTotalDay; // required
  /**
   * 全局限定的日间隔
   */
  public int totalDay; // required
  /**
   * 全局限定的次数
   */
  public long totalCount; // required
  /**
   * 是否支持代金券支付
   */
  public boolean isPaperPay; // required
  /**
   * true支付前 false支付之
   */
  public boolean isPrePay; // required
  /**
   * 减金额
   */
  public long retMoney; // optional
  /**
   * 满减金额总值
   */
  public long maxMoney; // optional
  /**
   * 支付后送优惠活动ID
   */
  public String prePayActiveId; // optional
  /**
   * 支付后送商品ID
   */
  public String productId; // optional
  /**
   * 支付后送商品总数限制
   */
  public int productCount; // optional
  /**
   * 支付后积分数量
   */
  public int point; // optional
  /**
   * 支付后积分类型
   */
  public String pointType; // optional
  /**
   * 支付后积分总数量
   */
  public int pointCount; // optional
  /**
   * 支付方式限制类型
   */
  public String payMethod; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 主键ID
     */
    ID((short)1, "id"),
    /**
     * 客户端ID
     */
    CLIENT_ID((short)2, "clientId"),
    /**
     * 活动ID
     */
    ACTIVE_ID((short)3, "activeId"),
    /**
     * 金额下限
     */
    MIN_LIMIT((short)4, "minLimit"),
    /**
     * 活动奖励人次限制
     */
    MAX_COUNT((short)5, "maxCount"),
    /**
     * 每人时间间隔单位为时或者日
     */
    IS_PER_DAY((short)6, "isPerDay"),
    /**
     * 每人限定的间隔量
     */
    PER_DAY((short)7, "perDay"),
    /**
     * 每人间隔量限定的次数
     */
    PER_COUNT((short)8, "perCount"),
    /**
     * 全局时间间隔为时或者日
     */
    IS_TOTAL_DAY((short)9, "isTotalDay"),
    /**
     * 全局限定的日间隔
     */
    TOTAL_DAY((short)10, "totalDay"),
    /**
     * 全局限定的次数
     */
    TOTAL_COUNT((short)11, "totalCount"),
    /**
     * 是否支持代金券支付
     */
    IS_PAPER_PAY((short)12, "isPaperPay"),
    /**
     * true支付前 false支付之
     */
    IS_PRE_PAY((short)13, "isPrePay"),
    /**
     * 减金额
     */
    RET_MONEY((short)14, "retMoney"),
    /**
     * 满减金额总值
     */
    MAX_MONEY((short)15, "maxMoney"),
    /**
     * 支付后送优惠活动ID
     */
    PRE_PAY_ACTIVE_ID((short)16, "prePayActiveId"),
    /**
     * 支付后送商品ID
     */
    PRODUCT_ID((short)17, "productId"),
    /**
     * 支付后送商品总数限制
     */
    PRODUCT_COUNT((short)18, "productCount"),
    /**
     * 支付后积分数量
     */
    POINT((short)19, "point"),
    /**
     * 支付后积分类型
     */
    POINT_TYPE((short)20, "pointType"),
    /**
     * 支付后积分总数量
     */
    POINT_COUNT((short)21, "pointCount"),
    /**
     * 支付方式限制类型
     */
    PAY_METHOD((short)22, "payMethod");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLIENT_ID
          return CLIENT_ID;
        case 3: // ACTIVE_ID
          return ACTIVE_ID;
        case 4: // MIN_LIMIT
          return MIN_LIMIT;
        case 5: // MAX_COUNT
          return MAX_COUNT;
        case 6: // IS_PER_DAY
          return IS_PER_DAY;
        case 7: // PER_DAY
          return PER_DAY;
        case 8: // PER_COUNT
          return PER_COUNT;
        case 9: // IS_TOTAL_DAY
          return IS_TOTAL_DAY;
        case 10: // TOTAL_DAY
          return TOTAL_DAY;
        case 11: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 12: // IS_PAPER_PAY
          return IS_PAPER_PAY;
        case 13: // IS_PRE_PAY
          return IS_PRE_PAY;
        case 14: // RET_MONEY
          return RET_MONEY;
        case 15: // MAX_MONEY
          return MAX_MONEY;
        case 16: // PRE_PAY_ACTIVE_ID
          return PRE_PAY_ACTIVE_ID;
        case 17: // PRODUCT_ID
          return PRODUCT_ID;
        case 18: // PRODUCT_COUNT
          return PRODUCT_COUNT;
        case 19: // POINT
          return POINT;
        case 20: // POINT_TYPE
          return POINT_TYPE;
        case 21: // POINT_COUNT
          return POINT_COUNT;
        case 22: // PAY_METHOD
          return PAY_METHOD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MINLIMIT_ISSET_ID = 1;
  private static final int __MAXCOUNT_ISSET_ID = 2;
  private static final int __ISPERDAY_ISSET_ID = 3;
  private static final int __PERDAY_ISSET_ID = 4;
  private static final int __PERCOUNT_ISSET_ID = 5;
  private static final int __ISTOTALDAY_ISSET_ID = 6;
  private static final int __TOTALDAY_ISSET_ID = 7;
  private static final int __TOTALCOUNT_ISSET_ID = 8;
  private static final int __ISPAPERPAY_ISSET_ID = 9;
  private static final int __ISPREPAY_ISSET_ID = 10;
  private static final int __RETMONEY_ISSET_ID = 11;
  private static final int __MAXMONEY_ISSET_ID = 12;
  private static final int __PRODUCTCOUNT_ISSET_ID = 13;
  private static final int __POINT_ISSET_ID = 14;
  private static final int __POINTCOUNT_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RET_MONEY,_Fields.MAX_MONEY,_Fields.PRE_PAY_ACTIVE_ID,_Fields.PRODUCT_ID,_Fields.PRODUCT_COUNT,_Fields.POINT,_Fields.POINT_TYPE,_Fields.POINT_COUNT,_Fields.PAY_METHOD};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("activeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIN_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("minLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_PER_DAY, new org.apache.thrift.meta_data.FieldMetaData("isPerDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PER_DAY, new org.apache.thrift.meta_data.FieldMetaData("perDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("perCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_TOTAL_DAY, new org.apache.thrift.meta_data.FieldMetaData("isTotalDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TOTAL_DAY, new org.apache.thrift.meta_data.FieldMetaData("totalDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_PAPER_PAY, new org.apache.thrift.meta_data.FieldMetaData("isPaperPay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PRE_PAY, new org.apache.thrift.meta_data.FieldMetaData("isPrePay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RET_MONEY, new org.apache.thrift.meta_data.FieldMetaData("retMoney", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_MONEY, new org.apache.thrift.meta_data.FieldMetaData("maxMoney", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRE_PAY_ACTIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("prePayActiveId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("productCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POINT, new org.apache.thrift.meta_data.FieldMetaData("point", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POINT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("pointType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POINT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("pointCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAY_METHOD, new org.apache.thrift.meta_data.FieldMetaData("payMethod", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ActiveDetailRuleVo.class, metaDataMap);
  }

  public ActiveDetailRuleVo() {
  }

  public ActiveDetailRuleVo(
    long id,
    String clientId,
    String activeId,
    long minLimit,
    long maxCount,
    boolean isPerDay,
    int perDay,
    long perCount,
    boolean isTotalDay,
    int totalDay,
    long totalCount,
    boolean isPaperPay,
    boolean isPrePay)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.clientId = clientId;
    this.activeId = activeId;
    this.minLimit = minLimit;
    setMinLimitIsSet(true);
    this.maxCount = maxCount;
    setMaxCountIsSet(true);
    this.isPerDay = isPerDay;
    setIsPerDayIsSet(true);
    this.perDay = perDay;
    setPerDayIsSet(true);
    this.perCount = perCount;
    setPerCountIsSet(true);
    this.isTotalDay = isTotalDay;
    setIsTotalDayIsSet(true);
    this.totalDay = totalDay;
    setTotalDayIsSet(true);
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.isPaperPay = isPaperPay;
    setIsPaperPayIsSet(true);
    this.isPrePay = isPrePay;
    setIsPrePayIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ActiveDetailRuleVo(ActiveDetailRuleVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetActiveId()) {
      this.activeId = other.activeId;
    }
    this.minLimit = other.minLimit;
    this.maxCount = other.maxCount;
    this.isPerDay = other.isPerDay;
    this.perDay = other.perDay;
    this.perCount = other.perCount;
    this.isTotalDay = other.isTotalDay;
    this.totalDay = other.totalDay;
    this.totalCount = other.totalCount;
    this.isPaperPay = other.isPaperPay;
    this.isPrePay = other.isPrePay;
    this.retMoney = other.retMoney;
    this.maxMoney = other.maxMoney;
    if (other.isSetPrePayActiveId()) {
      this.prePayActiveId = other.prePayActiveId;
    }
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    this.productCount = other.productCount;
    this.point = other.point;
    if (other.isSetPointType()) {
      this.pointType = other.pointType;
    }
    this.pointCount = other.pointCount;
    if (other.isSetPayMethod()) {
      this.payMethod = other.payMethod;
    }
  }

  public ActiveDetailRuleVo deepCopy() {
    return new ActiveDetailRuleVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.clientId = null;
    this.activeId = null;
    setMinLimitIsSet(false);
    this.minLimit = 0;
    setMaxCountIsSet(false);
    this.maxCount = 0;
    setIsPerDayIsSet(false);
    this.isPerDay = false;
    setPerDayIsSet(false);
    this.perDay = 0;
    setPerCountIsSet(false);
    this.perCount = 0;
    setIsTotalDayIsSet(false);
    this.isTotalDay = false;
    setTotalDayIsSet(false);
    this.totalDay = 0;
    setTotalCountIsSet(false);
    this.totalCount = 0;
    setIsPaperPayIsSet(false);
    this.isPaperPay = false;
    setIsPrePayIsSet(false);
    this.isPrePay = false;
    setRetMoneyIsSet(false);
    this.retMoney = 0;
    setMaxMoneyIsSet(false);
    this.maxMoney = 0;
    this.prePayActiveId = null;
    this.productId = null;
    setProductCountIsSet(false);
    this.productCount = 0;
    setPointIsSet(false);
    this.point = 0;
    this.pointType = null;
    setPointCountIsSet(false);
    this.pointCount = 0;
    this.payMethod = null;
  }

  /**
   * 主键ID
   */
  public long getId() {
    return this.id;
  }

  /**
   * 主键ID
   */
  public ActiveDetailRuleVo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 客户端ID
   */
  public String getClientId() {
    return this.clientId;
  }

  /**
   * 客户端ID
   */
  public ActiveDetailRuleVo setClientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 活动ID
   */
  public String getActiveId() {
    return this.activeId;
  }

  /**
   * 活动ID
   */
  public ActiveDetailRuleVo setActiveId(String activeId) {
    this.activeId = activeId;
    return this;
  }

  public void unsetActiveId() {
    this.activeId = null;
  }

  /** Returns true if field activeId is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveId() {
    return this.activeId != null;
  }

  public void setActiveIdIsSet(boolean value) {
    if (!value) {
      this.activeId = null;
    }
  }

  /**
   * 金额下限
   */
  public long getMinLimit() {
    return this.minLimit;
  }

  /**
   * 金额下限
   */
  public ActiveDetailRuleVo setMinLimit(long minLimit) {
    this.minLimit = minLimit;
    setMinLimitIsSet(true);
    return this;
  }

  public void unsetMinLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINLIMIT_ISSET_ID);
  }

  /** Returns true if field minLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetMinLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __MINLIMIT_ISSET_ID);
  }

  public void setMinLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINLIMIT_ISSET_ID, value);
  }

  /**
   * 活动奖励人次限制
   */
  public long getMaxCount() {
    return this.maxCount;
  }

  /**
   * 活动奖励人次限制
   */
  public ActiveDetailRuleVo setMaxCount(long maxCount) {
    this.maxCount = maxCount;
    setMaxCountIsSet(true);
    return this;
  }

  public void unsetMaxCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXCOUNT_ISSET_ID);
  }

  /** Returns true if field maxCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXCOUNT_ISSET_ID);
  }

  public void setMaxCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXCOUNT_ISSET_ID, value);
  }

  /**
   * 每人时间间隔单位为时或者日
   */
  public boolean isIsPerDay() {
    return this.isPerDay;
  }

  /**
   * 每人时间间隔单位为时或者日
   */
  public ActiveDetailRuleVo setIsPerDay(boolean isPerDay) {
    this.isPerDay = isPerDay;
    setIsPerDayIsSet(true);
    return this;
  }

  public void unsetIsPerDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPERDAY_ISSET_ID);
  }

  /** Returns true if field isPerDay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPerDay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPERDAY_ISSET_ID);
  }

  public void setIsPerDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPERDAY_ISSET_ID, value);
  }

  /**
   * 每人限定的间隔量
   */
  public int getPerDay() {
    return this.perDay;
  }

  /**
   * 每人限定的间隔量
   */
  public ActiveDetailRuleVo setPerDay(int perDay) {
    this.perDay = perDay;
    setPerDayIsSet(true);
    return this;
  }

  public void unsetPerDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERDAY_ISSET_ID);
  }

  /** Returns true if field perDay is set (has been assigned a value) and false otherwise */
  public boolean isSetPerDay() {
    return EncodingUtils.testBit(__isset_bitfield, __PERDAY_ISSET_ID);
  }

  public void setPerDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERDAY_ISSET_ID, value);
  }

  /**
   * 每人间隔量限定的次数
   */
  public long getPerCount() {
    return this.perCount;
  }

  /**
   * 每人间隔量限定的次数
   */
  public ActiveDetailRuleVo setPerCount(long perCount) {
    this.perCount = perCount;
    setPerCountIsSet(true);
    return this;
  }

  public void unsetPerCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERCOUNT_ISSET_ID);
  }

  /** Returns true if field perCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPerCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PERCOUNT_ISSET_ID);
  }

  public void setPerCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERCOUNT_ISSET_ID, value);
  }

  /**
   * 全局时间间隔为时或者日
   */
  public boolean isIsTotalDay() {
    return this.isTotalDay;
  }

  /**
   * 全局时间间隔为时或者日
   */
  public ActiveDetailRuleVo setIsTotalDay(boolean isTotalDay) {
    this.isTotalDay = isTotalDay;
    setIsTotalDayIsSet(true);
    return this;
  }

  public void unsetIsTotalDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTOTALDAY_ISSET_ID);
  }

  /** Returns true if field isTotalDay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTotalDay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTOTALDAY_ISSET_ID);
  }

  public void setIsTotalDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTOTALDAY_ISSET_ID, value);
  }

  /**
   * 全局限定的日间隔
   */
  public int getTotalDay() {
    return this.totalDay;
  }

  /**
   * 全局限定的日间隔
   */
  public ActiveDetailRuleVo setTotalDay(int totalDay) {
    this.totalDay = totalDay;
    setTotalDayIsSet(true);
    return this;
  }

  public void unsetTotalDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALDAY_ISSET_ID);
  }

  /** Returns true if field totalDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalDay() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALDAY_ISSET_ID);
  }

  public void setTotalDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALDAY_ISSET_ID, value);
  }

  /**
   * 全局限定的次数
   */
  public long getTotalCount() {
    return this.totalCount;
  }

  /**
   * 全局限定的次数
   */
  public ActiveDetailRuleVo setTotalCount(long totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  /**
   * 是否支持代金券支付
   */
  public boolean isIsPaperPay() {
    return this.isPaperPay;
  }

  /**
   * 是否支持代金券支付
   */
  public ActiveDetailRuleVo setIsPaperPay(boolean isPaperPay) {
    this.isPaperPay = isPaperPay;
    setIsPaperPayIsSet(true);
    return this;
  }

  public void unsetIsPaperPay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPAPERPAY_ISSET_ID);
  }

  /** Returns true if field isPaperPay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPaperPay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPAPERPAY_ISSET_ID);
  }

  public void setIsPaperPayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPAPERPAY_ISSET_ID, value);
  }

  /**
   * true支付前 false支付之
   */
  public boolean isIsPrePay() {
    return this.isPrePay;
  }

  /**
   * true支付前 false支付之
   */
  public ActiveDetailRuleVo setIsPrePay(boolean isPrePay) {
    this.isPrePay = isPrePay;
    setIsPrePayIsSet(true);
    return this;
  }

  public void unsetIsPrePay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPREPAY_ISSET_ID);
  }

  /** Returns true if field isPrePay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPrePay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPREPAY_ISSET_ID);
  }

  public void setIsPrePayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPREPAY_ISSET_ID, value);
  }

  /**
   * 减金额
   */
  public long getRetMoney() {
    return this.retMoney;
  }

  /**
   * 减金额
   */
  public ActiveDetailRuleVo setRetMoney(long retMoney) {
    this.retMoney = retMoney;
    setRetMoneyIsSet(true);
    return this;
  }

  public void unsetRetMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETMONEY_ISSET_ID);
  }

  /** Returns true if field retMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRetMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __RETMONEY_ISSET_ID);
  }

  public void setRetMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETMONEY_ISSET_ID, value);
  }

  /**
   * 满减金额总值
   */
  public long getMaxMoney() {
    return this.maxMoney;
  }

  /**
   * 满减金额总值
   */
  public ActiveDetailRuleVo setMaxMoney(long maxMoney) {
    this.maxMoney = maxMoney;
    setMaxMoneyIsSet(true);
    return this;
  }

  public void unsetMaxMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXMONEY_ISSET_ID);
  }

  /** Returns true if field maxMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXMONEY_ISSET_ID);
  }

  public void setMaxMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXMONEY_ISSET_ID, value);
  }

  /**
   * 支付后送优惠活动ID
   */
  public String getPrePayActiveId() {
    return this.prePayActiveId;
  }

  /**
   * 支付后送优惠活动ID
   */
  public ActiveDetailRuleVo setPrePayActiveId(String prePayActiveId) {
    this.prePayActiveId = prePayActiveId;
    return this;
  }

  public void unsetPrePayActiveId() {
    this.prePayActiveId = null;
  }

  /** Returns true if field prePayActiveId is set (has been assigned a value) and false otherwise */
  public boolean isSetPrePayActiveId() {
    return this.prePayActiveId != null;
  }

  public void setPrePayActiveIdIsSet(boolean value) {
    if (!value) {
      this.prePayActiveId = null;
    }
  }

  /**
   * 支付后送商品ID
   */
  public String getProductId() {
    return this.productId;
  }

  /**
   * 支付后送商品ID
   */
  public ActiveDetailRuleVo setProductId(String productId) {
    this.productId = productId;
    return this;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  /**
   * 支付后送商品总数限制
   */
  public int getProductCount() {
    return this.productCount;
  }

  /**
   * 支付后送商品总数限制
   */
  public ActiveDetailRuleVo setProductCount(int productCount) {
    this.productCount = productCount;
    setProductCountIsSet(true);
    return this;
  }

  public void unsetProductCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTCOUNT_ISSET_ID);
  }

  /** Returns true if field productCount is set (has been assigned a value) and false otherwise */
  public boolean isSetProductCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTCOUNT_ISSET_ID);
  }

  public void setProductCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTCOUNT_ISSET_ID, value);
  }

  /**
   * 支付后积分数量
   */
  public int getPoint() {
    return this.point;
  }

  /**
   * 支付后积分数量
   */
  public ActiveDetailRuleVo setPoint(int point) {
    this.point = point;
    setPointIsSet(true);
    return this;
  }

  public void unsetPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  /** Returns true if field point is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  public void setPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINT_ISSET_ID, value);
  }

  /**
   * 支付后积分类型
   */
  public String getPointType() {
    return this.pointType;
  }

  /**
   * 支付后积分类型
   */
  public ActiveDetailRuleVo setPointType(String pointType) {
    this.pointType = pointType;
    return this;
  }

  public void unsetPointType() {
    this.pointType = null;
  }

  /** Returns true if field pointType is set (has been assigned a value) and false otherwise */
  public boolean isSetPointType() {
    return this.pointType != null;
  }

  public void setPointTypeIsSet(boolean value) {
    if (!value) {
      this.pointType = null;
    }
  }

  /**
   * 支付后积分总数量
   */
  public int getPointCount() {
    return this.pointCount;
  }

  /**
   * 支付后积分总数量
   */
  public ActiveDetailRuleVo setPointCount(int pointCount) {
    this.pointCount = pointCount;
    setPointCountIsSet(true);
    return this;
  }

  public void unsetPointCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINTCOUNT_ISSET_ID);
  }

  /** Returns true if field pointCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPointCount() {
    return EncodingUtils.testBit(__isset_bitfield, __POINTCOUNT_ISSET_ID);
  }

  public void setPointCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINTCOUNT_ISSET_ID, value);
  }

  /**
   * 支付方式限制类型
   */
  public String getPayMethod() {
    return this.payMethod;
  }

  /**
   * 支付方式限制类型
   */
  public ActiveDetailRuleVo setPayMethod(String payMethod) {
    this.payMethod = payMethod;
    return this;
  }

  public void unsetPayMethod() {
    this.payMethod = null;
  }

  /** Returns true if field payMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetPayMethod() {
    return this.payMethod != null;
  }

  public void setPayMethodIsSet(boolean value) {
    if (!value) {
      this.payMethod = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((String)value);
      }
      break;

    case ACTIVE_ID:
      if (value == null) {
        unsetActiveId();
      } else {
        setActiveId((String)value);
      }
      break;

    case MIN_LIMIT:
      if (value == null) {
        unsetMinLimit();
      } else {
        setMinLimit((Long)value);
      }
      break;

    case MAX_COUNT:
      if (value == null) {
        unsetMaxCount();
      } else {
        setMaxCount((Long)value);
      }
      break;

    case IS_PER_DAY:
      if (value == null) {
        unsetIsPerDay();
      } else {
        setIsPerDay((Boolean)value);
      }
      break;

    case PER_DAY:
      if (value == null) {
        unsetPerDay();
      } else {
        setPerDay((Integer)value);
      }
      break;

    case PER_COUNT:
      if (value == null) {
        unsetPerCount();
      } else {
        setPerCount((Long)value);
      }
      break;

    case IS_TOTAL_DAY:
      if (value == null) {
        unsetIsTotalDay();
      } else {
        setIsTotalDay((Boolean)value);
      }
      break;

    case TOTAL_DAY:
      if (value == null) {
        unsetTotalDay();
      } else {
        setTotalDay((Integer)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Long)value);
      }
      break;

    case IS_PAPER_PAY:
      if (value == null) {
        unsetIsPaperPay();
      } else {
        setIsPaperPay((Boolean)value);
      }
      break;

    case IS_PRE_PAY:
      if (value == null) {
        unsetIsPrePay();
      } else {
        setIsPrePay((Boolean)value);
      }
      break;

    case RET_MONEY:
      if (value == null) {
        unsetRetMoney();
      } else {
        setRetMoney((Long)value);
      }
      break;

    case MAX_MONEY:
      if (value == null) {
        unsetMaxMoney();
      } else {
        setMaxMoney((Long)value);
      }
      break;

    case PRE_PAY_ACTIVE_ID:
      if (value == null) {
        unsetPrePayActiveId();
      } else {
        setPrePayActiveId((String)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((String)value);
      }
      break;

    case PRODUCT_COUNT:
      if (value == null) {
        unsetProductCount();
      } else {
        setProductCount((Integer)value);
      }
      break;

    case POINT:
      if (value == null) {
        unsetPoint();
      } else {
        setPoint((Integer)value);
      }
      break;

    case POINT_TYPE:
      if (value == null) {
        unsetPointType();
      } else {
        setPointType((String)value);
      }
      break;

    case POINT_COUNT:
      if (value == null) {
        unsetPointCount();
      } else {
        setPointCount((Integer)value);
      }
      break;

    case PAY_METHOD:
      if (value == null) {
        unsetPayMethod();
      } else {
        setPayMethod((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CLIENT_ID:
      return getClientId();

    case ACTIVE_ID:
      return getActiveId();

    case MIN_LIMIT:
      return Long.valueOf(getMinLimit());

    case MAX_COUNT:
      return Long.valueOf(getMaxCount());

    case IS_PER_DAY:
      return Boolean.valueOf(isIsPerDay());

    case PER_DAY:
      return Integer.valueOf(getPerDay());

    case PER_COUNT:
      return Long.valueOf(getPerCount());

    case IS_TOTAL_DAY:
      return Boolean.valueOf(isIsTotalDay());

    case TOTAL_DAY:
      return Integer.valueOf(getTotalDay());

    case TOTAL_COUNT:
      return Long.valueOf(getTotalCount());

    case IS_PAPER_PAY:
      return Boolean.valueOf(isIsPaperPay());

    case IS_PRE_PAY:
      return Boolean.valueOf(isIsPrePay());

    case RET_MONEY:
      return Long.valueOf(getRetMoney());

    case MAX_MONEY:
      return Long.valueOf(getMaxMoney());

    case PRE_PAY_ACTIVE_ID:
      return getPrePayActiveId();

    case PRODUCT_ID:
      return getProductId();

    case PRODUCT_COUNT:
      return Integer.valueOf(getProductCount());

    case POINT:
      return Integer.valueOf(getPoint());

    case POINT_TYPE:
      return getPointType();

    case POINT_COUNT:
      return Integer.valueOf(getPointCount());

    case PAY_METHOD:
      return getPayMethod();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLIENT_ID:
      return isSetClientId();
    case ACTIVE_ID:
      return isSetActiveId();
    case MIN_LIMIT:
      return isSetMinLimit();
    case MAX_COUNT:
      return isSetMaxCount();
    case IS_PER_DAY:
      return isSetIsPerDay();
    case PER_DAY:
      return isSetPerDay();
    case PER_COUNT:
      return isSetPerCount();
    case IS_TOTAL_DAY:
      return isSetIsTotalDay();
    case TOTAL_DAY:
      return isSetTotalDay();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case IS_PAPER_PAY:
      return isSetIsPaperPay();
    case IS_PRE_PAY:
      return isSetIsPrePay();
    case RET_MONEY:
      return isSetRetMoney();
    case MAX_MONEY:
      return isSetMaxMoney();
    case PRE_PAY_ACTIVE_ID:
      return isSetPrePayActiveId();
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_COUNT:
      return isSetProductCount();
    case POINT:
      return isSetPoint();
    case POINT_TYPE:
      return isSetPointType();
    case POINT_COUNT:
      return isSetPointCount();
    case PAY_METHOD:
      return isSetPayMethod();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ActiveDetailRuleVo)
      return this.equals((ActiveDetailRuleVo)that);
    return false;
  }

  public boolean equals(ActiveDetailRuleVo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_activeId = true && this.isSetActiveId();
    boolean that_present_activeId = true && that.isSetActiveId();
    if (this_present_activeId || that_present_activeId) {
      if (!(this_present_activeId && that_present_activeId))
        return false;
      if (!this.activeId.equals(that.activeId))
        return false;
    }

    boolean this_present_minLimit = true;
    boolean that_present_minLimit = true;
    if (this_present_minLimit || that_present_minLimit) {
      if (!(this_present_minLimit && that_present_minLimit))
        return false;
      if (this.minLimit != that.minLimit)
        return false;
    }

    boolean this_present_maxCount = true;
    boolean that_present_maxCount = true;
    if (this_present_maxCount || that_present_maxCount) {
      if (!(this_present_maxCount && that_present_maxCount))
        return false;
      if (this.maxCount != that.maxCount)
        return false;
    }

    boolean this_present_isPerDay = true;
    boolean that_present_isPerDay = true;
    if (this_present_isPerDay || that_present_isPerDay) {
      if (!(this_present_isPerDay && that_present_isPerDay))
        return false;
      if (this.isPerDay != that.isPerDay)
        return false;
    }

    boolean this_present_perDay = true;
    boolean that_present_perDay = true;
    if (this_present_perDay || that_present_perDay) {
      if (!(this_present_perDay && that_present_perDay))
        return false;
      if (this.perDay != that.perDay)
        return false;
    }

    boolean this_present_perCount = true;
    boolean that_present_perCount = true;
    if (this_present_perCount || that_present_perCount) {
      if (!(this_present_perCount && that_present_perCount))
        return false;
      if (this.perCount != that.perCount)
        return false;
    }

    boolean this_present_isTotalDay = true;
    boolean that_present_isTotalDay = true;
    if (this_present_isTotalDay || that_present_isTotalDay) {
      if (!(this_present_isTotalDay && that_present_isTotalDay))
        return false;
      if (this.isTotalDay != that.isTotalDay)
        return false;
    }

    boolean this_present_totalDay = true;
    boolean that_present_totalDay = true;
    if (this_present_totalDay || that_present_totalDay) {
      if (!(this_present_totalDay && that_present_totalDay))
        return false;
      if (this.totalDay != that.totalDay)
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    boolean this_present_isPaperPay = true;
    boolean that_present_isPaperPay = true;
    if (this_present_isPaperPay || that_present_isPaperPay) {
      if (!(this_present_isPaperPay && that_present_isPaperPay))
        return false;
      if (this.isPaperPay != that.isPaperPay)
        return false;
    }

    boolean this_present_isPrePay = true;
    boolean that_present_isPrePay = true;
    if (this_present_isPrePay || that_present_isPrePay) {
      if (!(this_present_isPrePay && that_present_isPrePay))
        return false;
      if (this.isPrePay != that.isPrePay)
        return false;
    }

    boolean this_present_retMoney = true && this.isSetRetMoney();
    boolean that_present_retMoney = true && that.isSetRetMoney();
    if (this_present_retMoney || that_present_retMoney) {
      if (!(this_present_retMoney && that_present_retMoney))
        return false;
      if (this.retMoney != that.retMoney)
        return false;
    }

    boolean this_present_maxMoney = true && this.isSetMaxMoney();
    boolean that_present_maxMoney = true && that.isSetMaxMoney();
    if (this_present_maxMoney || that_present_maxMoney) {
      if (!(this_present_maxMoney && that_present_maxMoney))
        return false;
      if (this.maxMoney != that.maxMoney)
        return false;
    }

    boolean this_present_prePayActiveId = true && this.isSetPrePayActiveId();
    boolean that_present_prePayActiveId = true && that.isSetPrePayActiveId();
    if (this_present_prePayActiveId || that_present_prePayActiveId) {
      if (!(this_present_prePayActiveId && that_present_prePayActiveId))
        return false;
      if (!this.prePayActiveId.equals(that.prePayActiveId))
        return false;
    }

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_productCount = true && this.isSetProductCount();
    boolean that_present_productCount = true && that.isSetProductCount();
    if (this_present_productCount || that_present_productCount) {
      if (!(this_present_productCount && that_present_productCount))
        return false;
      if (this.productCount != that.productCount)
        return false;
    }

    boolean this_present_point = true && this.isSetPoint();
    boolean that_present_point = true && that.isSetPoint();
    if (this_present_point || that_present_point) {
      if (!(this_present_point && that_present_point))
        return false;
      if (this.point != that.point)
        return false;
    }

    boolean this_present_pointType = true && this.isSetPointType();
    boolean that_present_pointType = true && that.isSetPointType();
    if (this_present_pointType || that_present_pointType) {
      if (!(this_present_pointType && that_present_pointType))
        return false;
      if (!this.pointType.equals(that.pointType))
        return false;
    }

    boolean this_present_pointCount = true && this.isSetPointCount();
    boolean that_present_pointCount = true && that.isSetPointCount();
    if (this_present_pointCount || that_present_pointCount) {
      if (!(this_present_pointCount && that_present_pointCount))
        return false;
      if (this.pointCount != that.pointCount)
        return false;
    }

    boolean this_present_payMethod = true && this.isSetPayMethod();
    boolean that_present_payMethod = true && that.isSetPayMethod();
    if (this_present_payMethod || that_present_payMethod) {
      if (!(this_present_payMethod && that_present_payMethod))
        return false;
      if (!this.payMethod.equals(that.payMethod))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_clientId = true && (isSetClientId());
    list.add(present_clientId);
    if (present_clientId)
      list.add(clientId);

    boolean present_activeId = true && (isSetActiveId());
    list.add(present_activeId);
    if (present_activeId)
      list.add(activeId);

    boolean present_minLimit = true;
    list.add(present_minLimit);
    if (present_minLimit)
      list.add(minLimit);

    boolean present_maxCount = true;
    list.add(present_maxCount);
    if (present_maxCount)
      list.add(maxCount);

    boolean present_isPerDay = true;
    list.add(present_isPerDay);
    if (present_isPerDay)
      list.add(isPerDay);

    boolean present_perDay = true;
    list.add(present_perDay);
    if (present_perDay)
      list.add(perDay);

    boolean present_perCount = true;
    list.add(present_perCount);
    if (present_perCount)
      list.add(perCount);

    boolean present_isTotalDay = true;
    list.add(present_isTotalDay);
    if (present_isTotalDay)
      list.add(isTotalDay);

    boolean present_totalDay = true;
    list.add(present_totalDay);
    if (present_totalDay)
      list.add(totalDay);

    boolean present_totalCount = true;
    list.add(present_totalCount);
    if (present_totalCount)
      list.add(totalCount);

    boolean present_isPaperPay = true;
    list.add(present_isPaperPay);
    if (present_isPaperPay)
      list.add(isPaperPay);

    boolean present_isPrePay = true;
    list.add(present_isPrePay);
    if (present_isPrePay)
      list.add(isPrePay);

    boolean present_retMoney = true && (isSetRetMoney());
    list.add(present_retMoney);
    if (present_retMoney)
      list.add(retMoney);

    boolean present_maxMoney = true && (isSetMaxMoney());
    list.add(present_maxMoney);
    if (present_maxMoney)
      list.add(maxMoney);

    boolean present_prePayActiveId = true && (isSetPrePayActiveId());
    list.add(present_prePayActiveId);
    if (present_prePayActiveId)
      list.add(prePayActiveId);

    boolean present_productId = true && (isSetProductId());
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_productCount = true && (isSetProductCount());
    list.add(present_productCount);
    if (present_productCount)
      list.add(productCount);

    boolean present_point = true && (isSetPoint());
    list.add(present_point);
    if (present_point)
      list.add(point);

    boolean present_pointType = true && (isSetPointType());
    list.add(present_pointType);
    if (present_pointType)
      list.add(pointType);

    boolean present_pointCount = true && (isSetPointCount());
    list.add(present_pointCount);
    if (present_pointCount)
      list.add(pointCount);

    boolean present_payMethod = true && (isSetPayMethod());
    list.add(present_payMethod);
    if (present_payMethod)
      list.add(payMethod);

    return list.hashCode();
  }

  @Override
  public int compareTo(ActiveDetailRuleVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveId()).compareTo(other.isSetActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeId, other.activeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinLimit()).compareTo(other.isSetMinLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minLimit, other.minLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxCount()).compareTo(other.isSetMaxCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCount, other.maxCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPerDay()).compareTo(other.isSetIsPerDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPerDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPerDay, other.isPerDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerDay()).compareTo(other.isSetPerDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perDay, other.perDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerCount()).compareTo(other.isSetPerCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perCount, other.perCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTotalDay()).compareTo(other.isSetIsTotalDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTotalDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTotalDay, other.isTotalDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalDay()).compareTo(other.isSetTotalDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalDay, other.totalDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(other.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPaperPay()).compareTo(other.isSetIsPaperPay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPaperPay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPaperPay, other.isPaperPay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPrePay()).compareTo(other.isSetIsPrePay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPrePay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPrePay, other.isPrePay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetMoney()).compareTo(other.isSetRetMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retMoney, other.retMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxMoney()).compareTo(other.isSetMaxMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxMoney, other.maxMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrePayActiveId()).compareTo(other.isSetPrePayActiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrePayActiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prePayActiveId, other.prePayActiveId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductCount()).compareTo(other.isSetProductCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCount, other.productCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint()).compareTo(other.isSetPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point, other.point);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointType()).compareTo(other.isSetPointType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointType, other.pointType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointCount()).compareTo(other.isSetPointCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointCount, other.pointCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayMethod()).compareTo(other.isSetPayMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMethod, other.payMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ActiveDetailRuleVo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    if (this.clientId == null) {
      sb.append("null");
    } else {
      sb.append(this.clientId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeId:");
    if (this.activeId == null) {
      sb.append("null");
    } else {
      sb.append(this.activeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minLimit:");
    sb.append(this.minLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxCount:");
    sb.append(this.maxCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPerDay:");
    sb.append(this.isPerDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perDay:");
    sb.append(this.perDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perCount:");
    sb.append(this.perCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTotalDay:");
    sb.append(this.isTotalDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalDay:");
    sb.append(this.totalDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPaperPay:");
    sb.append(this.isPaperPay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPrePay:");
    sb.append(this.isPrePay);
    first = false;
    if (isSetRetMoney()) {
      if (!first) sb.append(", ");
      sb.append("retMoney:");
      sb.append(this.retMoney);
      first = false;
    }
    if (isSetMaxMoney()) {
      if (!first) sb.append(", ");
      sb.append("maxMoney:");
      sb.append(this.maxMoney);
      first = false;
    }
    if (isSetPrePayActiveId()) {
      if (!first) sb.append(", ");
      sb.append("prePayActiveId:");
      if (this.prePayActiveId == null) {
        sb.append("null");
      } else {
        sb.append(this.prePayActiveId);
      }
      first = false;
    }
    if (isSetProductId()) {
      if (!first) sb.append(", ");
      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
    }
    if (isSetProductCount()) {
      if (!first) sb.append(", ");
      sb.append("productCount:");
      sb.append(this.productCount);
      first = false;
    }
    if (isSetPoint()) {
      if (!first) sb.append(", ");
      sb.append("point:");
      sb.append(this.point);
      first = false;
    }
    if (isSetPointType()) {
      if (!first) sb.append(", ");
      sb.append("pointType:");
      if (this.pointType == null) {
        sb.append("null");
      } else {
        sb.append(this.pointType);
      }
      first = false;
    }
    if (isSetPointCount()) {
      if (!first) sb.append(", ");
      sb.append("pointCount:");
      sb.append(this.pointCount);
      first = false;
    }
    if (isSetPayMethod()) {
      if (!first) sb.append(", ");
      sb.append("payMethod:");
      if (this.payMethod == null) {
        sb.append("null");
      } else {
        sb.append(this.payMethod);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActiveDetailRuleVoStandardSchemeFactory implements SchemeFactory {
    public ActiveDetailRuleVoStandardScheme getScheme() {
      return new ActiveDetailRuleVoStandardScheme();
    }
  }

  private static class ActiveDetailRuleVoStandardScheme extends StandardScheme<ActiveDetailRuleVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ActiveDetailRuleVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeId = iprot.readString();
              struct.setActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIN_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.minLimit = iprot.readI64();
              struct.setMinLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxCount = iprot.readI64();
              struct.setMaxCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_PER_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPerDay = iprot.readBool();
              struct.setIsPerDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PER_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.perDay = iprot.readI32();
              struct.setPerDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.perCount = iprot.readI64();
              struct.setPerCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_TOTAL_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTotalDay = iprot.readBool();
              struct.setIsTotalDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOTAL_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalDay = iprot.readI32();
              struct.setTotalDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalCount = iprot.readI64();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_PAPER_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPaperPay = iprot.readBool();
              struct.setIsPaperPayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_PRE_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPrePay = iprot.readBool();
              struct.setIsPrePayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RET_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.retMoney = iprot.readI64();
              struct.setRetMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MAX_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxMoney = iprot.readI64();
              struct.setMaxMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PRE_PAY_ACTIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prePayActiveId = iprot.readString();
              struct.setPrePayActiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productId = iprot.readString();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PRODUCT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productCount = iprot.readI32();
              struct.setProductCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.point = iprot.readI32();
              struct.setPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // POINT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pointType = iprot.readString();
              struct.setPointTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // POINT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pointCount = iprot.readI32();
              struct.setPointCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PAY_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payMethod = iprot.readString();
              struct.setPayMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ActiveDetailRuleVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.clientId != null) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeString(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.activeId != null) {
        oprot.writeFieldBegin(ACTIVE_ID_FIELD_DESC);
        oprot.writeString(struct.activeId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_LIMIT_FIELD_DESC);
      oprot.writeI64(struct.minLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_COUNT_FIELD_DESC);
      oprot.writeI64(struct.maxCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PER_DAY_FIELD_DESC);
      oprot.writeBool(struct.isPerDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PER_DAY_FIELD_DESC);
      oprot.writeI32(struct.perDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PER_COUNT_FIELD_DESC);
      oprot.writeI64(struct.perCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_TOTAL_DAY_FIELD_DESC);
      oprot.writeBool(struct.isTotalDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_DAY_FIELD_DESC);
      oprot.writeI32(struct.totalDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI64(struct.totalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PAPER_PAY_FIELD_DESC);
      oprot.writeBool(struct.isPaperPay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PRE_PAY_FIELD_DESC);
      oprot.writeBool(struct.isPrePay);
      oprot.writeFieldEnd();
      if (struct.isSetRetMoney()) {
        oprot.writeFieldBegin(RET_MONEY_FIELD_DESC);
        oprot.writeI64(struct.retMoney);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxMoney()) {
        oprot.writeFieldBegin(MAX_MONEY_FIELD_DESC);
        oprot.writeI64(struct.maxMoney);
        oprot.writeFieldEnd();
      }
      if (struct.prePayActiveId != null) {
        if (struct.isSetPrePayActiveId()) {
          oprot.writeFieldBegin(PRE_PAY_ACTIVE_ID_FIELD_DESC);
          oprot.writeString(struct.prePayActiveId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.productId != null) {
        if (struct.isSetProductId()) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetProductCount()) {
        oprot.writeFieldBegin(PRODUCT_COUNT_FIELD_DESC);
        oprot.writeI32(struct.productCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPoint()) {
        oprot.writeFieldBegin(POINT_FIELD_DESC);
        oprot.writeI32(struct.point);
        oprot.writeFieldEnd();
      }
      if (struct.pointType != null) {
        if (struct.isSetPointType()) {
          oprot.writeFieldBegin(POINT_TYPE_FIELD_DESC);
          oprot.writeString(struct.pointType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPointCount()) {
        oprot.writeFieldBegin(POINT_COUNT_FIELD_DESC);
        oprot.writeI32(struct.pointCount);
        oprot.writeFieldEnd();
      }
      if (struct.payMethod != null) {
        if (struct.isSetPayMethod()) {
          oprot.writeFieldBegin(PAY_METHOD_FIELD_DESC);
          oprot.writeString(struct.payMethod);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActiveDetailRuleVoTupleSchemeFactory implements SchemeFactory {
    public ActiveDetailRuleVoTupleScheme getScheme() {
      return new ActiveDetailRuleVoTupleScheme();
    }
  }

  private static class ActiveDetailRuleVoTupleScheme extends TupleScheme<ActiveDetailRuleVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ActiveDetailRuleVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetClientId()) {
        optionals.set(1);
      }
      if (struct.isSetActiveId()) {
        optionals.set(2);
      }
      if (struct.isSetMinLimit()) {
        optionals.set(3);
      }
      if (struct.isSetMaxCount()) {
        optionals.set(4);
      }
      if (struct.isSetIsPerDay()) {
        optionals.set(5);
      }
      if (struct.isSetPerDay()) {
        optionals.set(6);
      }
      if (struct.isSetPerCount()) {
        optionals.set(7);
      }
      if (struct.isSetIsTotalDay()) {
        optionals.set(8);
      }
      if (struct.isSetTotalDay()) {
        optionals.set(9);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(10);
      }
      if (struct.isSetIsPaperPay()) {
        optionals.set(11);
      }
      if (struct.isSetIsPrePay()) {
        optionals.set(12);
      }
      if (struct.isSetRetMoney()) {
        optionals.set(13);
      }
      if (struct.isSetMaxMoney()) {
        optionals.set(14);
      }
      if (struct.isSetPrePayActiveId()) {
        optionals.set(15);
      }
      if (struct.isSetProductId()) {
        optionals.set(16);
      }
      if (struct.isSetProductCount()) {
        optionals.set(17);
      }
      if (struct.isSetPoint()) {
        optionals.set(18);
      }
      if (struct.isSetPointType()) {
        optionals.set(19);
      }
      if (struct.isSetPointCount()) {
        optionals.set(20);
      }
      if (struct.isSetPayMethod()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetActiveId()) {
        oprot.writeString(struct.activeId);
      }
      if (struct.isSetMinLimit()) {
        oprot.writeI64(struct.minLimit);
      }
      if (struct.isSetMaxCount()) {
        oprot.writeI64(struct.maxCount);
      }
      if (struct.isSetIsPerDay()) {
        oprot.writeBool(struct.isPerDay);
      }
      if (struct.isSetPerDay()) {
        oprot.writeI32(struct.perDay);
      }
      if (struct.isSetPerCount()) {
        oprot.writeI64(struct.perCount);
      }
      if (struct.isSetIsTotalDay()) {
        oprot.writeBool(struct.isTotalDay);
      }
      if (struct.isSetTotalDay()) {
        oprot.writeI32(struct.totalDay);
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI64(struct.totalCount);
      }
      if (struct.isSetIsPaperPay()) {
        oprot.writeBool(struct.isPaperPay);
      }
      if (struct.isSetIsPrePay()) {
        oprot.writeBool(struct.isPrePay);
      }
      if (struct.isSetRetMoney()) {
        oprot.writeI64(struct.retMoney);
      }
      if (struct.isSetMaxMoney()) {
        oprot.writeI64(struct.maxMoney);
      }
      if (struct.isSetPrePayActiveId()) {
        oprot.writeString(struct.prePayActiveId);
      }
      if (struct.isSetProductId()) {
        oprot.writeString(struct.productId);
      }
      if (struct.isSetProductCount()) {
        oprot.writeI32(struct.productCount);
      }
      if (struct.isSetPoint()) {
        oprot.writeI32(struct.point);
      }
      if (struct.isSetPointType()) {
        oprot.writeString(struct.pointType);
      }
      if (struct.isSetPointCount()) {
        oprot.writeI32(struct.pointCount);
      }
      if (struct.isSetPayMethod()) {
        oprot.writeString(struct.payMethod);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ActiveDetailRuleVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.activeId = iprot.readString();
        struct.setActiveIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.minLimit = iprot.readI64();
        struct.setMinLimitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.maxCount = iprot.readI64();
        struct.setMaxCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isPerDay = iprot.readBool();
        struct.setIsPerDayIsSet(true);
      }
      if (incoming.get(6)) {
        struct.perDay = iprot.readI32();
        struct.setPerDayIsSet(true);
      }
      if (incoming.get(7)) {
        struct.perCount = iprot.readI64();
        struct.setPerCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isTotalDay = iprot.readBool();
        struct.setIsTotalDayIsSet(true);
      }
      if (incoming.get(9)) {
        struct.totalDay = iprot.readI32();
        struct.setTotalDayIsSet(true);
      }
      if (incoming.get(10)) {
        struct.totalCount = iprot.readI64();
        struct.setTotalCountIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isPaperPay = iprot.readBool();
        struct.setIsPaperPayIsSet(true);
      }
      if (incoming.get(12)) {
        struct.isPrePay = iprot.readBool();
        struct.setIsPrePayIsSet(true);
      }
      if (incoming.get(13)) {
        struct.retMoney = iprot.readI64();
        struct.setRetMoneyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.maxMoney = iprot.readI64();
        struct.setMaxMoneyIsSet(true);
      }
      if (incoming.get(15)) {
        struct.prePayActiveId = iprot.readString();
        struct.setPrePayActiveIdIsSet(true);
      }
      if (incoming.get(16)) {
        struct.productId = iprot.readString();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.productCount = iprot.readI32();
        struct.setProductCountIsSet(true);
      }
      if (incoming.get(18)) {
        struct.point = iprot.readI32();
        struct.setPointIsSet(true);
      }
      if (incoming.get(19)) {
        struct.pointType = iprot.readString();
        struct.setPointTypeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.pointCount = iprot.readI32();
        struct.setPointCountIsSet(true);
      }
      if (incoming.get(21)) {
        struct.payMethod = iprot.readString();
        struct.setPayMethodIsSet(true);
      }
    }
  }

}

