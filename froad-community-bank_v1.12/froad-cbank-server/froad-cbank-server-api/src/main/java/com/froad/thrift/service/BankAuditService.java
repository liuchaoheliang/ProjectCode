/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class BankAuditService {

  /**
   * 审核服务接口
   * BankAuditService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 批量审核(商品和商户)
     * @param auditFlag 标识(审核标志 1-商品 2-商户)
     * @param bankAuditVoList 审核对象集合
     * @return 审核失败的审核对象id及名称(id:name;)  审核成功返回OK  审核异常返回ERROR
     * 
     * @param originVo
     * @param auditFlag
     * @param bankAuditVoList
     */
    public com.froad.thrift.vo.BankAuditVoRes auditBatch(com.froad.thrift.vo.OriginVo originVo, int auditFlag, List<com.froad.thrift.vo.BankAuditVo> bankAuditVoList) throws org.apache.thrift.TException;

    /**
     * 返回待审核数量
     * @param clientId 客户端id
     * @param orgCode 机构编号
     * @return
     * 
     * @param clientId
     * @param orgCode
     */
    public com.froad.thrift.vo.PreAuditNumVo getPreAuditNumRes(String clientId, String orgCode) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void auditBatch(com.froad.thrift.vo.OriginVo originVo, int auditFlag, List<com.froad.thrift.vo.BankAuditVo> bankAuditVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPreAuditNumRes(String clientId, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.BankAuditVoRes auditBatch(com.froad.thrift.vo.OriginVo originVo, int auditFlag, List<com.froad.thrift.vo.BankAuditVo> bankAuditVoList) throws org.apache.thrift.TException
    {
      send_auditBatch(originVo, auditFlag, bankAuditVoList);
      return recv_auditBatch();
    }

    public void send_auditBatch(com.froad.thrift.vo.OriginVo originVo, int auditFlag, List<com.froad.thrift.vo.BankAuditVo> bankAuditVoList) throws org.apache.thrift.TException
    {
      auditBatch_args args = new auditBatch_args();
      args.setOriginVo(originVo);
      args.setAuditFlag(auditFlag);
      args.setBankAuditVoList(bankAuditVoList);
      sendBase("auditBatch", args);
    }

    public com.froad.thrift.vo.BankAuditVoRes recv_auditBatch() throws org.apache.thrift.TException
    {
      auditBatch_result result = new auditBatch_result();
      receiveBase(result, "auditBatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "auditBatch failed: unknown result");
    }

    public com.froad.thrift.vo.PreAuditNumVo getPreAuditNumRes(String clientId, String orgCode) throws org.apache.thrift.TException
    {
      send_getPreAuditNumRes(clientId, orgCode);
      return recv_getPreAuditNumRes();
    }

    public void send_getPreAuditNumRes(String clientId, String orgCode) throws org.apache.thrift.TException
    {
      getPreAuditNumRes_args args = new getPreAuditNumRes_args();
      args.setClientId(clientId);
      args.setOrgCode(orgCode);
      sendBase("getPreAuditNumRes", args);
    }

    public com.froad.thrift.vo.PreAuditNumVo recv_getPreAuditNumRes() throws org.apache.thrift.TException
    {
      getPreAuditNumRes_result result = new getPreAuditNumRes_result();
      receiveBase(result, "getPreAuditNumRes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPreAuditNumRes failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void auditBatch(com.froad.thrift.vo.OriginVo originVo, int auditFlag, List<com.froad.thrift.vo.BankAuditVo> bankAuditVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      auditBatch_call method_call = new auditBatch_call(originVo, auditFlag, bankAuditVoList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class auditBatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.OriginVo originVo;
      private int auditFlag;
      private List<com.froad.thrift.vo.BankAuditVo> bankAuditVoList;
      public auditBatch_call(com.froad.thrift.vo.OriginVo originVo, int auditFlag, List<com.froad.thrift.vo.BankAuditVo> bankAuditVoList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.originVo = originVo;
        this.auditFlag = auditFlag;
        this.bankAuditVoList = bankAuditVoList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("auditBatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        auditBatch_args args = new auditBatch_args();
        args.setOriginVo(originVo);
        args.setAuditFlag(auditFlag);
        args.setBankAuditVoList(bankAuditVoList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.BankAuditVoRes getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_auditBatch();
      }
    }

    public void getPreAuditNumRes(String clientId, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPreAuditNumRes_call method_call = new getPreAuditNumRes_call(clientId, orgCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPreAuditNumRes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String orgCode;
      public getPreAuditNumRes_call(String clientId, String orgCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.orgCode = orgCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPreAuditNumRes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPreAuditNumRes_args args = new getPreAuditNumRes_args();
        args.setClientId(clientId);
        args.setOrgCode(orgCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.PreAuditNumVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPreAuditNumRes();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("auditBatch", new auditBatch());
      processMap.put("getPreAuditNumRes", new getPreAuditNumRes());
      return processMap;
    }

    public static class auditBatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, auditBatch_args> {
      public auditBatch() {
        super("auditBatch");
      }

      public auditBatch_args getEmptyArgsInstance() {
        return new auditBatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public auditBatch_result getResult(I iface, auditBatch_args args) throws org.apache.thrift.TException {
        auditBatch_result result = new auditBatch_result();
        result.success = iface.auditBatch(args.originVo, args.auditFlag, args.bankAuditVoList);
        return result;
      }
    }

    public static class getPreAuditNumRes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPreAuditNumRes_args> {
      public getPreAuditNumRes() {
        super("getPreAuditNumRes");
      }

      public getPreAuditNumRes_args getEmptyArgsInstance() {
        return new getPreAuditNumRes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPreAuditNumRes_result getResult(I iface, getPreAuditNumRes_args args) throws org.apache.thrift.TException {
        getPreAuditNumRes_result result = new getPreAuditNumRes_result();
        result.success = iface.getPreAuditNumRes(args.clientId, args.orgCode);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("auditBatch", new auditBatch());
      processMap.put("getPreAuditNumRes", new getPreAuditNumRes());
      return processMap;
    }

    public static class auditBatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, auditBatch_args, com.froad.thrift.vo.BankAuditVoRes> {
      public auditBatch() {
        super("auditBatch");
      }

      public auditBatch_args getEmptyArgsInstance() {
        return new auditBatch_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.BankAuditVoRes> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.BankAuditVoRes>() { 
          public void onComplete(com.froad.thrift.vo.BankAuditVoRes o) {
            auditBatch_result result = new auditBatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            auditBatch_result result = new auditBatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, auditBatch_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.BankAuditVoRes> resultHandler) throws TException {
        iface.auditBatch(args.originVo, args.auditFlag, args.bankAuditVoList,resultHandler);
      }
    }

    public static class getPreAuditNumRes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPreAuditNumRes_args, com.froad.thrift.vo.PreAuditNumVo> {
      public getPreAuditNumRes() {
        super("getPreAuditNumRes");
      }

      public getPreAuditNumRes_args getEmptyArgsInstance() {
        return new getPreAuditNumRes_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.PreAuditNumVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.PreAuditNumVo>() { 
          public void onComplete(com.froad.thrift.vo.PreAuditNumVo o) {
            getPreAuditNumRes_result result = new getPreAuditNumRes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPreAuditNumRes_result result = new getPreAuditNumRes_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPreAuditNumRes_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.PreAuditNumVo> resultHandler) throws TException {
        iface.getPreAuditNumRes(args.clientId, args.orgCode,resultHandler);
      }
    }

  }

  public static class auditBatch_args implements org.apache.thrift.TBase<auditBatch_args, auditBatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<auditBatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("auditBatch_args");

    private static final org.apache.thrift.protocol.TField ORIGIN_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("originVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AUDIT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("auditFlag", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField BANK_AUDIT_VO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("bankAuditVoList", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new auditBatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new auditBatch_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.OriginVo originVo; // required
    public int auditFlag; // required
    public List<com.froad.thrift.vo.BankAuditVo> bankAuditVoList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGIN_VO((short)1, "originVo"),
      AUDIT_FLAG((short)2, "auditFlag"),
      BANK_AUDIT_VO_LIST((short)3, "bankAuditVoList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGIN_VO
            return ORIGIN_VO;
          case 2: // AUDIT_FLAG
            return AUDIT_FLAG;
          case 3: // BANK_AUDIT_VO_LIST
            return BANK_AUDIT_VO_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AUDITFLAG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGIN_VO, new org.apache.thrift.meta_data.FieldMetaData("originVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.OriginVo.class)));
      tmpMap.put(_Fields.AUDIT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("auditFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BANK_AUDIT_VO_LIST, new org.apache.thrift.meta_data.FieldMetaData("bankAuditVoList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankAuditVo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(auditBatch_args.class, metaDataMap);
    }

    public auditBatch_args() {
    }

    public auditBatch_args(
      com.froad.thrift.vo.OriginVo originVo,
      int auditFlag,
      List<com.froad.thrift.vo.BankAuditVo> bankAuditVoList)
    {
      this();
      this.originVo = originVo;
      this.auditFlag = auditFlag;
      setAuditFlagIsSet(true);
      this.bankAuditVoList = bankAuditVoList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public auditBatch_args(auditBatch_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOriginVo()) {
        this.originVo = new com.froad.thrift.vo.OriginVo(other.originVo);
      }
      this.auditFlag = other.auditFlag;
      if (other.isSetBankAuditVoList()) {
        List<com.froad.thrift.vo.BankAuditVo> __this__bankAuditVoList = new ArrayList<com.froad.thrift.vo.BankAuditVo>(other.bankAuditVoList.size());
        for (com.froad.thrift.vo.BankAuditVo other_element : other.bankAuditVoList) {
          __this__bankAuditVoList.add(new com.froad.thrift.vo.BankAuditVo(other_element));
        }
        this.bankAuditVoList = __this__bankAuditVoList;
      }
    }

    public auditBatch_args deepCopy() {
      return new auditBatch_args(this);
    }

    @Override
    public void clear() {
      this.originVo = null;
      setAuditFlagIsSet(false);
      this.auditFlag = 0;
      this.bankAuditVoList = null;
    }

    public com.froad.thrift.vo.OriginVo getOriginVo() {
      return this.originVo;
    }

    public auditBatch_args setOriginVo(com.froad.thrift.vo.OriginVo originVo) {
      this.originVo = originVo;
      return this;
    }

    public void unsetOriginVo() {
      this.originVo = null;
    }

    /** Returns true if field originVo is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginVo() {
      return this.originVo != null;
    }

    public void setOriginVoIsSet(boolean value) {
      if (!value) {
        this.originVo = null;
      }
    }

    public int getAuditFlag() {
      return this.auditFlag;
    }

    public auditBatch_args setAuditFlag(int auditFlag) {
      this.auditFlag = auditFlag;
      setAuditFlagIsSet(true);
      return this;
    }

    public void unsetAuditFlag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUDITFLAG_ISSET_ID);
    }

    /** Returns true if field auditFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetAuditFlag() {
      return EncodingUtils.testBit(__isset_bitfield, __AUDITFLAG_ISSET_ID);
    }

    public void setAuditFlagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUDITFLAG_ISSET_ID, value);
    }

    public int getBankAuditVoListSize() {
      return (this.bankAuditVoList == null) ? 0 : this.bankAuditVoList.size();
    }

    public java.util.Iterator<com.froad.thrift.vo.BankAuditVo> getBankAuditVoListIterator() {
      return (this.bankAuditVoList == null) ? null : this.bankAuditVoList.iterator();
    }

    public void addToBankAuditVoList(com.froad.thrift.vo.BankAuditVo elem) {
      if (this.bankAuditVoList == null) {
        this.bankAuditVoList = new ArrayList<com.froad.thrift.vo.BankAuditVo>();
      }
      this.bankAuditVoList.add(elem);
    }

    public List<com.froad.thrift.vo.BankAuditVo> getBankAuditVoList() {
      return this.bankAuditVoList;
    }

    public auditBatch_args setBankAuditVoList(List<com.froad.thrift.vo.BankAuditVo> bankAuditVoList) {
      this.bankAuditVoList = bankAuditVoList;
      return this;
    }

    public void unsetBankAuditVoList() {
      this.bankAuditVoList = null;
    }

    /** Returns true if field bankAuditVoList is set (has been assigned a value) and false otherwise */
    public boolean isSetBankAuditVoList() {
      return this.bankAuditVoList != null;
    }

    public void setBankAuditVoListIsSet(boolean value) {
      if (!value) {
        this.bankAuditVoList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORIGIN_VO:
        if (value == null) {
          unsetOriginVo();
        } else {
          setOriginVo((com.froad.thrift.vo.OriginVo)value);
        }
        break;

      case AUDIT_FLAG:
        if (value == null) {
          unsetAuditFlag();
        } else {
          setAuditFlag((Integer)value);
        }
        break;

      case BANK_AUDIT_VO_LIST:
        if (value == null) {
          unsetBankAuditVoList();
        } else {
          setBankAuditVoList((List<com.froad.thrift.vo.BankAuditVo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGIN_VO:
        return getOriginVo();

      case AUDIT_FLAG:
        return Integer.valueOf(getAuditFlag());

      case BANK_AUDIT_VO_LIST:
        return getBankAuditVoList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORIGIN_VO:
        return isSetOriginVo();
      case AUDIT_FLAG:
        return isSetAuditFlag();
      case BANK_AUDIT_VO_LIST:
        return isSetBankAuditVoList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof auditBatch_args)
        return this.equals((auditBatch_args)that);
      return false;
    }

    public boolean equals(auditBatch_args that) {
      if (that == null)
        return false;

      boolean this_present_originVo = true && this.isSetOriginVo();
      boolean that_present_originVo = true && that.isSetOriginVo();
      if (this_present_originVo || that_present_originVo) {
        if (!(this_present_originVo && that_present_originVo))
          return false;
        if (!this.originVo.equals(that.originVo))
          return false;
      }

      boolean this_present_auditFlag = true;
      boolean that_present_auditFlag = true;
      if (this_present_auditFlag || that_present_auditFlag) {
        if (!(this_present_auditFlag && that_present_auditFlag))
          return false;
        if (this.auditFlag != that.auditFlag)
          return false;
      }

      boolean this_present_bankAuditVoList = true && this.isSetBankAuditVoList();
      boolean that_present_bankAuditVoList = true && that.isSetBankAuditVoList();
      if (this_present_bankAuditVoList || that_present_bankAuditVoList) {
        if (!(this_present_bankAuditVoList && that_present_bankAuditVoList))
          return false;
        if (!this.bankAuditVoList.equals(that.bankAuditVoList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_originVo = true && (isSetOriginVo());
      list.add(present_originVo);
      if (present_originVo)
        list.add(originVo);

      boolean present_auditFlag = true;
      list.add(present_auditFlag);
      if (present_auditFlag)
        list.add(auditFlag);

      boolean present_bankAuditVoList = true && (isSetBankAuditVoList());
      list.add(present_bankAuditVoList);
      if (present_bankAuditVoList)
        list.add(bankAuditVoList);

      return list.hashCode();
    }

    @Override
    public int compareTo(auditBatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOriginVo()).compareTo(other.isSetOriginVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originVo, other.originVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAuditFlag()).compareTo(other.isSetAuditFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuditFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditFlag, other.auditFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankAuditVoList()).compareTo(other.isSetBankAuditVoList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankAuditVoList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankAuditVoList, other.bankAuditVoList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("auditBatch_args(");
      boolean first = true;

      sb.append("originVo:");
      if (this.originVo == null) {
        sb.append("null");
      } else {
        sb.append(this.originVo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("auditFlag:");
      sb.append(this.auditFlag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankAuditVoList:");
      if (this.bankAuditVoList == null) {
        sb.append("null");
      } else {
        sb.append(this.bankAuditVoList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (originVo != null) {
        originVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class auditBatch_argsStandardSchemeFactory implements SchemeFactory {
      public auditBatch_argsStandardScheme getScheme() {
        return new auditBatch_argsStandardScheme();
      }
    }

    private static class auditBatch_argsStandardScheme extends StandardScheme<auditBatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, auditBatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGIN_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.originVo = new com.froad.thrift.vo.OriginVo();
                struct.originVo.read(iprot);
                struct.setOriginVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AUDIT_FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.auditFlag = iprot.readI32();
                struct.setAuditFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BANK_AUDIT_VO_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.bankAuditVoList = new ArrayList<com.froad.thrift.vo.BankAuditVo>(_list0.size);
                  com.froad.thrift.vo.BankAuditVo _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.froad.thrift.vo.BankAuditVo();
                    _elem1.read(iprot);
                    struct.bankAuditVoList.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setBankAuditVoListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, auditBatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.originVo != null) {
          oprot.writeFieldBegin(ORIGIN_VO_FIELD_DESC);
          struct.originVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AUDIT_FLAG_FIELD_DESC);
        oprot.writeI32(struct.auditFlag);
        oprot.writeFieldEnd();
        if (struct.bankAuditVoList != null) {
          oprot.writeFieldBegin(BANK_AUDIT_VO_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bankAuditVoList.size()));
            for (com.froad.thrift.vo.BankAuditVo _iter3 : struct.bankAuditVoList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class auditBatch_argsTupleSchemeFactory implements SchemeFactory {
      public auditBatch_argsTupleScheme getScheme() {
        return new auditBatch_argsTupleScheme();
      }
    }

    private static class auditBatch_argsTupleScheme extends TupleScheme<auditBatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, auditBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOriginVo()) {
          optionals.set(0);
        }
        if (struct.isSetAuditFlag()) {
          optionals.set(1);
        }
        if (struct.isSetBankAuditVoList()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOriginVo()) {
          struct.originVo.write(oprot);
        }
        if (struct.isSetAuditFlag()) {
          oprot.writeI32(struct.auditFlag);
        }
        if (struct.isSetBankAuditVoList()) {
          {
            oprot.writeI32(struct.bankAuditVoList.size());
            for (com.froad.thrift.vo.BankAuditVo _iter4 : struct.bankAuditVoList)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, auditBatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.originVo = new com.froad.thrift.vo.OriginVo();
          struct.originVo.read(iprot);
          struct.setOriginVoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.auditFlag = iprot.readI32();
          struct.setAuditFlagIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.bankAuditVoList = new ArrayList<com.froad.thrift.vo.BankAuditVo>(_list5.size);
            com.froad.thrift.vo.BankAuditVo _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.froad.thrift.vo.BankAuditVo();
              _elem6.read(iprot);
              struct.bankAuditVoList.add(_elem6);
            }
          }
          struct.setBankAuditVoListIsSet(true);
        }
      }
    }

  }

  public static class auditBatch_result implements org.apache.thrift.TBase<auditBatch_result, auditBatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<auditBatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("auditBatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new auditBatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new auditBatch_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.BankAuditVoRes success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.BankAuditVoRes.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(auditBatch_result.class, metaDataMap);
    }

    public auditBatch_result() {
    }

    public auditBatch_result(
      com.froad.thrift.vo.BankAuditVoRes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public auditBatch_result(auditBatch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.BankAuditVoRes(other.success);
      }
    }

    public auditBatch_result deepCopy() {
      return new auditBatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.BankAuditVoRes getSuccess() {
      return this.success;
    }

    public auditBatch_result setSuccess(com.froad.thrift.vo.BankAuditVoRes success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.BankAuditVoRes)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof auditBatch_result)
        return this.equals((auditBatch_result)that);
      return false;
    }

    public boolean equals(auditBatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(auditBatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("auditBatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class auditBatch_resultStandardSchemeFactory implements SchemeFactory {
      public auditBatch_resultStandardScheme getScheme() {
        return new auditBatch_resultStandardScheme();
      }
    }

    private static class auditBatch_resultStandardScheme extends StandardScheme<auditBatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, auditBatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.BankAuditVoRes();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, auditBatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class auditBatch_resultTupleSchemeFactory implements SchemeFactory {
      public auditBatch_resultTupleScheme getScheme() {
        return new auditBatch_resultTupleScheme();
      }
    }

    private static class auditBatch_resultTupleScheme extends TupleScheme<auditBatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, auditBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, auditBatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.BankAuditVoRes();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPreAuditNumRes_args implements org.apache.thrift.TBase<getPreAuditNumRes_args, getPreAuditNumRes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPreAuditNumRes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPreAuditNumRes_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPreAuditNumRes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPreAuditNumRes_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String orgCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      ORG_CODE((short)2, "orgCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ORG_CODE
            return ORG_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPreAuditNumRes_args.class, metaDataMap);
    }

    public getPreAuditNumRes_args() {
    }

    public getPreAuditNumRes_args(
      String clientId,
      String orgCode)
    {
      this();
      this.clientId = clientId;
      this.orgCode = orgCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPreAuditNumRes_args(getPreAuditNumRes_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetOrgCode()) {
        this.orgCode = other.orgCode;
      }
    }

    public getPreAuditNumRes_args deepCopy() {
      return new getPreAuditNumRes_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.orgCode = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public getPreAuditNumRes_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getOrgCode() {
      return this.orgCode;
    }

    public getPreAuditNumRes_args setOrgCode(String orgCode) {
      this.orgCode = orgCode;
      return this;
    }

    public void unsetOrgCode() {
      this.orgCode = null;
    }

    /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgCode() {
      return this.orgCode != null;
    }

    public void setOrgCodeIsSet(boolean value) {
      if (!value) {
        this.orgCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ORG_CODE:
        if (value == null) {
          unsetOrgCode();
        } else {
          setOrgCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case ORG_CODE:
        return getOrgCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case ORG_CODE:
        return isSetOrgCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPreAuditNumRes_args)
        return this.equals((getPreAuditNumRes_args)that);
      return false;
    }

    public boolean equals(getPreAuditNumRes_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_orgCode = true && this.isSetOrgCode();
      boolean that_present_orgCode = true && that.isSetOrgCode();
      if (this_present_orgCode || that_present_orgCode) {
        if (!(this_present_orgCode && that_present_orgCode))
          return false;
        if (!this.orgCode.equals(that.orgCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_orgCode = true && (isSetOrgCode());
      list.add(present_orgCode);
      if (present_orgCode)
        list.add(orgCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPreAuditNumRes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPreAuditNumRes_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgCode:");
      if (this.orgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPreAuditNumRes_argsStandardSchemeFactory implements SchemeFactory {
      public getPreAuditNumRes_argsStandardScheme getScheme() {
        return new getPreAuditNumRes_argsStandardScheme();
      }
    }

    private static class getPreAuditNumRes_argsStandardScheme extends StandardScheme<getPreAuditNumRes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPreAuditNumRes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORG_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orgCode = iprot.readString();
                struct.setOrgCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPreAuditNumRes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.orgCode != null) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.orgCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPreAuditNumRes_argsTupleSchemeFactory implements SchemeFactory {
      public getPreAuditNumRes_argsTupleScheme getScheme() {
        return new getPreAuditNumRes_argsTupleScheme();
      }
    }

    private static class getPreAuditNumRes_argsTupleScheme extends TupleScheme<getPreAuditNumRes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPreAuditNumRes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetOrgCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetOrgCode()) {
          oprot.writeString(struct.orgCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPreAuditNumRes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orgCode = iprot.readString();
          struct.setOrgCodeIsSet(true);
        }
      }
    }

  }

  public static class getPreAuditNumRes_result implements org.apache.thrift.TBase<getPreAuditNumRes_result, getPreAuditNumRes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPreAuditNumRes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPreAuditNumRes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPreAuditNumRes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPreAuditNumRes_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.PreAuditNumVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.PreAuditNumVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPreAuditNumRes_result.class, metaDataMap);
    }

    public getPreAuditNumRes_result() {
    }

    public getPreAuditNumRes_result(
      com.froad.thrift.vo.PreAuditNumVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPreAuditNumRes_result(getPreAuditNumRes_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.PreAuditNumVo(other.success);
      }
    }

    public getPreAuditNumRes_result deepCopy() {
      return new getPreAuditNumRes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.PreAuditNumVo getSuccess() {
      return this.success;
    }

    public getPreAuditNumRes_result setSuccess(com.froad.thrift.vo.PreAuditNumVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.PreAuditNumVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPreAuditNumRes_result)
        return this.equals((getPreAuditNumRes_result)that);
      return false;
    }

    public boolean equals(getPreAuditNumRes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPreAuditNumRes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPreAuditNumRes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPreAuditNumRes_resultStandardSchemeFactory implements SchemeFactory {
      public getPreAuditNumRes_resultStandardScheme getScheme() {
        return new getPreAuditNumRes_resultStandardScheme();
      }
    }

    private static class getPreAuditNumRes_resultStandardScheme extends StandardScheme<getPreAuditNumRes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPreAuditNumRes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.PreAuditNumVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPreAuditNumRes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPreAuditNumRes_resultTupleSchemeFactory implements SchemeFactory {
      public getPreAuditNumRes_resultTupleScheme getScheme() {
        return new getPreAuditNumRes_resultTupleScheme();
      }
    }

    private static class getPreAuditNumRes_resultTupleScheme extends TupleScheme<getPreAuditNumRes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPreAuditNumRes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPreAuditNumRes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.PreAuditNumVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
