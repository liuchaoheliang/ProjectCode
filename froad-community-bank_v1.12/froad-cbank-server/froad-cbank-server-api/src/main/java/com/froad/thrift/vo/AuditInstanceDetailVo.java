/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.vo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * （AuditInstanceDetailVo）
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class AuditInstanceDetailVo implements org.apache.thrift.TBase<AuditInstanceDetailVo, AuditInstanceDetailVo._Fields>, java.io.Serializable, Cloneable, Comparable<AuditInstanceDetailVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuditInstanceDetailVo");

  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATE_ACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("createActor", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PROCESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("processType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROCESS_TYPE_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("processTypeDetail", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bessId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BESS_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("bessData", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField INSTANCE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceState", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("finishTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField AUDIT_ACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("auditActor", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField NEXT_ACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("nextActor", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField AUDIT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("auditState", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AuditInstanceDetailVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AuditInstanceDetailVoTupleSchemeFactory());
  }

  /**
   * 创建时间
   */
  public long createTime; // optional
  /**
   * 审核流水号
   */
  public String instanceId; // optional
  /**
   * 审核创建人信息
   */
  public ActorVo createActor; // optional
  /**
   * 流程类型:1-商户,2-门店,3-团购商品,4-预售商品
   */
  public String processType; // optional
  /**
   * 0-新增；1-更新
   */
  public String processTypeDetail; // optional
  /**
   * 业务数据ID根据类型传对应的(商户、门店、商品)Id
   */
  public String bessId; // optional
  /**
   * 业务对象
   */
  public String bessData; // optional
  /**
   * 审核流水状态
   */
  public String instanceState; // optional
  /**
   * 归档时间
   */
  public long finishTime; // optional
  /**
   * 已执行过的审核人信息
   */
  public List<ActorVo> auditActor; // optional
  /**
   * 下一审核人信息
   */
  public ActorVo nextActor; // optional
  /**
   * 所属商户的发展机构
   */
  public String orgCode; // optional
  /**
   * 审核状态(0-待审核,1审核通过,2审核未通过)
   */
  public String auditState; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 创建时间
     */
    CREATE_TIME((short)1, "createTime"),
    /**
     * 审核流水号
     */
    INSTANCE_ID((short)2, "instanceId"),
    /**
     * 审核创建人信息
     */
    CREATE_ACTOR((short)3, "createActor"),
    /**
     * 流程类型:1-商户,2-门店,3-团购商品,4-预售商品
     */
    PROCESS_TYPE((short)4, "processType"),
    /**
     * 0-新增；1-更新
     */
    PROCESS_TYPE_DETAIL((short)5, "processTypeDetail"),
    /**
     * 业务数据ID根据类型传对应的(商户、门店、商品)Id
     */
    BESS_ID((short)6, "bessId"),
    /**
     * 业务对象
     */
    BESS_DATA((short)7, "bessData"),
    /**
     * 审核流水状态
     */
    INSTANCE_STATE((short)8, "instanceState"),
    /**
     * 归档时间
     */
    FINISH_TIME((short)9, "finishTime"),
    /**
     * 已执行过的审核人信息
     */
    AUDIT_ACTOR((short)10, "auditActor"),
    /**
     * 下一审核人信息
     */
    NEXT_ACTOR((short)11, "nextActor"),
    /**
     * 所属商户的发展机构
     */
    ORG_CODE((short)12, "orgCode"),
    /**
     * 审核状态(0-待审核,1审核通过,2审核未通过)
     */
    AUDIT_STATE((short)13, "auditState");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CREATE_TIME
          return CREATE_TIME;
        case 2: // INSTANCE_ID
          return INSTANCE_ID;
        case 3: // CREATE_ACTOR
          return CREATE_ACTOR;
        case 4: // PROCESS_TYPE
          return PROCESS_TYPE;
        case 5: // PROCESS_TYPE_DETAIL
          return PROCESS_TYPE_DETAIL;
        case 6: // BESS_ID
          return BESS_ID;
        case 7: // BESS_DATA
          return BESS_DATA;
        case 8: // INSTANCE_STATE
          return INSTANCE_STATE;
        case 9: // FINISH_TIME
          return FINISH_TIME;
        case 10: // AUDIT_ACTOR
          return AUDIT_ACTOR;
        case 11: // NEXT_ACTOR
          return NEXT_ACTOR;
        case 12: // ORG_CODE
          return ORG_CODE;
        case 13: // AUDIT_STATE
          return AUDIT_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATETIME_ISSET_ID = 0;
  private static final int __FINISHTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CREATE_TIME,_Fields.INSTANCE_ID,_Fields.CREATE_ACTOR,_Fields.PROCESS_TYPE,_Fields.PROCESS_TYPE_DETAIL,_Fields.BESS_ID,_Fields.BESS_DATA,_Fields.INSTANCE_STATE,_Fields.FINISH_TIME,_Fields.AUDIT_ACTOR,_Fields.NEXT_ACTOR,_Fields.ORG_CODE,_Fields.AUDIT_STATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_ACTOR, new org.apache.thrift.meta_data.FieldMetaData("createActor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ActorVo")));
    tmpMap.put(_Fields.PROCESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("processType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESS_TYPE_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("processTypeDetail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BESS_ID, new org.apache.thrift.meta_data.FieldMetaData("bessId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BESS_DATA, new org.apache.thrift.meta_data.FieldMetaData("bessData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTANCE_STATE, new org.apache.thrift.meta_data.FieldMetaData("instanceState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("finishTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUDIT_ACTOR, new org.apache.thrift.meta_data.FieldMetaData("auditActor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ActorVo"))));
    tmpMap.put(_Fields.NEXT_ACTOR, new org.apache.thrift.meta_data.FieldMetaData("nextActor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ActorVo")));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUDIT_STATE, new org.apache.thrift.meta_data.FieldMetaData("auditState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuditInstanceDetailVo.class, metaDataMap);
  }

  public AuditInstanceDetailVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AuditInstanceDetailVo(AuditInstanceDetailVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.createTime = other.createTime;
    if (other.isSetInstanceId()) {
      this.instanceId = other.instanceId;
    }
    if (other.isSetCreateActor()) {
      this.createActor = other.createActor;
    }
    if (other.isSetProcessType()) {
      this.processType = other.processType;
    }
    if (other.isSetProcessTypeDetail()) {
      this.processTypeDetail = other.processTypeDetail;
    }
    if (other.isSetBessId()) {
      this.bessId = other.bessId;
    }
    if (other.isSetBessData()) {
      this.bessData = other.bessData;
    }
    if (other.isSetInstanceState()) {
      this.instanceState = other.instanceState;
    }
    this.finishTime = other.finishTime;
    if (other.isSetAuditActor()) {
      List<ActorVo> __this__auditActor = new ArrayList<ActorVo>(other.auditActor.size());
      for (ActorVo other_element : other.auditActor) {
        __this__auditActor.add(other_element);
      }
      this.auditActor = __this__auditActor;
    }
    if (other.isSetNextActor()) {
      this.nextActor = other.nextActor;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetAuditState()) {
      this.auditState = other.auditState;
    }
  }

  public AuditInstanceDetailVo deepCopy() {
    return new AuditInstanceDetailVo(this);
  }

  @Override
  public void clear() {
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.instanceId = null;
    this.createActor = null;
    this.processType = null;
    this.processTypeDetail = null;
    this.bessId = null;
    this.bessData = null;
    this.instanceState = null;
    setFinishTimeIsSet(false);
    this.finishTime = 0;
    this.auditActor = null;
    this.nextActor = null;
    this.orgCode = null;
    this.auditState = null;
  }

  /**
   * 创建时间
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * 创建时间
   */
  public AuditInstanceDetailVo setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * 审核流水号
   */
  public String getInstanceId() {
    return this.instanceId;
  }

  /**
   * 审核流水号
   */
  public AuditInstanceDetailVo setInstanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  public void unsetInstanceId() {
    this.instanceId = null;
  }

  /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceId() {
    return this.instanceId != null;
  }

  public void setInstanceIdIsSet(boolean value) {
    if (!value) {
      this.instanceId = null;
    }
  }

  /**
   * 审核创建人信息
   */
  public ActorVo getCreateActor() {
    return this.createActor;
  }

  /**
   * 审核创建人信息
   */
  public AuditInstanceDetailVo setCreateActor(ActorVo createActor) {
    this.createActor = createActor;
    return this;
  }

  public void unsetCreateActor() {
    this.createActor = null;
  }

  /** Returns true if field createActor is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateActor() {
    return this.createActor != null;
  }

  public void setCreateActorIsSet(boolean value) {
    if (!value) {
      this.createActor = null;
    }
  }

  /**
   * 流程类型:1-商户,2-门店,3-团购商品,4-预售商品
   */
  public String getProcessType() {
    return this.processType;
  }

  /**
   * 流程类型:1-商户,2-门店,3-团购商品,4-预售商品
   */
  public AuditInstanceDetailVo setProcessType(String processType) {
    this.processType = processType;
    return this;
  }

  public void unsetProcessType() {
    this.processType = null;
  }

  /** Returns true if field processType is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessType() {
    return this.processType != null;
  }

  public void setProcessTypeIsSet(boolean value) {
    if (!value) {
      this.processType = null;
    }
  }

  /**
   * 0-新增；1-更新
   */
  public String getProcessTypeDetail() {
    return this.processTypeDetail;
  }

  /**
   * 0-新增；1-更新
   */
  public AuditInstanceDetailVo setProcessTypeDetail(String processTypeDetail) {
    this.processTypeDetail = processTypeDetail;
    return this;
  }

  public void unsetProcessTypeDetail() {
    this.processTypeDetail = null;
  }

  /** Returns true if field processTypeDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessTypeDetail() {
    return this.processTypeDetail != null;
  }

  public void setProcessTypeDetailIsSet(boolean value) {
    if (!value) {
      this.processTypeDetail = null;
    }
  }

  /**
   * 业务数据ID根据类型传对应的(商户、门店、商品)Id
   */
  public String getBessId() {
    return this.bessId;
  }

  /**
   * 业务数据ID根据类型传对应的(商户、门店、商品)Id
   */
  public AuditInstanceDetailVo setBessId(String bessId) {
    this.bessId = bessId;
    return this;
  }

  public void unsetBessId() {
    this.bessId = null;
  }

  /** Returns true if field bessId is set (has been assigned a value) and false otherwise */
  public boolean isSetBessId() {
    return this.bessId != null;
  }

  public void setBessIdIsSet(boolean value) {
    if (!value) {
      this.bessId = null;
    }
  }

  /**
   * 业务对象
   */
  public String getBessData() {
    return this.bessData;
  }

  /**
   * 业务对象
   */
  public AuditInstanceDetailVo setBessData(String bessData) {
    this.bessData = bessData;
    return this;
  }

  public void unsetBessData() {
    this.bessData = null;
  }

  /** Returns true if field bessData is set (has been assigned a value) and false otherwise */
  public boolean isSetBessData() {
    return this.bessData != null;
  }

  public void setBessDataIsSet(boolean value) {
    if (!value) {
      this.bessData = null;
    }
  }

  /**
   * 审核流水状态
   */
  public String getInstanceState() {
    return this.instanceState;
  }

  /**
   * 审核流水状态
   */
  public AuditInstanceDetailVo setInstanceState(String instanceState) {
    this.instanceState = instanceState;
    return this;
  }

  public void unsetInstanceState() {
    this.instanceState = null;
  }

  /** Returns true if field instanceState is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceState() {
    return this.instanceState != null;
  }

  public void setInstanceStateIsSet(boolean value) {
    if (!value) {
      this.instanceState = null;
    }
  }

  /**
   * 归档时间
   */
  public long getFinishTime() {
    return this.finishTime;
  }

  /**
   * 归档时间
   */
  public AuditInstanceDetailVo setFinishTime(long finishTime) {
    this.finishTime = finishTime;
    setFinishTimeIsSet(true);
    return this;
  }

  public void unsetFinishTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINISHTIME_ISSET_ID);
  }

  /** Returns true if field finishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FINISHTIME_ISSET_ID);
  }

  public void setFinishTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINISHTIME_ISSET_ID, value);
  }

  public int getAuditActorSize() {
    return (this.auditActor == null) ? 0 : this.auditActor.size();
  }

  public java.util.Iterator<ActorVo> getAuditActorIterator() {
    return (this.auditActor == null) ? null : this.auditActor.iterator();
  }

  public void addToAuditActor(ActorVo elem) {
    if (this.auditActor == null) {
      this.auditActor = new ArrayList<ActorVo>();
    }
    this.auditActor.add(elem);
  }

  /**
   * 已执行过的审核人信息
   */
  public List<ActorVo> getAuditActor() {
    return this.auditActor;
  }

  /**
   * 已执行过的审核人信息
   */
  public AuditInstanceDetailVo setAuditActor(List<ActorVo> auditActor) {
    this.auditActor = auditActor;
    return this;
  }

  public void unsetAuditActor() {
    this.auditActor = null;
  }

  /** Returns true if field auditActor is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditActor() {
    return this.auditActor != null;
  }

  public void setAuditActorIsSet(boolean value) {
    if (!value) {
      this.auditActor = null;
    }
  }

  /**
   * 下一审核人信息
   */
  public ActorVo getNextActor() {
    return this.nextActor;
  }

  /**
   * 下一审核人信息
   */
  public AuditInstanceDetailVo setNextActor(ActorVo nextActor) {
    this.nextActor = nextActor;
    return this;
  }

  public void unsetNextActor() {
    this.nextActor = null;
  }

  /** Returns true if field nextActor is set (has been assigned a value) and false otherwise */
  public boolean isSetNextActor() {
    return this.nextActor != null;
  }

  public void setNextActorIsSet(boolean value) {
    if (!value) {
      this.nextActor = null;
    }
  }

  /**
   * 所属商户的发展机构
   */
  public String getOrgCode() {
    return this.orgCode;
  }

  /**
   * 所属商户的发展机构
   */
  public AuditInstanceDetailVo setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  /**
   * 审核状态(0-待审核,1审核通过,2审核未通过)
   */
  public String getAuditState() {
    return this.auditState;
  }

  /**
   * 审核状态(0-待审核,1审核通过,2审核未通过)
   */
  public AuditInstanceDetailVo setAuditState(String auditState) {
    this.auditState = auditState;
    return this;
  }

  public void unsetAuditState() {
    this.auditState = null;
  }

  /** Returns true if field auditState is set (has been assigned a value) and false otherwise */
  public boolean isSetAuditState() {
    return this.auditState != null;
  }

  public void setAuditStateIsSet(boolean value) {
    if (!value) {
      this.auditState = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case INSTANCE_ID:
      if (value == null) {
        unsetInstanceId();
      } else {
        setInstanceId((String)value);
      }
      break;

    case CREATE_ACTOR:
      if (value == null) {
        unsetCreateActor();
      } else {
        setCreateActor((ActorVo)value);
      }
      break;

    case PROCESS_TYPE:
      if (value == null) {
        unsetProcessType();
      } else {
        setProcessType((String)value);
      }
      break;

    case PROCESS_TYPE_DETAIL:
      if (value == null) {
        unsetProcessTypeDetail();
      } else {
        setProcessTypeDetail((String)value);
      }
      break;

    case BESS_ID:
      if (value == null) {
        unsetBessId();
      } else {
        setBessId((String)value);
      }
      break;

    case BESS_DATA:
      if (value == null) {
        unsetBessData();
      } else {
        setBessData((String)value);
      }
      break;

    case INSTANCE_STATE:
      if (value == null) {
        unsetInstanceState();
      } else {
        setInstanceState((String)value);
      }
      break;

    case FINISH_TIME:
      if (value == null) {
        unsetFinishTime();
      } else {
        setFinishTime((Long)value);
      }
      break;

    case AUDIT_ACTOR:
      if (value == null) {
        unsetAuditActor();
      } else {
        setAuditActor((List<ActorVo>)value);
      }
      break;

    case NEXT_ACTOR:
      if (value == null) {
        unsetNextActor();
      } else {
        setNextActor((ActorVo)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case AUDIT_STATE:
      if (value == null) {
        unsetAuditState();
      } else {
        setAuditState((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case INSTANCE_ID:
      return getInstanceId();

    case CREATE_ACTOR:
      return getCreateActor();

    case PROCESS_TYPE:
      return getProcessType();

    case PROCESS_TYPE_DETAIL:
      return getProcessTypeDetail();

    case BESS_ID:
      return getBessId();

    case BESS_DATA:
      return getBessData();

    case INSTANCE_STATE:
      return getInstanceState();

    case FINISH_TIME:
      return Long.valueOf(getFinishTime());

    case AUDIT_ACTOR:
      return getAuditActor();

    case NEXT_ACTOR:
      return getNextActor();

    case ORG_CODE:
      return getOrgCode();

    case AUDIT_STATE:
      return getAuditState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CREATE_TIME:
      return isSetCreateTime();
    case INSTANCE_ID:
      return isSetInstanceId();
    case CREATE_ACTOR:
      return isSetCreateActor();
    case PROCESS_TYPE:
      return isSetProcessType();
    case PROCESS_TYPE_DETAIL:
      return isSetProcessTypeDetail();
    case BESS_ID:
      return isSetBessId();
    case BESS_DATA:
      return isSetBessData();
    case INSTANCE_STATE:
      return isSetInstanceState();
    case FINISH_TIME:
      return isSetFinishTime();
    case AUDIT_ACTOR:
      return isSetAuditActor();
    case NEXT_ACTOR:
      return isSetNextActor();
    case ORG_CODE:
      return isSetOrgCode();
    case AUDIT_STATE:
      return isSetAuditState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AuditInstanceDetailVo)
      return this.equals((AuditInstanceDetailVo)that);
    return false;
  }

  public boolean equals(AuditInstanceDetailVo that) {
    if (that == null)
      return false;

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_instanceId = true && this.isSetInstanceId();
    boolean that_present_instanceId = true && that.isSetInstanceId();
    if (this_present_instanceId || that_present_instanceId) {
      if (!(this_present_instanceId && that_present_instanceId))
        return false;
      if (!this.instanceId.equals(that.instanceId))
        return false;
    }

    boolean this_present_createActor = true && this.isSetCreateActor();
    boolean that_present_createActor = true && that.isSetCreateActor();
    if (this_present_createActor || that_present_createActor) {
      if (!(this_present_createActor && that_present_createActor))
        return false;
      if (!this.createActor.equals(that.createActor))
        return false;
    }

    boolean this_present_processType = true && this.isSetProcessType();
    boolean that_present_processType = true && that.isSetProcessType();
    if (this_present_processType || that_present_processType) {
      if (!(this_present_processType && that_present_processType))
        return false;
      if (!this.processType.equals(that.processType))
        return false;
    }

    boolean this_present_processTypeDetail = true && this.isSetProcessTypeDetail();
    boolean that_present_processTypeDetail = true && that.isSetProcessTypeDetail();
    if (this_present_processTypeDetail || that_present_processTypeDetail) {
      if (!(this_present_processTypeDetail && that_present_processTypeDetail))
        return false;
      if (!this.processTypeDetail.equals(that.processTypeDetail))
        return false;
    }

    boolean this_present_bessId = true && this.isSetBessId();
    boolean that_present_bessId = true && that.isSetBessId();
    if (this_present_bessId || that_present_bessId) {
      if (!(this_present_bessId && that_present_bessId))
        return false;
      if (!this.bessId.equals(that.bessId))
        return false;
    }

    boolean this_present_bessData = true && this.isSetBessData();
    boolean that_present_bessData = true && that.isSetBessData();
    if (this_present_bessData || that_present_bessData) {
      if (!(this_present_bessData && that_present_bessData))
        return false;
      if (!this.bessData.equals(that.bessData))
        return false;
    }

    boolean this_present_instanceState = true && this.isSetInstanceState();
    boolean that_present_instanceState = true && that.isSetInstanceState();
    if (this_present_instanceState || that_present_instanceState) {
      if (!(this_present_instanceState && that_present_instanceState))
        return false;
      if (!this.instanceState.equals(that.instanceState))
        return false;
    }

    boolean this_present_finishTime = true && this.isSetFinishTime();
    boolean that_present_finishTime = true && that.isSetFinishTime();
    if (this_present_finishTime || that_present_finishTime) {
      if (!(this_present_finishTime && that_present_finishTime))
        return false;
      if (this.finishTime != that.finishTime)
        return false;
    }

    boolean this_present_auditActor = true && this.isSetAuditActor();
    boolean that_present_auditActor = true && that.isSetAuditActor();
    if (this_present_auditActor || that_present_auditActor) {
      if (!(this_present_auditActor && that_present_auditActor))
        return false;
      if (!this.auditActor.equals(that.auditActor))
        return false;
    }

    boolean this_present_nextActor = true && this.isSetNextActor();
    boolean that_present_nextActor = true && that.isSetNextActor();
    if (this_present_nextActor || that_present_nextActor) {
      if (!(this_present_nextActor && that_present_nextActor))
        return false;
      if (!this.nextActor.equals(that.nextActor))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_auditState = true && this.isSetAuditState();
    boolean that_present_auditState = true && that.isSetAuditState();
    if (this_present_auditState || that_present_auditState) {
      if (!(this_present_auditState && that_present_auditState))
        return false;
      if (!this.auditState.equals(that.auditState))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_instanceId = true && (isSetInstanceId());
    list.add(present_instanceId);
    if (present_instanceId)
      list.add(instanceId);

    boolean present_createActor = true && (isSetCreateActor());
    list.add(present_createActor);
    if (present_createActor)
      list.add(createActor);

    boolean present_processType = true && (isSetProcessType());
    list.add(present_processType);
    if (present_processType)
      list.add(processType);

    boolean present_processTypeDetail = true && (isSetProcessTypeDetail());
    list.add(present_processTypeDetail);
    if (present_processTypeDetail)
      list.add(processTypeDetail);

    boolean present_bessId = true && (isSetBessId());
    list.add(present_bessId);
    if (present_bessId)
      list.add(bessId);

    boolean present_bessData = true && (isSetBessData());
    list.add(present_bessData);
    if (present_bessData)
      list.add(bessData);

    boolean present_instanceState = true && (isSetInstanceState());
    list.add(present_instanceState);
    if (present_instanceState)
      list.add(instanceState);

    boolean present_finishTime = true && (isSetFinishTime());
    list.add(present_finishTime);
    if (present_finishTime)
      list.add(finishTime);

    boolean present_auditActor = true && (isSetAuditActor());
    list.add(present_auditActor);
    if (present_auditActor)
      list.add(auditActor);

    boolean present_nextActor = true && (isSetNextActor());
    list.add(present_nextActor);
    if (present_nextActor)
      list.add(nextActor);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_auditState = true && (isSetAuditState());
    list.add(present_auditState);
    if (present_auditState)
      list.add(auditState);

    return list.hashCode();
  }

  @Override
  public int compareTo(AuditInstanceDetailVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateActor()).compareTo(other.isSetCreateActor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateActor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createActor, other.createActor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessType()).compareTo(other.isSetProcessType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processType, other.processType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcessTypeDetail()).compareTo(other.isSetProcessTypeDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessTypeDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processTypeDetail, other.processTypeDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBessId()).compareTo(other.isSetBessId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBessId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bessId, other.bessId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBessData()).compareTo(other.isSetBessData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBessData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bessData, other.bessData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceState()).compareTo(other.isSetInstanceState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceState, other.instanceState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishTime()).compareTo(other.isSetFinishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishTime, other.finishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditActor()).compareTo(other.isSetAuditActor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditActor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditActor, other.auditActor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextActor()).compareTo(other.isSetNextActor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextActor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextActor, other.nextActor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuditState()).compareTo(other.isSetAuditState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuditState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auditState, other.auditState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AuditInstanceDetailVo(");
    boolean first = true;

    if (isSetCreateTime()) {
      sb.append("createTime:");
      sb.append(this.createTime);
      first = false;
    }
    if (isSetInstanceId()) {
      if (!first) sb.append(", ");
      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
    }
    if (isSetCreateActor()) {
      if (!first) sb.append(", ");
      sb.append("createActor:");
      if (this.createActor == null) {
        sb.append("null");
      } else {
        sb.append(this.createActor);
      }
      first = false;
    }
    if (isSetProcessType()) {
      if (!first) sb.append(", ");
      sb.append("processType:");
      if (this.processType == null) {
        sb.append("null");
      } else {
        sb.append(this.processType);
      }
      first = false;
    }
    if (isSetProcessTypeDetail()) {
      if (!first) sb.append(", ");
      sb.append("processTypeDetail:");
      if (this.processTypeDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.processTypeDetail);
      }
      first = false;
    }
    if (isSetBessId()) {
      if (!first) sb.append(", ");
      sb.append("bessId:");
      if (this.bessId == null) {
        sb.append("null");
      } else {
        sb.append(this.bessId);
      }
      first = false;
    }
    if (isSetBessData()) {
      if (!first) sb.append(", ");
      sb.append("bessData:");
      if (this.bessData == null) {
        sb.append("null");
      } else {
        sb.append(this.bessData);
      }
      first = false;
    }
    if (isSetInstanceState()) {
      if (!first) sb.append(", ");
      sb.append("instanceState:");
      if (this.instanceState == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceState);
      }
      first = false;
    }
    if (isSetFinishTime()) {
      if (!first) sb.append(", ");
      sb.append("finishTime:");
      sb.append(this.finishTime);
      first = false;
    }
    if (isSetAuditActor()) {
      if (!first) sb.append(", ");
      sb.append("auditActor:");
      if (this.auditActor == null) {
        sb.append("null");
      } else {
        sb.append(this.auditActor);
      }
      first = false;
    }
    if (isSetNextActor()) {
      if (!first) sb.append(", ");
      sb.append("nextActor:");
      if (this.nextActor == null) {
        sb.append("null");
      } else {
        sb.append(this.nextActor);
      }
      first = false;
    }
    if (isSetOrgCode()) {
      if (!first) sb.append(", ");
      sb.append("orgCode:");
      if (this.orgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCode);
      }
      first = false;
    }
    if (isSetAuditState()) {
      if (!first) sb.append(", ");
      sb.append("auditState:");
      if (this.auditState == null) {
        sb.append("null");
      } else {
        sb.append(this.auditState);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AuditInstanceDetailVoStandardSchemeFactory implements SchemeFactory {
    public AuditInstanceDetailVoStandardScheme getScheme() {
      return new AuditInstanceDetailVoStandardScheme();
    }
  }

  private static class AuditInstanceDetailVoStandardScheme extends StandardScheme<AuditInstanceDetailVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AuditInstanceDetailVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceId = iprot.readString();
              struct.setInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATE_ACTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.createActor = new ActorVo();
              struct.createActor.read(iprot);
              struct.setCreateActorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROCESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processType = iprot.readString();
              struct.setProcessTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROCESS_TYPE_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processTypeDetail = iprot.readString();
              struct.setProcessTypeDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bessId = iprot.readString();
              struct.setBessIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BESS_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bessData = iprot.readString();
              struct.setBessDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INSTANCE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceState = iprot.readString();
              struct.setInstanceStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.finishTime = iprot.readI64();
              struct.setFinishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AUDIT_ACTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                struct.auditActor = new ArrayList<ActorVo>(_list84.size);
                ActorVo _elem85;
                for (int _i86 = 0; _i86 < _list84.size; ++_i86)
                {
                  _elem85 = new ActorVo();
                  _elem85.read(iprot);
                  struct.auditActor.add(_elem85);
                }
                iprot.readListEnd();
              }
              struct.setAuditActorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NEXT_ACTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nextActor = new ActorVo();
              struct.nextActor.read(iprot);
              struct.setNextActorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // AUDIT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auditState = iprot.readString();
              struct.setAuditStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AuditInstanceDetailVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCreateTime()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeI64(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.instanceId != null) {
        if (struct.isSetInstanceId()) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createActor != null) {
        if (struct.isSetCreateActor()) {
          oprot.writeFieldBegin(CREATE_ACTOR_FIELD_DESC);
          struct.createActor.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.processType != null) {
        if (struct.isSetProcessType()) {
          oprot.writeFieldBegin(PROCESS_TYPE_FIELD_DESC);
          oprot.writeString(struct.processType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.processTypeDetail != null) {
        if (struct.isSetProcessTypeDetail()) {
          oprot.writeFieldBegin(PROCESS_TYPE_DETAIL_FIELD_DESC);
          oprot.writeString(struct.processTypeDetail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bessId != null) {
        if (struct.isSetBessId()) {
          oprot.writeFieldBegin(BESS_ID_FIELD_DESC);
          oprot.writeString(struct.bessId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bessData != null) {
        if (struct.isSetBessData()) {
          oprot.writeFieldBegin(BESS_DATA_FIELD_DESC);
          oprot.writeString(struct.bessData);
          oprot.writeFieldEnd();
        }
      }
      if (struct.instanceState != null) {
        if (struct.isSetInstanceState()) {
          oprot.writeFieldBegin(INSTANCE_STATE_FIELD_DESC);
          oprot.writeString(struct.instanceState);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFinishTime()) {
        oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
        oprot.writeI64(struct.finishTime);
        oprot.writeFieldEnd();
      }
      if (struct.auditActor != null) {
        if (struct.isSetAuditActor()) {
          oprot.writeFieldBegin(AUDIT_ACTOR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.auditActor.size()));
            for (ActorVo _iter87 : struct.auditActor)
            {
              _iter87.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nextActor != null) {
        if (struct.isSetNextActor()) {
          oprot.writeFieldBegin(NEXT_ACTOR_FIELD_DESC);
          struct.nextActor.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orgCode != null) {
        if (struct.isSetOrgCode()) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.orgCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.auditState != null) {
        if (struct.isSetAuditState()) {
          oprot.writeFieldBegin(AUDIT_STATE_FIELD_DESC);
          oprot.writeString(struct.auditState);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AuditInstanceDetailVoTupleSchemeFactory implements SchemeFactory {
    public AuditInstanceDetailVoTupleScheme getScheme() {
      return new AuditInstanceDetailVoTupleScheme();
    }
  }

  private static class AuditInstanceDetailVoTupleScheme extends TupleScheme<AuditInstanceDetailVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AuditInstanceDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCreateTime()) {
        optionals.set(0);
      }
      if (struct.isSetInstanceId()) {
        optionals.set(1);
      }
      if (struct.isSetCreateActor()) {
        optionals.set(2);
      }
      if (struct.isSetProcessType()) {
        optionals.set(3);
      }
      if (struct.isSetProcessTypeDetail()) {
        optionals.set(4);
      }
      if (struct.isSetBessId()) {
        optionals.set(5);
      }
      if (struct.isSetBessData()) {
        optionals.set(6);
      }
      if (struct.isSetInstanceState()) {
        optionals.set(7);
      }
      if (struct.isSetFinishTime()) {
        optionals.set(8);
      }
      if (struct.isSetAuditActor()) {
        optionals.set(9);
      }
      if (struct.isSetNextActor()) {
        optionals.set(10);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(11);
      }
      if (struct.isSetAuditState()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetInstanceId()) {
        oprot.writeString(struct.instanceId);
      }
      if (struct.isSetCreateActor()) {
        struct.createActor.write(oprot);
      }
      if (struct.isSetProcessType()) {
        oprot.writeString(struct.processType);
      }
      if (struct.isSetProcessTypeDetail()) {
        oprot.writeString(struct.processTypeDetail);
      }
      if (struct.isSetBessId()) {
        oprot.writeString(struct.bessId);
      }
      if (struct.isSetBessData()) {
        oprot.writeString(struct.bessData);
      }
      if (struct.isSetInstanceState()) {
        oprot.writeString(struct.instanceState);
      }
      if (struct.isSetFinishTime()) {
        oprot.writeI64(struct.finishTime);
      }
      if (struct.isSetAuditActor()) {
        {
          oprot.writeI32(struct.auditActor.size());
          for (ActorVo _iter88 : struct.auditActor)
          {
            _iter88.write(oprot);
          }
        }
      }
      if (struct.isSetNextActor()) {
        struct.nextActor.write(oprot);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetAuditState()) {
        oprot.writeString(struct.auditState);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AuditInstanceDetailVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.instanceId = iprot.readString();
        struct.setInstanceIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createActor = new ActorVo();
        struct.createActor.read(iprot);
        struct.setCreateActorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.processType = iprot.readString();
        struct.setProcessTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.processTypeDetail = iprot.readString();
        struct.setProcessTypeDetailIsSet(true);
      }
      if (incoming.get(5)) {
        struct.bessId = iprot.readString();
        struct.setBessIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bessData = iprot.readString();
        struct.setBessDataIsSet(true);
      }
      if (incoming.get(7)) {
        struct.instanceState = iprot.readString();
        struct.setInstanceStateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.finishTime = iprot.readI64();
        struct.setFinishTimeIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.auditActor = new ArrayList<ActorVo>(_list89.size);
          ActorVo _elem90;
          for (int _i91 = 0; _i91 < _list89.size; ++_i91)
          {
            _elem90 = new ActorVo();
            _elem90.read(iprot);
            struct.auditActor.add(_elem90);
          }
        }
        struct.setAuditActorIsSet(true);
      }
      if (incoming.get(10)) {
        struct.nextActor = new ActorVo();
        struct.nextActor.read(iprot);
        struct.setNextActorIsSet(true);
      }
      if (incoming.get(11)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.auditState = iprot.readString();
        struct.setAuditStateIsSet(true);
      }
    }
  }

}

