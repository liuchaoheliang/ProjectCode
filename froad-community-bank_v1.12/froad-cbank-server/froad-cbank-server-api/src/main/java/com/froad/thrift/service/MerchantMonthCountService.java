/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class MerchantMonthCountService {

  /**
   * MerchantMonthCountService
   */
  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 查询 MerchantMonthCountVo
     * @param merchantMonthCountVo
     * @return MerchantMonthCountVo
     * 
     * @param merchantMonthCountVo
     */
    public com.froad.thrift.vo.MerchantMonthCountVo getMerchantMonthCount(com.froad.thrift.vo.MerchantMonthCountVo merchantMonthCountVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void getMerchantMonthCount(com.froad.thrift.vo.MerchantMonthCountVo merchantMonthCountVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.MerchantMonthCountVo getMerchantMonthCount(com.froad.thrift.vo.MerchantMonthCountVo merchantMonthCountVo) throws org.apache.thrift.TException
    {
      send_getMerchantMonthCount(merchantMonthCountVo);
      return recv_getMerchantMonthCount();
    }

    public void send_getMerchantMonthCount(com.froad.thrift.vo.MerchantMonthCountVo merchantMonthCountVo) throws org.apache.thrift.TException
    {
      getMerchantMonthCount_args args = new getMerchantMonthCount_args();
      args.setMerchantMonthCountVo(merchantMonthCountVo);
      sendBase("getMerchantMonthCount", args);
    }

    public com.froad.thrift.vo.MerchantMonthCountVo recv_getMerchantMonthCount() throws org.apache.thrift.TException
    {
      getMerchantMonthCount_result result = new getMerchantMonthCount_result();
      receiveBase(result, "getMerchantMonthCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMerchantMonthCount failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getMerchantMonthCount(com.froad.thrift.vo.MerchantMonthCountVo merchantMonthCountVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMerchantMonthCount_call method_call = new getMerchantMonthCount_call(merchantMonthCountVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMerchantMonthCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.froad.thrift.vo.MerchantMonthCountVo merchantMonthCountVo;
      public getMerchantMonthCount_call(com.froad.thrift.vo.MerchantMonthCountVo merchantMonthCountVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantMonthCountVo = merchantMonthCountVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMerchantMonthCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMerchantMonthCount_args args = new getMerchantMonthCount_args();
        args.setMerchantMonthCountVo(merchantMonthCountVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.MerchantMonthCountVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMerchantMonthCount();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getMerchantMonthCount", new getMerchantMonthCount());
      return processMap;
    }

    public static class getMerchantMonthCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMerchantMonthCount_args> {
      public getMerchantMonthCount() {
        super("getMerchantMonthCount");
      }

      public getMerchantMonthCount_args getEmptyArgsInstance() {
        return new getMerchantMonthCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMerchantMonthCount_result getResult(I iface, getMerchantMonthCount_args args) throws org.apache.thrift.TException {
        getMerchantMonthCount_result result = new getMerchantMonthCount_result();
        result.success = iface.getMerchantMonthCount(args.merchantMonthCountVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getMerchantMonthCount", new getMerchantMonthCount());
      return processMap;
    }

    public static class getMerchantMonthCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMerchantMonthCount_args, com.froad.thrift.vo.MerchantMonthCountVo> {
      public getMerchantMonthCount() {
        super("getMerchantMonthCount");
      }

      public getMerchantMonthCount_args getEmptyArgsInstance() {
        return new getMerchantMonthCount_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.MerchantMonthCountVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.MerchantMonthCountVo>() { 
          public void onComplete(com.froad.thrift.vo.MerchantMonthCountVo o) {
            getMerchantMonthCount_result result = new getMerchantMonthCount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMerchantMonthCount_result result = new getMerchantMonthCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMerchantMonthCount_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.MerchantMonthCountVo> resultHandler) throws TException {
        iface.getMerchantMonthCount(args.merchantMonthCountVo,resultHandler);
      }
    }

  }

  public static class getMerchantMonthCount_args implements org.apache.thrift.TBase<getMerchantMonthCount_args, getMerchantMonthCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantMonthCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantMonthCount_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_MONTH_COUNT_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantMonthCountVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantMonthCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantMonthCount_argsTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantMonthCountVo merchantMonthCountVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_MONTH_COUNT_VO((short)1, "merchantMonthCountVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_MONTH_COUNT_VO
            return MERCHANT_MONTH_COUNT_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_MONTH_COUNT_VO, new org.apache.thrift.meta_data.FieldMetaData("merchantMonthCountVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantMonthCountVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantMonthCount_args.class, metaDataMap);
    }

    public getMerchantMonthCount_args() {
    }

    public getMerchantMonthCount_args(
      com.froad.thrift.vo.MerchantMonthCountVo merchantMonthCountVo)
    {
      this();
      this.merchantMonthCountVo = merchantMonthCountVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantMonthCount_args(getMerchantMonthCount_args other) {
      if (other.isSetMerchantMonthCountVo()) {
        this.merchantMonthCountVo = new com.froad.thrift.vo.MerchantMonthCountVo(other.merchantMonthCountVo);
      }
    }

    public getMerchantMonthCount_args deepCopy() {
      return new getMerchantMonthCount_args(this);
    }

    @Override
    public void clear() {
      this.merchantMonthCountVo = null;
    }

    public com.froad.thrift.vo.MerchantMonthCountVo getMerchantMonthCountVo() {
      return this.merchantMonthCountVo;
    }

    public getMerchantMonthCount_args setMerchantMonthCountVo(com.froad.thrift.vo.MerchantMonthCountVo merchantMonthCountVo) {
      this.merchantMonthCountVo = merchantMonthCountVo;
      return this;
    }

    public void unsetMerchantMonthCountVo() {
      this.merchantMonthCountVo = null;
    }

    /** Returns true if field merchantMonthCountVo is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantMonthCountVo() {
      return this.merchantMonthCountVo != null;
    }

    public void setMerchantMonthCountVoIsSet(boolean value) {
      if (!value) {
        this.merchantMonthCountVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_MONTH_COUNT_VO:
        if (value == null) {
          unsetMerchantMonthCountVo();
        } else {
          setMerchantMonthCountVo((com.froad.thrift.vo.MerchantMonthCountVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_MONTH_COUNT_VO:
        return getMerchantMonthCountVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_MONTH_COUNT_VO:
        return isSetMerchantMonthCountVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantMonthCount_args)
        return this.equals((getMerchantMonthCount_args)that);
      return false;
    }

    public boolean equals(getMerchantMonthCount_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantMonthCountVo = true && this.isSetMerchantMonthCountVo();
      boolean that_present_merchantMonthCountVo = true && that.isSetMerchantMonthCountVo();
      if (this_present_merchantMonthCountVo || that_present_merchantMonthCountVo) {
        if (!(this_present_merchantMonthCountVo && that_present_merchantMonthCountVo))
          return false;
        if (!this.merchantMonthCountVo.equals(that.merchantMonthCountVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantMonthCountVo = true && (isSetMerchantMonthCountVo());
      list.add(present_merchantMonthCountVo);
      if (present_merchantMonthCountVo)
        list.add(merchantMonthCountVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantMonthCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantMonthCountVo()).compareTo(other.isSetMerchantMonthCountVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantMonthCountVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantMonthCountVo, other.merchantMonthCountVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantMonthCount_args(");
      boolean first = true;

      sb.append("merchantMonthCountVo:");
      if (this.merchantMonthCountVo == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantMonthCountVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (merchantMonthCountVo != null) {
        merchantMonthCountVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantMonthCount_argsStandardSchemeFactory implements SchemeFactory {
      public getMerchantMonthCount_argsStandardScheme getScheme() {
        return new getMerchantMonthCount_argsStandardScheme();
      }
    }

    private static class getMerchantMonthCount_argsStandardScheme extends StandardScheme<getMerchantMonthCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantMonthCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_MONTH_COUNT_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.merchantMonthCountVo = new com.froad.thrift.vo.MerchantMonthCountVo();
                struct.merchantMonthCountVo.read(iprot);
                struct.setMerchantMonthCountVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantMonthCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantMonthCountVo != null) {
          oprot.writeFieldBegin(MERCHANT_MONTH_COUNT_VO_FIELD_DESC);
          struct.merchantMonthCountVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantMonthCount_argsTupleSchemeFactory implements SchemeFactory {
      public getMerchantMonthCount_argsTupleScheme getScheme() {
        return new getMerchantMonthCount_argsTupleScheme();
      }
    }

    private static class getMerchantMonthCount_argsTupleScheme extends TupleScheme<getMerchantMonthCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantMonthCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantMonthCountVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMerchantMonthCountVo()) {
          struct.merchantMonthCountVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantMonthCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.merchantMonthCountVo = new com.froad.thrift.vo.MerchantMonthCountVo();
          struct.merchantMonthCountVo.read(iprot);
          struct.setMerchantMonthCountVoIsSet(true);
        }
      }
    }

  }

  public static class getMerchantMonthCount_result implements org.apache.thrift.TBase<getMerchantMonthCount_result, getMerchantMonthCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMerchantMonthCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMerchantMonthCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMerchantMonthCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMerchantMonthCount_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.MerchantMonthCountVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.MerchantMonthCountVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMerchantMonthCount_result.class, metaDataMap);
    }

    public getMerchantMonthCount_result() {
    }

    public getMerchantMonthCount_result(
      com.froad.thrift.vo.MerchantMonthCountVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMerchantMonthCount_result(getMerchantMonthCount_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.MerchantMonthCountVo(other.success);
      }
    }

    public getMerchantMonthCount_result deepCopy() {
      return new getMerchantMonthCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.MerchantMonthCountVo getSuccess() {
      return this.success;
    }

    public getMerchantMonthCount_result setSuccess(com.froad.thrift.vo.MerchantMonthCountVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.MerchantMonthCountVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMerchantMonthCount_result)
        return this.equals((getMerchantMonthCount_result)that);
      return false;
    }

    public boolean equals(getMerchantMonthCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMerchantMonthCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMerchantMonthCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMerchantMonthCount_resultStandardSchemeFactory implements SchemeFactory {
      public getMerchantMonthCount_resultStandardScheme getScheme() {
        return new getMerchantMonthCount_resultStandardScheme();
      }
    }

    private static class getMerchantMonthCount_resultStandardScheme extends StandardScheme<getMerchantMonthCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMerchantMonthCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.MerchantMonthCountVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMerchantMonthCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMerchantMonthCount_resultTupleSchemeFactory implements SchemeFactory {
      public getMerchantMonthCount_resultTupleScheme getScheme() {
        return new getMerchantMonthCount_resultTupleScheme();
      }
    }

    private static class getMerchantMonthCount_resultTupleScheme extends TupleScheme<getMerchantMonthCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMerchantMonthCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMerchantMonthCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.MerchantMonthCountVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
