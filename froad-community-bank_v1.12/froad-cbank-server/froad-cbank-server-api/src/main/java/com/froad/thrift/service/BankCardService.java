/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.froad.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
public class BankCardService {

  public interface Iface extends com.froad.thrift.monitor.service.BizMonitorService.Iface {

    /**
     * 查询指定用户下指定客户端下已签约的银行卡
     * 
     * @param clientId
     * @param memberCode
     */
    public com.froad.thrift.vo.bankcard.BankCardResponse selectSignedBankCardByClientId(String clientId, long memberCode) throws org.apache.thrift.TException;

    /**
     * 签约指定客户端快捷银行卡
     * 
     * @param clientId
     * @param memberCode
     * @param cardNo
     * @param uname
     * @param idcard
     * @param phone
     * @param singlePenLimit
     * @param dayLimit
     * @param monthLimit
     * @param mobileToken
     * @param pointCardNo
     */
    public com.froad.thrift.vo.ResultVo signBankCardByClientId(String clientId, long memberCode, String cardNo, String uname, String idcard, String phone, String singlePenLimit, String dayLimit, String monthLimit, String mobileToken, String pointCardNo) throws org.apache.thrift.TException;

    /**
     * 设置默认的签约快捷银行卡
     * 
     * @param memberCode
     * @param cardId
     */
    public com.froad.thrift.vo.ResultVo setDefaultSignerBankCard(long memberCode, long cardId) throws org.apache.thrift.TException;

    /**
     * 使用银行提供的签约短信验证码接口（需银行支持）
     * 
     * @param clientId
     * @param phone
     * @param cardNo
     */
    public com.froad.thrift.vo.ResultVo sendSignBankCardMobileToken(String clientId, String phone, String cardNo) throws org.apache.thrift.TException;

    /**
     * 解约已绑定的银行卡
     * 
     * @param clientId
     * @param memberCode
     * @param cardNo
     */
    public com.froad.thrift.vo.ResultVo cancelSignedBankCard(String clientId, long memberCode, String cardNo) throws org.apache.thrift.TException;

    /**
     * 设置已签约的银行卡限额
     * 
     * @param clientId
     * @param cardNo
     * @param singlePenLimit
     * @param dailyLimit
     * @param monthlyLimit
     */
    public com.froad.thrift.vo.ResultVo updateSignBankCardLimitCash(String clientId, String cardNo, String singlePenLimit, String dailyLimit, String monthlyLimit) throws org.apache.thrift.TException;

    /**
     * 设置商户银行卡白名单
     * 
     * @param merchantId
     * @param merchantName
     * @param accountNo
     * @param mac
     * @param optionType
     * @param clientId
     * @param accountName
     */
    public com.froad.thrift.vo.ResultVo setMerchantBankWhiteList(String merchantId, String merchantName, String accountNo, String mac, String optionType, String clientId, String accountName) throws org.apache.thrift.TException;

    /**
     * 同步银行标签
     * 
     * @param bankLabelID
     * @param bankLabelName
     * @param state
     * @param clientId
     */
    public com.froad.thrift.vo.ResultVo synchBankLabel(String bankLabelID, String bankLabelName, int state, String clientId) throws org.apache.thrift.TException;

    /**
     * 查询同步银行标签的审核结果
     * 
     * @param clientId
     * @param accountName
     * @param accountNo
     */
    public com.froad.thrift.vo.ResultVo auditStatusQuery(String clientId, String accountName, String accountNo) throws org.apache.thrift.TException;

    /**
     * 查询同步银行标签的审核结果
     * 
     * @param clientId
     * @param accountName
     * @param accountNo
     * @param certificateType
     * @param certificateNo
     */
    public com.froad.thrift.vo.ResultVo bankCardAccountCheck(String clientId, String accountName, String accountNo, String certificateType, String certificateNo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.froad.thrift.monitor.service.BizMonitorService .AsyncIface {

    public void selectSignedBankCardByClientId(String clientId, long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void signBankCardByClientId(String clientId, long memberCode, String cardNo, String uname, String idcard, String phone, String singlePenLimit, String dayLimit, String monthLimit, String mobileToken, String pointCardNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setDefaultSignerBankCard(long memberCode, long cardId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendSignBankCardMobileToken(String clientId, String phone, String cardNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelSignedBankCard(String clientId, long memberCode, String cardNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateSignBankCardLimitCash(String clientId, String cardNo, String singlePenLimit, String dailyLimit, String monthlyLimit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setMerchantBankWhiteList(String merchantId, String merchantName, String accountNo, String mac, String optionType, String clientId, String accountName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void synchBankLabel(String bankLabelID, String bankLabelName, int state, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void auditStatusQuery(String clientId, String accountName, String accountNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bankCardAccountCheck(String clientId, String accountName, String accountNo, String certificateType, String certificateNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.froad.thrift.monitor.service.BizMonitorService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.froad.thrift.vo.bankcard.BankCardResponse selectSignedBankCardByClientId(String clientId, long memberCode) throws org.apache.thrift.TException
    {
      send_selectSignedBankCardByClientId(clientId, memberCode);
      return recv_selectSignedBankCardByClientId();
    }

    public void send_selectSignedBankCardByClientId(String clientId, long memberCode) throws org.apache.thrift.TException
    {
      selectSignedBankCardByClientId_args args = new selectSignedBankCardByClientId_args();
      args.setClientId(clientId);
      args.setMemberCode(memberCode);
      sendBase("selectSignedBankCardByClientId", args);
    }

    public com.froad.thrift.vo.bankcard.BankCardResponse recv_selectSignedBankCardByClientId() throws org.apache.thrift.TException
    {
      selectSignedBankCardByClientId_result result = new selectSignedBankCardByClientId_result();
      receiveBase(result, "selectSignedBankCardByClientId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectSignedBankCardByClientId failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo signBankCardByClientId(String clientId, long memberCode, String cardNo, String uname, String idcard, String phone, String singlePenLimit, String dayLimit, String monthLimit, String mobileToken, String pointCardNo) throws org.apache.thrift.TException
    {
      send_signBankCardByClientId(clientId, memberCode, cardNo, uname, idcard, phone, singlePenLimit, dayLimit, monthLimit, mobileToken, pointCardNo);
      return recv_signBankCardByClientId();
    }

    public void send_signBankCardByClientId(String clientId, long memberCode, String cardNo, String uname, String idcard, String phone, String singlePenLimit, String dayLimit, String monthLimit, String mobileToken, String pointCardNo) throws org.apache.thrift.TException
    {
      signBankCardByClientId_args args = new signBankCardByClientId_args();
      args.setClientId(clientId);
      args.setMemberCode(memberCode);
      args.setCardNo(cardNo);
      args.setUname(uname);
      args.setIdcard(idcard);
      args.setPhone(phone);
      args.setSinglePenLimit(singlePenLimit);
      args.setDayLimit(dayLimit);
      args.setMonthLimit(monthLimit);
      args.setMobileToken(mobileToken);
      args.setPointCardNo(pointCardNo);
      sendBase("signBankCardByClientId", args);
    }

    public com.froad.thrift.vo.ResultVo recv_signBankCardByClientId() throws org.apache.thrift.TException
    {
      signBankCardByClientId_result result = new signBankCardByClientId_result();
      receiveBase(result, "signBankCardByClientId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "signBankCardByClientId failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo setDefaultSignerBankCard(long memberCode, long cardId) throws org.apache.thrift.TException
    {
      send_setDefaultSignerBankCard(memberCode, cardId);
      return recv_setDefaultSignerBankCard();
    }

    public void send_setDefaultSignerBankCard(long memberCode, long cardId) throws org.apache.thrift.TException
    {
      setDefaultSignerBankCard_args args = new setDefaultSignerBankCard_args();
      args.setMemberCode(memberCode);
      args.setCardId(cardId);
      sendBase("setDefaultSignerBankCard", args);
    }

    public com.froad.thrift.vo.ResultVo recv_setDefaultSignerBankCard() throws org.apache.thrift.TException
    {
      setDefaultSignerBankCard_result result = new setDefaultSignerBankCard_result();
      receiveBase(result, "setDefaultSignerBankCard");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setDefaultSignerBankCard failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo sendSignBankCardMobileToken(String clientId, String phone, String cardNo) throws org.apache.thrift.TException
    {
      send_sendSignBankCardMobileToken(clientId, phone, cardNo);
      return recv_sendSignBankCardMobileToken();
    }

    public void send_sendSignBankCardMobileToken(String clientId, String phone, String cardNo) throws org.apache.thrift.TException
    {
      sendSignBankCardMobileToken_args args = new sendSignBankCardMobileToken_args();
      args.setClientId(clientId);
      args.setPhone(phone);
      args.setCardNo(cardNo);
      sendBase("sendSignBankCardMobileToken", args);
    }

    public com.froad.thrift.vo.ResultVo recv_sendSignBankCardMobileToken() throws org.apache.thrift.TException
    {
      sendSignBankCardMobileToken_result result = new sendSignBankCardMobileToken_result();
      receiveBase(result, "sendSignBankCardMobileToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendSignBankCardMobileToken failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo cancelSignedBankCard(String clientId, long memberCode, String cardNo) throws org.apache.thrift.TException
    {
      send_cancelSignedBankCard(clientId, memberCode, cardNo);
      return recv_cancelSignedBankCard();
    }

    public void send_cancelSignedBankCard(String clientId, long memberCode, String cardNo) throws org.apache.thrift.TException
    {
      cancelSignedBankCard_args args = new cancelSignedBankCard_args();
      args.setClientId(clientId);
      args.setMemberCode(memberCode);
      args.setCardNo(cardNo);
      sendBase("cancelSignedBankCard", args);
    }

    public com.froad.thrift.vo.ResultVo recv_cancelSignedBankCard() throws org.apache.thrift.TException
    {
      cancelSignedBankCard_result result = new cancelSignedBankCard_result();
      receiveBase(result, "cancelSignedBankCard");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelSignedBankCard failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo updateSignBankCardLimitCash(String clientId, String cardNo, String singlePenLimit, String dailyLimit, String monthlyLimit) throws org.apache.thrift.TException
    {
      send_updateSignBankCardLimitCash(clientId, cardNo, singlePenLimit, dailyLimit, monthlyLimit);
      return recv_updateSignBankCardLimitCash();
    }

    public void send_updateSignBankCardLimitCash(String clientId, String cardNo, String singlePenLimit, String dailyLimit, String monthlyLimit) throws org.apache.thrift.TException
    {
      updateSignBankCardLimitCash_args args = new updateSignBankCardLimitCash_args();
      args.setClientId(clientId);
      args.setCardNo(cardNo);
      args.setSinglePenLimit(singlePenLimit);
      args.setDailyLimit(dailyLimit);
      args.setMonthlyLimit(monthlyLimit);
      sendBase("updateSignBankCardLimitCash", args);
    }

    public com.froad.thrift.vo.ResultVo recv_updateSignBankCardLimitCash() throws org.apache.thrift.TException
    {
      updateSignBankCardLimitCash_result result = new updateSignBankCardLimitCash_result();
      receiveBase(result, "updateSignBankCardLimitCash");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSignBankCardLimitCash failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo setMerchantBankWhiteList(String merchantId, String merchantName, String accountNo, String mac, String optionType, String clientId, String accountName) throws org.apache.thrift.TException
    {
      send_setMerchantBankWhiteList(merchantId, merchantName, accountNo, mac, optionType, clientId, accountName);
      return recv_setMerchantBankWhiteList();
    }

    public void send_setMerchantBankWhiteList(String merchantId, String merchantName, String accountNo, String mac, String optionType, String clientId, String accountName) throws org.apache.thrift.TException
    {
      setMerchantBankWhiteList_args args = new setMerchantBankWhiteList_args();
      args.setMerchantId(merchantId);
      args.setMerchantName(merchantName);
      args.setAccountNo(accountNo);
      args.setMac(mac);
      args.setOptionType(optionType);
      args.setClientId(clientId);
      args.setAccountName(accountName);
      sendBase("setMerchantBankWhiteList", args);
    }

    public com.froad.thrift.vo.ResultVo recv_setMerchantBankWhiteList() throws org.apache.thrift.TException
    {
      setMerchantBankWhiteList_result result = new setMerchantBankWhiteList_result();
      receiveBase(result, "setMerchantBankWhiteList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setMerchantBankWhiteList failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo synchBankLabel(String bankLabelID, String bankLabelName, int state, String clientId) throws org.apache.thrift.TException
    {
      send_synchBankLabel(bankLabelID, bankLabelName, state, clientId);
      return recv_synchBankLabel();
    }

    public void send_synchBankLabel(String bankLabelID, String bankLabelName, int state, String clientId) throws org.apache.thrift.TException
    {
      synchBankLabel_args args = new synchBankLabel_args();
      args.setBankLabelID(bankLabelID);
      args.setBankLabelName(bankLabelName);
      args.setState(state);
      args.setClientId(clientId);
      sendBase("synchBankLabel", args);
    }

    public com.froad.thrift.vo.ResultVo recv_synchBankLabel() throws org.apache.thrift.TException
    {
      synchBankLabel_result result = new synchBankLabel_result();
      receiveBase(result, "synchBankLabel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "synchBankLabel failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo auditStatusQuery(String clientId, String accountName, String accountNo) throws org.apache.thrift.TException
    {
      send_auditStatusQuery(clientId, accountName, accountNo);
      return recv_auditStatusQuery();
    }

    public void send_auditStatusQuery(String clientId, String accountName, String accountNo) throws org.apache.thrift.TException
    {
      auditStatusQuery_args args = new auditStatusQuery_args();
      args.setClientId(clientId);
      args.setAccountName(accountName);
      args.setAccountNo(accountNo);
      sendBase("auditStatusQuery", args);
    }

    public com.froad.thrift.vo.ResultVo recv_auditStatusQuery() throws org.apache.thrift.TException
    {
      auditStatusQuery_result result = new auditStatusQuery_result();
      receiveBase(result, "auditStatusQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "auditStatusQuery failed: unknown result");
    }

    public com.froad.thrift.vo.ResultVo bankCardAccountCheck(String clientId, String accountName, String accountNo, String certificateType, String certificateNo) throws org.apache.thrift.TException
    {
      send_bankCardAccountCheck(clientId, accountName, accountNo, certificateType, certificateNo);
      return recv_bankCardAccountCheck();
    }

    public void send_bankCardAccountCheck(String clientId, String accountName, String accountNo, String certificateType, String certificateNo) throws org.apache.thrift.TException
    {
      bankCardAccountCheck_args args = new bankCardAccountCheck_args();
      args.setClientId(clientId);
      args.setAccountName(accountName);
      args.setAccountNo(accountNo);
      args.setCertificateType(certificateType);
      args.setCertificateNo(certificateNo);
      sendBase("bankCardAccountCheck", args);
    }

    public com.froad.thrift.vo.ResultVo recv_bankCardAccountCheck() throws org.apache.thrift.TException
    {
      bankCardAccountCheck_result result = new bankCardAccountCheck_result();
      receiveBase(result, "bankCardAccountCheck");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bankCardAccountCheck failed: unknown result");
    }

  }
  public static class AsyncClient extends com.froad.thrift.monitor.service.BizMonitorService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void selectSignedBankCardByClientId(String clientId, long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectSignedBankCardByClientId_call method_call = new selectSignedBankCardByClientId_call(clientId, memberCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectSignedBankCardByClientId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private long memberCode;
      public selectSignedBankCardByClientId_call(String clientId, long memberCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.memberCode = memberCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectSignedBankCardByClientId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectSignedBankCardByClientId_args args = new selectSignedBankCardByClientId_args();
        args.setClientId(clientId);
        args.setMemberCode(memberCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.bankcard.BankCardResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectSignedBankCardByClientId();
      }
    }

    public void signBankCardByClientId(String clientId, long memberCode, String cardNo, String uname, String idcard, String phone, String singlePenLimit, String dayLimit, String monthLimit, String mobileToken, String pointCardNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      signBankCardByClientId_call method_call = new signBankCardByClientId_call(clientId, memberCode, cardNo, uname, idcard, phone, singlePenLimit, dayLimit, monthLimit, mobileToken, pointCardNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class signBankCardByClientId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private long memberCode;
      private String cardNo;
      private String uname;
      private String idcard;
      private String phone;
      private String singlePenLimit;
      private String dayLimit;
      private String monthLimit;
      private String mobileToken;
      private String pointCardNo;
      public signBankCardByClientId_call(String clientId, long memberCode, String cardNo, String uname, String idcard, String phone, String singlePenLimit, String dayLimit, String monthLimit, String mobileToken, String pointCardNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.memberCode = memberCode;
        this.cardNo = cardNo;
        this.uname = uname;
        this.idcard = idcard;
        this.phone = phone;
        this.singlePenLimit = singlePenLimit;
        this.dayLimit = dayLimit;
        this.monthLimit = monthLimit;
        this.mobileToken = mobileToken;
        this.pointCardNo = pointCardNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("signBankCardByClientId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        signBankCardByClientId_args args = new signBankCardByClientId_args();
        args.setClientId(clientId);
        args.setMemberCode(memberCode);
        args.setCardNo(cardNo);
        args.setUname(uname);
        args.setIdcard(idcard);
        args.setPhone(phone);
        args.setSinglePenLimit(singlePenLimit);
        args.setDayLimit(dayLimit);
        args.setMonthLimit(monthLimit);
        args.setMobileToken(mobileToken);
        args.setPointCardNo(pointCardNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_signBankCardByClientId();
      }
    }

    public void setDefaultSignerBankCard(long memberCode, long cardId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setDefaultSignerBankCard_call method_call = new setDefaultSignerBankCard_call(memberCode, cardId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setDefaultSignerBankCard_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long memberCode;
      private long cardId;
      public setDefaultSignerBankCard_call(long memberCode, long cardId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.memberCode = memberCode;
        this.cardId = cardId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setDefaultSignerBankCard", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setDefaultSignerBankCard_args args = new setDefaultSignerBankCard_args();
        args.setMemberCode(memberCode);
        args.setCardId(cardId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setDefaultSignerBankCard();
      }
    }

    public void sendSignBankCardMobileToken(String clientId, String phone, String cardNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendSignBankCardMobileToken_call method_call = new sendSignBankCardMobileToken_call(clientId, phone, cardNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendSignBankCardMobileToken_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String phone;
      private String cardNo;
      public sendSignBankCardMobileToken_call(String clientId, String phone, String cardNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.phone = phone;
        this.cardNo = cardNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendSignBankCardMobileToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendSignBankCardMobileToken_args args = new sendSignBankCardMobileToken_args();
        args.setClientId(clientId);
        args.setPhone(phone);
        args.setCardNo(cardNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendSignBankCardMobileToken();
      }
    }

    public void cancelSignedBankCard(String clientId, long memberCode, String cardNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelSignedBankCard_call method_call = new cancelSignedBankCard_call(clientId, memberCode, cardNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelSignedBankCard_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private long memberCode;
      private String cardNo;
      public cancelSignedBankCard_call(String clientId, long memberCode, String cardNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.memberCode = memberCode;
        this.cardNo = cardNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelSignedBankCard", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelSignedBankCard_args args = new cancelSignedBankCard_args();
        args.setClientId(clientId);
        args.setMemberCode(memberCode);
        args.setCardNo(cardNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelSignedBankCard();
      }
    }

    public void updateSignBankCardLimitCash(String clientId, String cardNo, String singlePenLimit, String dailyLimit, String monthlyLimit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSignBankCardLimitCash_call method_call = new updateSignBankCardLimitCash_call(clientId, cardNo, singlePenLimit, dailyLimit, monthlyLimit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSignBankCardLimitCash_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String cardNo;
      private String singlePenLimit;
      private String dailyLimit;
      private String monthlyLimit;
      public updateSignBankCardLimitCash_call(String clientId, String cardNo, String singlePenLimit, String dailyLimit, String monthlyLimit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.cardNo = cardNo;
        this.singlePenLimit = singlePenLimit;
        this.dailyLimit = dailyLimit;
        this.monthlyLimit = monthlyLimit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSignBankCardLimitCash", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSignBankCardLimitCash_args args = new updateSignBankCardLimitCash_args();
        args.setClientId(clientId);
        args.setCardNo(cardNo);
        args.setSinglePenLimit(singlePenLimit);
        args.setDailyLimit(dailyLimit);
        args.setMonthlyLimit(monthlyLimit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSignBankCardLimitCash();
      }
    }

    public void setMerchantBankWhiteList(String merchantId, String merchantName, String accountNo, String mac, String optionType, String clientId, String accountName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setMerchantBankWhiteList_call method_call = new setMerchantBankWhiteList_call(merchantId, merchantName, accountNo, mac, optionType, clientId, accountName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setMerchantBankWhiteList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String merchantId;
      private String merchantName;
      private String accountNo;
      private String mac;
      private String optionType;
      private String clientId;
      private String accountName;
      public setMerchantBankWhiteList_call(String merchantId, String merchantName, String accountNo, String mac, String optionType, String clientId, String accountName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.merchantId = merchantId;
        this.merchantName = merchantName;
        this.accountNo = accountNo;
        this.mac = mac;
        this.optionType = optionType;
        this.clientId = clientId;
        this.accountName = accountName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setMerchantBankWhiteList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setMerchantBankWhiteList_args args = new setMerchantBankWhiteList_args();
        args.setMerchantId(merchantId);
        args.setMerchantName(merchantName);
        args.setAccountNo(accountNo);
        args.setMac(mac);
        args.setOptionType(optionType);
        args.setClientId(clientId);
        args.setAccountName(accountName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setMerchantBankWhiteList();
      }
    }

    public void synchBankLabel(String bankLabelID, String bankLabelName, int state, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      synchBankLabel_call method_call = new synchBankLabel_call(bankLabelID, bankLabelName, state, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class synchBankLabel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bankLabelID;
      private String bankLabelName;
      private int state;
      private String clientId;
      public synchBankLabel_call(String bankLabelID, String bankLabelName, int state, String clientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bankLabelID = bankLabelID;
        this.bankLabelName = bankLabelName;
        this.state = state;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("synchBankLabel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        synchBankLabel_args args = new synchBankLabel_args();
        args.setBankLabelID(bankLabelID);
        args.setBankLabelName(bankLabelName);
        args.setState(state);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_synchBankLabel();
      }
    }

    public void auditStatusQuery(String clientId, String accountName, String accountNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      auditStatusQuery_call method_call = new auditStatusQuery_call(clientId, accountName, accountNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class auditStatusQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String accountName;
      private String accountNo;
      public auditStatusQuery_call(String clientId, String accountName, String accountNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.accountName = accountName;
        this.accountNo = accountNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("auditStatusQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        auditStatusQuery_args args = new auditStatusQuery_args();
        args.setClientId(clientId);
        args.setAccountName(accountName);
        args.setAccountNo(accountNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_auditStatusQuery();
      }
    }

    public void bankCardAccountCheck(String clientId, String accountName, String accountNo, String certificateType, String certificateNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bankCardAccountCheck_call method_call = new bankCardAccountCheck_call(clientId, accountName, accountNo, certificateType, certificateNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bankCardAccountCheck_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientId;
      private String accountName;
      private String accountNo;
      private String certificateType;
      private String certificateNo;
      public bankCardAccountCheck_call(String clientId, String accountName, String accountNo, String certificateType, String certificateNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientId = clientId;
        this.accountName = accountName;
        this.accountNo = accountNo;
        this.certificateType = certificateType;
        this.certificateNo = certificateNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bankCardAccountCheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bankCardAccountCheck_args args = new bankCardAccountCheck_args();
        args.setClientId(clientId);
        args.setAccountName(accountName);
        args.setAccountNo(accountNo);
        args.setCertificateType(certificateType);
        args.setCertificateNo(certificateNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.froad.thrift.vo.ResultVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bankCardAccountCheck();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.froad.thrift.monitor.service.BizMonitorService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("selectSignedBankCardByClientId", new selectSignedBankCardByClientId());
      processMap.put("signBankCardByClientId", new signBankCardByClientId());
      processMap.put("setDefaultSignerBankCard", new setDefaultSignerBankCard());
      processMap.put("sendSignBankCardMobileToken", new sendSignBankCardMobileToken());
      processMap.put("cancelSignedBankCard", new cancelSignedBankCard());
      processMap.put("updateSignBankCardLimitCash", new updateSignBankCardLimitCash());
      processMap.put("setMerchantBankWhiteList", new setMerchantBankWhiteList());
      processMap.put("synchBankLabel", new synchBankLabel());
      processMap.put("auditStatusQuery", new auditStatusQuery());
      processMap.put("bankCardAccountCheck", new bankCardAccountCheck());
      return processMap;
    }

    public static class selectSignedBankCardByClientId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectSignedBankCardByClientId_args> {
      public selectSignedBankCardByClientId() {
        super("selectSignedBankCardByClientId");
      }

      public selectSignedBankCardByClientId_args getEmptyArgsInstance() {
        return new selectSignedBankCardByClientId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectSignedBankCardByClientId_result getResult(I iface, selectSignedBankCardByClientId_args args) throws org.apache.thrift.TException {
        selectSignedBankCardByClientId_result result = new selectSignedBankCardByClientId_result();
        result.success = iface.selectSignedBankCardByClientId(args.clientId, args.memberCode);
        return result;
      }
    }

    public static class signBankCardByClientId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, signBankCardByClientId_args> {
      public signBankCardByClientId() {
        super("signBankCardByClientId");
      }

      public signBankCardByClientId_args getEmptyArgsInstance() {
        return new signBankCardByClientId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public signBankCardByClientId_result getResult(I iface, signBankCardByClientId_args args) throws org.apache.thrift.TException {
        signBankCardByClientId_result result = new signBankCardByClientId_result();
        result.success = iface.signBankCardByClientId(args.clientId, args.memberCode, args.cardNo, args.uname, args.idcard, args.phone, args.singlePenLimit, args.dayLimit, args.monthLimit, args.mobileToken, args.pointCardNo);
        return result;
      }
    }

    public static class setDefaultSignerBankCard<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setDefaultSignerBankCard_args> {
      public setDefaultSignerBankCard() {
        super("setDefaultSignerBankCard");
      }

      public setDefaultSignerBankCard_args getEmptyArgsInstance() {
        return new setDefaultSignerBankCard_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setDefaultSignerBankCard_result getResult(I iface, setDefaultSignerBankCard_args args) throws org.apache.thrift.TException {
        setDefaultSignerBankCard_result result = new setDefaultSignerBankCard_result();
        result.success = iface.setDefaultSignerBankCard(args.memberCode, args.cardId);
        return result;
      }
    }

    public static class sendSignBankCardMobileToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendSignBankCardMobileToken_args> {
      public sendSignBankCardMobileToken() {
        super("sendSignBankCardMobileToken");
      }

      public sendSignBankCardMobileToken_args getEmptyArgsInstance() {
        return new sendSignBankCardMobileToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendSignBankCardMobileToken_result getResult(I iface, sendSignBankCardMobileToken_args args) throws org.apache.thrift.TException {
        sendSignBankCardMobileToken_result result = new sendSignBankCardMobileToken_result();
        result.success = iface.sendSignBankCardMobileToken(args.clientId, args.phone, args.cardNo);
        return result;
      }
    }

    public static class cancelSignedBankCard<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelSignedBankCard_args> {
      public cancelSignedBankCard() {
        super("cancelSignedBankCard");
      }

      public cancelSignedBankCard_args getEmptyArgsInstance() {
        return new cancelSignedBankCard_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelSignedBankCard_result getResult(I iface, cancelSignedBankCard_args args) throws org.apache.thrift.TException {
        cancelSignedBankCard_result result = new cancelSignedBankCard_result();
        result.success = iface.cancelSignedBankCard(args.clientId, args.memberCode, args.cardNo);
        return result;
      }
    }

    public static class updateSignBankCardLimitCash<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSignBankCardLimitCash_args> {
      public updateSignBankCardLimitCash() {
        super("updateSignBankCardLimitCash");
      }

      public updateSignBankCardLimitCash_args getEmptyArgsInstance() {
        return new updateSignBankCardLimitCash_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSignBankCardLimitCash_result getResult(I iface, updateSignBankCardLimitCash_args args) throws org.apache.thrift.TException {
        updateSignBankCardLimitCash_result result = new updateSignBankCardLimitCash_result();
        result.success = iface.updateSignBankCardLimitCash(args.clientId, args.cardNo, args.singlePenLimit, args.dailyLimit, args.monthlyLimit);
        return result;
      }
    }

    public static class setMerchantBankWhiteList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setMerchantBankWhiteList_args> {
      public setMerchantBankWhiteList() {
        super("setMerchantBankWhiteList");
      }

      public setMerchantBankWhiteList_args getEmptyArgsInstance() {
        return new setMerchantBankWhiteList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setMerchantBankWhiteList_result getResult(I iface, setMerchantBankWhiteList_args args) throws org.apache.thrift.TException {
        setMerchantBankWhiteList_result result = new setMerchantBankWhiteList_result();
        result.success = iface.setMerchantBankWhiteList(args.merchantId, args.merchantName, args.accountNo, args.mac, args.optionType, args.clientId, args.accountName);
        return result;
      }
    }

    public static class synchBankLabel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, synchBankLabel_args> {
      public synchBankLabel() {
        super("synchBankLabel");
      }

      public synchBankLabel_args getEmptyArgsInstance() {
        return new synchBankLabel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public synchBankLabel_result getResult(I iface, synchBankLabel_args args) throws org.apache.thrift.TException {
        synchBankLabel_result result = new synchBankLabel_result();
        result.success = iface.synchBankLabel(args.bankLabelID, args.bankLabelName, args.state, args.clientId);
        return result;
      }
    }

    public static class auditStatusQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, auditStatusQuery_args> {
      public auditStatusQuery() {
        super("auditStatusQuery");
      }

      public auditStatusQuery_args getEmptyArgsInstance() {
        return new auditStatusQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public auditStatusQuery_result getResult(I iface, auditStatusQuery_args args) throws org.apache.thrift.TException {
        auditStatusQuery_result result = new auditStatusQuery_result();
        result.success = iface.auditStatusQuery(args.clientId, args.accountName, args.accountNo);
        return result;
      }
    }

    public static class bankCardAccountCheck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bankCardAccountCheck_args> {
      public bankCardAccountCheck() {
        super("bankCardAccountCheck");
      }

      public bankCardAccountCheck_args getEmptyArgsInstance() {
        return new bankCardAccountCheck_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bankCardAccountCheck_result getResult(I iface, bankCardAccountCheck_args args) throws org.apache.thrift.TException {
        bankCardAccountCheck_result result = new bankCardAccountCheck_result();
        result.success = iface.bankCardAccountCheck(args.clientId, args.accountName, args.accountNo, args.certificateType, args.certificateNo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.froad.thrift.monitor.service.BizMonitorService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("selectSignedBankCardByClientId", new selectSignedBankCardByClientId());
      processMap.put("signBankCardByClientId", new signBankCardByClientId());
      processMap.put("setDefaultSignerBankCard", new setDefaultSignerBankCard());
      processMap.put("sendSignBankCardMobileToken", new sendSignBankCardMobileToken());
      processMap.put("cancelSignedBankCard", new cancelSignedBankCard());
      processMap.put("updateSignBankCardLimitCash", new updateSignBankCardLimitCash());
      processMap.put("setMerchantBankWhiteList", new setMerchantBankWhiteList());
      processMap.put("synchBankLabel", new synchBankLabel());
      processMap.put("auditStatusQuery", new auditStatusQuery());
      processMap.put("bankCardAccountCheck", new bankCardAccountCheck());
      return processMap;
    }

    public static class selectSignedBankCardByClientId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectSignedBankCardByClientId_args, com.froad.thrift.vo.bankcard.BankCardResponse> {
      public selectSignedBankCardByClientId() {
        super("selectSignedBankCardByClientId");
      }

      public selectSignedBankCardByClientId_args getEmptyArgsInstance() {
        return new selectSignedBankCardByClientId_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.bankcard.BankCardResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.bankcard.BankCardResponse>() { 
          public void onComplete(com.froad.thrift.vo.bankcard.BankCardResponse o) {
            selectSignedBankCardByClientId_result result = new selectSignedBankCardByClientId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            selectSignedBankCardByClientId_result result = new selectSignedBankCardByClientId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectSignedBankCardByClientId_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.bankcard.BankCardResponse> resultHandler) throws TException {
        iface.selectSignedBankCardByClientId(args.clientId, args.memberCode,resultHandler);
      }
    }

    public static class signBankCardByClientId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, signBankCardByClientId_args, com.froad.thrift.vo.ResultVo> {
      public signBankCardByClientId() {
        super("signBankCardByClientId");
      }

      public signBankCardByClientId_args getEmptyArgsInstance() {
        return new signBankCardByClientId_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            signBankCardByClientId_result result = new signBankCardByClientId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            signBankCardByClientId_result result = new signBankCardByClientId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, signBankCardByClientId_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.signBankCardByClientId(args.clientId, args.memberCode, args.cardNo, args.uname, args.idcard, args.phone, args.singlePenLimit, args.dayLimit, args.monthLimit, args.mobileToken, args.pointCardNo,resultHandler);
      }
    }

    public static class setDefaultSignerBankCard<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setDefaultSignerBankCard_args, com.froad.thrift.vo.ResultVo> {
      public setDefaultSignerBankCard() {
        super("setDefaultSignerBankCard");
      }

      public setDefaultSignerBankCard_args getEmptyArgsInstance() {
        return new setDefaultSignerBankCard_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            setDefaultSignerBankCard_result result = new setDefaultSignerBankCard_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setDefaultSignerBankCard_result result = new setDefaultSignerBankCard_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setDefaultSignerBankCard_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.setDefaultSignerBankCard(args.memberCode, args.cardId,resultHandler);
      }
    }

    public static class sendSignBankCardMobileToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendSignBankCardMobileToken_args, com.froad.thrift.vo.ResultVo> {
      public sendSignBankCardMobileToken() {
        super("sendSignBankCardMobileToken");
      }

      public sendSignBankCardMobileToken_args getEmptyArgsInstance() {
        return new sendSignBankCardMobileToken_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            sendSignBankCardMobileToken_result result = new sendSignBankCardMobileToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendSignBankCardMobileToken_result result = new sendSignBankCardMobileToken_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendSignBankCardMobileToken_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.sendSignBankCardMobileToken(args.clientId, args.phone, args.cardNo,resultHandler);
      }
    }

    public static class cancelSignedBankCard<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelSignedBankCard_args, com.froad.thrift.vo.ResultVo> {
      public cancelSignedBankCard() {
        super("cancelSignedBankCard");
      }

      public cancelSignedBankCard_args getEmptyArgsInstance() {
        return new cancelSignedBankCard_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            cancelSignedBankCard_result result = new cancelSignedBankCard_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelSignedBankCard_result result = new cancelSignedBankCard_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelSignedBankCard_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.cancelSignedBankCard(args.clientId, args.memberCode, args.cardNo,resultHandler);
      }
    }

    public static class updateSignBankCardLimitCash<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSignBankCardLimitCash_args, com.froad.thrift.vo.ResultVo> {
      public updateSignBankCardLimitCash() {
        super("updateSignBankCardLimitCash");
      }

      public updateSignBankCardLimitCash_args getEmptyArgsInstance() {
        return new updateSignBankCardLimitCash_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            updateSignBankCardLimitCash_result result = new updateSignBankCardLimitCash_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateSignBankCardLimitCash_result result = new updateSignBankCardLimitCash_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSignBankCardLimitCash_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.updateSignBankCardLimitCash(args.clientId, args.cardNo, args.singlePenLimit, args.dailyLimit, args.monthlyLimit,resultHandler);
      }
    }

    public static class setMerchantBankWhiteList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setMerchantBankWhiteList_args, com.froad.thrift.vo.ResultVo> {
      public setMerchantBankWhiteList() {
        super("setMerchantBankWhiteList");
      }

      public setMerchantBankWhiteList_args getEmptyArgsInstance() {
        return new setMerchantBankWhiteList_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            setMerchantBankWhiteList_result result = new setMerchantBankWhiteList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setMerchantBankWhiteList_result result = new setMerchantBankWhiteList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setMerchantBankWhiteList_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.setMerchantBankWhiteList(args.merchantId, args.merchantName, args.accountNo, args.mac, args.optionType, args.clientId, args.accountName,resultHandler);
      }
    }

    public static class synchBankLabel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, synchBankLabel_args, com.froad.thrift.vo.ResultVo> {
      public synchBankLabel() {
        super("synchBankLabel");
      }

      public synchBankLabel_args getEmptyArgsInstance() {
        return new synchBankLabel_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            synchBankLabel_result result = new synchBankLabel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            synchBankLabel_result result = new synchBankLabel_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, synchBankLabel_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.synchBankLabel(args.bankLabelID, args.bankLabelName, args.state, args.clientId,resultHandler);
      }
    }

    public static class auditStatusQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, auditStatusQuery_args, com.froad.thrift.vo.ResultVo> {
      public auditStatusQuery() {
        super("auditStatusQuery");
      }

      public auditStatusQuery_args getEmptyArgsInstance() {
        return new auditStatusQuery_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            auditStatusQuery_result result = new auditStatusQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            auditStatusQuery_result result = new auditStatusQuery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, auditStatusQuery_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.auditStatusQuery(args.clientId, args.accountName, args.accountNo,resultHandler);
      }
    }

    public static class bankCardAccountCheck<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bankCardAccountCheck_args, com.froad.thrift.vo.ResultVo> {
      public bankCardAccountCheck() {
        super("bankCardAccountCheck");
      }

      public bankCardAccountCheck_args getEmptyArgsInstance() {
        return new bankCardAccountCheck_args();
      }

      public AsyncMethodCallback<com.froad.thrift.vo.ResultVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.froad.thrift.vo.ResultVo>() { 
          public void onComplete(com.froad.thrift.vo.ResultVo o) {
            bankCardAccountCheck_result result = new bankCardAccountCheck_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bankCardAccountCheck_result result = new bankCardAccountCheck_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bankCardAccountCheck_args args, org.apache.thrift.async.AsyncMethodCallback<com.froad.thrift.vo.ResultVo> resultHandler) throws TException {
        iface.bankCardAccountCheck(args.clientId, args.accountName, args.accountNo, args.certificateType, args.certificateNo,resultHandler);
      }
    }

  }

  public static class selectSignedBankCardByClientId_args implements org.apache.thrift.TBase<selectSignedBankCardByClientId_args, selectSignedBankCardByClientId_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectSignedBankCardByClientId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectSignedBankCardByClientId_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectSignedBankCardByClientId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectSignedBankCardByClientId_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public long memberCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      MEMBER_CODE((short)2, "memberCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // MEMBER_CODE
            return MEMBER_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectSignedBankCardByClientId_args.class, metaDataMap);
    }

    public selectSignedBankCardByClientId_args() {
    }

    public selectSignedBankCardByClientId_args(
      String clientId,
      long memberCode)
    {
      this();
      this.clientId = clientId;
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectSignedBankCardByClientId_args(selectSignedBankCardByClientId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.memberCode = other.memberCode;
    }

    public selectSignedBankCardByClientId_args deepCopy() {
      return new selectSignedBankCardByClientId_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setMemberCodeIsSet(false);
      this.memberCode = 0;
    }

    public String getClientId() {
      return this.clientId;
    }

    public selectSignedBankCardByClientId_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public selectSignedBankCardByClientId_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case MEMBER_CODE:
        return isSetMemberCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectSignedBankCardByClientId_args)
        return this.equals((selectSignedBankCardByClientId_args)that);
      return false;
    }

    public boolean equals(selectSignedBankCardByClientId_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectSignedBankCardByClientId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectSignedBankCardByClientId_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectSignedBankCardByClientId_argsStandardSchemeFactory implements SchemeFactory {
      public selectSignedBankCardByClientId_argsStandardScheme getScheme() {
        return new selectSignedBankCardByClientId_argsStandardScheme();
      }
    }

    private static class selectSignedBankCardByClientId_argsStandardScheme extends StandardScheme<selectSignedBankCardByClientId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectSignedBankCardByClientId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectSignedBankCardByClientId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectSignedBankCardByClientId_argsTupleSchemeFactory implements SchemeFactory {
      public selectSignedBankCardByClientId_argsTupleScheme getScheme() {
        return new selectSignedBankCardByClientId_argsTupleScheme();
      }
    }

    private static class selectSignedBankCardByClientId_argsTupleScheme extends TupleScheme<selectSignedBankCardByClientId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectSignedBankCardByClientId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetMemberCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectSignedBankCardByClientId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
      }
    }

  }

  public static class selectSignedBankCardByClientId_result implements org.apache.thrift.TBase<selectSignedBankCardByClientId_result, selectSignedBankCardByClientId_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectSignedBankCardByClientId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectSignedBankCardByClientId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectSignedBankCardByClientId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectSignedBankCardByClientId_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.bankcard.BankCardResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.bankcard.BankCardResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectSignedBankCardByClientId_result.class, metaDataMap);
    }

    public selectSignedBankCardByClientId_result() {
    }

    public selectSignedBankCardByClientId_result(
      com.froad.thrift.vo.bankcard.BankCardResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectSignedBankCardByClientId_result(selectSignedBankCardByClientId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.bankcard.BankCardResponse(other.success);
      }
    }

    public selectSignedBankCardByClientId_result deepCopy() {
      return new selectSignedBankCardByClientId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.bankcard.BankCardResponse getSuccess() {
      return this.success;
    }

    public selectSignedBankCardByClientId_result setSuccess(com.froad.thrift.vo.bankcard.BankCardResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.bankcard.BankCardResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectSignedBankCardByClientId_result)
        return this.equals((selectSignedBankCardByClientId_result)that);
      return false;
    }

    public boolean equals(selectSignedBankCardByClientId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(selectSignedBankCardByClientId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectSignedBankCardByClientId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectSignedBankCardByClientId_resultStandardSchemeFactory implements SchemeFactory {
      public selectSignedBankCardByClientId_resultStandardScheme getScheme() {
        return new selectSignedBankCardByClientId_resultStandardScheme();
      }
    }

    private static class selectSignedBankCardByClientId_resultStandardScheme extends StandardScheme<selectSignedBankCardByClientId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectSignedBankCardByClientId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.bankcard.BankCardResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectSignedBankCardByClientId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectSignedBankCardByClientId_resultTupleSchemeFactory implements SchemeFactory {
      public selectSignedBankCardByClientId_resultTupleScheme getScheme() {
        return new selectSignedBankCardByClientId_resultTupleScheme();
      }
    }

    private static class selectSignedBankCardByClientId_resultTupleScheme extends TupleScheme<selectSignedBankCardByClientId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectSignedBankCardByClientId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectSignedBankCardByClientId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.bankcard.BankCardResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class signBankCardByClientId_args implements org.apache.thrift.TBase<signBankCardByClientId_args, signBankCardByClientId_args._Fields>, java.io.Serializable, Cloneable, Comparable<signBankCardByClientId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signBankCardByClientId_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardNo", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField UNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("uname", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField IDCARD_FIELD_DESC = new org.apache.thrift.protocol.TField("idcard", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SINGLE_PEN_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("singlePenLimit", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField DAY_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("dayLimit", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField MONTH_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLimit", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField MOBILE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileToken", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField POINT_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("pointCardNo", org.apache.thrift.protocol.TType.STRING, (short)11);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signBankCardByClientId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signBankCardByClientId_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public long memberCode; // required
    public String cardNo; // required
    public String uname; // required
    public String idcard; // required
    public String phone; // required
    public String singlePenLimit; // required
    public String dayLimit; // required
    public String monthLimit; // required
    public String mobileToken; // required
    public String pointCardNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      MEMBER_CODE((short)2, "memberCode"),
      CARD_NO((short)3, "cardNo"),
      UNAME((short)4, "uname"),
      IDCARD((short)5, "idcard"),
      PHONE((short)6, "phone"),
      SINGLE_PEN_LIMIT((short)7, "singlePenLimit"),
      DAY_LIMIT((short)8, "dayLimit"),
      MONTH_LIMIT((short)9, "monthLimit"),
      MOBILE_TOKEN((short)10, "mobileToken"),
      POINT_CARD_NO((short)11, "pointCardNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // MEMBER_CODE
            return MEMBER_CODE;
          case 3: // CARD_NO
            return CARD_NO;
          case 4: // UNAME
            return UNAME;
          case 5: // IDCARD
            return IDCARD;
          case 6: // PHONE
            return PHONE;
          case 7: // SINGLE_PEN_LIMIT
            return SINGLE_PEN_LIMIT;
          case 8: // DAY_LIMIT
            return DAY_LIMIT;
          case 9: // MONTH_LIMIT
            return MONTH_LIMIT;
          case 10: // MOBILE_TOKEN
            return MOBILE_TOKEN;
          case 11: // POINT_CARD_NO
            return POINT_CARD_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("cardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UNAME, new org.apache.thrift.meta_data.FieldMetaData("uname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IDCARD, new org.apache.thrift.meta_data.FieldMetaData("idcard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SINGLE_PEN_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("singlePenLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DAY_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("dayLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MONTH_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("monthLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("mobileToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POINT_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("pointCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signBankCardByClientId_args.class, metaDataMap);
    }

    public signBankCardByClientId_args() {
    }

    public signBankCardByClientId_args(
      String clientId,
      long memberCode,
      String cardNo,
      String uname,
      String idcard,
      String phone,
      String singlePenLimit,
      String dayLimit,
      String monthLimit,
      String mobileToken,
      String pointCardNo)
    {
      this();
      this.clientId = clientId;
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.cardNo = cardNo;
      this.uname = uname;
      this.idcard = idcard;
      this.phone = phone;
      this.singlePenLimit = singlePenLimit;
      this.dayLimit = dayLimit;
      this.monthLimit = monthLimit;
      this.mobileToken = mobileToken;
      this.pointCardNo = pointCardNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signBankCardByClientId_args(signBankCardByClientId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.memberCode = other.memberCode;
      if (other.isSetCardNo()) {
        this.cardNo = other.cardNo;
      }
      if (other.isSetUname()) {
        this.uname = other.uname;
      }
      if (other.isSetIdcard()) {
        this.idcard = other.idcard;
      }
      if (other.isSetPhone()) {
        this.phone = other.phone;
      }
      if (other.isSetSinglePenLimit()) {
        this.singlePenLimit = other.singlePenLimit;
      }
      if (other.isSetDayLimit()) {
        this.dayLimit = other.dayLimit;
      }
      if (other.isSetMonthLimit()) {
        this.monthLimit = other.monthLimit;
      }
      if (other.isSetMobileToken()) {
        this.mobileToken = other.mobileToken;
      }
      if (other.isSetPointCardNo()) {
        this.pointCardNo = other.pointCardNo;
      }
    }

    public signBankCardByClientId_args deepCopy() {
      return new signBankCardByClientId_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.cardNo = null;
      this.uname = null;
      this.idcard = null;
      this.phone = null;
      this.singlePenLimit = null;
      this.dayLimit = null;
      this.monthLimit = null;
      this.mobileToken = null;
      this.pointCardNo = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public signBankCardByClientId_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public signBankCardByClientId_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getCardNo() {
      return this.cardNo;
    }

    public signBankCardByClientId_args setCardNo(String cardNo) {
      this.cardNo = cardNo;
      return this;
    }

    public void unsetCardNo() {
      this.cardNo = null;
    }

    /** Returns true if field cardNo is set (has been assigned a value) and false otherwise */
    public boolean isSetCardNo() {
      return this.cardNo != null;
    }

    public void setCardNoIsSet(boolean value) {
      if (!value) {
        this.cardNo = null;
      }
    }

    public String getUname() {
      return this.uname;
    }

    public signBankCardByClientId_args setUname(String uname) {
      this.uname = uname;
      return this;
    }

    public void unsetUname() {
      this.uname = null;
    }

    /** Returns true if field uname is set (has been assigned a value) and false otherwise */
    public boolean isSetUname() {
      return this.uname != null;
    }

    public void setUnameIsSet(boolean value) {
      if (!value) {
        this.uname = null;
      }
    }

    public String getIdcard() {
      return this.idcard;
    }

    public signBankCardByClientId_args setIdcard(String idcard) {
      this.idcard = idcard;
      return this;
    }

    public void unsetIdcard() {
      this.idcard = null;
    }

    /** Returns true if field idcard is set (has been assigned a value) and false otherwise */
    public boolean isSetIdcard() {
      return this.idcard != null;
    }

    public void setIdcardIsSet(boolean value) {
      if (!value) {
        this.idcard = null;
      }
    }

    public String getPhone() {
      return this.phone;
    }

    public signBankCardByClientId_args setPhone(String phone) {
      this.phone = phone;
      return this;
    }

    public void unsetPhone() {
      this.phone = null;
    }

    /** Returns true if field phone is set (has been assigned a value) and false otherwise */
    public boolean isSetPhone() {
      return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
      if (!value) {
        this.phone = null;
      }
    }

    public String getSinglePenLimit() {
      return this.singlePenLimit;
    }

    public signBankCardByClientId_args setSinglePenLimit(String singlePenLimit) {
      this.singlePenLimit = singlePenLimit;
      return this;
    }

    public void unsetSinglePenLimit() {
      this.singlePenLimit = null;
    }

    /** Returns true if field singlePenLimit is set (has been assigned a value) and false otherwise */
    public boolean isSetSinglePenLimit() {
      return this.singlePenLimit != null;
    }

    public void setSinglePenLimitIsSet(boolean value) {
      if (!value) {
        this.singlePenLimit = null;
      }
    }

    public String getDayLimit() {
      return this.dayLimit;
    }

    public signBankCardByClientId_args setDayLimit(String dayLimit) {
      this.dayLimit = dayLimit;
      return this;
    }

    public void unsetDayLimit() {
      this.dayLimit = null;
    }

    /** Returns true if field dayLimit is set (has been assigned a value) and false otherwise */
    public boolean isSetDayLimit() {
      return this.dayLimit != null;
    }

    public void setDayLimitIsSet(boolean value) {
      if (!value) {
        this.dayLimit = null;
      }
    }

    public String getMonthLimit() {
      return this.monthLimit;
    }

    public signBankCardByClientId_args setMonthLimit(String monthLimit) {
      this.monthLimit = monthLimit;
      return this;
    }

    public void unsetMonthLimit() {
      this.monthLimit = null;
    }

    /** Returns true if field monthLimit is set (has been assigned a value) and false otherwise */
    public boolean isSetMonthLimit() {
      return this.monthLimit != null;
    }

    public void setMonthLimitIsSet(boolean value) {
      if (!value) {
        this.monthLimit = null;
      }
    }

    public String getMobileToken() {
      return this.mobileToken;
    }

    public signBankCardByClientId_args setMobileToken(String mobileToken) {
      this.mobileToken = mobileToken;
      return this;
    }

    public void unsetMobileToken() {
      this.mobileToken = null;
    }

    /** Returns true if field mobileToken is set (has been assigned a value) and false otherwise */
    public boolean isSetMobileToken() {
      return this.mobileToken != null;
    }

    public void setMobileTokenIsSet(boolean value) {
      if (!value) {
        this.mobileToken = null;
      }
    }

    public String getPointCardNo() {
      return this.pointCardNo;
    }

    public signBankCardByClientId_args setPointCardNo(String pointCardNo) {
      this.pointCardNo = pointCardNo;
      return this;
    }

    public void unsetPointCardNo() {
      this.pointCardNo = null;
    }

    /** Returns true if field pointCardNo is set (has been assigned a value) and false otherwise */
    public boolean isSetPointCardNo() {
      return this.pointCardNo != null;
    }

    public void setPointCardNoIsSet(boolean value) {
      if (!value) {
        this.pointCardNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case CARD_NO:
        if (value == null) {
          unsetCardNo();
        } else {
          setCardNo((String)value);
        }
        break;

      case UNAME:
        if (value == null) {
          unsetUname();
        } else {
          setUname((String)value);
        }
        break;

      case IDCARD:
        if (value == null) {
          unsetIdcard();
        } else {
          setIdcard((String)value);
        }
        break;

      case PHONE:
        if (value == null) {
          unsetPhone();
        } else {
          setPhone((String)value);
        }
        break;

      case SINGLE_PEN_LIMIT:
        if (value == null) {
          unsetSinglePenLimit();
        } else {
          setSinglePenLimit((String)value);
        }
        break;

      case DAY_LIMIT:
        if (value == null) {
          unsetDayLimit();
        } else {
          setDayLimit((String)value);
        }
        break;

      case MONTH_LIMIT:
        if (value == null) {
          unsetMonthLimit();
        } else {
          setMonthLimit((String)value);
        }
        break;

      case MOBILE_TOKEN:
        if (value == null) {
          unsetMobileToken();
        } else {
          setMobileToken((String)value);
        }
        break;

      case POINT_CARD_NO:
        if (value == null) {
          unsetPointCardNo();
        } else {
          setPointCardNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case CARD_NO:
        return getCardNo();

      case UNAME:
        return getUname();

      case IDCARD:
        return getIdcard();

      case PHONE:
        return getPhone();

      case SINGLE_PEN_LIMIT:
        return getSinglePenLimit();

      case DAY_LIMIT:
        return getDayLimit();

      case MONTH_LIMIT:
        return getMonthLimit();

      case MOBILE_TOKEN:
        return getMobileToken();

      case POINT_CARD_NO:
        return getPointCardNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case MEMBER_CODE:
        return isSetMemberCode();
      case CARD_NO:
        return isSetCardNo();
      case UNAME:
        return isSetUname();
      case IDCARD:
        return isSetIdcard();
      case PHONE:
        return isSetPhone();
      case SINGLE_PEN_LIMIT:
        return isSetSinglePenLimit();
      case DAY_LIMIT:
        return isSetDayLimit();
      case MONTH_LIMIT:
        return isSetMonthLimit();
      case MOBILE_TOKEN:
        return isSetMobileToken();
      case POINT_CARD_NO:
        return isSetPointCardNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signBankCardByClientId_args)
        return this.equals((signBankCardByClientId_args)that);
      return false;
    }

    public boolean equals(signBankCardByClientId_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_cardNo = true && this.isSetCardNo();
      boolean that_present_cardNo = true && that.isSetCardNo();
      if (this_present_cardNo || that_present_cardNo) {
        if (!(this_present_cardNo && that_present_cardNo))
          return false;
        if (!this.cardNo.equals(that.cardNo))
          return false;
      }

      boolean this_present_uname = true && this.isSetUname();
      boolean that_present_uname = true && that.isSetUname();
      if (this_present_uname || that_present_uname) {
        if (!(this_present_uname && that_present_uname))
          return false;
        if (!this.uname.equals(that.uname))
          return false;
      }

      boolean this_present_idcard = true && this.isSetIdcard();
      boolean that_present_idcard = true && that.isSetIdcard();
      if (this_present_idcard || that_present_idcard) {
        if (!(this_present_idcard && that_present_idcard))
          return false;
        if (!this.idcard.equals(that.idcard))
          return false;
      }

      boolean this_present_phone = true && this.isSetPhone();
      boolean that_present_phone = true && that.isSetPhone();
      if (this_present_phone || that_present_phone) {
        if (!(this_present_phone && that_present_phone))
          return false;
        if (!this.phone.equals(that.phone))
          return false;
      }

      boolean this_present_singlePenLimit = true && this.isSetSinglePenLimit();
      boolean that_present_singlePenLimit = true && that.isSetSinglePenLimit();
      if (this_present_singlePenLimit || that_present_singlePenLimit) {
        if (!(this_present_singlePenLimit && that_present_singlePenLimit))
          return false;
        if (!this.singlePenLimit.equals(that.singlePenLimit))
          return false;
      }

      boolean this_present_dayLimit = true && this.isSetDayLimit();
      boolean that_present_dayLimit = true && that.isSetDayLimit();
      if (this_present_dayLimit || that_present_dayLimit) {
        if (!(this_present_dayLimit && that_present_dayLimit))
          return false;
        if (!this.dayLimit.equals(that.dayLimit))
          return false;
      }

      boolean this_present_monthLimit = true && this.isSetMonthLimit();
      boolean that_present_monthLimit = true && that.isSetMonthLimit();
      if (this_present_monthLimit || that_present_monthLimit) {
        if (!(this_present_monthLimit && that_present_monthLimit))
          return false;
        if (!this.monthLimit.equals(that.monthLimit))
          return false;
      }

      boolean this_present_mobileToken = true && this.isSetMobileToken();
      boolean that_present_mobileToken = true && that.isSetMobileToken();
      if (this_present_mobileToken || that_present_mobileToken) {
        if (!(this_present_mobileToken && that_present_mobileToken))
          return false;
        if (!this.mobileToken.equals(that.mobileToken))
          return false;
      }

      boolean this_present_pointCardNo = true && this.isSetPointCardNo();
      boolean that_present_pointCardNo = true && that.isSetPointCardNo();
      if (this_present_pointCardNo || that_present_pointCardNo) {
        if (!(this_present_pointCardNo && that_present_pointCardNo))
          return false;
        if (!this.pointCardNo.equals(that.pointCardNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_cardNo = true && (isSetCardNo());
      list.add(present_cardNo);
      if (present_cardNo)
        list.add(cardNo);

      boolean present_uname = true && (isSetUname());
      list.add(present_uname);
      if (present_uname)
        list.add(uname);

      boolean present_idcard = true && (isSetIdcard());
      list.add(present_idcard);
      if (present_idcard)
        list.add(idcard);

      boolean present_phone = true && (isSetPhone());
      list.add(present_phone);
      if (present_phone)
        list.add(phone);

      boolean present_singlePenLimit = true && (isSetSinglePenLimit());
      list.add(present_singlePenLimit);
      if (present_singlePenLimit)
        list.add(singlePenLimit);

      boolean present_dayLimit = true && (isSetDayLimit());
      list.add(present_dayLimit);
      if (present_dayLimit)
        list.add(dayLimit);

      boolean present_monthLimit = true && (isSetMonthLimit());
      list.add(present_monthLimit);
      if (present_monthLimit)
        list.add(monthLimit);

      boolean present_mobileToken = true && (isSetMobileToken());
      list.add(present_mobileToken);
      if (present_mobileToken)
        list.add(mobileToken);

      boolean present_pointCardNo = true && (isSetPointCardNo());
      list.add(present_pointCardNo);
      if (present_pointCardNo)
        list.add(pointCardNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(signBankCardByClientId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCardNo()).compareTo(other.isSetCardNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardNo, other.cardNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUname()).compareTo(other.isSetUname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uname, other.uname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdcard()).compareTo(other.isSetIdcard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdcard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idcard, other.idcard);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhone()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSinglePenLimit()).compareTo(other.isSetSinglePenLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSinglePenLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singlePenLimit, other.singlePenLimit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDayLimit()).compareTo(other.isSetDayLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDayLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayLimit, other.dayLimit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMonthLimit()).compareTo(other.isSetMonthLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMonthLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLimit, other.monthLimit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobileToken()).compareTo(other.isSetMobileToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobileToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileToken, other.mobileToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPointCardNo()).compareTo(other.isSetPointCardNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPointCardNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointCardNo, other.pointCardNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signBankCardByClientId_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cardNo:");
      if (this.cardNo == null) {
        sb.append("null");
      } else {
        sb.append(this.cardNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uname:");
      if (this.uname == null) {
        sb.append("null");
      } else {
        sb.append(this.uname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("idcard:");
      if (this.idcard == null) {
        sb.append("null");
      } else {
        sb.append(this.idcard);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("singlePenLimit:");
      if (this.singlePenLimit == null) {
        sb.append("null");
      } else {
        sb.append(this.singlePenLimit);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dayLimit:");
      if (this.dayLimit == null) {
        sb.append("null");
      } else {
        sb.append(this.dayLimit);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("monthLimit:");
      if (this.monthLimit == null) {
        sb.append("null");
      } else {
        sb.append(this.monthLimit);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobileToken:");
      if (this.mobileToken == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pointCardNo:");
      if (this.pointCardNo == null) {
        sb.append("null");
      } else {
        sb.append(this.pointCardNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signBankCardByClientId_argsStandardSchemeFactory implements SchemeFactory {
      public signBankCardByClientId_argsStandardScheme getScheme() {
        return new signBankCardByClientId_argsStandardScheme();
      }
    }

    private static class signBankCardByClientId_argsStandardScheme extends StandardScheme<signBankCardByClientId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signBankCardByClientId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CARD_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cardNo = iprot.readString();
                struct.setCardNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uname = iprot.readString();
                struct.setUnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // IDCARD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.idcard = iprot.readString();
                struct.setIdcardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PHONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phone = iprot.readString();
                struct.setPhoneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SINGLE_PEN_LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.singlePenLimit = iprot.readString();
                struct.setSinglePenLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // DAY_LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dayLimit = iprot.readString();
                struct.setDayLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // MONTH_LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.monthLimit = iprot.readString();
                struct.setMonthLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // MOBILE_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobileToken = iprot.readString();
                struct.setMobileTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // POINT_CARD_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pointCardNo = iprot.readString();
                struct.setPointCardNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signBankCardByClientId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.cardNo != null) {
          oprot.writeFieldBegin(CARD_NO_FIELD_DESC);
          oprot.writeString(struct.cardNo);
          oprot.writeFieldEnd();
        }
        if (struct.uname != null) {
          oprot.writeFieldBegin(UNAME_FIELD_DESC);
          oprot.writeString(struct.uname);
          oprot.writeFieldEnd();
        }
        if (struct.idcard != null) {
          oprot.writeFieldBegin(IDCARD_FIELD_DESC);
          oprot.writeString(struct.idcard);
          oprot.writeFieldEnd();
        }
        if (struct.phone != null) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
        if (struct.singlePenLimit != null) {
          oprot.writeFieldBegin(SINGLE_PEN_LIMIT_FIELD_DESC);
          oprot.writeString(struct.singlePenLimit);
          oprot.writeFieldEnd();
        }
        if (struct.dayLimit != null) {
          oprot.writeFieldBegin(DAY_LIMIT_FIELD_DESC);
          oprot.writeString(struct.dayLimit);
          oprot.writeFieldEnd();
        }
        if (struct.monthLimit != null) {
          oprot.writeFieldBegin(MONTH_LIMIT_FIELD_DESC);
          oprot.writeString(struct.monthLimit);
          oprot.writeFieldEnd();
        }
        if (struct.mobileToken != null) {
          oprot.writeFieldBegin(MOBILE_TOKEN_FIELD_DESC);
          oprot.writeString(struct.mobileToken);
          oprot.writeFieldEnd();
        }
        if (struct.pointCardNo != null) {
          oprot.writeFieldBegin(POINT_CARD_NO_FIELD_DESC);
          oprot.writeString(struct.pointCardNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signBankCardByClientId_argsTupleSchemeFactory implements SchemeFactory {
      public signBankCardByClientId_argsTupleScheme getScheme() {
        return new signBankCardByClientId_argsTupleScheme();
      }
    }

    private static class signBankCardByClientId_argsTupleScheme extends TupleScheme<signBankCardByClientId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signBankCardByClientId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetMemberCode()) {
          optionals.set(1);
        }
        if (struct.isSetCardNo()) {
          optionals.set(2);
        }
        if (struct.isSetUname()) {
          optionals.set(3);
        }
        if (struct.isSetIdcard()) {
          optionals.set(4);
        }
        if (struct.isSetPhone()) {
          optionals.set(5);
        }
        if (struct.isSetSinglePenLimit()) {
          optionals.set(6);
        }
        if (struct.isSetDayLimit()) {
          optionals.set(7);
        }
        if (struct.isSetMonthLimit()) {
          optionals.set(8);
        }
        if (struct.isSetMobileToken()) {
          optionals.set(9);
        }
        if (struct.isSetPointCardNo()) {
          optionals.set(10);
        }
        oprot.writeBitSet(optionals, 11);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetCardNo()) {
          oprot.writeString(struct.cardNo);
        }
        if (struct.isSetUname()) {
          oprot.writeString(struct.uname);
        }
        if (struct.isSetIdcard()) {
          oprot.writeString(struct.idcard);
        }
        if (struct.isSetPhone()) {
          oprot.writeString(struct.phone);
        }
        if (struct.isSetSinglePenLimit()) {
          oprot.writeString(struct.singlePenLimit);
        }
        if (struct.isSetDayLimit()) {
          oprot.writeString(struct.dayLimit);
        }
        if (struct.isSetMonthLimit()) {
          oprot.writeString(struct.monthLimit);
        }
        if (struct.isSetMobileToken()) {
          oprot.writeString(struct.mobileToken);
        }
        if (struct.isSetPointCardNo()) {
          oprot.writeString(struct.pointCardNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signBankCardByClientId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(11);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cardNo = iprot.readString();
          struct.setCardNoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.uname = iprot.readString();
          struct.setUnameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.idcard = iprot.readString();
          struct.setIdcardIsSet(true);
        }
        if (incoming.get(5)) {
          struct.phone = iprot.readString();
          struct.setPhoneIsSet(true);
        }
        if (incoming.get(6)) {
          struct.singlePenLimit = iprot.readString();
          struct.setSinglePenLimitIsSet(true);
        }
        if (incoming.get(7)) {
          struct.dayLimit = iprot.readString();
          struct.setDayLimitIsSet(true);
        }
        if (incoming.get(8)) {
          struct.monthLimit = iprot.readString();
          struct.setMonthLimitIsSet(true);
        }
        if (incoming.get(9)) {
          struct.mobileToken = iprot.readString();
          struct.setMobileTokenIsSet(true);
        }
        if (incoming.get(10)) {
          struct.pointCardNo = iprot.readString();
          struct.setPointCardNoIsSet(true);
        }
      }
    }

  }

  public static class signBankCardByClientId_result implements org.apache.thrift.TBase<signBankCardByClientId_result, signBankCardByClientId_result._Fields>, java.io.Serializable, Cloneable, Comparable<signBankCardByClientId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("signBankCardByClientId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new signBankCardByClientId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new signBankCardByClientId_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(signBankCardByClientId_result.class, metaDataMap);
    }

    public signBankCardByClientId_result() {
    }

    public signBankCardByClientId_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public signBankCardByClientId_result(signBankCardByClientId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public signBankCardByClientId_result deepCopy() {
      return new signBankCardByClientId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public signBankCardByClientId_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof signBankCardByClientId_result)
        return this.equals((signBankCardByClientId_result)that);
      return false;
    }

    public boolean equals(signBankCardByClientId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(signBankCardByClientId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("signBankCardByClientId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class signBankCardByClientId_resultStandardSchemeFactory implements SchemeFactory {
      public signBankCardByClientId_resultStandardScheme getScheme() {
        return new signBankCardByClientId_resultStandardScheme();
      }
    }

    private static class signBankCardByClientId_resultStandardScheme extends StandardScheme<signBankCardByClientId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, signBankCardByClientId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, signBankCardByClientId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class signBankCardByClientId_resultTupleSchemeFactory implements SchemeFactory {
      public signBankCardByClientId_resultTupleScheme getScheme() {
        return new signBankCardByClientId_resultTupleScheme();
      }
    }

    private static class signBankCardByClientId_resultTupleScheme extends TupleScheme<signBankCardByClientId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, signBankCardByClientId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, signBankCardByClientId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setDefaultSignerBankCard_args implements org.apache.thrift.TBase<setDefaultSignerBankCard_args, setDefaultSignerBankCard_args._Fields>, java.io.Serializable, Cloneable, Comparable<setDefaultSignerBankCard_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDefaultSignerBankCard_args");

    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cardId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDefaultSignerBankCard_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDefaultSignerBankCard_argsTupleSchemeFactory());
    }

    public long memberCode; // required
    public long cardId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEMBER_CODE((short)1, "memberCode"),
      CARD_ID((short)2, "cardId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEMBER_CODE
            return MEMBER_CODE;
          case 2: // CARD_ID
            return CARD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private static final int __CARDID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("cardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDefaultSignerBankCard_args.class, metaDataMap);
    }

    public setDefaultSignerBankCard_args() {
    }

    public setDefaultSignerBankCard_args(
      long memberCode,
      long cardId)
    {
      this();
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.cardId = cardId;
      setCardIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDefaultSignerBankCard_args(setDefaultSignerBankCard_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.memberCode = other.memberCode;
      this.cardId = other.cardId;
    }

    public setDefaultSignerBankCard_args deepCopy() {
      return new setDefaultSignerBankCard_args(this);
    }

    @Override
    public void clear() {
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      setCardIdIsSet(false);
      this.cardId = 0;
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public setDefaultSignerBankCard_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public long getCardId() {
      return this.cardId;
    }

    public setDefaultSignerBankCard_args setCardId(long cardId) {
      this.cardId = cardId;
      setCardIdIsSet(true);
      return this;
    }

    public void unsetCardId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARDID_ISSET_ID);
    }

    /** Returns true if field cardId is set (has been assigned a value) and false otherwise */
    public boolean isSetCardId() {
      return EncodingUtils.testBit(__isset_bitfield, __CARDID_ISSET_ID);
    }

    public void setCardIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARDID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case CARD_ID:
        if (value == null) {
          unsetCardId();
        } else {
          setCardId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case CARD_ID:
        return Long.valueOf(getCardId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MEMBER_CODE:
        return isSetMemberCode();
      case CARD_ID:
        return isSetCardId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDefaultSignerBankCard_args)
        return this.equals((setDefaultSignerBankCard_args)that);
      return false;
    }

    public boolean equals(setDefaultSignerBankCard_args that) {
      if (that == null)
        return false;

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_cardId = true;
      boolean that_present_cardId = true;
      if (this_present_cardId || that_present_cardId) {
        if (!(this_present_cardId && that_present_cardId))
          return false;
        if (this.cardId != that.cardId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_cardId = true;
      list.add(present_cardId);
      if (present_cardId)
        list.add(cardId);

      return list.hashCode();
    }

    @Override
    public int compareTo(setDefaultSignerBankCard_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCardId()).compareTo(other.isSetCardId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardId, other.cardId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDefaultSignerBankCard_args(");
      boolean first = true;

      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cardId:");
      sb.append(this.cardId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDefaultSignerBankCard_argsStandardSchemeFactory implements SchemeFactory {
      public setDefaultSignerBankCard_argsStandardScheme getScheme() {
        return new setDefaultSignerBankCard_argsStandardScheme();
      }
    }

    private static class setDefaultSignerBankCard_argsStandardScheme extends StandardScheme<setDefaultSignerBankCard_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDefaultSignerBankCard_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CARD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.cardId = iprot.readI64();
                struct.setCardIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDefaultSignerBankCard_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CARD_ID_FIELD_DESC);
        oprot.writeI64(struct.cardId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDefaultSignerBankCard_argsTupleSchemeFactory implements SchemeFactory {
      public setDefaultSignerBankCard_argsTupleScheme getScheme() {
        return new setDefaultSignerBankCard_argsTupleScheme();
      }
    }

    private static class setDefaultSignerBankCard_argsTupleScheme extends TupleScheme<setDefaultSignerBankCard_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDefaultSignerBankCard_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMemberCode()) {
          optionals.set(0);
        }
        if (struct.isSetCardId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetCardId()) {
          oprot.writeI64(struct.cardId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDefaultSignerBankCard_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cardId = iprot.readI64();
          struct.setCardIdIsSet(true);
        }
      }
    }

  }

  public static class setDefaultSignerBankCard_result implements org.apache.thrift.TBase<setDefaultSignerBankCard_result, setDefaultSignerBankCard_result._Fields>, java.io.Serializable, Cloneable, Comparable<setDefaultSignerBankCard_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDefaultSignerBankCard_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDefaultSignerBankCard_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDefaultSignerBankCard_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDefaultSignerBankCard_result.class, metaDataMap);
    }

    public setDefaultSignerBankCard_result() {
    }

    public setDefaultSignerBankCard_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDefaultSignerBankCard_result(setDefaultSignerBankCard_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public setDefaultSignerBankCard_result deepCopy() {
      return new setDefaultSignerBankCard_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public setDefaultSignerBankCard_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDefaultSignerBankCard_result)
        return this.equals((setDefaultSignerBankCard_result)that);
      return false;
    }

    public boolean equals(setDefaultSignerBankCard_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setDefaultSignerBankCard_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDefaultSignerBankCard_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDefaultSignerBankCard_resultStandardSchemeFactory implements SchemeFactory {
      public setDefaultSignerBankCard_resultStandardScheme getScheme() {
        return new setDefaultSignerBankCard_resultStandardScheme();
      }
    }

    private static class setDefaultSignerBankCard_resultStandardScheme extends StandardScheme<setDefaultSignerBankCard_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDefaultSignerBankCard_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDefaultSignerBankCard_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDefaultSignerBankCard_resultTupleSchemeFactory implements SchemeFactory {
      public setDefaultSignerBankCard_resultTupleScheme getScheme() {
        return new setDefaultSignerBankCard_resultTupleScheme();
      }
    }

    private static class setDefaultSignerBankCard_resultTupleScheme extends TupleScheme<setDefaultSignerBankCard_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDefaultSignerBankCard_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDefaultSignerBankCard_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendSignBankCardMobileToken_args implements org.apache.thrift.TBase<sendSignBankCardMobileToken_args, sendSignBankCardMobileToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendSignBankCardMobileToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendSignBankCardMobileToken_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardNo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendSignBankCardMobileToken_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendSignBankCardMobileToken_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String phone; // required
    public String cardNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      PHONE((short)2, "phone"),
      CARD_NO((short)3, "cardNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // PHONE
            return PHONE;
          case 3: // CARD_NO
            return CARD_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("cardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendSignBankCardMobileToken_args.class, metaDataMap);
    }

    public sendSignBankCardMobileToken_args() {
    }

    public sendSignBankCardMobileToken_args(
      String clientId,
      String phone,
      String cardNo)
    {
      this();
      this.clientId = clientId;
      this.phone = phone;
      this.cardNo = cardNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendSignBankCardMobileToken_args(sendSignBankCardMobileToken_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetPhone()) {
        this.phone = other.phone;
      }
      if (other.isSetCardNo()) {
        this.cardNo = other.cardNo;
      }
    }

    public sendSignBankCardMobileToken_args deepCopy() {
      return new sendSignBankCardMobileToken_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.phone = null;
      this.cardNo = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public sendSignBankCardMobileToken_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getPhone() {
      return this.phone;
    }

    public sendSignBankCardMobileToken_args setPhone(String phone) {
      this.phone = phone;
      return this;
    }

    public void unsetPhone() {
      this.phone = null;
    }

    /** Returns true if field phone is set (has been assigned a value) and false otherwise */
    public boolean isSetPhone() {
      return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
      if (!value) {
        this.phone = null;
      }
    }

    public String getCardNo() {
      return this.cardNo;
    }

    public sendSignBankCardMobileToken_args setCardNo(String cardNo) {
      this.cardNo = cardNo;
      return this;
    }

    public void unsetCardNo() {
      this.cardNo = null;
    }

    /** Returns true if field cardNo is set (has been assigned a value) and false otherwise */
    public boolean isSetCardNo() {
      return this.cardNo != null;
    }

    public void setCardNoIsSet(boolean value) {
      if (!value) {
        this.cardNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case PHONE:
        if (value == null) {
          unsetPhone();
        } else {
          setPhone((String)value);
        }
        break;

      case CARD_NO:
        if (value == null) {
          unsetCardNo();
        } else {
          setCardNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case PHONE:
        return getPhone();

      case CARD_NO:
        return getCardNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case PHONE:
        return isSetPhone();
      case CARD_NO:
        return isSetCardNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendSignBankCardMobileToken_args)
        return this.equals((sendSignBankCardMobileToken_args)that);
      return false;
    }

    public boolean equals(sendSignBankCardMobileToken_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_phone = true && this.isSetPhone();
      boolean that_present_phone = true && that.isSetPhone();
      if (this_present_phone || that_present_phone) {
        if (!(this_present_phone && that_present_phone))
          return false;
        if (!this.phone.equals(that.phone))
          return false;
      }

      boolean this_present_cardNo = true && this.isSetCardNo();
      boolean that_present_cardNo = true && that.isSetCardNo();
      if (this_present_cardNo || that_present_cardNo) {
        if (!(this_present_cardNo && that_present_cardNo))
          return false;
        if (!this.cardNo.equals(that.cardNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_phone = true && (isSetPhone());
      list.add(present_phone);
      if (present_phone)
        list.add(phone);

      boolean present_cardNo = true && (isSetCardNo());
      list.add(present_cardNo);
      if (present_cardNo)
        list.add(cardNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendSignBankCardMobileToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhone()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCardNo()).compareTo(other.isSetCardNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardNo, other.cardNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendSignBankCardMobileToken_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cardNo:");
      if (this.cardNo == null) {
        sb.append("null");
      } else {
        sb.append(this.cardNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendSignBankCardMobileToken_argsStandardSchemeFactory implements SchemeFactory {
      public sendSignBankCardMobileToken_argsStandardScheme getScheme() {
        return new sendSignBankCardMobileToken_argsStandardScheme();
      }
    }

    private static class sendSignBankCardMobileToken_argsStandardScheme extends StandardScheme<sendSignBankCardMobileToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendSignBankCardMobileToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PHONE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phone = iprot.readString();
                struct.setPhoneIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CARD_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cardNo = iprot.readString();
                struct.setCardNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendSignBankCardMobileToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.phone != null) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
        if (struct.cardNo != null) {
          oprot.writeFieldBegin(CARD_NO_FIELD_DESC);
          oprot.writeString(struct.cardNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendSignBankCardMobileToken_argsTupleSchemeFactory implements SchemeFactory {
      public sendSignBankCardMobileToken_argsTupleScheme getScheme() {
        return new sendSignBankCardMobileToken_argsTupleScheme();
      }
    }

    private static class sendSignBankCardMobileToken_argsTupleScheme extends TupleScheme<sendSignBankCardMobileToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendSignBankCardMobileToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetPhone()) {
          optionals.set(1);
        }
        if (struct.isSetCardNo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetPhone()) {
          oprot.writeString(struct.phone);
        }
        if (struct.isSetCardNo()) {
          oprot.writeString(struct.cardNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendSignBankCardMobileToken_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.phone = iprot.readString();
          struct.setPhoneIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cardNo = iprot.readString();
          struct.setCardNoIsSet(true);
        }
      }
    }

  }

  public static class sendSignBankCardMobileToken_result implements org.apache.thrift.TBase<sendSignBankCardMobileToken_result, sendSignBankCardMobileToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendSignBankCardMobileToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendSignBankCardMobileToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendSignBankCardMobileToken_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendSignBankCardMobileToken_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendSignBankCardMobileToken_result.class, metaDataMap);
    }

    public sendSignBankCardMobileToken_result() {
    }

    public sendSignBankCardMobileToken_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendSignBankCardMobileToken_result(sendSignBankCardMobileToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public sendSignBankCardMobileToken_result deepCopy() {
      return new sendSignBankCardMobileToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public sendSignBankCardMobileToken_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendSignBankCardMobileToken_result)
        return this.equals((sendSignBankCardMobileToken_result)that);
      return false;
    }

    public boolean equals(sendSignBankCardMobileToken_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendSignBankCardMobileToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendSignBankCardMobileToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendSignBankCardMobileToken_resultStandardSchemeFactory implements SchemeFactory {
      public sendSignBankCardMobileToken_resultStandardScheme getScheme() {
        return new sendSignBankCardMobileToken_resultStandardScheme();
      }
    }

    private static class sendSignBankCardMobileToken_resultStandardScheme extends StandardScheme<sendSignBankCardMobileToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendSignBankCardMobileToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendSignBankCardMobileToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendSignBankCardMobileToken_resultTupleSchemeFactory implements SchemeFactory {
      public sendSignBankCardMobileToken_resultTupleScheme getScheme() {
        return new sendSignBankCardMobileToken_resultTupleScheme();
      }
    }

    private static class sendSignBankCardMobileToken_resultTupleScheme extends TupleScheme<sendSignBankCardMobileToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendSignBankCardMobileToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendSignBankCardMobileToken_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cancelSignedBankCard_args implements org.apache.thrift.TBase<cancelSignedBankCard_args, cancelSignedBankCard_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelSignedBankCard_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelSignedBankCard_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MEMBER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("memberCode", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardNo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelSignedBankCard_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelSignedBankCard_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public long memberCode; // required
    public String cardNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      MEMBER_CODE((short)2, "memberCode"),
      CARD_NO((short)3, "cardNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // MEMBER_CODE
            return MEMBER_CODE;
          case 3: // CARD_NO
            return CARD_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MEMBERCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_CODE, new org.apache.thrift.meta_data.FieldMetaData("memberCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("cardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelSignedBankCard_args.class, metaDataMap);
    }

    public cancelSignedBankCard_args() {
    }

    public cancelSignedBankCard_args(
      String clientId,
      long memberCode,
      String cardNo)
    {
      this();
      this.clientId = clientId;
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      this.cardNo = cardNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelSignedBankCard_args(cancelSignedBankCard_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      this.memberCode = other.memberCode;
      if (other.isSetCardNo()) {
        this.cardNo = other.cardNo;
      }
    }

    public cancelSignedBankCard_args deepCopy() {
      return new cancelSignedBankCard_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      setMemberCodeIsSet(false);
      this.memberCode = 0;
      this.cardNo = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public cancelSignedBankCard_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public long getMemberCode() {
      return this.memberCode;
    }

    public cancelSignedBankCard_args setMemberCode(long memberCode) {
      this.memberCode = memberCode;
      setMemberCodeIsSet(true);
      return this;
    }

    public void unsetMemberCode() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    /** Returns true if field memberCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberCode() {
      return EncodingUtils.testBit(__isset_bitfield, __MEMBERCODE_ISSET_ID);
    }

    public void setMemberCodeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBERCODE_ISSET_ID, value);
    }

    public String getCardNo() {
      return this.cardNo;
    }

    public cancelSignedBankCard_args setCardNo(String cardNo) {
      this.cardNo = cardNo;
      return this;
    }

    public void unsetCardNo() {
      this.cardNo = null;
    }

    /** Returns true if field cardNo is set (has been assigned a value) and false otherwise */
    public boolean isSetCardNo() {
      return this.cardNo != null;
    }

    public void setCardNoIsSet(boolean value) {
      if (!value) {
        this.cardNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case MEMBER_CODE:
        if (value == null) {
          unsetMemberCode();
        } else {
          setMemberCode((Long)value);
        }
        break;

      case CARD_NO:
        if (value == null) {
          unsetCardNo();
        } else {
          setCardNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case MEMBER_CODE:
        return Long.valueOf(getMemberCode());

      case CARD_NO:
        return getCardNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case MEMBER_CODE:
        return isSetMemberCode();
      case CARD_NO:
        return isSetCardNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelSignedBankCard_args)
        return this.equals((cancelSignedBankCard_args)that);
      return false;
    }

    public boolean equals(cancelSignedBankCard_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_memberCode = true;
      boolean that_present_memberCode = true;
      if (this_present_memberCode || that_present_memberCode) {
        if (!(this_present_memberCode && that_present_memberCode))
          return false;
        if (this.memberCode != that.memberCode)
          return false;
      }

      boolean this_present_cardNo = true && this.isSetCardNo();
      boolean that_present_cardNo = true && that.isSetCardNo();
      if (this_present_cardNo || that_present_cardNo) {
        if (!(this_present_cardNo && that_present_cardNo))
          return false;
        if (!this.cardNo.equals(that.cardNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_memberCode = true;
      list.add(present_memberCode);
      if (present_memberCode)
        list.add(memberCode);

      boolean present_cardNo = true && (isSetCardNo());
      list.add(present_cardNo);
      if (present_cardNo)
        list.add(cardNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelSignedBankCard_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMemberCode()).compareTo(other.isSetMemberCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberCode, other.memberCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCardNo()).compareTo(other.isSetCardNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardNo, other.cardNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelSignedBankCard_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberCode:");
      sb.append(this.memberCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cardNo:");
      if (this.cardNo == null) {
        sb.append("null");
      } else {
        sb.append(this.cardNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelSignedBankCard_argsStandardSchemeFactory implements SchemeFactory {
      public cancelSignedBankCard_argsStandardScheme getScheme() {
        return new cancelSignedBankCard_argsStandardScheme();
      }
    }

    private static class cancelSignedBankCard_argsStandardScheme extends StandardScheme<cancelSignedBankCard_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelSignedBankCard_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MEMBER_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.memberCode = iprot.readI64();
                struct.setMemberCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CARD_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cardNo = iprot.readString();
                struct.setCardNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelSignedBankCard_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MEMBER_CODE_FIELD_DESC);
        oprot.writeI64(struct.memberCode);
        oprot.writeFieldEnd();
        if (struct.cardNo != null) {
          oprot.writeFieldBegin(CARD_NO_FIELD_DESC);
          oprot.writeString(struct.cardNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelSignedBankCard_argsTupleSchemeFactory implements SchemeFactory {
      public cancelSignedBankCard_argsTupleScheme getScheme() {
        return new cancelSignedBankCard_argsTupleScheme();
      }
    }

    private static class cancelSignedBankCard_argsTupleScheme extends TupleScheme<cancelSignedBankCard_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelSignedBankCard_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetMemberCode()) {
          optionals.set(1);
        }
        if (struct.isSetCardNo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetMemberCode()) {
          oprot.writeI64(struct.memberCode);
        }
        if (struct.isSetCardNo()) {
          oprot.writeString(struct.cardNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelSignedBankCard_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.memberCode = iprot.readI64();
          struct.setMemberCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cardNo = iprot.readString();
          struct.setCardNoIsSet(true);
        }
      }
    }

  }

  public static class cancelSignedBankCard_result implements org.apache.thrift.TBase<cancelSignedBankCard_result, cancelSignedBankCard_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelSignedBankCard_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelSignedBankCard_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelSignedBankCard_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelSignedBankCard_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelSignedBankCard_result.class, metaDataMap);
    }

    public cancelSignedBankCard_result() {
    }

    public cancelSignedBankCard_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelSignedBankCard_result(cancelSignedBankCard_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public cancelSignedBankCard_result deepCopy() {
      return new cancelSignedBankCard_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public cancelSignedBankCard_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelSignedBankCard_result)
        return this.equals((cancelSignedBankCard_result)that);
      return false;
    }

    public boolean equals(cancelSignedBankCard_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelSignedBankCard_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelSignedBankCard_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelSignedBankCard_resultStandardSchemeFactory implements SchemeFactory {
      public cancelSignedBankCard_resultStandardScheme getScheme() {
        return new cancelSignedBankCard_resultStandardScheme();
      }
    }

    private static class cancelSignedBankCard_resultStandardScheme extends StandardScheme<cancelSignedBankCard_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelSignedBankCard_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelSignedBankCard_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelSignedBankCard_resultTupleSchemeFactory implements SchemeFactory {
      public cancelSignedBankCard_resultTupleScheme getScheme() {
        return new cancelSignedBankCard_resultTupleScheme();
      }
    }

    private static class cancelSignedBankCard_resultTupleScheme extends TupleScheme<cancelSignedBankCard_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelSignedBankCard_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelSignedBankCard_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateSignBankCardLimitCash_args implements org.apache.thrift.TBase<updateSignBankCardLimitCash_args, updateSignBankCardLimitCash_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSignBankCardLimitCash_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSignBankCardLimitCash_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardNo", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SINGLE_PEN_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("singlePenLimit", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DAILY_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("dailyLimit", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField MONTHLY_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("monthlyLimit", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSignBankCardLimitCash_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSignBankCardLimitCash_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String cardNo; // required
    public String singlePenLimit; // required
    public String dailyLimit; // required
    public String monthlyLimit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      CARD_NO((short)2, "cardNo"),
      SINGLE_PEN_LIMIT((short)3, "singlePenLimit"),
      DAILY_LIMIT((short)4, "dailyLimit"),
      MONTHLY_LIMIT((short)5, "monthlyLimit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // CARD_NO
            return CARD_NO;
          case 3: // SINGLE_PEN_LIMIT
            return SINGLE_PEN_LIMIT;
          case 4: // DAILY_LIMIT
            return DAILY_LIMIT;
          case 5: // MONTHLY_LIMIT
            return MONTHLY_LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("cardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SINGLE_PEN_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("singlePenLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DAILY_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("dailyLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MONTHLY_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("monthlyLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSignBankCardLimitCash_args.class, metaDataMap);
    }

    public updateSignBankCardLimitCash_args() {
    }

    public updateSignBankCardLimitCash_args(
      String clientId,
      String cardNo,
      String singlePenLimit,
      String dailyLimit,
      String monthlyLimit)
    {
      this();
      this.clientId = clientId;
      this.cardNo = cardNo;
      this.singlePenLimit = singlePenLimit;
      this.dailyLimit = dailyLimit;
      this.monthlyLimit = monthlyLimit;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSignBankCardLimitCash_args(updateSignBankCardLimitCash_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetCardNo()) {
        this.cardNo = other.cardNo;
      }
      if (other.isSetSinglePenLimit()) {
        this.singlePenLimit = other.singlePenLimit;
      }
      if (other.isSetDailyLimit()) {
        this.dailyLimit = other.dailyLimit;
      }
      if (other.isSetMonthlyLimit()) {
        this.monthlyLimit = other.monthlyLimit;
      }
    }

    public updateSignBankCardLimitCash_args deepCopy() {
      return new updateSignBankCardLimitCash_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.cardNo = null;
      this.singlePenLimit = null;
      this.dailyLimit = null;
      this.monthlyLimit = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public updateSignBankCardLimitCash_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getCardNo() {
      return this.cardNo;
    }

    public updateSignBankCardLimitCash_args setCardNo(String cardNo) {
      this.cardNo = cardNo;
      return this;
    }

    public void unsetCardNo() {
      this.cardNo = null;
    }

    /** Returns true if field cardNo is set (has been assigned a value) and false otherwise */
    public boolean isSetCardNo() {
      return this.cardNo != null;
    }

    public void setCardNoIsSet(boolean value) {
      if (!value) {
        this.cardNo = null;
      }
    }

    public String getSinglePenLimit() {
      return this.singlePenLimit;
    }

    public updateSignBankCardLimitCash_args setSinglePenLimit(String singlePenLimit) {
      this.singlePenLimit = singlePenLimit;
      return this;
    }

    public void unsetSinglePenLimit() {
      this.singlePenLimit = null;
    }

    /** Returns true if field singlePenLimit is set (has been assigned a value) and false otherwise */
    public boolean isSetSinglePenLimit() {
      return this.singlePenLimit != null;
    }

    public void setSinglePenLimitIsSet(boolean value) {
      if (!value) {
        this.singlePenLimit = null;
      }
    }

    public String getDailyLimit() {
      return this.dailyLimit;
    }

    public updateSignBankCardLimitCash_args setDailyLimit(String dailyLimit) {
      this.dailyLimit = dailyLimit;
      return this;
    }

    public void unsetDailyLimit() {
      this.dailyLimit = null;
    }

    /** Returns true if field dailyLimit is set (has been assigned a value) and false otherwise */
    public boolean isSetDailyLimit() {
      return this.dailyLimit != null;
    }

    public void setDailyLimitIsSet(boolean value) {
      if (!value) {
        this.dailyLimit = null;
      }
    }

    public String getMonthlyLimit() {
      return this.monthlyLimit;
    }

    public updateSignBankCardLimitCash_args setMonthlyLimit(String monthlyLimit) {
      this.monthlyLimit = monthlyLimit;
      return this;
    }

    public void unsetMonthlyLimit() {
      this.monthlyLimit = null;
    }

    /** Returns true if field monthlyLimit is set (has been assigned a value) and false otherwise */
    public boolean isSetMonthlyLimit() {
      return this.monthlyLimit != null;
    }

    public void setMonthlyLimitIsSet(boolean value) {
      if (!value) {
        this.monthlyLimit = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case CARD_NO:
        if (value == null) {
          unsetCardNo();
        } else {
          setCardNo((String)value);
        }
        break;

      case SINGLE_PEN_LIMIT:
        if (value == null) {
          unsetSinglePenLimit();
        } else {
          setSinglePenLimit((String)value);
        }
        break;

      case DAILY_LIMIT:
        if (value == null) {
          unsetDailyLimit();
        } else {
          setDailyLimit((String)value);
        }
        break;

      case MONTHLY_LIMIT:
        if (value == null) {
          unsetMonthlyLimit();
        } else {
          setMonthlyLimit((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case CARD_NO:
        return getCardNo();

      case SINGLE_PEN_LIMIT:
        return getSinglePenLimit();

      case DAILY_LIMIT:
        return getDailyLimit();

      case MONTHLY_LIMIT:
        return getMonthlyLimit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case CARD_NO:
        return isSetCardNo();
      case SINGLE_PEN_LIMIT:
        return isSetSinglePenLimit();
      case DAILY_LIMIT:
        return isSetDailyLimit();
      case MONTHLY_LIMIT:
        return isSetMonthlyLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSignBankCardLimitCash_args)
        return this.equals((updateSignBankCardLimitCash_args)that);
      return false;
    }

    public boolean equals(updateSignBankCardLimitCash_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_cardNo = true && this.isSetCardNo();
      boolean that_present_cardNo = true && that.isSetCardNo();
      if (this_present_cardNo || that_present_cardNo) {
        if (!(this_present_cardNo && that_present_cardNo))
          return false;
        if (!this.cardNo.equals(that.cardNo))
          return false;
      }

      boolean this_present_singlePenLimit = true && this.isSetSinglePenLimit();
      boolean that_present_singlePenLimit = true && that.isSetSinglePenLimit();
      if (this_present_singlePenLimit || that_present_singlePenLimit) {
        if (!(this_present_singlePenLimit && that_present_singlePenLimit))
          return false;
        if (!this.singlePenLimit.equals(that.singlePenLimit))
          return false;
      }

      boolean this_present_dailyLimit = true && this.isSetDailyLimit();
      boolean that_present_dailyLimit = true && that.isSetDailyLimit();
      if (this_present_dailyLimit || that_present_dailyLimit) {
        if (!(this_present_dailyLimit && that_present_dailyLimit))
          return false;
        if (!this.dailyLimit.equals(that.dailyLimit))
          return false;
      }

      boolean this_present_monthlyLimit = true && this.isSetMonthlyLimit();
      boolean that_present_monthlyLimit = true && that.isSetMonthlyLimit();
      if (this_present_monthlyLimit || that_present_monthlyLimit) {
        if (!(this_present_monthlyLimit && that_present_monthlyLimit))
          return false;
        if (!this.monthlyLimit.equals(that.monthlyLimit))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_cardNo = true && (isSetCardNo());
      list.add(present_cardNo);
      if (present_cardNo)
        list.add(cardNo);

      boolean present_singlePenLimit = true && (isSetSinglePenLimit());
      list.add(present_singlePenLimit);
      if (present_singlePenLimit)
        list.add(singlePenLimit);

      boolean present_dailyLimit = true && (isSetDailyLimit());
      list.add(present_dailyLimit);
      if (present_dailyLimit)
        list.add(dailyLimit);

      boolean present_monthlyLimit = true && (isSetMonthlyLimit());
      list.add(present_monthlyLimit);
      if (present_monthlyLimit)
        list.add(monthlyLimit);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSignBankCardLimitCash_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCardNo()).compareTo(other.isSetCardNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCardNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardNo, other.cardNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSinglePenLimit()).compareTo(other.isSetSinglePenLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSinglePenLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singlePenLimit, other.singlePenLimit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDailyLimit()).compareTo(other.isSetDailyLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDailyLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dailyLimit, other.dailyLimit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMonthlyLimit()).compareTo(other.isSetMonthlyLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMonthlyLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthlyLimit, other.monthlyLimit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSignBankCardLimitCash_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cardNo:");
      if (this.cardNo == null) {
        sb.append("null");
      } else {
        sb.append(this.cardNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("singlePenLimit:");
      if (this.singlePenLimit == null) {
        sb.append("null");
      } else {
        sb.append(this.singlePenLimit);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dailyLimit:");
      if (this.dailyLimit == null) {
        sb.append("null");
      } else {
        sb.append(this.dailyLimit);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("monthlyLimit:");
      if (this.monthlyLimit == null) {
        sb.append("null");
      } else {
        sb.append(this.monthlyLimit);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSignBankCardLimitCash_argsStandardSchemeFactory implements SchemeFactory {
      public updateSignBankCardLimitCash_argsStandardScheme getScheme() {
        return new updateSignBankCardLimitCash_argsStandardScheme();
      }
    }

    private static class updateSignBankCardLimitCash_argsStandardScheme extends StandardScheme<updateSignBankCardLimitCash_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSignBankCardLimitCash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CARD_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cardNo = iprot.readString();
                struct.setCardNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SINGLE_PEN_LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.singlePenLimit = iprot.readString();
                struct.setSinglePenLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DAILY_LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dailyLimit = iprot.readString();
                struct.setDailyLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MONTHLY_LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.monthlyLimit = iprot.readString();
                struct.setMonthlyLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSignBankCardLimitCash_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.cardNo != null) {
          oprot.writeFieldBegin(CARD_NO_FIELD_DESC);
          oprot.writeString(struct.cardNo);
          oprot.writeFieldEnd();
        }
        if (struct.singlePenLimit != null) {
          oprot.writeFieldBegin(SINGLE_PEN_LIMIT_FIELD_DESC);
          oprot.writeString(struct.singlePenLimit);
          oprot.writeFieldEnd();
        }
        if (struct.dailyLimit != null) {
          oprot.writeFieldBegin(DAILY_LIMIT_FIELD_DESC);
          oprot.writeString(struct.dailyLimit);
          oprot.writeFieldEnd();
        }
        if (struct.monthlyLimit != null) {
          oprot.writeFieldBegin(MONTHLY_LIMIT_FIELD_DESC);
          oprot.writeString(struct.monthlyLimit);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSignBankCardLimitCash_argsTupleSchemeFactory implements SchemeFactory {
      public updateSignBankCardLimitCash_argsTupleScheme getScheme() {
        return new updateSignBankCardLimitCash_argsTupleScheme();
      }
    }

    private static class updateSignBankCardLimitCash_argsTupleScheme extends TupleScheme<updateSignBankCardLimitCash_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSignBankCardLimitCash_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetCardNo()) {
          optionals.set(1);
        }
        if (struct.isSetSinglePenLimit()) {
          optionals.set(2);
        }
        if (struct.isSetDailyLimit()) {
          optionals.set(3);
        }
        if (struct.isSetMonthlyLimit()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetCardNo()) {
          oprot.writeString(struct.cardNo);
        }
        if (struct.isSetSinglePenLimit()) {
          oprot.writeString(struct.singlePenLimit);
        }
        if (struct.isSetDailyLimit()) {
          oprot.writeString(struct.dailyLimit);
        }
        if (struct.isSetMonthlyLimit()) {
          oprot.writeString(struct.monthlyLimit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSignBankCardLimitCash_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cardNo = iprot.readString();
          struct.setCardNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.singlePenLimit = iprot.readString();
          struct.setSinglePenLimitIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dailyLimit = iprot.readString();
          struct.setDailyLimitIsSet(true);
        }
        if (incoming.get(4)) {
          struct.monthlyLimit = iprot.readString();
          struct.setMonthlyLimitIsSet(true);
        }
      }
    }

  }

  public static class updateSignBankCardLimitCash_result implements org.apache.thrift.TBase<updateSignBankCardLimitCash_result, updateSignBankCardLimitCash_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSignBankCardLimitCash_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSignBankCardLimitCash_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateSignBankCardLimitCash_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateSignBankCardLimitCash_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSignBankCardLimitCash_result.class, metaDataMap);
    }

    public updateSignBankCardLimitCash_result() {
    }

    public updateSignBankCardLimitCash_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSignBankCardLimitCash_result(updateSignBankCardLimitCash_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public updateSignBankCardLimitCash_result deepCopy() {
      return new updateSignBankCardLimitCash_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public updateSignBankCardLimitCash_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSignBankCardLimitCash_result)
        return this.equals((updateSignBankCardLimitCash_result)that);
      return false;
    }

    public boolean equals(updateSignBankCardLimitCash_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateSignBankCardLimitCash_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateSignBankCardLimitCash_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSignBankCardLimitCash_resultStandardSchemeFactory implements SchemeFactory {
      public updateSignBankCardLimitCash_resultStandardScheme getScheme() {
        return new updateSignBankCardLimitCash_resultStandardScheme();
      }
    }

    private static class updateSignBankCardLimitCash_resultStandardScheme extends StandardScheme<updateSignBankCardLimitCash_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSignBankCardLimitCash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSignBankCardLimitCash_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSignBankCardLimitCash_resultTupleSchemeFactory implements SchemeFactory {
      public updateSignBankCardLimitCash_resultTupleScheme getScheme() {
        return new updateSignBankCardLimitCash_resultTupleScheme();
      }
    }

    private static class updateSignBankCardLimitCash_resultTupleScheme extends TupleScheme<updateSignBankCardLimitCash_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSignBankCardLimitCash_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSignBankCardLimitCash_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setMerchantBankWhiteList_args implements org.apache.thrift.TBase<setMerchantBankWhiteList_args, setMerchantBankWhiteList_args._Fields>, java.io.Serializable, Cloneable, Comparable<setMerchantBankWhiteList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setMerchantBankWhiteList_args");

    private static final org.apache.thrift.protocol.TField MERCHANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MERCHANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("merchantName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACCOUNT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("accountNo", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField OPTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("optionType", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField ACCOUNT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("accountName", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setMerchantBankWhiteList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setMerchantBankWhiteList_argsTupleSchemeFactory());
    }

    public String merchantId; // required
    public String merchantName; // required
    public String accountNo; // required
    public String mac; // required
    public String optionType; // required
    public String clientId; // required
    public String accountName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MERCHANT_ID((short)1, "merchantId"),
      MERCHANT_NAME((short)2, "merchantName"),
      ACCOUNT_NO((short)3, "accountNo"),
      MAC((short)4, "mac"),
      OPTION_TYPE((short)5, "optionType"),
      CLIENT_ID((short)6, "clientId"),
      ACCOUNT_NAME((short)7, "accountName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MERCHANT_ID
            return MERCHANT_ID;
          case 2: // MERCHANT_NAME
            return MERCHANT_NAME;
          case 3: // ACCOUNT_NO
            return ACCOUNT_NO;
          case 4: // MAC
            return MAC;
          case 5: // OPTION_TYPE
            return OPTION_TYPE;
          case 6: // CLIENT_ID
            return CLIENT_ID;
          case 7: // ACCOUNT_NAME
            return ACCOUNT_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MERCHANT_ID, new org.apache.thrift.meta_data.FieldMetaData("merchantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MERCHANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("merchantName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCOUNT_NO, new org.apache.thrift.meta_data.FieldMetaData("accountNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("optionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCOUNT_NAME, new org.apache.thrift.meta_data.FieldMetaData("accountName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setMerchantBankWhiteList_args.class, metaDataMap);
    }

    public setMerchantBankWhiteList_args() {
    }

    public setMerchantBankWhiteList_args(
      String merchantId,
      String merchantName,
      String accountNo,
      String mac,
      String optionType,
      String clientId,
      String accountName)
    {
      this();
      this.merchantId = merchantId;
      this.merchantName = merchantName;
      this.accountNo = accountNo;
      this.mac = mac;
      this.optionType = optionType;
      this.clientId = clientId;
      this.accountName = accountName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setMerchantBankWhiteList_args(setMerchantBankWhiteList_args other) {
      if (other.isSetMerchantId()) {
        this.merchantId = other.merchantId;
      }
      if (other.isSetMerchantName()) {
        this.merchantName = other.merchantName;
      }
      if (other.isSetAccountNo()) {
        this.accountNo = other.accountNo;
      }
      if (other.isSetMac()) {
        this.mac = other.mac;
      }
      if (other.isSetOptionType()) {
        this.optionType = other.optionType;
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetAccountName()) {
        this.accountName = other.accountName;
      }
    }

    public setMerchantBankWhiteList_args deepCopy() {
      return new setMerchantBankWhiteList_args(this);
    }

    @Override
    public void clear() {
      this.merchantId = null;
      this.merchantName = null;
      this.accountNo = null;
      this.mac = null;
      this.optionType = null;
      this.clientId = null;
      this.accountName = null;
    }

    public String getMerchantId() {
      return this.merchantId;
    }

    public setMerchantBankWhiteList_args setMerchantId(String merchantId) {
      this.merchantId = merchantId;
      return this;
    }

    public void unsetMerchantId() {
      this.merchantId = null;
    }

    /** Returns true if field merchantId is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantId() {
      return this.merchantId != null;
    }

    public void setMerchantIdIsSet(boolean value) {
      if (!value) {
        this.merchantId = null;
      }
    }

    public String getMerchantName() {
      return this.merchantName;
    }

    public setMerchantBankWhiteList_args setMerchantName(String merchantName) {
      this.merchantName = merchantName;
      return this;
    }

    public void unsetMerchantName() {
      this.merchantName = null;
    }

    /** Returns true if field merchantName is set (has been assigned a value) and false otherwise */
    public boolean isSetMerchantName() {
      return this.merchantName != null;
    }

    public void setMerchantNameIsSet(boolean value) {
      if (!value) {
        this.merchantName = null;
      }
    }

    public String getAccountNo() {
      return this.accountNo;
    }

    public setMerchantBankWhiteList_args setAccountNo(String accountNo) {
      this.accountNo = accountNo;
      return this;
    }

    public void unsetAccountNo() {
      this.accountNo = null;
    }

    /** Returns true if field accountNo is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountNo() {
      return this.accountNo != null;
    }

    public void setAccountNoIsSet(boolean value) {
      if (!value) {
        this.accountNo = null;
      }
    }

    public String getMac() {
      return this.mac;
    }

    public setMerchantBankWhiteList_args setMac(String mac) {
      this.mac = mac;
      return this;
    }

    public void unsetMac() {
      this.mac = null;
    }

    /** Returns true if field mac is set (has been assigned a value) and false otherwise */
    public boolean isSetMac() {
      return this.mac != null;
    }

    public void setMacIsSet(boolean value) {
      if (!value) {
        this.mac = null;
      }
    }

    public String getOptionType() {
      return this.optionType;
    }

    public setMerchantBankWhiteList_args setOptionType(String optionType) {
      this.optionType = optionType;
      return this;
    }

    public void unsetOptionType() {
      this.optionType = null;
    }

    /** Returns true if field optionType is set (has been assigned a value) and false otherwise */
    public boolean isSetOptionType() {
      return this.optionType != null;
    }

    public void setOptionTypeIsSet(boolean value) {
      if (!value) {
        this.optionType = null;
      }
    }

    public String getClientId() {
      return this.clientId;
    }

    public setMerchantBankWhiteList_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getAccountName() {
      return this.accountName;
    }

    public setMerchantBankWhiteList_args setAccountName(String accountName) {
      this.accountName = accountName;
      return this;
    }

    public void unsetAccountName() {
      this.accountName = null;
    }

    /** Returns true if field accountName is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountName() {
      return this.accountName != null;
    }

    public void setAccountNameIsSet(boolean value) {
      if (!value) {
        this.accountName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MERCHANT_ID:
        if (value == null) {
          unsetMerchantId();
        } else {
          setMerchantId((String)value);
        }
        break;

      case MERCHANT_NAME:
        if (value == null) {
          unsetMerchantName();
        } else {
          setMerchantName((String)value);
        }
        break;

      case ACCOUNT_NO:
        if (value == null) {
          unsetAccountNo();
        } else {
          setAccountNo((String)value);
        }
        break;

      case MAC:
        if (value == null) {
          unsetMac();
        } else {
          setMac((String)value);
        }
        break;

      case OPTION_TYPE:
        if (value == null) {
          unsetOptionType();
        } else {
          setOptionType((String)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ACCOUNT_NAME:
        if (value == null) {
          unsetAccountName();
        } else {
          setAccountName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MERCHANT_ID:
        return getMerchantId();

      case MERCHANT_NAME:
        return getMerchantName();

      case ACCOUNT_NO:
        return getAccountNo();

      case MAC:
        return getMac();

      case OPTION_TYPE:
        return getOptionType();

      case CLIENT_ID:
        return getClientId();

      case ACCOUNT_NAME:
        return getAccountName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MERCHANT_ID:
        return isSetMerchantId();
      case MERCHANT_NAME:
        return isSetMerchantName();
      case ACCOUNT_NO:
        return isSetAccountNo();
      case MAC:
        return isSetMac();
      case OPTION_TYPE:
        return isSetOptionType();
      case CLIENT_ID:
        return isSetClientId();
      case ACCOUNT_NAME:
        return isSetAccountName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setMerchantBankWhiteList_args)
        return this.equals((setMerchantBankWhiteList_args)that);
      return false;
    }

    public boolean equals(setMerchantBankWhiteList_args that) {
      if (that == null)
        return false;

      boolean this_present_merchantId = true && this.isSetMerchantId();
      boolean that_present_merchantId = true && that.isSetMerchantId();
      if (this_present_merchantId || that_present_merchantId) {
        if (!(this_present_merchantId && that_present_merchantId))
          return false;
        if (!this.merchantId.equals(that.merchantId))
          return false;
      }

      boolean this_present_merchantName = true && this.isSetMerchantName();
      boolean that_present_merchantName = true && that.isSetMerchantName();
      if (this_present_merchantName || that_present_merchantName) {
        if (!(this_present_merchantName && that_present_merchantName))
          return false;
        if (!this.merchantName.equals(that.merchantName))
          return false;
      }

      boolean this_present_accountNo = true && this.isSetAccountNo();
      boolean that_present_accountNo = true && that.isSetAccountNo();
      if (this_present_accountNo || that_present_accountNo) {
        if (!(this_present_accountNo && that_present_accountNo))
          return false;
        if (!this.accountNo.equals(that.accountNo))
          return false;
      }

      boolean this_present_mac = true && this.isSetMac();
      boolean that_present_mac = true && that.isSetMac();
      if (this_present_mac || that_present_mac) {
        if (!(this_present_mac && that_present_mac))
          return false;
        if (!this.mac.equals(that.mac))
          return false;
      }

      boolean this_present_optionType = true && this.isSetOptionType();
      boolean that_present_optionType = true && that.isSetOptionType();
      if (this_present_optionType || that_present_optionType) {
        if (!(this_present_optionType && that_present_optionType))
          return false;
        if (!this.optionType.equals(that.optionType))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_accountName = true && this.isSetAccountName();
      boolean that_present_accountName = true && that.isSetAccountName();
      if (this_present_accountName || that_present_accountName) {
        if (!(this_present_accountName && that_present_accountName))
          return false;
        if (!this.accountName.equals(that.accountName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_merchantId = true && (isSetMerchantId());
      list.add(present_merchantId);
      if (present_merchantId)
        list.add(merchantId);

      boolean present_merchantName = true && (isSetMerchantName());
      list.add(present_merchantName);
      if (present_merchantName)
        list.add(merchantName);

      boolean present_accountNo = true && (isSetAccountNo());
      list.add(present_accountNo);
      if (present_accountNo)
        list.add(accountNo);

      boolean present_mac = true && (isSetMac());
      list.add(present_mac);
      if (present_mac)
        list.add(mac);

      boolean present_optionType = true && (isSetOptionType());
      list.add(present_optionType);
      if (present_optionType)
        list.add(optionType);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_accountName = true && (isSetAccountName());
      list.add(present_accountName);
      if (present_accountName)
        list.add(accountName);

      return list.hashCode();
    }

    @Override
    public int compareTo(setMerchantBankWhiteList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMerchantId()).compareTo(other.isSetMerchantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantId, other.merchantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMerchantName()).compareTo(other.isSetMerchantName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMerchantName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merchantName, other.merchantName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccountNo()).compareTo(other.isSetAccountNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountNo, other.accountNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMac()).compareTo(other.isSetMac());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMac()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, other.mac);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOptionType()).compareTo(other.isSetOptionType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptionType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionType, other.optionType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccountName()).compareTo(other.isSetAccountName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountName, other.accountName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setMerchantBankWhiteList_args(");
      boolean first = true;

      sb.append("merchantId:");
      if (this.merchantId == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("merchantName:");
      if (this.merchantName == null) {
        sb.append("null");
      } else {
        sb.append(this.merchantName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accountNo:");
      if (this.accountNo == null) {
        sb.append("null");
      } else {
        sb.append(this.accountNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mac:");
      if (this.mac == null) {
        sb.append("null");
      } else {
        sb.append(this.mac);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("optionType:");
      if (this.optionType == null) {
        sb.append("null");
      } else {
        sb.append(this.optionType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accountName:");
      if (this.accountName == null) {
        sb.append("null");
      } else {
        sb.append(this.accountName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setMerchantBankWhiteList_argsStandardSchemeFactory implements SchemeFactory {
      public setMerchantBankWhiteList_argsStandardScheme getScheme() {
        return new setMerchantBankWhiteList_argsStandardScheme();
      }
    }

    private static class setMerchantBankWhiteList_argsStandardScheme extends StandardScheme<setMerchantBankWhiteList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setMerchantBankWhiteList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MERCHANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantId = iprot.readString();
                struct.setMerchantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MERCHANT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.merchantName = iprot.readString();
                struct.setMerchantNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCOUNT_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountNo = iprot.readString();
                struct.setAccountNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MAC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mac = iprot.readString();
                struct.setMacIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OPTION_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.optionType = iprot.readString();
                struct.setOptionTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ACCOUNT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountName = iprot.readString();
                struct.setAccountNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setMerchantBankWhiteList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.merchantId != null) {
          oprot.writeFieldBegin(MERCHANT_ID_FIELD_DESC);
          oprot.writeString(struct.merchantId);
          oprot.writeFieldEnd();
        }
        if (struct.merchantName != null) {
          oprot.writeFieldBegin(MERCHANT_NAME_FIELD_DESC);
          oprot.writeString(struct.merchantName);
          oprot.writeFieldEnd();
        }
        if (struct.accountNo != null) {
          oprot.writeFieldBegin(ACCOUNT_NO_FIELD_DESC);
          oprot.writeString(struct.accountNo);
          oprot.writeFieldEnd();
        }
        if (struct.mac != null) {
          oprot.writeFieldBegin(MAC_FIELD_DESC);
          oprot.writeString(struct.mac);
          oprot.writeFieldEnd();
        }
        if (struct.optionType != null) {
          oprot.writeFieldBegin(OPTION_TYPE_FIELD_DESC);
          oprot.writeString(struct.optionType);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.accountName != null) {
          oprot.writeFieldBegin(ACCOUNT_NAME_FIELD_DESC);
          oprot.writeString(struct.accountName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setMerchantBankWhiteList_argsTupleSchemeFactory implements SchemeFactory {
      public setMerchantBankWhiteList_argsTupleScheme getScheme() {
        return new setMerchantBankWhiteList_argsTupleScheme();
      }
    }

    private static class setMerchantBankWhiteList_argsTupleScheme extends TupleScheme<setMerchantBankWhiteList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setMerchantBankWhiteList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMerchantId()) {
          optionals.set(0);
        }
        if (struct.isSetMerchantName()) {
          optionals.set(1);
        }
        if (struct.isSetAccountNo()) {
          optionals.set(2);
        }
        if (struct.isSetMac()) {
          optionals.set(3);
        }
        if (struct.isSetOptionType()) {
          optionals.set(4);
        }
        if (struct.isSetClientId()) {
          optionals.set(5);
        }
        if (struct.isSetAccountName()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetMerchantId()) {
          oprot.writeString(struct.merchantId);
        }
        if (struct.isSetMerchantName()) {
          oprot.writeString(struct.merchantName);
        }
        if (struct.isSetAccountNo()) {
          oprot.writeString(struct.accountNo);
        }
        if (struct.isSetMac()) {
          oprot.writeString(struct.mac);
        }
        if (struct.isSetOptionType()) {
          oprot.writeString(struct.optionType);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetAccountName()) {
          oprot.writeString(struct.accountName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setMerchantBankWhiteList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.merchantId = iprot.readString();
          struct.setMerchantIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.merchantName = iprot.readString();
          struct.setMerchantNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.accountNo = iprot.readString();
          struct.setAccountNoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.mac = iprot.readString();
          struct.setMacIsSet(true);
        }
        if (incoming.get(4)) {
          struct.optionType = iprot.readString();
          struct.setOptionTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(6)) {
          struct.accountName = iprot.readString();
          struct.setAccountNameIsSet(true);
        }
      }
    }

  }

  public static class setMerchantBankWhiteList_result implements org.apache.thrift.TBase<setMerchantBankWhiteList_result, setMerchantBankWhiteList_result._Fields>, java.io.Serializable, Cloneable, Comparable<setMerchantBankWhiteList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setMerchantBankWhiteList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setMerchantBankWhiteList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setMerchantBankWhiteList_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setMerchantBankWhiteList_result.class, metaDataMap);
    }

    public setMerchantBankWhiteList_result() {
    }

    public setMerchantBankWhiteList_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setMerchantBankWhiteList_result(setMerchantBankWhiteList_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public setMerchantBankWhiteList_result deepCopy() {
      return new setMerchantBankWhiteList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public setMerchantBankWhiteList_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setMerchantBankWhiteList_result)
        return this.equals((setMerchantBankWhiteList_result)that);
      return false;
    }

    public boolean equals(setMerchantBankWhiteList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setMerchantBankWhiteList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setMerchantBankWhiteList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setMerchantBankWhiteList_resultStandardSchemeFactory implements SchemeFactory {
      public setMerchantBankWhiteList_resultStandardScheme getScheme() {
        return new setMerchantBankWhiteList_resultStandardScheme();
      }
    }

    private static class setMerchantBankWhiteList_resultStandardScheme extends StandardScheme<setMerchantBankWhiteList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setMerchantBankWhiteList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setMerchantBankWhiteList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setMerchantBankWhiteList_resultTupleSchemeFactory implements SchemeFactory {
      public setMerchantBankWhiteList_resultTupleScheme getScheme() {
        return new setMerchantBankWhiteList_resultTupleScheme();
      }
    }

    private static class setMerchantBankWhiteList_resultTupleScheme extends TupleScheme<setMerchantBankWhiteList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setMerchantBankWhiteList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setMerchantBankWhiteList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class synchBankLabel_args implements org.apache.thrift.TBase<synchBankLabel_args, synchBankLabel_args._Fields>, java.io.Serializable, Cloneable, Comparable<synchBankLabel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("synchBankLabel_args");

    private static final org.apache.thrift.protocol.TField BANK_LABEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankLabelID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BANK_LABEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankLabelName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new synchBankLabel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new synchBankLabel_argsTupleSchemeFactory());
    }

    public String bankLabelID; // required
    public String bankLabelName; // required
    public int state; // required
    public String clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BANK_LABEL_ID((short)1, "bankLabelID"),
      BANK_LABEL_NAME((short)2, "bankLabelName"),
      STATE((short)3, "state"),
      CLIENT_ID((short)4, "clientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BANK_LABEL_ID
            return BANK_LABEL_ID;
          case 2: // BANK_LABEL_NAME
            return BANK_LABEL_NAME;
          case 3: // STATE
            return STATE;
          case 4: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BANK_LABEL_ID, new org.apache.thrift.meta_data.FieldMetaData("bankLabelID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BANK_LABEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankLabelName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(synchBankLabel_args.class, metaDataMap);
    }

    public synchBankLabel_args() {
    }

    public synchBankLabel_args(
      String bankLabelID,
      String bankLabelName,
      int state,
      String clientId)
    {
      this();
      this.bankLabelID = bankLabelID;
      this.bankLabelName = bankLabelName;
      this.state = state;
      setStateIsSet(true);
      this.clientId = clientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public synchBankLabel_args(synchBankLabel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBankLabelID()) {
        this.bankLabelID = other.bankLabelID;
      }
      if (other.isSetBankLabelName()) {
        this.bankLabelName = other.bankLabelName;
      }
      this.state = other.state;
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
    }

    public synchBankLabel_args deepCopy() {
      return new synchBankLabel_args(this);
    }

    @Override
    public void clear() {
      this.bankLabelID = null;
      this.bankLabelName = null;
      setStateIsSet(false);
      this.state = 0;
      this.clientId = null;
    }

    public String getBankLabelID() {
      return this.bankLabelID;
    }

    public synchBankLabel_args setBankLabelID(String bankLabelID) {
      this.bankLabelID = bankLabelID;
      return this;
    }

    public void unsetBankLabelID() {
      this.bankLabelID = null;
    }

    /** Returns true if field bankLabelID is set (has been assigned a value) and false otherwise */
    public boolean isSetBankLabelID() {
      return this.bankLabelID != null;
    }

    public void setBankLabelIDIsSet(boolean value) {
      if (!value) {
        this.bankLabelID = null;
      }
    }

    public String getBankLabelName() {
      return this.bankLabelName;
    }

    public synchBankLabel_args setBankLabelName(String bankLabelName) {
      this.bankLabelName = bankLabelName;
      return this;
    }

    public void unsetBankLabelName() {
      this.bankLabelName = null;
    }

    /** Returns true if field bankLabelName is set (has been assigned a value) and false otherwise */
    public boolean isSetBankLabelName() {
      return this.bankLabelName != null;
    }

    public void setBankLabelNameIsSet(boolean value) {
      if (!value) {
        this.bankLabelName = null;
      }
    }

    public int getState() {
      return this.state;
    }

    public synchBankLabel_args setState(int state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public String getClientId() {
      return this.clientId;
    }

    public synchBankLabel_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BANK_LABEL_ID:
        if (value == null) {
          unsetBankLabelID();
        } else {
          setBankLabelID((String)value);
        }
        break;

      case BANK_LABEL_NAME:
        if (value == null) {
          unsetBankLabelName();
        } else {
          setBankLabelName((String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((Integer)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BANK_LABEL_ID:
        return getBankLabelID();

      case BANK_LABEL_NAME:
        return getBankLabelName();

      case STATE:
        return Integer.valueOf(getState());

      case CLIENT_ID:
        return getClientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BANK_LABEL_ID:
        return isSetBankLabelID();
      case BANK_LABEL_NAME:
        return isSetBankLabelName();
      case STATE:
        return isSetState();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof synchBankLabel_args)
        return this.equals((synchBankLabel_args)that);
      return false;
    }

    public boolean equals(synchBankLabel_args that) {
      if (that == null)
        return false;

      boolean this_present_bankLabelID = true && this.isSetBankLabelID();
      boolean that_present_bankLabelID = true && that.isSetBankLabelID();
      if (this_present_bankLabelID || that_present_bankLabelID) {
        if (!(this_present_bankLabelID && that_present_bankLabelID))
          return false;
        if (!this.bankLabelID.equals(that.bankLabelID))
          return false;
      }

      boolean this_present_bankLabelName = true && this.isSetBankLabelName();
      boolean that_present_bankLabelName = true && that.isSetBankLabelName();
      if (this_present_bankLabelName || that_present_bankLabelName) {
        if (!(this_present_bankLabelName && that_present_bankLabelName))
          return false;
        if (!this.bankLabelName.equals(that.bankLabelName))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bankLabelID = true && (isSetBankLabelID());
      list.add(present_bankLabelID);
      if (present_bankLabelID)
        list.add(bankLabelID);

      boolean present_bankLabelName = true && (isSetBankLabelName());
      list.add(present_bankLabelName);
      if (present_bankLabelName)
        list.add(bankLabelName);

      boolean present_state = true;
      list.add(present_state);
      if (present_state)
        list.add(state);

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(synchBankLabel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBankLabelID()).compareTo(other.isSetBankLabelID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankLabelID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankLabelID, other.bankLabelID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBankLabelName()).compareTo(other.isSetBankLabelName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBankLabelName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankLabelName, other.bankLabelName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("synchBankLabel_args(");
      boolean first = true;

      sb.append("bankLabelID:");
      if (this.bankLabelID == null) {
        sb.append("null");
      } else {
        sb.append(this.bankLabelID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bankLabelName:");
      if (this.bankLabelName == null) {
        sb.append("null");
      } else {
        sb.append(this.bankLabelName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class synchBankLabel_argsStandardSchemeFactory implements SchemeFactory {
      public synchBankLabel_argsStandardScheme getScheme() {
        return new synchBankLabel_argsStandardScheme();
      }
    }

    private static class synchBankLabel_argsStandardScheme extends StandardScheme<synchBankLabel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, synchBankLabel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BANK_LABEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankLabelID = iprot.readString();
                struct.setBankLabelIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BANK_LABEL_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bankLabelName = iprot.readString();
                struct.setBankLabelNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = iprot.readI32();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, synchBankLabel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bankLabelID != null) {
          oprot.writeFieldBegin(BANK_LABEL_ID_FIELD_DESC);
          oprot.writeString(struct.bankLabelID);
          oprot.writeFieldEnd();
        }
        if (struct.bankLabelName != null) {
          oprot.writeFieldBegin(BANK_LABEL_NAME_FIELD_DESC);
          oprot.writeString(struct.bankLabelName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class synchBankLabel_argsTupleSchemeFactory implements SchemeFactory {
      public synchBankLabel_argsTupleScheme getScheme() {
        return new synchBankLabel_argsTupleScheme();
      }
    }

    private static class synchBankLabel_argsTupleScheme extends TupleScheme<synchBankLabel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, synchBankLabel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBankLabelID()) {
          optionals.set(0);
        }
        if (struct.isSetBankLabelName()) {
          optionals.set(1);
        }
        if (struct.isSetState()) {
          optionals.set(2);
        }
        if (struct.isSetClientId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBankLabelID()) {
          oprot.writeString(struct.bankLabelID);
        }
        if (struct.isSetBankLabelName()) {
          oprot.writeString(struct.bankLabelName);
        }
        if (struct.isSetState()) {
          oprot.writeI32(struct.state);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, synchBankLabel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bankLabelID = iprot.readString();
          struct.setBankLabelIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bankLabelName = iprot.readString();
          struct.setBankLabelNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.state = iprot.readI32();
          struct.setStateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
      }
    }

  }

  public static class synchBankLabel_result implements org.apache.thrift.TBase<synchBankLabel_result, synchBankLabel_result._Fields>, java.io.Serializable, Cloneable, Comparable<synchBankLabel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("synchBankLabel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new synchBankLabel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new synchBankLabel_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(synchBankLabel_result.class, metaDataMap);
    }

    public synchBankLabel_result() {
    }

    public synchBankLabel_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public synchBankLabel_result(synchBankLabel_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public synchBankLabel_result deepCopy() {
      return new synchBankLabel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public synchBankLabel_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof synchBankLabel_result)
        return this.equals((synchBankLabel_result)that);
      return false;
    }

    public boolean equals(synchBankLabel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(synchBankLabel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("synchBankLabel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class synchBankLabel_resultStandardSchemeFactory implements SchemeFactory {
      public synchBankLabel_resultStandardScheme getScheme() {
        return new synchBankLabel_resultStandardScheme();
      }
    }

    private static class synchBankLabel_resultStandardScheme extends StandardScheme<synchBankLabel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, synchBankLabel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, synchBankLabel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class synchBankLabel_resultTupleSchemeFactory implements SchemeFactory {
      public synchBankLabel_resultTupleScheme getScheme() {
        return new synchBankLabel_resultTupleScheme();
      }
    }

    private static class synchBankLabel_resultTupleScheme extends TupleScheme<synchBankLabel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, synchBankLabel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, synchBankLabel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class auditStatusQuery_args implements org.apache.thrift.TBase<auditStatusQuery_args, auditStatusQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<auditStatusQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("auditStatusQuery_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCOUNT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("accountName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACCOUNT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("accountNo", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new auditStatusQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new auditStatusQuery_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String accountName; // required
    public String accountNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      ACCOUNT_NAME((short)2, "accountName"),
      ACCOUNT_NO((short)3, "accountNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ACCOUNT_NAME
            return ACCOUNT_NAME;
          case 3: // ACCOUNT_NO
            return ACCOUNT_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCOUNT_NAME, new org.apache.thrift.meta_data.FieldMetaData("accountName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCOUNT_NO, new org.apache.thrift.meta_data.FieldMetaData("accountNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(auditStatusQuery_args.class, metaDataMap);
    }

    public auditStatusQuery_args() {
    }

    public auditStatusQuery_args(
      String clientId,
      String accountName,
      String accountNo)
    {
      this();
      this.clientId = clientId;
      this.accountName = accountName;
      this.accountNo = accountNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public auditStatusQuery_args(auditStatusQuery_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetAccountName()) {
        this.accountName = other.accountName;
      }
      if (other.isSetAccountNo()) {
        this.accountNo = other.accountNo;
      }
    }

    public auditStatusQuery_args deepCopy() {
      return new auditStatusQuery_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.accountName = null;
      this.accountNo = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public auditStatusQuery_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getAccountName() {
      return this.accountName;
    }

    public auditStatusQuery_args setAccountName(String accountName) {
      this.accountName = accountName;
      return this;
    }

    public void unsetAccountName() {
      this.accountName = null;
    }

    /** Returns true if field accountName is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountName() {
      return this.accountName != null;
    }

    public void setAccountNameIsSet(boolean value) {
      if (!value) {
        this.accountName = null;
      }
    }

    public String getAccountNo() {
      return this.accountNo;
    }

    public auditStatusQuery_args setAccountNo(String accountNo) {
      this.accountNo = accountNo;
      return this;
    }

    public void unsetAccountNo() {
      this.accountNo = null;
    }

    /** Returns true if field accountNo is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountNo() {
      return this.accountNo != null;
    }

    public void setAccountNoIsSet(boolean value) {
      if (!value) {
        this.accountNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ACCOUNT_NAME:
        if (value == null) {
          unsetAccountName();
        } else {
          setAccountName((String)value);
        }
        break;

      case ACCOUNT_NO:
        if (value == null) {
          unsetAccountNo();
        } else {
          setAccountNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case ACCOUNT_NAME:
        return getAccountName();

      case ACCOUNT_NO:
        return getAccountNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case ACCOUNT_NAME:
        return isSetAccountName();
      case ACCOUNT_NO:
        return isSetAccountNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof auditStatusQuery_args)
        return this.equals((auditStatusQuery_args)that);
      return false;
    }

    public boolean equals(auditStatusQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_accountName = true && this.isSetAccountName();
      boolean that_present_accountName = true && that.isSetAccountName();
      if (this_present_accountName || that_present_accountName) {
        if (!(this_present_accountName && that_present_accountName))
          return false;
        if (!this.accountName.equals(that.accountName))
          return false;
      }

      boolean this_present_accountNo = true && this.isSetAccountNo();
      boolean that_present_accountNo = true && that.isSetAccountNo();
      if (this_present_accountNo || that_present_accountNo) {
        if (!(this_present_accountNo && that_present_accountNo))
          return false;
        if (!this.accountNo.equals(that.accountNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_accountName = true && (isSetAccountName());
      list.add(present_accountName);
      if (present_accountName)
        list.add(accountName);

      boolean present_accountNo = true && (isSetAccountNo());
      list.add(present_accountNo);
      if (present_accountNo)
        list.add(accountNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(auditStatusQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccountName()).compareTo(other.isSetAccountName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountName, other.accountName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccountNo()).compareTo(other.isSetAccountNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountNo, other.accountNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("auditStatusQuery_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accountName:");
      if (this.accountName == null) {
        sb.append("null");
      } else {
        sb.append(this.accountName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accountNo:");
      if (this.accountNo == null) {
        sb.append("null");
      } else {
        sb.append(this.accountNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class auditStatusQuery_argsStandardSchemeFactory implements SchemeFactory {
      public auditStatusQuery_argsStandardScheme getScheme() {
        return new auditStatusQuery_argsStandardScheme();
      }
    }

    private static class auditStatusQuery_argsStandardScheme extends StandardScheme<auditStatusQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, auditStatusQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCOUNT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountName = iprot.readString();
                struct.setAccountNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCOUNT_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountNo = iprot.readString();
                struct.setAccountNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, auditStatusQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.accountName != null) {
          oprot.writeFieldBegin(ACCOUNT_NAME_FIELD_DESC);
          oprot.writeString(struct.accountName);
          oprot.writeFieldEnd();
        }
        if (struct.accountNo != null) {
          oprot.writeFieldBegin(ACCOUNT_NO_FIELD_DESC);
          oprot.writeString(struct.accountNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class auditStatusQuery_argsTupleSchemeFactory implements SchemeFactory {
      public auditStatusQuery_argsTupleScheme getScheme() {
        return new auditStatusQuery_argsTupleScheme();
      }
    }

    private static class auditStatusQuery_argsTupleScheme extends TupleScheme<auditStatusQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, auditStatusQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetAccountName()) {
          optionals.set(1);
        }
        if (struct.isSetAccountNo()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetAccountName()) {
          oprot.writeString(struct.accountName);
        }
        if (struct.isSetAccountNo()) {
          oprot.writeString(struct.accountNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, auditStatusQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.accountName = iprot.readString();
          struct.setAccountNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.accountNo = iprot.readString();
          struct.setAccountNoIsSet(true);
        }
      }
    }

  }

  public static class auditStatusQuery_result implements org.apache.thrift.TBase<auditStatusQuery_result, auditStatusQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<auditStatusQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("auditStatusQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new auditStatusQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new auditStatusQuery_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(auditStatusQuery_result.class, metaDataMap);
    }

    public auditStatusQuery_result() {
    }

    public auditStatusQuery_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public auditStatusQuery_result(auditStatusQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public auditStatusQuery_result deepCopy() {
      return new auditStatusQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public auditStatusQuery_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof auditStatusQuery_result)
        return this.equals((auditStatusQuery_result)that);
      return false;
    }

    public boolean equals(auditStatusQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(auditStatusQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("auditStatusQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class auditStatusQuery_resultStandardSchemeFactory implements SchemeFactory {
      public auditStatusQuery_resultStandardScheme getScheme() {
        return new auditStatusQuery_resultStandardScheme();
      }
    }

    private static class auditStatusQuery_resultStandardScheme extends StandardScheme<auditStatusQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, auditStatusQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, auditStatusQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class auditStatusQuery_resultTupleSchemeFactory implements SchemeFactory {
      public auditStatusQuery_resultTupleScheme getScheme() {
        return new auditStatusQuery_resultTupleScheme();
      }
    }

    private static class auditStatusQuery_resultTupleScheme extends TupleScheme<auditStatusQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, auditStatusQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, auditStatusQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bankCardAccountCheck_args implements org.apache.thrift.TBase<bankCardAccountCheck_args, bankCardAccountCheck_args._Fields>, java.io.Serializable, Cloneable, Comparable<bankCardAccountCheck_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bankCardAccountCheck_args");

    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACCOUNT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("accountName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACCOUNT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("accountNo", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CERTIFICATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("certificateType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CERTIFICATE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("certificateNo", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bankCardAccountCheck_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bankCardAccountCheck_argsTupleSchemeFactory());
    }

    public String clientId; // required
    public String accountName; // required
    public String accountNo; // required
    public String certificateType; // required
    public String certificateNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_ID((short)1, "clientId"),
      ACCOUNT_NAME((short)2, "accountName"),
      ACCOUNT_NO((short)3, "accountNo"),
      CERTIFICATE_TYPE((short)4, "certificateType"),
      CERTIFICATE_NO((short)5, "certificateNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_ID
            return CLIENT_ID;
          case 2: // ACCOUNT_NAME
            return ACCOUNT_NAME;
          case 3: // ACCOUNT_NO
            return ACCOUNT_NO;
          case 4: // CERTIFICATE_TYPE
            return CERTIFICATE_TYPE;
          case 5: // CERTIFICATE_NO
            return CERTIFICATE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCOUNT_NAME, new org.apache.thrift.meta_data.FieldMetaData("accountName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCOUNT_NO, new org.apache.thrift.meta_data.FieldMetaData("accountNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CERTIFICATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("certificateType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CERTIFICATE_NO, new org.apache.thrift.meta_data.FieldMetaData("certificateNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bankCardAccountCheck_args.class, metaDataMap);
    }

    public bankCardAccountCheck_args() {
    }

    public bankCardAccountCheck_args(
      String clientId,
      String accountName,
      String accountNo,
      String certificateType,
      String certificateNo)
    {
      this();
      this.clientId = clientId;
      this.accountName = accountName;
      this.accountNo = accountNo;
      this.certificateType = certificateType;
      this.certificateNo = certificateNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bankCardAccountCheck_args(bankCardAccountCheck_args other) {
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetAccountName()) {
        this.accountName = other.accountName;
      }
      if (other.isSetAccountNo()) {
        this.accountNo = other.accountNo;
      }
      if (other.isSetCertificateType()) {
        this.certificateType = other.certificateType;
      }
      if (other.isSetCertificateNo()) {
        this.certificateNo = other.certificateNo;
      }
    }

    public bankCardAccountCheck_args deepCopy() {
      return new bankCardAccountCheck_args(this);
    }

    @Override
    public void clear() {
      this.clientId = null;
      this.accountName = null;
      this.accountNo = null;
      this.certificateType = null;
      this.certificateNo = null;
    }

    public String getClientId() {
      return this.clientId;
    }

    public bankCardAccountCheck_args setClientId(String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public String getAccountName() {
      return this.accountName;
    }

    public bankCardAccountCheck_args setAccountName(String accountName) {
      this.accountName = accountName;
      return this;
    }

    public void unsetAccountName() {
      this.accountName = null;
    }

    /** Returns true if field accountName is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountName() {
      return this.accountName != null;
    }

    public void setAccountNameIsSet(boolean value) {
      if (!value) {
        this.accountName = null;
      }
    }

    public String getAccountNo() {
      return this.accountNo;
    }

    public bankCardAccountCheck_args setAccountNo(String accountNo) {
      this.accountNo = accountNo;
      return this;
    }

    public void unsetAccountNo() {
      this.accountNo = null;
    }

    /** Returns true if field accountNo is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountNo() {
      return this.accountNo != null;
    }

    public void setAccountNoIsSet(boolean value) {
      if (!value) {
        this.accountNo = null;
      }
    }

    public String getCertificateType() {
      return this.certificateType;
    }

    public bankCardAccountCheck_args setCertificateType(String certificateType) {
      this.certificateType = certificateType;
      return this;
    }

    public void unsetCertificateType() {
      this.certificateType = null;
    }

    /** Returns true if field certificateType is set (has been assigned a value) and false otherwise */
    public boolean isSetCertificateType() {
      return this.certificateType != null;
    }

    public void setCertificateTypeIsSet(boolean value) {
      if (!value) {
        this.certificateType = null;
      }
    }

    public String getCertificateNo() {
      return this.certificateNo;
    }

    public bankCardAccountCheck_args setCertificateNo(String certificateNo) {
      this.certificateNo = certificateNo;
      return this;
    }

    public void unsetCertificateNo() {
      this.certificateNo = null;
    }

    /** Returns true if field certificateNo is set (has been assigned a value) and false otherwise */
    public boolean isSetCertificateNo() {
      return this.certificateNo != null;
    }

    public void setCertificateNoIsSet(boolean value) {
      if (!value) {
        this.certificateNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((String)value);
        }
        break;

      case ACCOUNT_NAME:
        if (value == null) {
          unsetAccountName();
        } else {
          setAccountName((String)value);
        }
        break;

      case ACCOUNT_NO:
        if (value == null) {
          unsetAccountNo();
        } else {
          setAccountNo((String)value);
        }
        break;

      case CERTIFICATE_TYPE:
        if (value == null) {
          unsetCertificateType();
        } else {
          setCertificateType((String)value);
        }
        break;

      case CERTIFICATE_NO:
        if (value == null) {
          unsetCertificateNo();
        } else {
          setCertificateNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_ID:
        return getClientId();

      case ACCOUNT_NAME:
        return getAccountName();

      case ACCOUNT_NO:
        return getAccountNo();

      case CERTIFICATE_TYPE:
        return getCertificateType();

      case CERTIFICATE_NO:
        return getCertificateNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_ID:
        return isSetClientId();
      case ACCOUNT_NAME:
        return isSetAccountName();
      case ACCOUNT_NO:
        return isSetAccountNo();
      case CERTIFICATE_TYPE:
        return isSetCertificateType();
      case CERTIFICATE_NO:
        return isSetCertificateNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bankCardAccountCheck_args)
        return this.equals((bankCardAccountCheck_args)that);
      return false;
    }

    public boolean equals(bankCardAccountCheck_args that) {
      if (that == null)
        return false;

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_accountName = true && this.isSetAccountName();
      boolean that_present_accountName = true && that.isSetAccountName();
      if (this_present_accountName || that_present_accountName) {
        if (!(this_present_accountName && that_present_accountName))
          return false;
        if (!this.accountName.equals(that.accountName))
          return false;
      }

      boolean this_present_accountNo = true && this.isSetAccountNo();
      boolean that_present_accountNo = true && that.isSetAccountNo();
      if (this_present_accountNo || that_present_accountNo) {
        if (!(this_present_accountNo && that_present_accountNo))
          return false;
        if (!this.accountNo.equals(that.accountNo))
          return false;
      }

      boolean this_present_certificateType = true && this.isSetCertificateType();
      boolean that_present_certificateType = true && that.isSetCertificateType();
      if (this_present_certificateType || that_present_certificateType) {
        if (!(this_present_certificateType && that_present_certificateType))
          return false;
        if (!this.certificateType.equals(that.certificateType))
          return false;
      }

      boolean this_present_certificateNo = true && this.isSetCertificateNo();
      boolean that_present_certificateNo = true && that.isSetCertificateNo();
      if (this_present_certificateNo || that_present_certificateNo) {
        if (!(this_present_certificateNo && that_present_certificateNo))
          return false;
        if (!this.certificateNo.equals(that.certificateNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_clientId = true && (isSetClientId());
      list.add(present_clientId);
      if (present_clientId)
        list.add(clientId);

      boolean present_accountName = true && (isSetAccountName());
      list.add(present_accountName);
      if (present_accountName)
        list.add(accountName);

      boolean present_accountNo = true && (isSetAccountNo());
      list.add(present_accountNo);
      if (present_accountNo)
        list.add(accountNo);

      boolean present_certificateType = true && (isSetCertificateType());
      list.add(present_certificateType);
      if (present_certificateType)
        list.add(certificateType);

      boolean present_certificateNo = true && (isSetCertificateNo());
      list.add(present_certificateNo);
      if (present_certificateNo)
        list.add(certificateNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(bankCardAccountCheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccountName()).compareTo(other.isSetAccountName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountName, other.accountName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccountNo()).compareTo(other.isSetAccountNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountNo, other.accountNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCertificateType()).compareTo(other.isSetCertificateType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCertificateType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certificateType, other.certificateType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCertificateNo()).compareTo(other.isSetCertificateNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCertificateNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certificateNo, other.certificateNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bankCardAccountCheck_args(");
      boolean first = true;

      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accountName:");
      if (this.accountName == null) {
        sb.append("null");
      } else {
        sb.append(this.accountName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accountNo:");
      if (this.accountNo == null) {
        sb.append("null");
      } else {
        sb.append(this.accountNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("certificateType:");
      if (this.certificateType == null) {
        sb.append("null");
      } else {
        sb.append(this.certificateType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("certificateNo:");
      if (this.certificateNo == null) {
        sb.append("null");
      } else {
        sb.append(this.certificateNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bankCardAccountCheck_argsStandardSchemeFactory implements SchemeFactory {
      public bankCardAccountCheck_argsStandardScheme getScheme() {
        return new bankCardAccountCheck_argsStandardScheme();
      }
    }

    private static class bankCardAccountCheck_argsStandardScheme extends StandardScheme<bankCardAccountCheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bankCardAccountCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCOUNT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountName = iprot.readString();
                struct.setAccountNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCOUNT_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.accountNo = iprot.readString();
                struct.setAccountNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CERTIFICATE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.certificateType = iprot.readString();
                struct.setCertificateTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CERTIFICATE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.certificateNo = iprot.readString();
                struct.setCertificateNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bankCardAccountCheck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.accountName != null) {
          oprot.writeFieldBegin(ACCOUNT_NAME_FIELD_DESC);
          oprot.writeString(struct.accountName);
          oprot.writeFieldEnd();
        }
        if (struct.accountNo != null) {
          oprot.writeFieldBegin(ACCOUNT_NO_FIELD_DESC);
          oprot.writeString(struct.accountNo);
          oprot.writeFieldEnd();
        }
        if (struct.certificateType != null) {
          oprot.writeFieldBegin(CERTIFICATE_TYPE_FIELD_DESC);
          oprot.writeString(struct.certificateType);
          oprot.writeFieldEnd();
        }
        if (struct.certificateNo != null) {
          oprot.writeFieldBegin(CERTIFICATE_NO_FIELD_DESC);
          oprot.writeString(struct.certificateNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bankCardAccountCheck_argsTupleSchemeFactory implements SchemeFactory {
      public bankCardAccountCheck_argsTupleScheme getScheme() {
        return new bankCardAccountCheck_argsTupleScheme();
      }
    }

    private static class bankCardAccountCheck_argsTupleScheme extends TupleScheme<bankCardAccountCheck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bankCardAccountCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientId()) {
          optionals.set(0);
        }
        if (struct.isSetAccountName()) {
          optionals.set(1);
        }
        if (struct.isSetAccountNo()) {
          optionals.set(2);
        }
        if (struct.isSetCertificateType()) {
          optionals.set(3);
        }
        if (struct.isSetCertificateNo()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetAccountName()) {
          oprot.writeString(struct.accountName);
        }
        if (struct.isSetAccountNo()) {
          oprot.writeString(struct.accountNo);
        }
        if (struct.isSetCertificateType()) {
          oprot.writeString(struct.certificateType);
        }
        if (struct.isSetCertificateNo()) {
          oprot.writeString(struct.certificateNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bankCardAccountCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.accountName = iprot.readString();
          struct.setAccountNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.accountNo = iprot.readString();
          struct.setAccountNoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.certificateType = iprot.readString();
          struct.setCertificateTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.certificateNo = iprot.readString();
          struct.setCertificateNoIsSet(true);
        }
      }
    }

  }

  public static class bankCardAccountCheck_result implements org.apache.thrift.TBase<bankCardAccountCheck_result, bankCardAccountCheck_result._Fields>, java.io.Serializable, Cloneable, Comparable<bankCardAccountCheck_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bankCardAccountCheck_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bankCardAccountCheck_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bankCardAccountCheck_resultTupleSchemeFactory());
    }

    public com.froad.thrift.vo.ResultVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.froad.thrift.vo.ResultVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bankCardAccountCheck_result.class, metaDataMap);
    }

    public bankCardAccountCheck_result() {
    }

    public bankCardAccountCheck_result(
      com.froad.thrift.vo.ResultVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bankCardAccountCheck_result(bankCardAccountCheck_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.froad.thrift.vo.ResultVo(other.success);
      }
    }

    public bankCardAccountCheck_result deepCopy() {
      return new bankCardAccountCheck_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.froad.thrift.vo.ResultVo getSuccess() {
      return this.success;
    }

    public bankCardAccountCheck_result setSuccess(com.froad.thrift.vo.ResultVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.froad.thrift.vo.ResultVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bankCardAccountCheck_result)
        return this.equals((bankCardAccountCheck_result)that);
      return false;
    }

    public boolean equals(bankCardAccountCheck_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(bankCardAccountCheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bankCardAccountCheck_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bankCardAccountCheck_resultStandardSchemeFactory implements SchemeFactory {
      public bankCardAccountCheck_resultStandardScheme getScheme() {
        return new bankCardAccountCheck_resultStandardScheme();
      }
    }

    private static class bankCardAccountCheck_resultStandardScheme extends StandardScheme<bankCardAccountCheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bankCardAccountCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.froad.thrift.vo.ResultVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bankCardAccountCheck_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bankCardAccountCheck_resultTupleSchemeFactory implements SchemeFactory {
      public bankCardAccountCheck_resultTupleScheme getScheme() {
        return new bankCardAccountCheck_resultTupleScheme();
      }
    }

    private static class bankCardAccountCheck_resultTupleScheme extends TupleScheme<bankCardAccountCheck_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bankCardAccountCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bankCardAccountCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.froad.thrift.vo.ResultVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
